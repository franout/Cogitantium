//   Ordt 171103.01 autogenerated file 
//   Input: /mnt/d/uni/2019-2020/thesis/cogitantium/nvdla/hw/outdir/nv_medium_512/spec/manual/opendla.rdl
//   Parms: opendla.parms
//   Date: Sat Feb 01 17:43:39 CET 2020
//

import uvm_pkg::*;
import ordt_uvm_reg_pkg::*;

// CFGROM_HW_VERSION
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_HW_VERSION extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl HW_VERSION;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_HW_VERSION");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.HW_VERSION = new("HW_VERSION");
    this.HW_VERSION.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.HW_VERSION.configure(this, 32, 0, "RO", 0, 32'h10001, 1, 0, 1);
    this.HW_VERSION.add_def_property("spec_access", "rw");
    this.HW_VERSION.add_def_property("spec_sw_default", "0x0");
    this.HW_VERSION.add_def_property("sw_default_mask", "0x0");
    this.HW_VERSION.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "HW_VERSION"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_HW_VERSION

// CFGROM_GLB_DESC
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_GLB_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl GLB_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_GLB_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.GLB_DESC = new("GLB_DESC");
    this.GLB_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.GLB_DESC.configure(this, 32, 0, "RO", 0, 32'h1, 1, 0, 1);
    this.GLB_DESC.add_def_property("spec_access", "rw");
    this.GLB_DESC.add_def_property("spec_sw_default", "0x0");
    this.GLB_DESC.add_def_property("sw_default_mask", "0x0");
    this.GLB_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "GLB_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_GLB_DESC

// CFGROM_CIF_DESC
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CIF_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CIF_DESC = new("CIF_DESC");
    this.CIF_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CIF_DESC.configure(this, 32, 0, "RO", 0, 32'h180002, 1, 0, 1);
    this.CIF_DESC.add_def_property("spec_access", "rw");
    this.CIF_DESC.add_def_property("spec_sw_default", "0x0");
    this.CIF_DESC.add_def_property("sw_default_mask", "0x0");
    this.CIF_DESC.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CIF_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_DESC

// CFGROM_CIF_CAP_INCOMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CIF_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CIF_CAP_INCOMPAT = new("CIF_CAP_INCOMPAT");
    this.CIF_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CIF_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CIF_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CIF_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CIF_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CIF_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CIF_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT

// CFGROM_CIF_CAP_COMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CIF_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CIF_CAP_COMPAT = new("CIF_CAP_COMPAT");
    this.CIF_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CIF_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CIF_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CIF_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CIF_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CIF_CAP_COMPAT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CIF_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT

// CFGROM_CIF_BASE_WIDTH
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CIF_BASE_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CIF_BASE_WIDTH = new("CIF_BASE_WIDTH");
    this.CIF_BASE_WIDTH.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CIF_BASE_WIDTH.configure(this, 8, 0, "RO", 0, 8'h8, 1, 0, 1);
    this.CIF_BASE_WIDTH.add_def_property("spec_access", "rw");
    this.CIF_BASE_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.CIF_BASE_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.CIF_BASE_WIDTH.add_def_property("reset_mask", "0xf");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CIF_BASE_WIDTH"}, 0, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH

// CFGROM_CIF_BASE_LATENCY
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CIF_BASE_LATENCY;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CIF_BASE_LATENCY = new("CIF_BASE_LATENCY");
    this.CIF_BASE_LATENCY.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CIF_BASE_LATENCY.configure(this, 32, 0, "RO", 0, 32'h32, 1, 0, 1);
    this.CIF_BASE_LATENCY.add_def_property("spec_access", "rw");
    this.CIF_BASE_LATENCY.add_def_property("spec_sw_default", "0x0");
    this.CIF_BASE_LATENCY.add_def_property("sw_default_mask", "0x0");
    this.CIF_BASE_LATENCY.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CIF_BASE_LATENCY"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY

// CFGROM_CIF_BASE_BURST_LENGTH_MAX
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BASE_BURST_LENGTH_MAX;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BASE_BURST_LENGTH_MAX = new("BASE_BURST_LENGTH_MAX");
    this.BASE_BURST_LENGTH_MAX.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.BASE_BURST_LENGTH_MAX.configure(this, 27, 5, "RO", 0, 27'h4, 1, 0, 1);
    this.BASE_BURST_LENGTH_MAX.add_def_property("spec_access", "rw");
    this.BASE_BURST_LENGTH_MAX.add_def_property("spec_sw_default", "0x0");
    this.BASE_BURST_LENGTH_MAX.add_def_property("sw_default_mask", "0x0");
    this.BASE_BURST_LENGTH_MAX.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BASE_BURST_LENGTH_MAX"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX

// CFGROM_CIF_BASE_MEM_ADDR_WIDTH
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CIF_BASE_MEM_ADDR_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CIF_BASE_MEM_ADDR_WIDTH = new("CIF_BASE_MEM_ADDR_WIDTH");
    this.CIF_BASE_MEM_ADDR_WIDTH.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CIF_BASE_MEM_ADDR_WIDTH.configure(this, 27, 5, "RO", 0, 27'h20, 1, 0, 1);
    this.CIF_BASE_MEM_ADDR_WIDTH.add_def_property("spec_access", "rw");
    this.CIF_BASE_MEM_ADDR_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.CIF_BASE_MEM_ADDR_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.CIF_BASE_MEM_ADDR_WIDTH.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CIF_BASE_MEM_ADDR_WIDTH"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH

// CFGROM_CDMA_DESC
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_DESC = new("CDMA_DESC");
    this.CDMA_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDMA_DESC.configure(this, 32, 0, "RO", 0, 32'h340003, 1, 0, 1);
    this.CDMA_DESC.add_def_property("spec_access", "rw");
    this.CDMA_DESC.add_def_property("spec_sw_default", "0x0");
    this.CDMA_DESC.add_def_property("sw_default_mask", "0x0");
    this.CDMA_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_DESC

// CFGROM_CDMA_CAP_INCOMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_CAP_INCOMPAT = new("CDMA_CAP_INCOMPAT");
    this.CDMA_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDMA_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CDMA_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CDMA_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CDMA_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CDMA_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT

// CFGROM_CDMA_CAP_COMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_CAP_COMPAT = new("CDMA_CAP_COMPAT");
    this.CDMA_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDMA_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h10, 1, 0, 1);
    this.CDMA_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CDMA_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CDMA_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CDMA_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT

// CFGROM_CDMA_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_FEATURE_TYPES = new("CDMA_BASE_FEATURE_TYPES");
    this.CDMA_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDMA_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CDMA_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.CDMA_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES

// CFGROM_CDMA_BASE_WEIGHT_TYPES
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_WEIGHT_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_WEIGHT_TYPES = new("CDMA_BASE_WEIGHT_TYPES");
    this.CDMA_BASE_WEIGHT_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDMA_BASE_WEIGHT_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CDMA_BASE_WEIGHT_TYPES.add_def_property("spec_access", "rwt");
    this.CDMA_BASE_WEIGHT_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_WEIGHT_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_WEIGHT_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_WEIGHT_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES

// CFGROM_CDMA_BASE_ATOMIC_C
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_ATOMIC_C;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_ATOMIC_C = new("CDMA_BASE_ATOMIC_C");
    this.CDMA_BASE_ATOMIC_C.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDMA_BASE_ATOMIC_C.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CDMA_BASE_ATOMIC_C.add_def_property("spec_access", "rwt");
    this.CDMA_BASE_ATOMIC_C.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_ATOMIC_C.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_ATOMIC_C.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_ATOMIC_C"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C

// CFGROM_CDMA_BASE_ATOMIC_K
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_ATOMIC_K;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_ATOMIC_K = new("CDMA_BASE_ATOMIC_K");
    this.CDMA_BASE_ATOMIC_K.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDMA_BASE_ATOMIC_K.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CDMA_BASE_ATOMIC_K.add_def_property("spec_access", "rw");
    this.CDMA_BASE_ATOMIC_K.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_ATOMIC_K.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_ATOMIC_K.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_ATOMIC_K"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K

// CFGROM_CDMA_BASE_ATOMIC_M
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_ATOMIC_M;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_ATOMIC_M = new("CDMA_BASE_ATOMIC_M");
    this.CDMA_BASE_ATOMIC_M.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDMA_BASE_ATOMIC_M.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.CDMA_BASE_ATOMIC_M.add_def_property("spec_access", "r");
    this.CDMA_BASE_ATOMIC_M.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_ATOMIC_M.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_ATOMIC_M.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_ATOMIC_M"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M

// CFGROM_CDMA_BASE_CBUF_BANK_NUM
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_CBUF_BANK_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_CBUF_BANK_NUM = new("CDMA_BASE_CBUF_BANK_NUM");
    this.CDMA_BASE_CBUF_BANK_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDMA_BASE_CBUF_BANK_NUM.configure(this, 32, 0, "RO", 1, 32'h20, 1, 0, 1);
    this.CDMA_BASE_CBUF_BANK_NUM.add_def_property("spec_access", "r");
    this.CDMA_BASE_CBUF_BANK_NUM.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_CBUF_BANK_NUM.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_CBUF_BANK_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_CBUF_BANK_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM

// CFGROM_CDMA_BASE_CBUF_BANK_WIDTH
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_CBUF_BANK_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_CBUF_BANK_WIDTH = new("CDMA_BASE_CBUF_BANK_WIDTH");
    this.CDMA_BASE_CBUF_BANK_WIDTH.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDMA_BASE_CBUF_BANK_WIDTH.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.CDMA_BASE_CBUF_BANK_WIDTH.add_def_property("spec_access", "r");
    this.CDMA_BASE_CBUF_BANK_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_CBUF_BANK_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_CBUF_BANK_WIDTH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_CBUF_BANK_WIDTH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH

// CFGROM_CDMA_BASE_CBUF_BANK_DEPTH
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_CBUF_BANK_DEPTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_CBUF_BANK_DEPTH = new("CDMA_BASE_CBUF_BANK_DEPTH");
    this.CDMA_BASE_CBUF_BANK_DEPTH.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDMA_BASE_CBUF_BANK_DEPTH.configure(this, 32, 0, "RO", 1, 32'h200, 1, 0, 1);
    this.CDMA_BASE_CBUF_BANK_DEPTH.add_def_property("spec_access", "r");
    this.CDMA_BASE_CBUF_BANK_DEPTH.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_CBUF_BANK_DEPTH.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_CBUF_BANK_DEPTH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_CBUF_BANK_DEPTH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH

// CFGROM_CDMA_MULTI_BATCH_MAX
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_MULTI_BATCH_MAX;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_MULTI_BATCH_MAX = new("CDMA_MULTI_BATCH_MAX");
    this.CDMA_MULTI_BATCH_MAX.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDMA_MULTI_BATCH_MAX.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.CDMA_MULTI_BATCH_MAX.add_def_property("spec_access", "r");
    this.CDMA_MULTI_BATCH_MAX.add_def_property("spec_sw_default", "0x0");
    this.CDMA_MULTI_BATCH_MAX.add_def_property("sw_default_mask", "0x0");
    this.CDMA_MULTI_BATCH_MAX.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_MULTI_BATCH_MAX"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX

// CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_IMAGE_IN_FORMATS_PACKED;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_IMAGE_IN_FORMATS_PACKED = new("CDMA_IMAGE_IN_FORMATS_PACKED");
    this.CDMA_IMAGE_IN_FORMATS_PACKED.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDMA_IMAGE_IN_FORMATS_PACKED.configure(this, 32, 0, "RO", 1, 32'hcfff001, 1, 0, 1);
    this.CDMA_IMAGE_IN_FORMATS_PACKED.add_def_property("spec_access", "r");
    this.CDMA_IMAGE_IN_FORMATS_PACKED.add_def_property("spec_sw_default", "0x0");
    this.CDMA_IMAGE_IN_FORMATS_PACKED.add_def_property("sw_default_mask", "0x0");
    this.CDMA_IMAGE_IN_FORMATS_PACKED.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_IMAGE_IN_FORMATS_PACKED"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED

// CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_IMAGE_IN_FORMATS_SEMI;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_IMAGE_IN_FORMATS_SEMI = new("CDMA_IMAGE_IN_FORMATS_SEMI");
    this.CDMA_IMAGE_IN_FORMATS_SEMI.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDMA_IMAGE_IN_FORMATS_SEMI.configure(this, 32, 0, "RO", 1, 32'h3, 1, 0, 1);
    this.CDMA_IMAGE_IN_FORMATS_SEMI.add_def_property("spec_access", "r");
    this.CDMA_IMAGE_IN_FORMATS_SEMI.add_def_property("spec_sw_default", "0x0");
    this.CDMA_IMAGE_IN_FORMATS_SEMI.add_def_property("sw_default_mask", "0x0");
    this.CDMA_IMAGE_IN_FORMATS_SEMI.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_IMAGE_IN_FORMATS_SEMI"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI

// CFGROM_CBUF_DESC
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CBUF_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CBUF_DESC = new("CBUF_DESC");
    this.CBUF_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CBUF_DESC.configure(this, 32, 0, "RO", 0, 32'h180004, 1, 0, 1);
    this.CBUF_DESC.add_def_property("spec_access", "rw");
    this.CBUF_DESC.add_def_property("spec_sw_default", "0x0");
    this.CBUF_DESC.add_def_property("sw_default_mask", "0x0");
    this.CBUF_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CBUF_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_DESC

// CFGROM_CBUF_CAP_INCOMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CBUF_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CBUF_CAP_INCOMPAT = new("CBUF_CAP_INCOMPAT");
    this.CBUF_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CBUF_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CBUF_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CBUF_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CBUF_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CBUF_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CBUF_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT

// CFGROM_CBUF_CAP_COMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CBUF_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CBUF_CAP_COMPAT = new("CBUF_CAP_COMPAT");
    this.CBUF_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CBUF_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CBUF_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CBUF_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CBUF_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CBUF_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CBUF_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT

// CFGROM_CBUF_BASE_CBUF_BANK_NUM
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CBUF_BASE_CBUF_BANK_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CBUF_BASE_CBUF_BANK_NUM = new("CBUF_BASE_CBUF_BANK_NUM");
    this.CBUF_BASE_CBUF_BANK_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CBUF_BASE_CBUF_BANK_NUM.configure(this, 32, 0, "RO", 1, 32'h20, 1, 0, 1);
    this.CBUF_BASE_CBUF_BANK_NUM.add_def_property("spec_access", "r");
    this.CBUF_BASE_CBUF_BANK_NUM.add_def_property("spec_sw_default", "0x0");
    this.CBUF_BASE_CBUF_BANK_NUM.add_def_property("sw_default_mask", "0x0");
    this.CBUF_BASE_CBUF_BANK_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CBUF_BASE_CBUF_BANK_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM

// CFGROM_CBUF_BASE_CBUF_BANK_WIDTH
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CBUF_BASE_CBUF_BANK_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CBUF_BASE_CBUF_BANK_WIDTH = new("CBUF_BASE_CBUF_BANK_WIDTH");
    this.CBUF_BASE_CBUF_BANK_WIDTH.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CBUF_BASE_CBUF_BANK_WIDTH.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.CBUF_BASE_CBUF_BANK_WIDTH.add_def_property("spec_access", "r");
    this.CBUF_BASE_CBUF_BANK_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.CBUF_BASE_CBUF_BANK_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.CBUF_BASE_CBUF_BANK_WIDTH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CBUF_BASE_CBUF_BANK_WIDTH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH

// CFGROM_CBUF_BASE_CBUF_BANK_DEPTH
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CBUF_BASE_CBUF_BANK_DEPTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CBUF_BASE_CBUF_BANK_DEPTH = new("CBUF_BASE_CBUF_BANK_DEPTH");
    this.CBUF_BASE_CBUF_BANK_DEPTH.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CBUF_BASE_CBUF_BANK_DEPTH.configure(this, 32, 0, "RO", 1, 32'h200, 1, 0, 1);
    this.CBUF_BASE_CBUF_BANK_DEPTH.add_def_property("spec_access", "r");
    this.CBUF_BASE_CBUF_BANK_DEPTH.add_def_property("spec_sw_default", "0x0");
    this.CBUF_BASE_CBUF_BANK_DEPTH.add_def_property("sw_default_mask", "0x0");
    this.CBUF_BASE_CBUF_BANK_DEPTH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CBUF_BASE_CBUF_BANK_DEPTH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH

// CFGROM_CBUF_BASE_CDMA_ID
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CBUF_BASE_CDMA_ID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CBUF_BASE_CDMA_ID = new("CBUF_BASE_CDMA_ID");
    this.CBUF_BASE_CDMA_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CBUF_BASE_CDMA_ID.configure(this, 32, 0, "RO", 1, 32'h3, 1, 0, 1);
    this.CBUF_BASE_CDMA_ID.add_def_property("spec_access", "r");
    this.CBUF_BASE_CDMA_ID.add_def_property("spec_sw_default", "0x0");
    this.CBUF_BASE_CDMA_ID.add_def_property("sw_default_mask", "0x0");
    this.CBUF_BASE_CDMA_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CBUF_BASE_CDMA_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID

// CFGROM_CSC_DESC
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_DESC = new("CSC_DESC");
    this.CSC_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CSC_DESC.configure(this, 32, 0, "RO", 0, 32'h300005, 1, 0, 1);
    this.CSC_DESC.add_def_property("spec_access", "rw");
    this.CSC_DESC.add_def_property("spec_sw_default", "0x0");
    this.CSC_DESC.add_def_property("sw_default_mask", "0x0");
    this.CSC_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_DESC

// CFGROM_CSC_CAP_INCOMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_CAP_INCOMPAT = new("CSC_CAP_INCOMPAT");
    this.CSC_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CSC_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CSC_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CSC_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CSC_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CSC_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT

// CFGROM_CSC_CAP_COMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_CAP_COMPAT = new("CSC_CAP_COMPAT");
    this.CSC_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CSC_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h10, 1, 0, 1);
    this.CSC_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CSC_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CSC_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CSC_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT

// CFGROM_CSC_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_FEATURE_TYPES = new("CSC_BASE_FEATURE_TYPES");
    this.CSC_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CSC_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CSC_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.CSC_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES

// CFGROM_CSC_BASE_WEIGHT_TYPES
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_WEIGHT_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_WEIGHT_TYPES = new("CSC_BASE_WEIGHT_TYPES");
    this.CSC_BASE_WEIGHT_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CSC_BASE_WEIGHT_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CSC_BASE_WEIGHT_TYPES.add_def_property("spec_access", "rwt");
    this.CSC_BASE_WEIGHT_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_WEIGHT_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_WEIGHT_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_WEIGHT_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES

// CFGROM_CSC_BASE_ATOMIC_C
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_ATOMIC_C;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_ATOMIC_C = new("CSC_BASE_ATOMIC_C");
    this.CSC_BASE_ATOMIC_C.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CSC_BASE_ATOMIC_C.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CSC_BASE_ATOMIC_C.add_def_property("spec_access", "rwt");
    this.CSC_BASE_ATOMIC_C.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_ATOMIC_C.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_ATOMIC_C.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_ATOMIC_C"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C

// CFGROM_CSC_BASE_ATOMIC_K
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_ATOMIC_K;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_ATOMIC_K = new("CSC_BASE_ATOMIC_K");
    this.CSC_BASE_ATOMIC_K.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CSC_BASE_ATOMIC_K.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CSC_BASE_ATOMIC_K.add_def_property("spec_access", "rw");
    this.CSC_BASE_ATOMIC_K.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_ATOMIC_K.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_ATOMIC_K.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_ATOMIC_K"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K

// CFGROM_CSC_BASE_ATOMIC_M
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_ATOMIC_M;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_ATOMIC_M = new("CSC_BASE_ATOMIC_M");
    this.CSC_BASE_ATOMIC_M.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CSC_BASE_ATOMIC_M.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.CSC_BASE_ATOMIC_M.add_def_property("spec_access", "r");
    this.CSC_BASE_ATOMIC_M.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_ATOMIC_M.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_ATOMIC_M.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_ATOMIC_M"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M

// CFGROM_CSC_BASE_CBUF_BANK_NUM
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_CBUF_BANK_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_CBUF_BANK_NUM = new("CSC_BASE_CBUF_BANK_NUM");
    this.CSC_BASE_CBUF_BANK_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CSC_BASE_CBUF_BANK_NUM.configure(this, 32, 0, "RO", 1, 32'h20, 1, 0, 1);
    this.CSC_BASE_CBUF_BANK_NUM.add_def_property("spec_access", "r");
    this.CSC_BASE_CBUF_BANK_NUM.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_CBUF_BANK_NUM.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_CBUF_BANK_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_CBUF_BANK_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM

// CFGROM_CSC_BASE_CBUF_BANK_WIDTH
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_CBUF_BANK_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_CBUF_BANK_WIDTH = new("CSC_BASE_CBUF_BANK_WIDTH");
    this.CSC_BASE_CBUF_BANK_WIDTH.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CSC_BASE_CBUF_BANK_WIDTH.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.CSC_BASE_CBUF_BANK_WIDTH.add_def_property("spec_access", "r");
    this.CSC_BASE_CBUF_BANK_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_CBUF_BANK_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_CBUF_BANK_WIDTH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_CBUF_BANK_WIDTH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH

// CFGROM_CSC_BASE_CBUF_BANK_DEPTH
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_CBUF_BANK_DEPTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_CBUF_BANK_DEPTH = new("CSC_BASE_CBUF_BANK_DEPTH");
    this.CSC_BASE_CBUF_BANK_DEPTH.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CSC_BASE_CBUF_BANK_DEPTH.configure(this, 32, 0, "RO", 1, 32'h200, 1, 0, 1);
    this.CSC_BASE_CBUF_BANK_DEPTH.add_def_property("spec_access", "r");
    this.CSC_BASE_CBUF_BANK_DEPTH.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_CBUF_BANK_DEPTH.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_CBUF_BANK_DEPTH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_CBUF_BANK_DEPTH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH

// CFGROM_CSC_BASE_CDMA_ID
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_CDMA_ID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_CDMA_ID = new("CSC_BASE_CDMA_ID");
    this.CSC_BASE_CDMA_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CSC_BASE_CDMA_ID.configure(this, 32, 0, "RO", 1, 32'h3, 1, 0, 1);
    this.CSC_BASE_CDMA_ID.add_def_property("spec_access", "r");
    this.CSC_BASE_CDMA_ID.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_CDMA_ID.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_CDMA_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_CDMA_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID

// CFGROM_CSC_MULTI_BATCH_MAX
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_MULTI_BATCH_MAX;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_MULTI_BATCH_MAX = new("CSC_MULTI_BATCH_MAX");
    this.CSC_MULTI_BATCH_MAX.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CSC_MULTI_BATCH_MAX.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.CSC_MULTI_BATCH_MAX.add_def_property("spec_access", "r");
    this.CSC_MULTI_BATCH_MAX.add_def_property("spec_sw_default", "0x0");
    this.CSC_MULTI_BATCH_MAX.add_def_property("sw_default_mask", "0x0");
    this.CSC_MULTI_BATCH_MAX.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_MULTI_BATCH_MAX"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX

// CFGROM_CMAC_A_DESC
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_DESC = new("CMAC_A_DESC");
    this.CMAC_A_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_A_DESC.configure(this, 32, 0, "RO", 0, 32'h1c0006, 1, 0, 1);
    this.CMAC_A_DESC.add_def_property("spec_access", "rw");
    this.CMAC_A_DESC.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_DESC.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_DESC

// CFGROM_CMAC_A_CAP_INCOMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_CAP_INCOMPAT = new("CMAC_A_CAP_INCOMPAT");
    this.CMAC_A_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_A_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CMAC_A_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CMAC_A_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT

// CFGROM_CMAC_A_CAP_COMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_CAP_COMPAT = new("CMAC_A_CAP_COMPAT");
    this.CMAC_A_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_A_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h10, 1, 0, 1);
    this.CMAC_A_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CMAC_A_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT

// CFGROM_CMAC_A_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_BASE_FEATURE_TYPES = new("CMAC_A_BASE_FEATURE_TYPES");
    this.CMAC_A_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_A_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CMAC_A_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.CMAC_A_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES

// CFGROM_CMAC_A_BASE_WEIGHT_TYPES
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_BASE_WEIGHT_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_BASE_WEIGHT_TYPES = new("CMAC_A_BASE_WEIGHT_TYPES");
    this.CMAC_A_BASE_WEIGHT_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_A_BASE_WEIGHT_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CMAC_A_BASE_WEIGHT_TYPES.add_def_property("spec_access", "rwt");
    this.CMAC_A_BASE_WEIGHT_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_BASE_WEIGHT_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_BASE_WEIGHT_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_BASE_WEIGHT_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES

// CFGROM_CMAC_A_BASE_ATOMIC_C
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_BASE_ATOMIC_C;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_BASE_ATOMIC_C = new("CMAC_A_BASE_ATOMIC_C");
    this.CMAC_A_BASE_ATOMIC_C.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_A_BASE_ATOMIC_C.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CMAC_A_BASE_ATOMIC_C.add_def_property("spec_access", "rwt");
    this.CMAC_A_BASE_ATOMIC_C.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_BASE_ATOMIC_C.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_BASE_ATOMIC_C.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_BASE_ATOMIC_C"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C

// CFGROM_CMAC_A_BASE_ATOMIC_K
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_BASE_ATOMIC_K;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_BASE_ATOMIC_K = new("CMAC_A_BASE_ATOMIC_K");
    this.CMAC_A_BASE_ATOMIC_K.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_A_BASE_ATOMIC_K.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CMAC_A_BASE_ATOMIC_K.add_def_property("spec_access", "rw");
    this.CMAC_A_BASE_ATOMIC_K.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_BASE_ATOMIC_K.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_BASE_ATOMIC_K.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_BASE_ATOMIC_K"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K

// CFGROM_CMAC_A_BASE_CDMA_ID
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_BASE_CDMA_ID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_BASE_CDMA_ID = new("CMAC_A_BASE_CDMA_ID");
    this.CMAC_A_BASE_CDMA_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CMAC_A_BASE_CDMA_ID.configure(this, 32, 0, "RO", 1, 32'h3, 1, 0, 1);
    this.CMAC_A_BASE_CDMA_ID.add_def_property("spec_access", "r");
    this.CMAC_A_BASE_CDMA_ID.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_BASE_CDMA_ID.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_BASE_CDMA_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_BASE_CDMA_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID

// CFGROM_CMAC_B_DESC
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_DESC = new("CMAC_B_DESC");
    this.CMAC_B_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_B_DESC.configure(this, 32, 0, "RO", 0, 32'h1c0006, 1, 0, 1);
    this.CMAC_B_DESC.add_def_property("spec_access", "rw");
    this.CMAC_B_DESC.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_DESC.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_DESC

// CFGROM_CMAC_B_CAP_INCOMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_CAP_INCOMPAT = new("CMAC_B_CAP_INCOMPAT");
    this.CMAC_B_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_B_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CMAC_B_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CMAC_B_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT

// CFGROM_CMAC_B_CAP_COMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_CAP_COMPAT = new("CMAC_B_CAP_COMPAT");
    this.CMAC_B_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_B_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h10, 1, 0, 1);
    this.CMAC_B_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CMAC_B_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT

// CFGROM_CMAC_B_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_BASE_FEATURE_TYPES = new("CMAC_B_BASE_FEATURE_TYPES");
    this.CMAC_B_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_B_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CMAC_B_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.CMAC_B_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES

// CFGROM_CMAC_B_BASE_WEIGHT_TYPES
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_BASE_WEIGHT_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_BASE_WEIGHT_TYPES = new("CMAC_B_BASE_WEIGHT_TYPES");
    this.CMAC_B_BASE_WEIGHT_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_B_BASE_WEIGHT_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CMAC_B_BASE_WEIGHT_TYPES.add_def_property("spec_access", "rwt");
    this.CMAC_B_BASE_WEIGHT_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_BASE_WEIGHT_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_BASE_WEIGHT_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_BASE_WEIGHT_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES

// CFGROM_CMAC_B_BASE_ATOMIC_C
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_BASE_ATOMIC_C;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_BASE_ATOMIC_C = new("CMAC_B_BASE_ATOMIC_C");
    this.CMAC_B_BASE_ATOMIC_C.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_B_BASE_ATOMIC_C.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CMAC_B_BASE_ATOMIC_C.add_def_property("spec_access", "rwt");
    this.CMAC_B_BASE_ATOMIC_C.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_BASE_ATOMIC_C.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_BASE_ATOMIC_C.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_BASE_ATOMIC_C"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C

// CFGROM_CMAC_B_BASE_ATOMIC_K
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_BASE_ATOMIC_K;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_BASE_ATOMIC_K = new("CMAC_B_BASE_ATOMIC_K");
    this.CMAC_B_BASE_ATOMIC_K.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_B_BASE_ATOMIC_K.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CMAC_B_BASE_ATOMIC_K.add_def_property("spec_access", "rw");
    this.CMAC_B_BASE_ATOMIC_K.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_BASE_ATOMIC_K.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_BASE_ATOMIC_K.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_BASE_ATOMIC_K"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K

// CFGROM_CMAC_B_BASE_CDMA_ID
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_BASE_CDMA_ID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_BASE_CDMA_ID = new("CMAC_B_BASE_CDMA_ID");
    this.CMAC_B_BASE_CDMA_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CMAC_B_BASE_CDMA_ID.configure(this, 32, 0, "RO", 1, 32'h3, 1, 0, 1);
    this.CMAC_B_BASE_CDMA_ID.add_def_property("spec_access", "r");
    this.CMAC_B_BASE_CDMA_ID.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_BASE_CDMA_ID.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_BASE_CDMA_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_BASE_CDMA_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID

// CFGROM_CACC_DESC
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_DESC = new("CACC_DESC");
    this.CACC_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CACC_DESC.configure(this, 32, 0, "RO", 0, 32'h200007, 1, 0, 1);
    this.CACC_DESC.add_def_property("spec_access", "rw");
    this.CACC_DESC.add_def_property("spec_sw_default", "0x0");
    this.CACC_DESC.add_def_property("sw_default_mask", "0x0");
    this.CACC_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_DESC

// CFGROM_CACC_CAP_INCOMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_CAP_INCOMPAT = new("CACC_CAP_INCOMPAT");
    this.CACC_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CACC_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CACC_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CACC_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CACC_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CACC_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT

// CFGROM_CACC_CAP_COMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_CAP_COMPAT = new("CACC_CAP_COMPAT");
    this.CACC_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CACC_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CACC_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CACC_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CACC_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CACC_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT

// CFGROM_CACC_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_BASE_FEATURE_TYPES = new("CACC_BASE_FEATURE_TYPES");
    this.CACC_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CACC_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CACC_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.CACC_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CACC_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CACC_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES

// CFGROM_CACC_BASE_WEIGHT_TYPES
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_BASE_WEIGHT_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_BASE_WEIGHT_TYPES = new("CACC_BASE_WEIGHT_TYPES");
    this.CACC_BASE_WEIGHT_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CACC_BASE_WEIGHT_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CACC_BASE_WEIGHT_TYPES.add_def_property("spec_access", "rwt");
    this.CACC_BASE_WEIGHT_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CACC_BASE_WEIGHT_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CACC_BASE_WEIGHT_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_BASE_WEIGHT_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES

// CFGROM_CACC_BASE_ATOMIC_C
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_BASE_ATOMIC_C;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_BASE_ATOMIC_C = new("CACC_BASE_ATOMIC_C");
    this.CACC_BASE_ATOMIC_C.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CACC_BASE_ATOMIC_C.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CACC_BASE_ATOMIC_C.add_def_property("spec_access", "rwt");
    this.CACC_BASE_ATOMIC_C.add_def_property("spec_sw_default", "0x0");
    this.CACC_BASE_ATOMIC_C.add_def_property("sw_default_mask", "0x0");
    this.CACC_BASE_ATOMIC_C.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_BASE_ATOMIC_C"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C

// CFGROM_CACC_BASE_ATOMIC_K
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_BASE_ATOMIC_K;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_BASE_ATOMIC_K = new("CACC_BASE_ATOMIC_K");
    this.CACC_BASE_ATOMIC_K.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CACC_BASE_ATOMIC_K.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CACC_BASE_ATOMIC_K.add_def_property("spec_access", "rw");
    this.CACC_BASE_ATOMIC_K.add_def_property("spec_sw_default", "0x0");
    this.CACC_BASE_ATOMIC_K.add_def_property("sw_default_mask", "0x0");
    this.CACC_BASE_ATOMIC_K.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_BASE_ATOMIC_K"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K

// CFGROM_CACC_BASE_CDMA_ID
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_BASE_CDMA_ID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_BASE_CDMA_ID = new("CACC_BASE_CDMA_ID");
    this.CACC_BASE_CDMA_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CACC_BASE_CDMA_ID.configure(this, 32, 0, "RO", 1, 32'h3, 1, 0, 1);
    this.CACC_BASE_CDMA_ID.add_def_property("spec_access", "r");
    this.CACC_BASE_CDMA_ID.add_def_property("spec_sw_default", "0x0");
    this.CACC_BASE_CDMA_ID.add_def_property("sw_default_mask", "0x0");
    this.CACC_BASE_CDMA_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_BASE_CDMA_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID

// CFGROM_CACC_MULTI_BATCH_MAX
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_MULTI_BATCH_MAX;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_MULTI_BATCH_MAX = new("CACC_MULTI_BATCH_MAX");
    this.CACC_MULTI_BATCH_MAX.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CACC_MULTI_BATCH_MAX.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.CACC_MULTI_BATCH_MAX.add_def_property("spec_access", "r");
    this.CACC_MULTI_BATCH_MAX.add_def_property("spec_sw_default", "0x0");
    this.CACC_MULTI_BATCH_MAX.add_def_property("sw_default_mask", "0x0");
    this.CACC_MULTI_BATCH_MAX.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_MULTI_BATCH_MAX"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX

// CFGROM_SDP_RDMA_DESC
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_RDMA_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_RDMA_DESC = new("SDP_RDMA_DESC");
    this.SDP_RDMA_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_RDMA_DESC.configure(this, 32, 0, "RO", 0, 32'he0008, 1, 0, 1);
    this.SDP_RDMA_DESC.add_def_property("spec_access", "rw");
    this.SDP_RDMA_DESC.add_def_property("spec_sw_default", "0x0");
    this.SDP_RDMA_DESC.add_def_property("sw_default_mask", "0x0");
    this.SDP_RDMA_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_RDMA_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC

// CFGROM_SDP_RDMA_CAP_INCOMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_RDMA_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_RDMA_CAP_INCOMPAT = new("SDP_RDMA_CAP_INCOMPAT");
    this.SDP_RDMA_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_RDMA_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.SDP_RDMA_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.SDP_RDMA_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.SDP_RDMA_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.SDP_RDMA_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_RDMA_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT

// CFGROM_SDP_RDMA_CAP_COMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_RDMA_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_RDMA_CAP_COMPAT = new("SDP_RDMA_CAP_COMPAT");
    this.SDP_RDMA_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_RDMA_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.SDP_RDMA_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.SDP_RDMA_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.SDP_RDMA_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.SDP_RDMA_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_RDMA_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT

// CFGROM_SDP_RDMA_BASE_ATOMIC_M
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_RDMA_BASE_ATOMIC_M;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_RDMA_BASE_ATOMIC_M = new("SDP_RDMA_BASE_ATOMIC_M");
    this.SDP_RDMA_BASE_ATOMIC_M.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.SDP_RDMA_BASE_ATOMIC_M.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.SDP_RDMA_BASE_ATOMIC_M.add_def_property("spec_access", "r");
    this.SDP_RDMA_BASE_ATOMIC_M.add_def_property("spec_sw_default", "0x0");
    this.SDP_RDMA_BASE_ATOMIC_M.add_def_property("sw_default_mask", "0x0");
    this.SDP_RDMA_BASE_ATOMIC_M.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_RDMA_BASE_ATOMIC_M"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M

// CFGROM_SDP_RDMA_BASE_SDP_ID
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_RDMA_BASE_SDP_ID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_RDMA_BASE_SDP_ID = new("SDP_RDMA_BASE_SDP_ID");
    this.SDP_RDMA_BASE_SDP_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.SDP_RDMA_BASE_SDP_ID.configure(this, 32, 0, "RO", 1, 32'h9, 1, 0, 1);
    this.SDP_RDMA_BASE_SDP_ID.add_def_property("spec_access", "r");
    this.SDP_RDMA_BASE_SDP_ID.add_def_property("spec_sw_default", "0x0");
    this.SDP_RDMA_BASE_SDP_ID.add_def_property("sw_default_mask", "0x0");
    this.SDP_RDMA_BASE_SDP_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_RDMA_BASE_SDP_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID

// CFGROM_SDP_DESC
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_DESC = new("SDP_DESC");
    this.SDP_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_DESC.configure(this, 32, 0, "RO", 0, 32'h200009, 1, 0, 1);
    this.SDP_DESC.add_def_property("spec_access", "rw");
    this.SDP_DESC.add_def_property("spec_sw_default", "0x0");
    this.SDP_DESC.add_def_property("sw_default_mask", "0x0");
    this.SDP_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_DESC

// CFGROM_SDP_CAP_INCOMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_CAP_INCOMPAT = new("SDP_CAP_INCOMPAT");
    this.SDP_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.SDP_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.SDP_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.SDP_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.SDP_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT

// CFGROM_SDP_CAP_COMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_CAP_COMPAT = new("SDP_CAP_COMPAT");
    this.SDP_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h18, 1, 0, 1);
    this.SDP_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.SDP_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.SDP_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.SDP_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT

// CFGROM_SDP_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_BASE_FEATURE_TYPES = new("SDP_BASE_FEATURE_TYPES");
    this.SDP_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.SDP_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.SDP_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.SDP_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.SDP_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES

// CFGROM_SDP_BASE_WEIGHT_TYPES
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_BASE_WEIGHT_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_BASE_WEIGHT_TYPES = new("SDP_BASE_WEIGHT_TYPES");
    this.SDP_BASE_WEIGHT_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_BASE_WEIGHT_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.SDP_BASE_WEIGHT_TYPES.add_def_property("spec_access", "rwt");
    this.SDP_BASE_WEIGHT_TYPES.add_def_property("spec_sw_default", "0x0");
    this.SDP_BASE_WEIGHT_TYPES.add_def_property("sw_default_mask", "0x0");
    this.SDP_BASE_WEIGHT_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_BASE_WEIGHT_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES

// CFGROM_SDP_BASE_CDMA_ID
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_BASE_CDMA_ID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_BASE_CDMA_ID = new("SDP_BASE_CDMA_ID");
    this.SDP_BASE_CDMA_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.SDP_BASE_CDMA_ID.configure(this, 32, 0, "RO", 1, 32'h3, 1, 0, 1);
    this.SDP_BASE_CDMA_ID.add_def_property("spec_access", "r");
    this.SDP_BASE_CDMA_ID.add_def_property("spec_sw_default", "0x0");
    this.SDP_BASE_CDMA_ID.add_def_property("sw_default_mask", "0x0");
    this.SDP_BASE_CDMA_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_BASE_CDMA_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID

// CFGROM_SDP_MULTI_BATCH_MAX
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_MULTI_BATCH_MAX;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_MULTI_BATCH_MAX = new("SDP_MULTI_BATCH_MAX");
    this.SDP_MULTI_BATCH_MAX.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.SDP_MULTI_BATCH_MAX.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.SDP_MULTI_BATCH_MAX.add_def_property("spec_access", "r");
    this.SDP_MULTI_BATCH_MAX.add_def_property("spec_sw_default", "0x0");
    this.SDP_MULTI_BATCH_MAX.add_def_property("sw_default_mask", "0x0");
    this.SDP_MULTI_BATCH_MAX.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_MULTI_BATCH_MAX"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX

// CFGROM_SDP_BS_THROUGHPUT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_BS_THROUGHPUT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_BS_THROUGHPUT = new("SDP_BS_THROUGHPUT");
    this.SDP_BS_THROUGHPUT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.SDP_BS_THROUGHPUT.configure(this, 32, 0, "RO", 1, 32'h1, 1, 0, 1);
    this.SDP_BS_THROUGHPUT.add_def_property("spec_access", "r");
    this.SDP_BS_THROUGHPUT.add_def_property("spec_sw_default", "0x0");
    this.SDP_BS_THROUGHPUT.add_def_property("sw_default_mask", "0x0");
    this.SDP_BS_THROUGHPUT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_BS_THROUGHPUT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT

// CFGROM_SDP_BN_THROUGHPUT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_BN_THROUGHPUT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_BN_THROUGHPUT = new("SDP_BN_THROUGHPUT");
    this.SDP_BN_THROUGHPUT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.SDP_BN_THROUGHPUT.configure(this, 32, 0, "RO", 1, 32'h1, 1, 0, 1);
    this.SDP_BN_THROUGHPUT.add_def_property("spec_access", "r");
    this.SDP_BN_THROUGHPUT.add_def_property("spec_sw_default", "0x0");
    this.SDP_BN_THROUGHPUT.add_def_property("sw_default_mask", "0x0");
    this.SDP_BN_THROUGHPUT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_BN_THROUGHPUT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT

// CFGROM_SDP_EW_THROUGHPUT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_EW_THROUGHPUT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_EW_THROUGHPUT = new("SDP_EW_THROUGHPUT");
    this.SDP_EW_THROUGHPUT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.SDP_EW_THROUGHPUT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.SDP_EW_THROUGHPUT.add_def_property("spec_access", "r");
    this.SDP_EW_THROUGHPUT.add_def_property("spec_sw_default", "0x0");
    this.SDP_EW_THROUGHPUT.add_def_property("sw_default_mask", "0x0");
    this.SDP_EW_THROUGHPUT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_EW_THROUGHPUT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT

// CFGROM_PDP_RDMA_DESC
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_RDMA_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_RDMA_DESC = new("PDP_RDMA_DESC");
    this.PDP_RDMA_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.PDP_RDMA_DESC.configure(this, 32, 0, "RO", 0, 32'he000a, 1, 0, 1);
    this.PDP_RDMA_DESC.add_def_property("spec_access", "rw");
    this.PDP_RDMA_DESC.add_def_property("spec_sw_default", "0x0");
    this.PDP_RDMA_DESC.add_def_property("sw_default_mask", "0x0");
    this.PDP_RDMA_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_RDMA_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC

// CFGROM_PDP_RDMA_CAP_INCOMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_RDMA_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_RDMA_CAP_INCOMPAT = new("PDP_RDMA_CAP_INCOMPAT");
    this.PDP_RDMA_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.PDP_RDMA_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.PDP_RDMA_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.PDP_RDMA_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.PDP_RDMA_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.PDP_RDMA_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_RDMA_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT

// CFGROM_PDP_RDMA_CAP_COMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_RDMA_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_RDMA_CAP_COMPAT = new("PDP_RDMA_CAP_COMPAT");
    this.PDP_RDMA_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.PDP_RDMA_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.PDP_RDMA_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.PDP_RDMA_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.PDP_RDMA_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.PDP_RDMA_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_RDMA_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT

// CFGROM_PDP_RDMA_BASE_ATOMIC_M
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_RDMA_BASE_ATOMIC_M;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_RDMA_BASE_ATOMIC_M = new("PDP_RDMA_BASE_ATOMIC_M");
    this.PDP_RDMA_BASE_ATOMIC_M.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PDP_RDMA_BASE_ATOMIC_M.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.PDP_RDMA_BASE_ATOMIC_M.add_def_property("spec_access", "r");
    this.PDP_RDMA_BASE_ATOMIC_M.add_def_property("spec_sw_default", "0x0");
    this.PDP_RDMA_BASE_ATOMIC_M.add_def_property("sw_default_mask", "0x0");
    this.PDP_RDMA_BASE_ATOMIC_M.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_RDMA_BASE_ATOMIC_M"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M

// CFGROM_PDP_RDMA_BASE_PDP_ID
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_RDMA_BASE_PDP_ID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_RDMA_BASE_PDP_ID = new("PDP_RDMA_BASE_PDP_ID");
    this.PDP_RDMA_BASE_PDP_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PDP_RDMA_BASE_PDP_ID.configure(this, 32, 0, "RO", 1, 32'hb, 1, 0, 1);
    this.PDP_RDMA_BASE_PDP_ID.add_def_property("spec_access", "r");
    this.PDP_RDMA_BASE_PDP_ID.add_def_property("spec_sw_default", "0x0");
    this.PDP_RDMA_BASE_PDP_ID.add_def_property("sw_default_mask", "0x0");
    this.PDP_RDMA_BASE_PDP_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_RDMA_BASE_PDP_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID

// CFGROM_PDP_DESC
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_DESC = new("PDP_DESC");
    this.PDP_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.PDP_DESC.configure(this, 32, 0, "RO", 0, 32'h10000b, 1, 0, 1);
    this.PDP_DESC.add_def_property("spec_access", "rw");
    this.PDP_DESC.add_def_property("spec_sw_default", "0x0");
    this.PDP_DESC.add_def_property("sw_default_mask", "0x0");
    this.PDP_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_DESC

// CFGROM_PDP_CAP_INCOMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_CAP_INCOMPAT = new("PDP_CAP_INCOMPAT");
    this.PDP_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.PDP_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.PDP_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.PDP_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.PDP_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.PDP_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT

// CFGROM_PDP_CAP_COMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_CAP_COMPAT = new("PDP_CAP_COMPAT");
    this.PDP_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.PDP_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.PDP_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.PDP_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.PDP_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.PDP_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT

// CFGROM_PDP_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_BASE_FEATURE_TYPES = new("PDP_BASE_FEATURE_TYPES");
    this.PDP_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.PDP_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.PDP_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.PDP_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.PDP_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.PDP_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES

// CFGROM_PDP_BASE_THROUGHPUT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_BASE_THROUGHPUT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_BASE_THROUGHPUT = new("PDP_BASE_THROUGHPUT");
    this.PDP_BASE_THROUGHPUT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PDP_BASE_THROUGHPUT.configure(this, 32, 0, "RO", 1, 32'h1, 1, 0, 1);
    this.PDP_BASE_THROUGHPUT.add_def_property("spec_access", "r");
    this.PDP_BASE_THROUGHPUT.add_def_property("spec_sw_default", "0x0");
    this.PDP_BASE_THROUGHPUT.add_def_property("sw_default_mask", "0x0");
    this.PDP_BASE_THROUGHPUT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_BASE_THROUGHPUT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT

// CFGROM_CDP_RDMA_DESC
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_RDMA_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_RDMA_DESC = new("CDP_RDMA_DESC");
    this.CDP_RDMA_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDP_RDMA_DESC.configure(this, 32, 0, "RO", 0, 32'he000c, 1, 0, 1);
    this.CDP_RDMA_DESC.add_def_property("spec_access", "rw");
    this.CDP_RDMA_DESC.add_def_property("spec_sw_default", "0x0");
    this.CDP_RDMA_DESC.add_def_property("sw_default_mask", "0x0");
    this.CDP_RDMA_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_RDMA_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC

// CFGROM_CDP_RDMA_CAP_INCOMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_RDMA_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_RDMA_CAP_INCOMPAT = new("CDP_RDMA_CAP_INCOMPAT");
    this.CDP_RDMA_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDP_RDMA_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CDP_RDMA_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CDP_RDMA_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CDP_RDMA_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CDP_RDMA_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_RDMA_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT

// CFGROM_CDP_RDMA_CAP_COMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_RDMA_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_RDMA_CAP_COMPAT = new("CDP_RDMA_CAP_COMPAT");
    this.CDP_RDMA_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDP_RDMA_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CDP_RDMA_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CDP_RDMA_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CDP_RDMA_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CDP_RDMA_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_RDMA_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT

// CFGROM_CDP_RDMA_BASE_ATOMIC_M
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_RDMA_BASE_ATOMIC_M;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_RDMA_BASE_ATOMIC_M = new("CDP_RDMA_BASE_ATOMIC_M");
    this.CDP_RDMA_BASE_ATOMIC_M.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDP_RDMA_BASE_ATOMIC_M.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.CDP_RDMA_BASE_ATOMIC_M.add_def_property("spec_access", "r");
    this.CDP_RDMA_BASE_ATOMIC_M.add_def_property("spec_sw_default", "0x0");
    this.CDP_RDMA_BASE_ATOMIC_M.add_def_property("sw_default_mask", "0x0");
    this.CDP_RDMA_BASE_ATOMIC_M.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_RDMA_BASE_ATOMIC_M"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M

// CFGROM_CDP_RDMA_BASE_CDP_ID
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_RDMA_BASE_CDP_ID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_RDMA_BASE_CDP_ID = new("CDP_RDMA_BASE_CDP_ID");
    this.CDP_RDMA_BASE_CDP_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDP_RDMA_BASE_CDP_ID.configure(this, 32, 0, "RO", 1, 32'hd, 1, 0, 1);
    this.CDP_RDMA_BASE_CDP_ID.add_def_property("spec_access", "r");
    this.CDP_RDMA_BASE_CDP_ID.add_def_property("spec_sw_default", "0x0");
    this.CDP_RDMA_BASE_CDP_ID.add_def_property("sw_default_mask", "0x0");
    this.CDP_RDMA_BASE_CDP_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_RDMA_BASE_CDP_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID

// CFGROM_CDP_DESC
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_DESC = new("CDP_DESC");
    this.CDP_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDP_DESC.configure(this, 32, 0, "RO", 0, 32'h10000d, 1, 0, 1);
    this.CDP_DESC.add_def_property("spec_access", "rw");
    this.CDP_DESC.add_def_property("spec_sw_default", "0x0");
    this.CDP_DESC.add_def_property("sw_default_mask", "0x0");
    this.CDP_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_DESC

// CFGROM_CDP_CAP_INCOMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_CAP_INCOMPAT = new("CDP_CAP_INCOMPAT");
    this.CDP_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDP_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CDP_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CDP_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CDP_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CDP_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT

// CFGROM_CDP_CAP_COMPAT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_CAP_COMPAT = new("CDP_CAP_COMPAT");
    this.CDP_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDP_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CDP_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CDP_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CDP_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CDP_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT

// CFGROM_CDP_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_BASE_FEATURE_TYPES = new("CDP_BASE_FEATURE_TYPES");
    this.CDP_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDP_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CDP_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.CDP_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CDP_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CDP_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES

// CFGROM_CDP_BASE_THROUGHPUT
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_BASE_THROUGHPUT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_BASE_THROUGHPUT = new("CDP_BASE_THROUGHPUT");
    this.CDP_BASE_THROUGHPUT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDP_BASE_THROUGHPUT.configure(this, 32, 0, "RO", 1, 32'h1, 1, 0, 1);
    this.CDP_BASE_THROUGHPUT.add_def_property("spec_access", "r");
    this.CDP_BASE_THROUGHPUT.add_def_property("spec_sw_default", "0x0");
    this.CDP_BASE_THROUGHPUT.add_def_property("sw_default_mask", "0x0");
    this.CDP_BASE_THROUGHPUT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_BASE_THROUGHPUT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT

// CFGROM_END_OF_LIST
class reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_END_OF_LIST extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl END_OF_LIST;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_END_OF_LIST");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.END_OF_LIST = new("END_OF_LIST");
    this.END_OF_LIST.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.END_OF_LIST.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.END_OF_LIST.add_def_property("spec_access", "rw");
    this.END_OF_LIST.add_def_property("spec_sw_default", "0x0");
    this.END_OF_LIST.add_def_property("sw_default_mask", "0x0");
    this.END_OF_LIST.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "END_OF_LIST"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_END_OF_LIST

// Block NVDLA_CFGROM
class block_addrmap_NVDLA_NVDLA_CFGROM extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_HW_VERSION CFGROM_HW_VERSION;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_GLB_DESC CFGROM_GLB_DESC;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_DESC CFGROM_CIF_DESC;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT CFGROM_CIF_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT CFGROM_CIF_CAP_COMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH CFGROM_CIF_BASE_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY CFGROM_CIF_BASE_LATENCY;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX CFGROM_CIF_BASE_BURST_LENGTH_MAX;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH CFGROM_CIF_BASE_MEM_ADDR_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_DESC CFGROM_CDMA_DESC;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT CFGROM_CDMA_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT CFGROM_CDMA_CAP_COMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES CFGROM_CDMA_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES CFGROM_CDMA_BASE_WEIGHT_TYPES;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C CFGROM_CDMA_BASE_ATOMIC_C;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K CFGROM_CDMA_BASE_ATOMIC_K;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M CFGROM_CDMA_BASE_ATOMIC_M;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM CFGROM_CDMA_BASE_CBUF_BANK_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH CFGROM_CDMA_BASE_CBUF_BANK_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH CFGROM_CDMA_BASE_CBUF_BANK_DEPTH;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX CFGROM_CDMA_MULTI_BATCH_MAX;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_DESC CFGROM_CBUF_DESC;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT CFGROM_CBUF_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT CFGROM_CBUF_CAP_COMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM CFGROM_CBUF_BASE_CBUF_BANK_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH CFGROM_CBUF_BASE_CBUF_BANK_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH CFGROM_CBUF_BASE_CBUF_BANK_DEPTH;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID CFGROM_CBUF_BASE_CDMA_ID;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_DESC CFGROM_CSC_DESC;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT CFGROM_CSC_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT CFGROM_CSC_CAP_COMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES CFGROM_CSC_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES CFGROM_CSC_BASE_WEIGHT_TYPES;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C CFGROM_CSC_BASE_ATOMIC_C;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K CFGROM_CSC_BASE_ATOMIC_K;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M CFGROM_CSC_BASE_ATOMIC_M;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM CFGROM_CSC_BASE_CBUF_BANK_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH CFGROM_CSC_BASE_CBUF_BANK_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH CFGROM_CSC_BASE_CBUF_BANK_DEPTH;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID CFGROM_CSC_BASE_CDMA_ID;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX CFGROM_CSC_MULTI_BATCH_MAX;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_DESC CFGROM_CMAC_A_DESC;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT CFGROM_CMAC_A_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT CFGROM_CMAC_A_CAP_COMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES CFGROM_CMAC_A_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES CFGROM_CMAC_A_BASE_WEIGHT_TYPES;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C CFGROM_CMAC_A_BASE_ATOMIC_C;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K CFGROM_CMAC_A_BASE_ATOMIC_K;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID CFGROM_CMAC_A_BASE_CDMA_ID;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_DESC CFGROM_CMAC_B_DESC;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT CFGROM_CMAC_B_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT CFGROM_CMAC_B_CAP_COMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES CFGROM_CMAC_B_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES CFGROM_CMAC_B_BASE_WEIGHT_TYPES;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C CFGROM_CMAC_B_BASE_ATOMIC_C;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K CFGROM_CMAC_B_BASE_ATOMIC_K;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID CFGROM_CMAC_B_BASE_CDMA_ID;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_DESC CFGROM_CACC_DESC;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT CFGROM_CACC_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT CFGROM_CACC_CAP_COMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES CFGROM_CACC_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES CFGROM_CACC_BASE_WEIGHT_TYPES;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C CFGROM_CACC_BASE_ATOMIC_C;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K CFGROM_CACC_BASE_ATOMIC_K;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID CFGROM_CACC_BASE_CDMA_ID;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX CFGROM_CACC_MULTI_BATCH_MAX;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC CFGROM_SDP_RDMA_DESC;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT CFGROM_SDP_RDMA_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT CFGROM_SDP_RDMA_CAP_COMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M CFGROM_SDP_RDMA_BASE_ATOMIC_M;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID CFGROM_SDP_RDMA_BASE_SDP_ID;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_DESC CFGROM_SDP_DESC;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT CFGROM_SDP_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT CFGROM_SDP_CAP_COMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES CFGROM_SDP_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES CFGROM_SDP_BASE_WEIGHT_TYPES;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID CFGROM_SDP_BASE_CDMA_ID;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX CFGROM_SDP_MULTI_BATCH_MAX;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT CFGROM_SDP_BS_THROUGHPUT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT CFGROM_SDP_BN_THROUGHPUT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT CFGROM_SDP_EW_THROUGHPUT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC CFGROM_PDP_RDMA_DESC;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT CFGROM_PDP_RDMA_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT CFGROM_PDP_RDMA_CAP_COMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M CFGROM_PDP_RDMA_BASE_ATOMIC_M;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID CFGROM_PDP_RDMA_BASE_PDP_ID;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_DESC CFGROM_PDP_DESC;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT CFGROM_PDP_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT CFGROM_PDP_CAP_COMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES CFGROM_PDP_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT CFGROM_PDP_BASE_THROUGHPUT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC CFGROM_CDP_RDMA_DESC;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT CFGROM_CDP_RDMA_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT CFGROM_CDP_RDMA_CAP_COMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M CFGROM_CDP_RDMA_BASE_ATOMIC_M;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID CFGROM_CDP_RDMA_BASE_CDP_ID;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_DESC CFGROM_CDP_DESC;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT CFGROM_CDP_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT CFGROM_CDP_CAP_COMPAT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES CFGROM_CDP_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT CFGROM_CDP_BASE_THROUGHPUT;
  rand reg_addrmap_NVDLA_NVDLA_CFGROM_CFGROM_END_OF_LIST CFGROM_END_OF_LIST;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_CFGROM");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.CFGROM_HW_VERSION = new("CFGROM_HW_VERSION");
    this.CFGROM_HW_VERSION.configure(this, null, "");
    this.CFGROM_HW_VERSION.set_rdl_tag("CFGROM_HW_VERSION_");
    this.CFGROM_HW_VERSION.set_reg_test_info(0, 0, 0);
    this.CFGROM_HW_VERSION.build();
    this.default_map.add_reg(this.CFGROM_HW_VERSION, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.CFGROM_GLB_DESC = new("CFGROM_GLB_DESC");
    this.CFGROM_GLB_DESC.configure(this, null, "");
    this.CFGROM_GLB_DESC.set_rdl_tag("CFGROM_GLB_DESC_");
    this.CFGROM_GLB_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_GLB_DESC.build();
    this.default_map.add_reg(this.CFGROM_GLB_DESC, `UVM_REG_ADDR_WIDTH'h4, "RO", 0);
    this.CFGROM_CIF_DESC = new("CFGROM_CIF_DESC");
    this.CFGROM_CIF_DESC.configure(this, null, "");
    this.CFGROM_CIF_DESC.set_rdl_tag("CFGROM_CIF_DESC_");
    this.CFGROM_CIF_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CIF_DESC.build();
    this.default_map.add_reg(this.CFGROM_CIF_DESC, `UVM_REG_ADDR_WIDTH'h8, "RO", 0);
    this.CFGROM_CIF_CAP_INCOMPAT = new("CFGROM_CIF_CAP_INCOMPAT");
    this.CFGROM_CIF_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CIF_CAP_INCOMPAT.set_rdl_tag("CFGROM_CIF_CAP_INCOMPAT_");
    this.CFGROM_CIF_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CIF_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CIF_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'hc, "RO", 0);
    this.CFGROM_CIF_CAP_COMPAT = new("CFGROM_CIF_CAP_COMPAT");
    this.CFGROM_CIF_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CIF_CAP_COMPAT.set_rdl_tag("CFGROM_CIF_CAP_COMPAT_");
    this.CFGROM_CIF_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CIF_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CIF_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h10, "RO", 0);
    this.CFGROM_CIF_BASE_WIDTH = new("CFGROM_CIF_BASE_WIDTH");
    this.CFGROM_CIF_BASE_WIDTH.configure(this, null, "");
    this.CFGROM_CIF_BASE_WIDTH.set_rdl_tag("CFGROM_CIF_BASE_WIDTH_");
    this.CFGROM_CIF_BASE_WIDTH.set_reg_test_info(0, 0, 0);
    this.CFGROM_CIF_BASE_WIDTH.build();
    this.default_map.add_reg(this.CFGROM_CIF_BASE_WIDTH, `UVM_REG_ADDR_WIDTH'h14, "RO", 0);
    this.CFGROM_CIF_BASE_LATENCY = new("CFGROM_CIF_BASE_LATENCY");
    this.CFGROM_CIF_BASE_LATENCY.configure(this, null, "");
    this.CFGROM_CIF_BASE_LATENCY.set_rdl_tag("CFGROM_CIF_BASE_LATENCY_");
    this.CFGROM_CIF_BASE_LATENCY.set_reg_test_info(0, 0, 0);
    this.CFGROM_CIF_BASE_LATENCY.build();
    this.default_map.add_reg(this.CFGROM_CIF_BASE_LATENCY, `UVM_REG_ADDR_WIDTH'h18, "RO", 0);
    this.CFGROM_CIF_BASE_BURST_LENGTH_MAX = new("CFGROM_CIF_BASE_BURST_LENGTH_MAX");
    this.CFGROM_CIF_BASE_BURST_LENGTH_MAX.configure(this, null, "");
    this.CFGROM_CIF_BASE_BURST_LENGTH_MAX.set_rdl_tag("CFGROM_CIF_BASE_BURST_LENGTH_MAX_");
    this.CFGROM_CIF_BASE_BURST_LENGTH_MAX.set_reg_test_info(0, 0, 0);
    this.CFGROM_CIF_BASE_BURST_LENGTH_MAX.build();
    this.default_map.add_reg(this.CFGROM_CIF_BASE_BURST_LENGTH_MAX, `UVM_REG_ADDR_WIDTH'h1c, "RO", 0);
    this.CFGROM_CIF_BASE_MEM_ADDR_WIDTH = new("CFGROM_CIF_BASE_MEM_ADDR_WIDTH");
    this.CFGROM_CIF_BASE_MEM_ADDR_WIDTH.configure(this, null, "");
    this.CFGROM_CIF_BASE_MEM_ADDR_WIDTH.set_rdl_tag("CFGROM_CIF_BASE_MEM_ADDR_WIDTH_");
    this.CFGROM_CIF_BASE_MEM_ADDR_WIDTH.set_reg_test_info(0, 0, 0);
    this.CFGROM_CIF_BASE_MEM_ADDR_WIDTH.build();
    this.default_map.add_reg(this.CFGROM_CIF_BASE_MEM_ADDR_WIDTH, `UVM_REG_ADDR_WIDTH'h20, "RO", 0);
    this.CFGROM_CDMA_DESC = new("CFGROM_CDMA_DESC");
    this.CFGROM_CDMA_DESC.configure(this, null, "");
    this.CFGROM_CDMA_DESC.set_rdl_tag("CFGROM_CDMA_DESC_");
    this.CFGROM_CDMA_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDMA_DESC.build();
    this.default_map.add_reg(this.CFGROM_CDMA_DESC, `UVM_REG_ADDR_WIDTH'h24, "RO", 0);
    this.CFGROM_CDMA_CAP_INCOMPAT = new("CFGROM_CDMA_CAP_INCOMPAT");
    this.CFGROM_CDMA_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CDMA_CAP_INCOMPAT.set_rdl_tag("CFGROM_CDMA_CAP_INCOMPAT_");
    this.CFGROM_CDMA_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDMA_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CDMA_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h28, "RO", 0);
    this.CFGROM_CDMA_CAP_COMPAT = new("CFGROM_CDMA_CAP_COMPAT");
    this.CFGROM_CDMA_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CDMA_CAP_COMPAT.set_rdl_tag("CFGROM_CDMA_CAP_COMPAT_");
    this.CFGROM_CDMA_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDMA_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CDMA_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h2c, "RO", 0);
    this.CFGROM_CDMA_BASE_FEATURE_TYPES = new("CFGROM_CDMA_BASE_FEATURE_TYPES");
    this.CFGROM_CDMA_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_CDMA_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_CDMA_BASE_FEATURE_TYPES_");
    this.CFGROM_CDMA_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDMA_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'h30, "RO", 0);
    this.CFGROM_CDMA_BASE_WEIGHT_TYPES = new("CFGROM_CDMA_BASE_WEIGHT_TYPES");
    this.CFGROM_CDMA_BASE_WEIGHT_TYPES.configure(this, null, "");
    this.CFGROM_CDMA_BASE_WEIGHT_TYPES.set_rdl_tag("CFGROM_CDMA_BASE_WEIGHT_TYPES_");
    this.CFGROM_CDMA_BASE_WEIGHT_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDMA_BASE_WEIGHT_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_WEIGHT_TYPES, `UVM_REG_ADDR_WIDTH'h34, "RO", 0);
    this.CFGROM_CDMA_BASE_ATOMIC_C = new("CFGROM_CDMA_BASE_ATOMIC_C");
    this.CFGROM_CDMA_BASE_ATOMIC_C.configure(this, null, "");
    this.CFGROM_CDMA_BASE_ATOMIC_C.set_rdl_tag("CFGROM_CDMA_BASE_ATOMIC_C_");
    this.CFGROM_CDMA_BASE_ATOMIC_C.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDMA_BASE_ATOMIC_C.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_ATOMIC_C, `UVM_REG_ADDR_WIDTH'h38, "RO", 0);
    this.CFGROM_CDMA_BASE_ATOMIC_K = new("CFGROM_CDMA_BASE_ATOMIC_K");
    this.CFGROM_CDMA_BASE_ATOMIC_K.configure(this, null, "");
    this.CFGROM_CDMA_BASE_ATOMIC_K.set_rdl_tag("CFGROM_CDMA_BASE_ATOMIC_K_");
    this.CFGROM_CDMA_BASE_ATOMIC_K.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDMA_BASE_ATOMIC_K.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_ATOMIC_K, `UVM_REG_ADDR_WIDTH'h3c, "RO", 0);
    this.CFGROM_CDMA_BASE_ATOMIC_M = new("CFGROM_CDMA_BASE_ATOMIC_M");
    this.CFGROM_CDMA_BASE_ATOMIC_M.configure(this, null, "");
    this.CFGROM_CDMA_BASE_ATOMIC_M.set_rdl_tag("CFGROM_CDMA_BASE_ATOMIC_M_");
    this.CFGROM_CDMA_BASE_ATOMIC_M.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDMA_BASE_ATOMIC_M.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_ATOMIC_M, `UVM_REG_ADDR_WIDTH'h40, "RO", 0);
    this.CFGROM_CDMA_BASE_CBUF_BANK_NUM = new("CFGROM_CDMA_BASE_CBUF_BANK_NUM");
    this.CFGROM_CDMA_BASE_CBUF_BANK_NUM.configure(this, null, "");
    this.CFGROM_CDMA_BASE_CBUF_BANK_NUM.set_rdl_tag("CFGROM_CDMA_BASE_CBUF_BANK_NUM_");
    this.CFGROM_CDMA_BASE_CBUF_BANK_NUM.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDMA_BASE_CBUF_BANK_NUM.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_CBUF_BANK_NUM, `UVM_REG_ADDR_WIDTH'h44, "RO", 0);
    this.CFGROM_CDMA_BASE_CBUF_BANK_WIDTH = new("CFGROM_CDMA_BASE_CBUF_BANK_WIDTH");
    this.CFGROM_CDMA_BASE_CBUF_BANK_WIDTH.configure(this, null, "");
    this.CFGROM_CDMA_BASE_CBUF_BANK_WIDTH.set_rdl_tag("CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_");
    this.CFGROM_CDMA_BASE_CBUF_BANK_WIDTH.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDMA_BASE_CBUF_BANK_WIDTH.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_CBUF_BANK_WIDTH, `UVM_REG_ADDR_WIDTH'h48, "RO", 0);
    this.CFGROM_CDMA_BASE_CBUF_BANK_DEPTH = new("CFGROM_CDMA_BASE_CBUF_BANK_DEPTH");
    this.CFGROM_CDMA_BASE_CBUF_BANK_DEPTH.configure(this, null, "");
    this.CFGROM_CDMA_BASE_CBUF_BANK_DEPTH.set_rdl_tag("CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_");
    this.CFGROM_CDMA_BASE_CBUF_BANK_DEPTH.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDMA_BASE_CBUF_BANK_DEPTH.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_CBUF_BANK_DEPTH, `UVM_REG_ADDR_WIDTH'h4c, "RO", 0);
    this.CFGROM_CDMA_MULTI_BATCH_MAX = new("CFGROM_CDMA_MULTI_BATCH_MAX");
    this.CFGROM_CDMA_MULTI_BATCH_MAX.configure(this, null, "");
    this.CFGROM_CDMA_MULTI_BATCH_MAX.set_rdl_tag("CFGROM_CDMA_MULTI_BATCH_MAX_");
    this.CFGROM_CDMA_MULTI_BATCH_MAX.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDMA_MULTI_BATCH_MAX.build();
    this.default_map.add_reg(this.CFGROM_CDMA_MULTI_BATCH_MAX, `UVM_REG_ADDR_WIDTH'h50, "RO", 0);
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED = new("CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED");
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED.configure(this, null, "");
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED.set_rdl_tag("CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_");
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED.build();
    this.default_map.add_reg(this.CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED, `UVM_REG_ADDR_WIDTH'h54, "RO", 0);
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI = new("CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI");
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI.configure(this, null, "");
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI.set_rdl_tag("CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_");
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI.build();
    this.default_map.add_reg(this.CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI, `UVM_REG_ADDR_WIDTH'h58, "RO", 0);
    this.CFGROM_CBUF_DESC = new("CFGROM_CBUF_DESC");
    this.CFGROM_CBUF_DESC.configure(this, null, "");
    this.CFGROM_CBUF_DESC.set_rdl_tag("CFGROM_CBUF_DESC_");
    this.CFGROM_CBUF_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CBUF_DESC.build();
    this.default_map.add_reg(this.CFGROM_CBUF_DESC, `UVM_REG_ADDR_WIDTH'h5c, "RO", 0);
    this.CFGROM_CBUF_CAP_INCOMPAT = new("CFGROM_CBUF_CAP_INCOMPAT");
    this.CFGROM_CBUF_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CBUF_CAP_INCOMPAT.set_rdl_tag("CFGROM_CBUF_CAP_INCOMPAT_");
    this.CFGROM_CBUF_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CBUF_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CBUF_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h60, "RO", 0);
    this.CFGROM_CBUF_CAP_COMPAT = new("CFGROM_CBUF_CAP_COMPAT");
    this.CFGROM_CBUF_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CBUF_CAP_COMPAT.set_rdl_tag("CFGROM_CBUF_CAP_COMPAT_");
    this.CFGROM_CBUF_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CBUF_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CBUF_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h64, "RO", 0);
    this.CFGROM_CBUF_BASE_CBUF_BANK_NUM = new("CFGROM_CBUF_BASE_CBUF_BANK_NUM");
    this.CFGROM_CBUF_BASE_CBUF_BANK_NUM.configure(this, null, "");
    this.CFGROM_CBUF_BASE_CBUF_BANK_NUM.set_rdl_tag("CFGROM_CBUF_BASE_CBUF_BANK_NUM_");
    this.CFGROM_CBUF_BASE_CBUF_BANK_NUM.set_reg_test_info(0, 0, 32);
    this.CFGROM_CBUF_BASE_CBUF_BANK_NUM.build();
    this.default_map.add_reg(this.CFGROM_CBUF_BASE_CBUF_BANK_NUM, `UVM_REG_ADDR_WIDTH'h68, "RO", 0);
    this.CFGROM_CBUF_BASE_CBUF_BANK_WIDTH = new("CFGROM_CBUF_BASE_CBUF_BANK_WIDTH");
    this.CFGROM_CBUF_BASE_CBUF_BANK_WIDTH.configure(this, null, "");
    this.CFGROM_CBUF_BASE_CBUF_BANK_WIDTH.set_rdl_tag("CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_");
    this.CFGROM_CBUF_BASE_CBUF_BANK_WIDTH.set_reg_test_info(0, 0, 32);
    this.CFGROM_CBUF_BASE_CBUF_BANK_WIDTH.build();
    this.default_map.add_reg(this.CFGROM_CBUF_BASE_CBUF_BANK_WIDTH, `UVM_REG_ADDR_WIDTH'h6c, "RO", 0);
    this.CFGROM_CBUF_BASE_CBUF_BANK_DEPTH = new("CFGROM_CBUF_BASE_CBUF_BANK_DEPTH");
    this.CFGROM_CBUF_BASE_CBUF_BANK_DEPTH.configure(this, null, "");
    this.CFGROM_CBUF_BASE_CBUF_BANK_DEPTH.set_rdl_tag("CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_");
    this.CFGROM_CBUF_BASE_CBUF_BANK_DEPTH.set_reg_test_info(0, 0, 32);
    this.CFGROM_CBUF_BASE_CBUF_BANK_DEPTH.build();
    this.default_map.add_reg(this.CFGROM_CBUF_BASE_CBUF_BANK_DEPTH, `UVM_REG_ADDR_WIDTH'h70, "RO", 0);
    this.CFGROM_CBUF_BASE_CDMA_ID = new("CFGROM_CBUF_BASE_CDMA_ID");
    this.CFGROM_CBUF_BASE_CDMA_ID.configure(this, null, "");
    this.CFGROM_CBUF_BASE_CDMA_ID.set_rdl_tag("CFGROM_CBUF_BASE_CDMA_ID_");
    this.CFGROM_CBUF_BASE_CDMA_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_CBUF_BASE_CDMA_ID.build();
    this.default_map.add_reg(this.CFGROM_CBUF_BASE_CDMA_ID, `UVM_REG_ADDR_WIDTH'h74, "RO", 0);
    this.CFGROM_CSC_DESC = new("CFGROM_CSC_DESC");
    this.CFGROM_CSC_DESC.configure(this, null, "");
    this.CFGROM_CSC_DESC.set_rdl_tag("CFGROM_CSC_DESC_");
    this.CFGROM_CSC_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CSC_DESC.build();
    this.default_map.add_reg(this.CFGROM_CSC_DESC, `UVM_REG_ADDR_WIDTH'h78, "RO", 0);
    this.CFGROM_CSC_CAP_INCOMPAT = new("CFGROM_CSC_CAP_INCOMPAT");
    this.CFGROM_CSC_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CSC_CAP_INCOMPAT.set_rdl_tag("CFGROM_CSC_CAP_INCOMPAT_");
    this.CFGROM_CSC_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CSC_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CSC_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h7c, "RO", 0);
    this.CFGROM_CSC_CAP_COMPAT = new("CFGROM_CSC_CAP_COMPAT");
    this.CFGROM_CSC_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CSC_CAP_COMPAT.set_rdl_tag("CFGROM_CSC_CAP_COMPAT_");
    this.CFGROM_CSC_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CSC_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CSC_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h80, "RO", 0);
    this.CFGROM_CSC_BASE_FEATURE_TYPES = new("CFGROM_CSC_BASE_FEATURE_TYPES");
    this.CFGROM_CSC_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_CSC_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_CSC_BASE_FEATURE_TYPES_");
    this.CFGROM_CSC_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CSC_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'h84, "RO", 0);
    this.CFGROM_CSC_BASE_WEIGHT_TYPES = new("CFGROM_CSC_BASE_WEIGHT_TYPES");
    this.CFGROM_CSC_BASE_WEIGHT_TYPES.configure(this, null, "");
    this.CFGROM_CSC_BASE_WEIGHT_TYPES.set_rdl_tag("CFGROM_CSC_BASE_WEIGHT_TYPES_");
    this.CFGROM_CSC_BASE_WEIGHT_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CSC_BASE_WEIGHT_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_WEIGHT_TYPES, `UVM_REG_ADDR_WIDTH'h88, "RO", 0);
    this.CFGROM_CSC_BASE_ATOMIC_C = new("CFGROM_CSC_BASE_ATOMIC_C");
    this.CFGROM_CSC_BASE_ATOMIC_C.configure(this, null, "");
    this.CFGROM_CSC_BASE_ATOMIC_C.set_rdl_tag("CFGROM_CSC_BASE_ATOMIC_C_");
    this.CFGROM_CSC_BASE_ATOMIC_C.set_reg_test_info(0, 0, 0);
    this.CFGROM_CSC_BASE_ATOMIC_C.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_ATOMIC_C, `UVM_REG_ADDR_WIDTH'h8c, "RO", 0);
    this.CFGROM_CSC_BASE_ATOMIC_K = new("CFGROM_CSC_BASE_ATOMIC_K");
    this.CFGROM_CSC_BASE_ATOMIC_K.configure(this, null, "");
    this.CFGROM_CSC_BASE_ATOMIC_K.set_rdl_tag("CFGROM_CSC_BASE_ATOMIC_K_");
    this.CFGROM_CSC_BASE_ATOMIC_K.set_reg_test_info(0, 0, 0);
    this.CFGROM_CSC_BASE_ATOMIC_K.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_ATOMIC_K, `UVM_REG_ADDR_WIDTH'h90, "RO", 0);
    this.CFGROM_CSC_BASE_ATOMIC_M = new("CFGROM_CSC_BASE_ATOMIC_M");
    this.CFGROM_CSC_BASE_ATOMIC_M.configure(this, null, "");
    this.CFGROM_CSC_BASE_ATOMIC_M.set_rdl_tag("CFGROM_CSC_BASE_ATOMIC_M_");
    this.CFGROM_CSC_BASE_ATOMIC_M.set_reg_test_info(0, 0, 32);
    this.CFGROM_CSC_BASE_ATOMIC_M.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_ATOMIC_M, `UVM_REG_ADDR_WIDTH'h94, "RO", 0);
    this.CFGROM_CSC_BASE_CBUF_BANK_NUM = new("CFGROM_CSC_BASE_CBUF_BANK_NUM");
    this.CFGROM_CSC_BASE_CBUF_BANK_NUM.configure(this, null, "");
    this.CFGROM_CSC_BASE_CBUF_BANK_NUM.set_rdl_tag("CFGROM_CSC_BASE_CBUF_BANK_NUM_");
    this.CFGROM_CSC_BASE_CBUF_BANK_NUM.set_reg_test_info(0, 0, 32);
    this.CFGROM_CSC_BASE_CBUF_BANK_NUM.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_CBUF_BANK_NUM, `UVM_REG_ADDR_WIDTH'h98, "RO", 0);
    this.CFGROM_CSC_BASE_CBUF_BANK_WIDTH = new("CFGROM_CSC_BASE_CBUF_BANK_WIDTH");
    this.CFGROM_CSC_BASE_CBUF_BANK_WIDTH.configure(this, null, "");
    this.CFGROM_CSC_BASE_CBUF_BANK_WIDTH.set_rdl_tag("CFGROM_CSC_BASE_CBUF_BANK_WIDTH_");
    this.CFGROM_CSC_BASE_CBUF_BANK_WIDTH.set_reg_test_info(0, 0, 32);
    this.CFGROM_CSC_BASE_CBUF_BANK_WIDTH.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_CBUF_BANK_WIDTH, `UVM_REG_ADDR_WIDTH'h9c, "RO", 0);
    this.CFGROM_CSC_BASE_CBUF_BANK_DEPTH = new("CFGROM_CSC_BASE_CBUF_BANK_DEPTH");
    this.CFGROM_CSC_BASE_CBUF_BANK_DEPTH.configure(this, null, "");
    this.CFGROM_CSC_BASE_CBUF_BANK_DEPTH.set_rdl_tag("CFGROM_CSC_BASE_CBUF_BANK_DEPTH_");
    this.CFGROM_CSC_BASE_CBUF_BANK_DEPTH.set_reg_test_info(0, 0, 32);
    this.CFGROM_CSC_BASE_CBUF_BANK_DEPTH.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_CBUF_BANK_DEPTH, `UVM_REG_ADDR_WIDTH'ha0, "RO", 0);
    this.CFGROM_CSC_BASE_CDMA_ID = new("CFGROM_CSC_BASE_CDMA_ID");
    this.CFGROM_CSC_BASE_CDMA_ID.configure(this, null, "");
    this.CFGROM_CSC_BASE_CDMA_ID.set_rdl_tag("CFGROM_CSC_BASE_CDMA_ID_");
    this.CFGROM_CSC_BASE_CDMA_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_CSC_BASE_CDMA_ID.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_CDMA_ID, `UVM_REG_ADDR_WIDTH'ha4, "RO", 0);
    this.CFGROM_CSC_MULTI_BATCH_MAX = new("CFGROM_CSC_MULTI_BATCH_MAX");
    this.CFGROM_CSC_MULTI_BATCH_MAX.configure(this, null, "");
    this.CFGROM_CSC_MULTI_BATCH_MAX.set_rdl_tag("CFGROM_CSC_MULTI_BATCH_MAX_");
    this.CFGROM_CSC_MULTI_BATCH_MAX.set_reg_test_info(0, 0, 32);
    this.CFGROM_CSC_MULTI_BATCH_MAX.build();
    this.default_map.add_reg(this.CFGROM_CSC_MULTI_BATCH_MAX, `UVM_REG_ADDR_WIDTH'ha8, "RO", 0);
    this.CFGROM_CMAC_A_DESC = new("CFGROM_CMAC_A_DESC");
    this.CFGROM_CMAC_A_DESC.configure(this, null, "");
    this.CFGROM_CMAC_A_DESC.set_rdl_tag("CFGROM_CMAC_A_DESC_");
    this.CFGROM_CMAC_A_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_A_DESC.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_DESC, `UVM_REG_ADDR_WIDTH'hac, "RO", 0);
    this.CFGROM_CMAC_A_CAP_INCOMPAT = new("CFGROM_CMAC_A_CAP_INCOMPAT");
    this.CFGROM_CMAC_A_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CMAC_A_CAP_INCOMPAT.set_rdl_tag("CFGROM_CMAC_A_CAP_INCOMPAT_");
    this.CFGROM_CMAC_A_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_A_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'hb0, "RO", 0);
    this.CFGROM_CMAC_A_CAP_COMPAT = new("CFGROM_CMAC_A_CAP_COMPAT");
    this.CFGROM_CMAC_A_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CMAC_A_CAP_COMPAT.set_rdl_tag("CFGROM_CMAC_A_CAP_COMPAT_");
    this.CFGROM_CMAC_A_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_A_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'hb4, "RO", 0);
    this.CFGROM_CMAC_A_BASE_FEATURE_TYPES = new("CFGROM_CMAC_A_BASE_FEATURE_TYPES");
    this.CFGROM_CMAC_A_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_CMAC_A_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_CMAC_A_BASE_FEATURE_TYPES_");
    this.CFGROM_CMAC_A_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_A_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'hb8, "RO", 0);
    this.CFGROM_CMAC_A_BASE_WEIGHT_TYPES = new("CFGROM_CMAC_A_BASE_WEIGHT_TYPES");
    this.CFGROM_CMAC_A_BASE_WEIGHT_TYPES.configure(this, null, "");
    this.CFGROM_CMAC_A_BASE_WEIGHT_TYPES.set_rdl_tag("CFGROM_CMAC_A_BASE_WEIGHT_TYPES_");
    this.CFGROM_CMAC_A_BASE_WEIGHT_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_A_BASE_WEIGHT_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_BASE_WEIGHT_TYPES, `UVM_REG_ADDR_WIDTH'hbc, "RO", 0);
    this.CFGROM_CMAC_A_BASE_ATOMIC_C = new("CFGROM_CMAC_A_BASE_ATOMIC_C");
    this.CFGROM_CMAC_A_BASE_ATOMIC_C.configure(this, null, "");
    this.CFGROM_CMAC_A_BASE_ATOMIC_C.set_rdl_tag("CFGROM_CMAC_A_BASE_ATOMIC_C_");
    this.CFGROM_CMAC_A_BASE_ATOMIC_C.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_A_BASE_ATOMIC_C.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_BASE_ATOMIC_C, `UVM_REG_ADDR_WIDTH'hc0, "RO", 0);
    this.CFGROM_CMAC_A_BASE_ATOMIC_K = new("CFGROM_CMAC_A_BASE_ATOMIC_K");
    this.CFGROM_CMAC_A_BASE_ATOMIC_K.configure(this, null, "");
    this.CFGROM_CMAC_A_BASE_ATOMIC_K.set_rdl_tag("CFGROM_CMAC_A_BASE_ATOMIC_K_");
    this.CFGROM_CMAC_A_BASE_ATOMIC_K.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_A_BASE_ATOMIC_K.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_BASE_ATOMIC_K, `UVM_REG_ADDR_WIDTH'hc4, "RO", 0);
    this.CFGROM_CMAC_A_BASE_CDMA_ID = new("CFGROM_CMAC_A_BASE_CDMA_ID");
    this.CFGROM_CMAC_A_BASE_CDMA_ID.configure(this, null, "");
    this.CFGROM_CMAC_A_BASE_CDMA_ID.set_rdl_tag("CFGROM_CMAC_A_BASE_CDMA_ID_");
    this.CFGROM_CMAC_A_BASE_CDMA_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_CMAC_A_BASE_CDMA_ID.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_BASE_CDMA_ID, `UVM_REG_ADDR_WIDTH'hc8, "RO", 0);
    this.CFGROM_CMAC_B_DESC = new("CFGROM_CMAC_B_DESC");
    this.CFGROM_CMAC_B_DESC.configure(this, null, "");
    this.CFGROM_CMAC_B_DESC.set_rdl_tag("CFGROM_CMAC_B_DESC_");
    this.CFGROM_CMAC_B_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_B_DESC.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_DESC, `UVM_REG_ADDR_WIDTH'hcc, "RO", 0);
    this.CFGROM_CMAC_B_CAP_INCOMPAT = new("CFGROM_CMAC_B_CAP_INCOMPAT");
    this.CFGROM_CMAC_B_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CMAC_B_CAP_INCOMPAT.set_rdl_tag("CFGROM_CMAC_B_CAP_INCOMPAT_");
    this.CFGROM_CMAC_B_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_B_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'hd0, "RO", 0);
    this.CFGROM_CMAC_B_CAP_COMPAT = new("CFGROM_CMAC_B_CAP_COMPAT");
    this.CFGROM_CMAC_B_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CMAC_B_CAP_COMPAT.set_rdl_tag("CFGROM_CMAC_B_CAP_COMPAT_");
    this.CFGROM_CMAC_B_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_B_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'hd4, "RO", 0);
    this.CFGROM_CMAC_B_BASE_FEATURE_TYPES = new("CFGROM_CMAC_B_BASE_FEATURE_TYPES");
    this.CFGROM_CMAC_B_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_CMAC_B_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_CMAC_B_BASE_FEATURE_TYPES_");
    this.CFGROM_CMAC_B_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_B_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'hd8, "RO", 0);
    this.CFGROM_CMAC_B_BASE_WEIGHT_TYPES = new("CFGROM_CMAC_B_BASE_WEIGHT_TYPES");
    this.CFGROM_CMAC_B_BASE_WEIGHT_TYPES.configure(this, null, "");
    this.CFGROM_CMAC_B_BASE_WEIGHT_TYPES.set_rdl_tag("CFGROM_CMAC_B_BASE_WEIGHT_TYPES_");
    this.CFGROM_CMAC_B_BASE_WEIGHT_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_B_BASE_WEIGHT_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_BASE_WEIGHT_TYPES, `UVM_REG_ADDR_WIDTH'hdc, "RO", 0);
    this.CFGROM_CMAC_B_BASE_ATOMIC_C = new("CFGROM_CMAC_B_BASE_ATOMIC_C");
    this.CFGROM_CMAC_B_BASE_ATOMIC_C.configure(this, null, "");
    this.CFGROM_CMAC_B_BASE_ATOMIC_C.set_rdl_tag("CFGROM_CMAC_B_BASE_ATOMIC_C_");
    this.CFGROM_CMAC_B_BASE_ATOMIC_C.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_B_BASE_ATOMIC_C.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_BASE_ATOMIC_C, `UVM_REG_ADDR_WIDTH'he0, "RO", 0);
    this.CFGROM_CMAC_B_BASE_ATOMIC_K = new("CFGROM_CMAC_B_BASE_ATOMIC_K");
    this.CFGROM_CMAC_B_BASE_ATOMIC_K.configure(this, null, "");
    this.CFGROM_CMAC_B_BASE_ATOMIC_K.set_rdl_tag("CFGROM_CMAC_B_BASE_ATOMIC_K_");
    this.CFGROM_CMAC_B_BASE_ATOMIC_K.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_B_BASE_ATOMIC_K.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_BASE_ATOMIC_K, `UVM_REG_ADDR_WIDTH'he4, "RO", 0);
    this.CFGROM_CMAC_B_BASE_CDMA_ID = new("CFGROM_CMAC_B_BASE_CDMA_ID");
    this.CFGROM_CMAC_B_BASE_CDMA_ID.configure(this, null, "");
    this.CFGROM_CMAC_B_BASE_CDMA_ID.set_rdl_tag("CFGROM_CMAC_B_BASE_CDMA_ID_");
    this.CFGROM_CMAC_B_BASE_CDMA_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_CMAC_B_BASE_CDMA_ID.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_BASE_CDMA_ID, `UVM_REG_ADDR_WIDTH'he8, "RO", 0);
    this.CFGROM_CACC_DESC = new("CFGROM_CACC_DESC");
    this.CFGROM_CACC_DESC.configure(this, null, "");
    this.CFGROM_CACC_DESC.set_rdl_tag("CFGROM_CACC_DESC_");
    this.CFGROM_CACC_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CACC_DESC.build();
    this.default_map.add_reg(this.CFGROM_CACC_DESC, `UVM_REG_ADDR_WIDTH'hec, "RO", 0);
    this.CFGROM_CACC_CAP_INCOMPAT = new("CFGROM_CACC_CAP_INCOMPAT");
    this.CFGROM_CACC_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CACC_CAP_INCOMPAT.set_rdl_tag("CFGROM_CACC_CAP_INCOMPAT_");
    this.CFGROM_CACC_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CACC_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CACC_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'hf0, "RO", 0);
    this.CFGROM_CACC_CAP_COMPAT = new("CFGROM_CACC_CAP_COMPAT");
    this.CFGROM_CACC_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CACC_CAP_COMPAT.set_rdl_tag("CFGROM_CACC_CAP_COMPAT_");
    this.CFGROM_CACC_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CACC_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CACC_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'hf4, "RO", 0);
    this.CFGROM_CACC_BASE_FEATURE_TYPES = new("CFGROM_CACC_BASE_FEATURE_TYPES");
    this.CFGROM_CACC_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_CACC_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_CACC_BASE_FEATURE_TYPES_");
    this.CFGROM_CACC_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CACC_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CACC_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'hf8, "RO", 0);
    this.CFGROM_CACC_BASE_WEIGHT_TYPES = new("CFGROM_CACC_BASE_WEIGHT_TYPES");
    this.CFGROM_CACC_BASE_WEIGHT_TYPES.configure(this, null, "");
    this.CFGROM_CACC_BASE_WEIGHT_TYPES.set_rdl_tag("CFGROM_CACC_BASE_WEIGHT_TYPES_");
    this.CFGROM_CACC_BASE_WEIGHT_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CACC_BASE_WEIGHT_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CACC_BASE_WEIGHT_TYPES, `UVM_REG_ADDR_WIDTH'hfc, "RO", 0);
    this.CFGROM_CACC_BASE_ATOMIC_C = new("CFGROM_CACC_BASE_ATOMIC_C");
    this.CFGROM_CACC_BASE_ATOMIC_C.configure(this, null, "");
    this.CFGROM_CACC_BASE_ATOMIC_C.set_rdl_tag("CFGROM_CACC_BASE_ATOMIC_C_");
    this.CFGROM_CACC_BASE_ATOMIC_C.set_reg_test_info(0, 0, 0);
    this.CFGROM_CACC_BASE_ATOMIC_C.build();
    this.default_map.add_reg(this.CFGROM_CACC_BASE_ATOMIC_C, `UVM_REG_ADDR_WIDTH'h100, "RO", 0);
    this.CFGROM_CACC_BASE_ATOMIC_K = new("CFGROM_CACC_BASE_ATOMIC_K");
    this.CFGROM_CACC_BASE_ATOMIC_K.configure(this, null, "");
    this.CFGROM_CACC_BASE_ATOMIC_K.set_rdl_tag("CFGROM_CACC_BASE_ATOMIC_K_");
    this.CFGROM_CACC_BASE_ATOMIC_K.set_reg_test_info(0, 0, 0);
    this.CFGROM_CACC_BASE_ATOMIC_K.build();
    this.default_map.add_reg(this.CFGROM_CACC_BASE_ATOMIC_K, `UVM_REG_ADDR_WIDTH'h104, "RO", 0);
    this.CFGROM_CACC_BASE_CDMA_ID = new("CFGROM_CACC_BASE_CDMA_ID");
    this.CFGROM_CACC_BASE_CDMA_ID.configure(this, null, "");
    this.CFGROM_CACC_BASE_CDMA_ID.set_rdl_tag("CFGROM_CACC_BASE_CDMA_ID_");
    this.CFGROM_CACC_BASE_CDMA_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_CACC_BASE_CDMA_ID.build();
    this.default_map.add_reg(this.CFGROM_CACC_BASE_CDMA_ID, `UVM_REG_ADDR_WIDTH'h108, "RO", 0);
    this.CFGROM_CACC_MULTI_BATCH_MAX = new("CFGROM_CACC_MULTI_BATCH_MAX");
    this.CFGROM_CACC_MULTI_BATCH_MAX.configure(this, null, "");
    this.CFGROM_CACC_MULTI_BATCH_MAX.set_rdl_tag("CFGROM_CACC_MULTI_BATCH_MAX_");
    this.CFGROM_CACC_MULTI_BATCH_MAX.set_reg_test_info(0, 0, 32);
    this.CFGROM_CACC_MULTI_BATCH_MAX.build();
    this.default_map.add_reg(this.CFGROM_CACC_MULTI_BATCH_MAX, `UVM_REG_ADDR_WIDTH'h10c, "RO", 0);
    this.CFGROM_SDP_RDMA_DESC = new("CFGROM_SDP_RDMA_DESC");
    this.CFGROM_SDP_RDMA_DESC.configure(this, null, "");
    this.CFGROM_SDP_RDMA_DESC.set_rdl_tag("CFGROM_SDP_RDMA_DESC_");
    this.CFGROM_SDP_RDMA_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_RDMA_DESC.build();
    this.default_map.add_reg(this.CFGROM_SDP_RDMA_DESC, `UVM_REG_ADDR_WIDTH'h110, "RO", 0);
    this.CFGROM_SDP_RDMA_CAP_INCOMPAT = new("CFGROM_SDP_RDMA_CAP_INCOMPAT");
    this.CFGROM_SDP_RDMA_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_SDP_RDMA_CAP_INCOMPAT.set_rdl_tag("CFGROM_SDP_RDMA_CAP_INCOMPAT_");
    this.CFGROM_SDP_RDMA_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_RDMA_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_SDP_RDMA_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h114, "RO", 0);
    this.CFGROM_SDP_RDMA_CAP_COMPAT = new("CFGROM_SDP_RDMA_CAP_COMPAT");
    this.CFGROM_SDP_RDMA_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_SDP_RDMA_CAP_COMPAT.set_rdl_tag("CFGROM_SDP_RDMA_CAP_COMPAT_");
    this.CFGROM_SDP_RDMA_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_RDMA_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_SDP_RDMA_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h118, "RO", 0);
    this.CFGROM_SDP_RDMA_BASE_ATOMIC_M = new("CFGROM_SDP_RDMA_BASE_ATOMIC_M");
    this.CFGROM_SDP_RDMA_BASE_ATOMIC_M.configure(this, null, "");
    this.CFGROM_SDP_RDMA_BASE_ATOMIC_M.set_rdl_tag("CFGROM_SDP_RDMA_BASE_ATOMIC_M_");
    this.CFGROM_SDP_RDMA_BASE_ATOMIC_M.set_reg_test_info(0, 0, 32);
    this.CFGROM_SDP_RDMA_BASE_ATOMIC_M.build();
    this.default_map.add_reg(this.CFGROM_SDP_RDMA_BASE_ATOMIC_M, `UVM_REG_ADDR_WIDTH'h11c, "RO", 0);
    this.CFGROM_SDP_RDMA_BASE_SDP_ID = new("CFGROM_SDP_RDMA_BASE_SDP_ID");
    this.CFGROM_SDP_RDMA_BASE_SDP_ID.configure(this, null, "");
    this.CFGROM_SDP_RDMA_BASE_SDP_ID.set_rdl_tag("CFGROM_SDP_RDMA_BASE_SDP_ID_");
    this.CFGROM_SDP_RDMA_BASE_SDP_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_SDP_RDMA_BASE_SDP_ID.build();
    this.default_map.add_reg(this.CFGROM_SDP_RDMA_BASE_SDP_ID, `UVM_REG_ADDR_WIDTH'h120, "RO", 0);
    this.CFGROM_SDP_DESC = new("CFGROM_SDP_DESC");
    this.CFGROM_SDP_DESC.configure(this, null, "");
    this.CFGROM_SDP_DESC.set_rdl_tag("CFGROM_SDP_DESC_");
    this.CFGROM_SDP_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_DESC.build();
    this.default_map.add_reg(this.CFGROM_SDP_DESC, `UVM_REG_ADDR_WIDTH'h124, "RO", 0);
    this.CFGROM_SDP_CAP_INCOMPAT = new("CFGROM_SDP_CAP_INCOMPAT");
    this.CFGROM_SDP_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_SDP_CAP_INCOMPAT.set_rdl_tag("CFGROM_SDP_CAP_INCOMPAT_");
    this.CFGROM_SDP_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_SDP_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h128, "RO", 0);
    this.CFGROM_SDP_CAP_COMPAT = new("CFGROM_SDP_CAP_COMPAT");
    this.CFGROM_SDP_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_SDP_CAP_COMPAT.set_rdl_tag("CFGROM_SDP_CAP_COMPAT_");
    this.CFGROM_SDP_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_SDP_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h12c, "RO", 0);
    this.CFGROM_SDP_BASE_FEATURE_TYPES = new("CFGROM_SDP_BASE_FEATURE_TYPES");
    this.CFGROM_SDP_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_SDP_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_SDP_BASE_FEATURE_TYPES_");
    this.CFGROM_SDP_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_SDP_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'h130, "RO", 0);
    this.CFGROM_SDP_BASE_WEIGHT_TYPES = new("CFGROM_SDP_BASE_WEIGHT_TYPES");
    this.CFGROM_SDP_BASE_WEIGHT_TYPES.configure(this, null, "");
    this.CFGROM_SDP_BASE_WEIGHT_TYPES.set_rdl_tag("CFGROM_SDP_BASE_WEIGHT_TYPES_");
    this.CFGROM_SDP_BASE_WEIGHT_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_BASE_WEIGHT_TYPES.build();
    this.default_map.add_reg(this.CFGROM_SDP_BASE_WEIGHT_TYPES, `UVM_REG_ADDR_WIDTH'h134, "RO", 0);
    this.CFGROM_SDP_BASE_CDMA_ID = new("CFGROM_SDP_BASE_CDMA_ID");
    this.CFGROM_SDP_BASE_CDMA_ID.configure(this, null, "");
    this.CFGROM_SDP_BASE_CDMA_ID.set_rdl_tag("CFGROM_SDP_BASE_CDMA_ID_");
    this.CFGROM_SDP_BASE_CDMA_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_SDP_BASE_CDMA_ID.build();
    this.default_map.add_reg(this.CFGROM_SDP_BASE_CDMA_ID, `UVM_REG_ADDR_WIDTH'h138, "RO", 0);
    this.CFGROM_SDP_MULTI_BATCH_MAX = new("CFGROM_SDP_MULTI_BATCH_MAX");
    this.CFGROM_SDP_MULTI_BATCH_MAX.configure(this, null, "");
    this.CFGROM_SDP_MULTI_BATCH_MAX.set_rdl_tag("CFGROM_SDP_MULTI_BATCH_MAX_");
    this.CFGROM_SDP_MULTI_BATCH_MAX.set_reg_test_info(0, 0, 32);
    this.CFGROM_SDP_MULTI_BATCH_MAX.build();
    this.default_map.add_reg(this.CFGROM_SDP_MULTI_BATCH_MAX, `UVM_REG_ADDR_WIDTH'h13c, "RO", 0);
    this.CFGROM_SDP_BS_THROUGHPUT = new("CFGROM_SDP_BS_THROUGHPUT");
    this.CFGROM_SDP_BS_THROUGHPUT.configure(this, null, "");
    this.CFGROM_SDP_BS_THROUGHPUT.set_rdl_tag("CFGROM_SDP_BS_THROUGHPUT_");
    this.CFGROM_SDP_BS_THROUGHPUT.set_reg_test_info(0, 0, 32);
    this.CFGROM_SDP_BS_THROUGHPUT.build();
    this.default_map.add_reg(this.CFGROM_SDP_BS_THROUGHPUT, `UVM_REG_ADDR_WIDTH'h140, "RO", 0);
    this.CFGROM_SDP_BN_THROUGHPUT = new("CFGROM_SDP_BN_THROUGHPUT");
    this.CFGROM_SDP_BN_THROUGHPUT.configure(this, null, "");
    this.CFGROM_SDP_BN_THROUGHPUT.set_rdl_tag("CFGROM_SDP_BN_THROUGHPUT_");
    this.CFGROM_SDP_BN_THROUGHPUT.set_reg_test_info(0, 0, 32);
    this.CFGROM_SDP_BN_THROUGHPUT.build();
    this.default_map.add_reg(this.CFGROM_SDP_BN_THROUGHPUT, `UVM_REG_ADDR_WIDTH'h144, "RO", 0);
    this.CFGROM_SDP_EW_THROUGHPUT = new("CFGROM_SDP_EW_THROUGHPUT");
    this.CFGROM_SDP_EW_THROUGHPUT.configure(this, null, "");
    this.CFGROM_SDP_EW_THROUGHPUT.set_rdl_tag("CFGROM_SDP_EW_THROUGHPUT_");
    this.CFGROM_SDP_EW_THROUGHPUT.set_reg_test_info(0, 0, 32);
    this.CFGROM_SDP_EW_THROUGHPUT.build();
    this.default_map.add_reg(this.CFGROM_SDP_EW_THROUGHPUT, `UVM_REG_ADDR_WIDTH'h148, "RO", 0);
    this.CFGROM_PDP_RDMA_DESC = new("CFGROM_PDP_RDMA_DESC");
    this.CFGROM_PDP_RDMA_DESC.configure(this, null, "");
    this.CFGROM_PDP_RDMA_DESC.set_rdl_tag("CFGROM_PDP_RDMA_DESC_");
    this.CFGROM_PDP_RDMA_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_PDP_RDMA_DESC.build();
    this.default_map.add_reg(this.CFGROM_PDP_RDMA_DESC, `UVM_REG_ADDR_WIDTH'h14c, "RO", 0);
    this.CFGROM_PDP_RDMA_CAP_INCOMPAT = new("CFGROM_PDP_RDMA_CAP_INCOMPAT");
    this.CFGROM_PDP_RDMA_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_PDP_RDMA_CAP_INCOMPAT.set_rdl_tag("CFGROM_PDP_RDMA_CAP_INCOMPAT_");
    this.CFGROM_PDP_RDMA_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_PDP_RDMA_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_PDP_RDMA_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h150, "RO", 0);
    this.CFGROM_PDP_RDMA_CAP_COMPAT = new("CFGROM_PDP_RDMA_CAP_COMPAT");
    this.CFGROM_PDP_RDMA_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_PDP_RDMA_CAP_COMPAT.set_rdl_tag("CFGROM_PDP_RDMA_CAP_COMPAT_");
    this.CFGROM_PDP_RDMA_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_PDP_RDMA_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_PDP_RDMA_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h154, "RO", 0);
    this.CFGROM_PDP_RDMA_BASE_ATOMIC_M = new("CFGROM_PDP_RDMA_BASE_ATOMIC_M");
    this.CFGROM_PDP_RDMA_BASE_ATOMIC_M.configure(this, null, "");
    this.CFGROM_PDP_RDMA_BASE_ATOMIC_M.set_rdl_tag("CFGROM_PDP_RDMA_BASE_ATOMIC_M_");
    this.CFGROM_PDP_RDMA_BASE_ATOMIC_M.set_reg_test_info(0, 0, 32);
    this.CFGROM_PDP_RDMA_BASE_ATOMIC_M.build();
    this.default_map.add_reg(this.CFGROM_PDP_RDMA_BASE_ATOMIC_M, `UVM_REG_ADDR_WIDTH'h158, "RO", 0);
    this.CFGROM_PDP_RDMA_BASE_PDP_ID = new("CFGROM_PDP_RDMA_BASE_PDP_ID");
    this.CFGROM_PDP_RDMA_BASE_PDP_ID.configure(this, null, "");
    this.CFGROM_PDP_RDMA_BASE_PDP_ID.set_rdl_tag("CFGROM_PDP_RDMA_BASE_PDP_ID_");
    this.CFGROM_PDP_RDMA_BASE_PDP_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_PDP_RDMA_BASE_PDP_ID.build();
    this.default_map.add_reg(this.CFGROM_PDP_RDMA_BASE_PDP_ID, `UVM_REG_ADDR_WIDTH'h15c, "RO", 0);
    this.CFGROM_PDP_DESC = new("CFGROM_PDP_DESC");
    this.CFGROM_PDP_DESC.configure(this, null, "");
    this.CFGROM_PDP_DESC.set_rdl_tag("CFGROM_PDP_DESC_");
    this.CFGROM_PDP_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_PDP_DESC.build();
    this.default_map.add_reg(this.CFGROM_PDP_DESC, `UVM_REG_ADDR_WIDTH'h160, "RO", 0);
    this.CFGROM_PDP_CAP_INCOMPAT = new("CFGROM_PDP_CAP_INCOMPAT");
    this.CFGROM_PDP_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_PDP_CAP_INCOMPAT.set_rdl_tag("CFGROM_PDP_CAP_INCOMPAT_");
    this.CFGROM_PDP_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_PDP_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_PDP_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h164, "RO", 0);
    this.CFGROM_PDP_CAP_COMPAT = new("CFGROM_PDP_CAP_COMPAT");
    this.CFGROM_PDP_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_PDP_CAP_COMPAT.set_rdl_tag("CFGROM_PDP_CAP_COMPAT_");
    this.CFGROM_PDP_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_PDP_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_PDP_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h168, "RO", 0);
    this.CFGROM_PDP_BASE_FEATURE_TYPES = new("CFGROM_PDP_BASE_FEATURE_TYPES");
    this.CFGROM_PDP_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_PDP_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_PDP_BASE_FEATURE_TYPES_");
    this.CFGROM_PDP_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_PDP_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_PDP_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'h16c, "RO", 0);
    this.CFGROM_PDP_BASE_THROUGHPUT = new("CFGROM_PDP_BASE_THROUGHPUT");
    this.CFGROM_PDP_BASE_THROUGHPUT.configure(this, null, "");
    this.CFGROM_PDP_BASE_THROUGHPUT.set_rdl_tag("CFGROM_PDP_BASE_THROUGHPUT_");
    this.CFGROM_PDP_BASE_THROUGHPUT.set_reg_test_info(0, 0, 32);
    this.CFGROM_PDP_BASE_THROUGHPUT.build();
    this.default_map.add_reg(this.CFGROM_PDP_BASE_THROUGHPUT, `UVM_REG_ADDR_WIDTH'h170, "RO", 0);
    this.CFGROM_CDP_RDMA_DESC = new("CFGROM_CDP_RDMA_DESC");
    this.CFGROM_CDP_RDMA_DESC.configure(this, null, "");
    this.CFGROM_CDP_RDMA_DESC.set_rdl_tag("CFGROM_CDP_RDMA_DESC_");
    this.CFGROM_CDP_RDMA_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDP_RDMA_DESC.build();
    this.default_map.add_reg(this.CFGROM_CDP_RDMA_DESC, `UVM_REG_ADDR_WIDTH'h174, "RO", 0);
    this.CFGROM_CDP_RDMA_CAP_INCOMPAT = new("CFGROM_CDP_RDMA_CAP_INCOMPAT");
    this.CFGROM_CDP_RDMA_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CDP_RDMA_CAP_INCOMPAT.set_rdl_tag("CFGROM_CDP_RDMA_CAP_INCOMPAT_");
    this.CFGROM_CDP_RDMA_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDP_RDMA_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CDP_RDMA_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h178, "RO", 0);
    this.CFGROM_CDP_RDMA_CAP_COMPAT = new("CFGROM_CDP_RDMA_CAP_COMPAT");
    this.CFGROM_CDP_RDMA_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CDP_RDMA_CAP_COMPAT.set_rdl_tag("CFGROM_CDP_RDMA_CAP_COMPAT_");
    this.CFGROM_CDP_RDMA_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDP_RDMA_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CDP_RDMA_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h17c, "RO", 0);
    this.CFGROM_CDP_RDMA_BASE_ATOMIC_M = new("CFGROM_CDP_RDMA_BASE_ATOMIC_M");
    this.CFGROM_CDP_RDMA_BASE_ATOMIC_M.configure(this, null, "");
    this.CFGROM_CDP_RDMA_BASE_ATOMIC_M.set_rdl_tag("CFGROM_CDP_RDMA_BASE_ATOMIC_M_");
    this.CFGROM_CDP_RDMA_BASE_ATOMIC_M.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDP_RDMA_BASE_ATOMIC_M.build();
    this.default_map.add_reg(this.CFGROM_CDP_RDMA_BASE_ATOMIC_M, `UVM_REG_ADDR_WIDTH'h180, "RO", 0);
    this.CFGROM_CDP_RDMA_BASE_CDP_ID = new("CFGROM_CDP_RDMA_BASE_CDP_ID");
    this.CFGROM_CDP_RDMA_BASE_CDP_ID.configure(this, null, "");
    this.CFGROM_CDP_RDMA_BASE_CDP_ID.set_rdl_tag("CFGROM_CDP_RDMA_BASE_CDP_ID_");
    this.CFGROM_CDP_RDMA_BASE_CDP_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDP_RDMA_BASE_CDP_ID.build();
    this.default_map.add_reg(this.CFGROM_CDP_RDMA_BASE_CDP_ID, `UVM_REG_ADDR_WIDTH'h184, "RO", 0);
    this.CFGROM_CDP_DESC = new("CFGROM_CDP_DESC");
    this.CFGROM_CDP_DESC.configure(this, null, "");
    this.CFGROM_CDP_DESC.set_rdl_tag("CFGROM_CDP_DESC_");
    this.CFGROM_CDP_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDP_DESC.build();
    this.default_map.add_reg(this.CFGROM_CDP_DESC, `UVM_REG_ADDR_WIDTH'h188, "RO", 0);
    this.CFGROM_CDP_CAP_INCOMPAT = new("CFGROM_CDP_CAP_INCOMPAT");
    this.CFGROM_CDP_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CDP_CAP_INCOMPAT.set_rdl_tag("CFGROM_CDP_CAP_INCOMPAT_");
    this.CFGROM_CDP_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDP_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CDP_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h18c, "RO", 0);
    this.CFGROM_CDP_CAP_COMPAT = new("CFGROM_CDP_CAP_COMPAT");
    this.CFGROM_CDP_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CDP_CAP_COMPAT.set_rdl_tag("CFGROM_CDP_CAP_COMPAT_");
    this.CFGROM_CDP_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDP_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CDP_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h190, "RO", 0);
    this.CFGROM_CDP_BASE_FEATURE_TYPES = new("CFGROM_CDP_BASE_FEATURE_TYPES");
    this.CFGROM_CDP_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_CDP_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_CDP_BASE_FEATURE_TYPES_");
    this.CFGROM_CDP_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDP_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CDP_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'h194, "RO", 0);
    this.CFGROM_CDP_BASE_THROUGHPUT = new("CFGROM_CDP_BASE_THROUGHPUT");
    this.CFGROM_CDP_BASE_THROUGHPUT.configure(this, null, "");
    this.CFGROM_CDP_BASE_THROUGHPUT.set_rdl_tag("CFGROM_CDP_BASE_THROUGHPUT_");
    this.CFGROM_CDP_BASE_THROUGHPUT.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDP_BASE_THROUGHPUT.build();
    this.default_map.add_reg(this.CFGROM_CDP_BASE_THROUGHPUT, `UVM_REG_ADDR_WIDTH'h198, "RO", 0);
    this.CFGROM_END_OF_LIST = new("CFGROM_END_OF_LIST");
    this.CFGROM_END_OF_LIST.configure(this, null, "");
    this.CFGROM_END_OF_LIST.set_rdl_tag("CFGROM_END_OF_LIST_");
    this.CFGROM_END_OF_LIST.set_reg_test_info(0, 0, 0);
    this.CFGROM_END_OF_LIST.build();
    this.default_map.add_reg(this.CFGROM_END_OF_LIST, `UVM_REG_ADDR_WIDTH'h19c, "RO", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_CFGROM)
endclass : block_addrmap_NVDLA_NVDLA_CFGROM

// S_NVDLA_HW_VERSION
class reg_addrmap_NVDLA_NVDLA_GLB_S_NVDLA_HW_VERSION extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl MAJOR;
  rand uvm_reg_field_rdl MINOR;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GLB_S_NVDLA_HW_VERSION");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.MAJOR = new("MAJOR");
    this.MAJOR.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.MAJOR.configure(this, 8, 0, "RO", 0, 8'h31, 1, 0, 0);
    this.MAJOR.add_def_property("spec_access", "c");
    this.MAJOR.add_def_property("spec_sw_default", "0x0");
    this.MAJOR.add_def_property("sw_default_mask", "0x0");
    this.MAJOR.add_def_property("reset_mask", "0xff");
    this.MINOR = new("MINOR");
    this.MINOR.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.MINOR.configure(this, 16, 8, "RO", 0, 16'h3030, 1, 0, 0);
    this.MINOR.add_def_property("spec_access", "c");
    this.MINOR.add_def_property("spec_sw_default", "0x0");
    this.MINOR.add_def_property("sw_default_mask", "0x0");
    this.MINOR.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "MAJOR"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "MINOR"}, 8, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GLB_S_NVDLA_HW_VERSION

// S_INTR_MASK
class reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_MASK extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_DONE_MASK0;
  rand uvm_reg_field_rdl SDP_DONE_MASK1;
  rand uvm_reg_field_rdl CDP_DONE_MASK0;
  rand uvm_reg_field_rdl CDP_DONE_MASK1;
  rand uvm_reg_field_rdl PDP_DONE_MASK0;
  rand uvm_reg_field_rdl PDP_DONE_MASK1;
  rand uvm_reg_field_rdl BDMA_DONE_MASK0;
  rand uvm_reg_field_rdl BDMA_DONE_MASK1;
  rand uvm_reg_field_rdl RUBIK_DONE_MASK0;
  rand uvm_reg_field_rdl RUBIK_DONE_MASK1;
  rand uvm_reg_field_rdl CDMA_DAT_DONE_MASK0;
  rand uvm_reg_field_rdl CDMA_DAT_DONE_MASK1;
  rand uvm_reg_field_rdl CDMA_WT_DONE_MASK0;
  rand uvm_reg_field_rdl CDMA_WT_DONE_MASK1;
  rand uvm_reg_field_rdl CACC_DONE_MASK0;
  rand uvm_reg_field_rdl CACC_DONE_MASK1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_MASK");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_DONE_MASK0 = new("SDP_DONE_MASK0");
    this.SDP_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SDP_DONE_MASK0.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.SDP_DONE_MASK0.add_def_property("spec_access", "rw");
    this.SDP_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.SDP_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.SDP_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.SDP_DONE_MASK1 = new("SDP_DONE_MASK1");
    this.SDP_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SDP_DONE_MASK1.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.SDP_DONE_MASK1.add_def_property("spec_access", "rw");
    this.SDP_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.SDP_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.SDP_DONE_MASK1.add_def_property("reset_mask", "0x1");
    this.CDP_DONE_MASK0 = new("CDP_DONE_MASK0");
    this.CDP_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDP_DONE_MASK0.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.CDP_DONE_MASK0.add_def_property("spec_access", "rw");
    this.CDP_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.CDP_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.CDP_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.CDP_DONE_MASK1 = new("CDP_DONE_MASK1");
    this.CDP_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDP_DONE_MASK1.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.CDP_DONE_MASK1.add_def_property("spec_access", "rw");
    this.CDP_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.CDP_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.CDP_DONE_MASK1.add_def_property("reset_mask", "0x1");
    this.PDP_DONE_MASK0 = new("PDP_DONE_MASK0");
    this.PDP_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PDP_DONE_MASK0.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.PDP_DONE_MASK0.add_def_property("spec_access", "rw");
    this.PDP_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.PDP_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.PDP_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.PDP_DONE_MASK1 = new("PDP_DONE_MASK1");
    this.PDP_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PDP_DONE_MASK1.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.PDP_DONE_MASK1.add_def_property("spec_access", "rw");
    this.PDP_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.PDP_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.PDP_DONE_MASK1.add_def_property("reset_mask", "0x1");
    this.BDMA_DONE_MASK0 = new("BDMA_DONE_MASK0");
    this.BDMA_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BDMA_DONE_MASK0.configure(this, 1, 6, "RW", 0, 1'h0, 1, 1, 0);
    this.BDMA_DONE_MASK0.add_def_property("spec_access", "rw");
    this.BDMA_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.BDMA_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.BDMA_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.BDMA_DONE_MASK1 = new("BDMA_DONE_MASK1");
    this.BDMA_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BDMA_DONE_MASK1.configure(this, 1, 7, "RW", 0, 1'h0, 1, 1, 0);
    this.BDMA_DONE_MASK1.add_def_property("spec_access", "rw");
    this.BDMA_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.BDMA_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.BDMA_DONE_MASK1.add_def_property("reset_mask", "0x1");
    this.RUBIK_DONE_MASK0 = new("RUBIK_DONE_MASK0");
    this.RUBIK_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RUBIK_DONE_MASK0.configure(this, 1, 8, "RW", 0, 1'h0, 1, 1, 0);
    this.RUBIK_DONE_MASK0.add_def_property("spec_access", "rw");
    this.RUBIK_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.RUBIK_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.RUBIK_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.RUBIK_DONE_MASK1 = new("RUBIK_DONE_MASK1");
    this.RUBIK_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RUBIK_DONE_MASK1.configure(this, 1, 9, "RW", 0, 1'h0, 1, 1, 0);
    this.RUBIK_DONE_MASK1.add_def_property("spec_access", "rw");
    this.RUBIK_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.RUBIK_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.RUBIK_DONE_MASK1.add_def_property("reset_mask", "0x1");
    this.CDMA_DAT_DONE_MASK0 = new("CDMA_DAT_DONE_MASK0");
    this.CDMA_DAT_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_DAT_DONE_MASK0.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_DAT_DONE_MASK0.add_def_property("spec_access", "rw");
    this.CDMA_DAT_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.CDMA_DAT_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.CDMA_DAT_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.CDMA_DAT_DONE_MASK1 = new("CDMA_DAT_DONE_MASK1");
    this.CDMA_DAT_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_DAT_DONE_MASK1.configure(this, 1, 17, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_DAT_DONE_MASK1.add_def_property("spec_access", "rw");
    this.CDMA_DAT_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.CDMA_DAT_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.CDMA_DAT_DONE_MASK1.add_def_property("reset_mask", "0x1");
    this.CDMA_WT_DONE_MASK0 = new("CDMA_WT_DONE_MASK0");
    this.CDMA_WT_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_WT_DONE_MASK0.configure(this, 1, 18, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_WT_DONE_MASK0.add_def_property("spec_access", "rw");
    this.CDMA_WT_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.CDMA_WT_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.CDMA_WT_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.CDMA_WT_DONE_MASK1 = new("CDMA_WT_DONE_MASK1");
    this.CDMA_WT_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_WT_DONE_MASK1.configure(this, 1, 19, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_WT_DONE_MASK1.add_def_property("spec_access", "rw");
    this.CDMA_WT_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.CDMA_WT_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.CDMA_WT_DONE_MASK1.add_def_property("reset_mask", "0x1");
    this.CACC_DONE_MASK0 = new("CACC_DONE_MASK0");
    this.CACC_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CACC_DONE_MASK0.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.CACC_DONE_MASK0.add_def_property("spec_access", "rw");
    this.CACC_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.CACC_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.CACC_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.CACC_DONE_MASK1 = new("CACC_DONE_MASK1");
    this.CACC_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CACC_DONE_MASK1.configure(this, 1, 21, "RW", 0, 1'h0, 1, 1, 0);
    this.CACC_DONE_MASK1.add_def_property("spec_access", "rw");
    this.CACC_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.CACC_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.CACC_DONE_MASK1.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_DONE_MASK0"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "SDP_DONE_MASK1"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "CDP_DONE_MASK0"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "CDP_DONE_MASK1"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "PDP_DONE_MASK0"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "PDP_DONE_MASK1"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "BDMA_DONE_MASK0"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "BDMA_DONE_MASK1"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "RUBIK_DONE_MASK0"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "RUBIK_DONE_MASK1"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_DAT_DONE_MASK0"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_DAT_DONE_MASK1"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_WT_DONE_MASK0"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_WT_DONE_MASK1"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "CACC_DONE_MASK0"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "CACC_DONE_MASK1"}, 21, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_MASK

// S_INTR_SET
class reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_SET extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_DONE_SET0;
  rand uvm_reg_field_rdl SDP_DONE_SET1;
  rand uvm_reg_field_rdl CDP_DONE_SET0;
  rand uvm_reg_field_rdl CDP_DONE_SET1;
  rand uvm_reg_field_rdl PDP_DONE_SET0;
  rand uvm_reg_field_rdl PDP_DONE_SET1;
  rand uvm_reg_field_rdl BDMA_DONE_SET0;
  rand uvm_reg_field_rdl BDMA_DONE_SET1;
  rand uvm_reg_field_rdl RUBIK_DONE_SET0;
  rand uvm_reg_field_rdl RUBIK_DONE_SET1;
  rand uvm_reg_field_rdl CDMA_DAT_DONE_SET0;
  rand uvm_reg_field_rdl CDMA_DAT_DONE_SET1;
  rand uvm_reg_field_rdl CDMA_WT_DONE_SET0;
  rand uvm_reg_field_rdl CDMA_WT_DONE_SET1;
  rand uvm_reg_field_rdl CACC_DONE_SET0;
  rand uvm_reg_field_rdl CACC_DONE_SET1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_SET");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_DONE_SET0 = new("SDP_DONE_SET0");
    this.SDP_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.SDP_DONE_SET0.configure(this, 1, 0, "WO", 0, 1'h0, 1, 1, 0);
    this.SDP_DONE_SET0.add_def_property("spec_access", "wto");
    this.SDP_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.SDP_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.SDP_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.SDP_DONE_SET1 = new("SDP_DONE_SET1");
    this.SDP_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.SDP_DONE_SET1.configure(this, 1, 1, "WO", 0, 1'h0, 1, 1, 0);
    this.SDP_DONE_SET1.add_def_property("spec_access", "wo");
    this.SDP_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.SDP_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.SDP_DONE_SET1.add_def_property("reset_mask", "0x1");
    this.CDP_DONE_SET0 = new("CDP_DONE_SET0");
    this.CDP_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CDP_DONE_SET0.configure(this, 1, 2, "WO", 0, 1'h0, 1, 1, 0);
    this.CDP_DONE_SET0.add_def_property("spec_access", "wo");
    this.CDP_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.CDP_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.CDP_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.CDP_DONE_SET1 = new("CDP_DONE_SET1");
    this.CDP_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CDP_DONE_SET1.configure(this, 1, 3, "WO", 0, 1'h0, 1, 1, 0);
    this.CDP_DONE_SET1.add_def_property("spec_access", "wo");
    this.CDP_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.CDP_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.CDP_DONE_SET1.add_def_property("reset_mask", "0x1");
    this.PDP_DONE_SET0 = new("PDP_DONE_SET0");
    this.PDP_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.PDP_DONE_SET0.configure(this, 1, 4, "WO", 0, 1'h0, 1, 1, 0);
    this.PDP_DONE_SET0.add_def_property("spec_access", "wo");
    this.PDP_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.PDP_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.PDP_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.PDP_DONE_SET1 = new("PDP_DONE_SET1");
    this.PDP_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.PDP_DONE_SET1.configure(this, 1, 5, "WO", 0, 1'h0, 1, 1, 0);
    this.PDP_DONE_SET1.add_def_property("spec_access", "wo");
    this.PDP_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.PDP_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.PDP_DONE_SET1.add_def_property("reset_mask", "0x1");
    this.BDMA_DONE_SET0 = new("BDMA_DONE_SET0");
    this.BDMA_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.BDMA_DONE_SET0.configure(this, 1, 6, "WO", 0, 1'h0, 1, 1, 0);
    this.BDMA_DONE_SET0.add_def_property("spec_access", "wo");
    this.BDMA_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.BDMA_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.BDMA_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.BDMA_DONE_SET1 = new("BDMA_DONE_SET1");
    this.BDMA_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.BDMA_DONE_SET1.configure(this, 1, 7, "WO", 0, 1'h0, 1, 1, 0);
    this.BDMA_DONE_SET1.add_def_property("spec_access", "wo");
    this.BDMA_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.BDMA_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.BDMA_DONE_SET1.add_def_property("reset_mask", "0x1");
    this.RUBIK_DONE_SET0 = new("RUBIK_DONE_SET0");
    this.RUBIK_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.RUBIK_DONE_SET0.configure(this, 1, 8, "WO", 0, 1'h0, 1, 1, 0);
    this.RUBIK_DONE_SET0.add_def_property("spec_access", "wo");
    this.RUBIK_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.RUBIK_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.RUBIK_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.RUBIK_DONE_SET1 = new("RUBIK_DONE_SET1");
    this.RUBIK_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.RUBIK_DONE_SET1.configure(this, 1, 9, "WO", 0, 1'h0, 1, 1, 0);
    this.RUBIK_DONE_SET1.add_def_property("spec_access", "wo");
    this.RUBIK_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.RUBIK_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.RUBIK_DONE_SET1.add_def_property("reset_mask", "0x1");
    this.CDMA_DAT_DONE_SET0 = new("CDMA_DAT_DONE_SET0");
    this.CDMA_DAT_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CDMA_DAT_DONE_SET0.configure(this, 1, 16, "WO", 0, 1'h0, 1, 1, 0);
    this.CDMA_DAT_DONE_SET0.add_def_property("spec_access", "wo");
    this.CDMA_DAT_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.CDMA_DAT_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.CDMA_DAT_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.CDMA_DAT_DONE_SET1 = new("CDMA_DAT_DONE_SET1");
    this.CDMA_DAT_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CDMA_DAT_DONE_SET1.configure(this, 1, 17, "WO", 0, 1'h0, 1, 1, 0);
    this.CDMA_DAT_DONE_SET1.add_def_property("spec_access", "wo");
    this.CDMA_DAT_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.CDMA_DAT_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.CDMA_DAT_DONE_SET1.add_def_property("reset_mask", "0x1");
    this.CDMA_WT_DONE_SET0 = new("CDMA_WT_DONE_SET0");
    this.CDMA_WT_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CDMA_WT_DONE_SET0.configure(this, 1, 18, "WO", 0, 1'h0, 1, 1, 0);
    this.CDMA_WT_DONE_SET0.add_def_property("spec_access", "wo");
    this.CDMA_WT_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.CDMA_WT_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.CDMA_WT_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.CDMA_WT_DONE_SET1 = new("CDMA_WT_DONE_SET1");
    this.CDMA_WT_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CDMA_WT_DONE_SET1.configure(this, 1, 19, "WO", 0, 1'h0, 1, 1, 0);
    this.CDMA_WT_DONE_SET1.add_def_property("spec_access", "wo");
    this.CDMA_WT_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.CDMA_WT_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.CDMA_WT_DONE_SET1.add_def_property("reset_mask", "0x1");
    this.CACC_DONE_SET0 = new("CACC_DONE_SET0");
    this.CACC_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CACC_DONE_SET0.configure(this, 1, 20, "WO", 0, 1'h0, 1, 1, 0);
    this.CACC_DONE_SET0.add_def_property("spec_access", "wo");
    this.CACC_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.CACC_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.CACC_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.CACC_DONE_SET1 = new("CACC_DONE_SET1");
    this.CACC_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CACC_DONE_SET1.configure(this, 1, 21, "WO", 0, 1'h0, 1, 1, 0);
    this.CACC_DONE_SET1.add_def_property("spec_access", "wo");
    this.CACC_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.CACC_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.CACC_DONE_SET1.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_DONE_SET0"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "SDP_DONE_SET1"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "CDP_DONE_SET0"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "CDP_DONE_SET1"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "PDP_DONE_SET0"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "PDP_DONE_SET1"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "BDMA_DONE_SET0"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "BDMA_DONE_SET1"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "RUBIK_DONE_SET0"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "RUBIK_DONE_SET1"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_DAT_DONE_SET0"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_DAT_DONE_SET1"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_WT_DONE_SET0"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_WT_DONE_SET1"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "CACC_DONE_SET0"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "CACC_DONE_SET1"}, 21, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_SET

// S_INTR_STATUS
class reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_DONE_STATUS0;
  rand uvm_reg_field_rdl SDP_DONE_STATUS1;
  rand uvm_reg_field_rdl CDP_DONE_STATUS0;
  rand uvm_reg_field_rdl CDP_DONE_STATUS1;
  rand uvm_reg_field_rdl PDP_DONE_STATUS0;
  rand uvm_reg_field_rdl PDP_DONE_STATUS1;
  rand uvm_reg_field_rdl BDMA_DONE_STATUS0;
  rand uvm_reg_field_rdl BDMA_DONE_STATUS1;
  rand uvm_reg_field_rdl RUBIK_DONE_STATUS0;
  rand uvm_reg_field_rdl RUBIK_DONE_STATUS1;
  rand uvm_reg_field_rdl CDMA_DAT_DONE_STATUS0;
  rand uvm_reg_field_rdl CDMA_DAT_DONE_STATUS1;
  rand uvm_reg_field_rdl CDMA_WT_DONE_STATUS0;
  rand uvm_reg_field_rdl CDMA_WT_DONE_STATUS1;
  rand uvm_reg_field_rdl CACC_DONE_STATUS0;
  rand uvm_reg_field_rdl CACC_DONE_STATUS1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_DONE_STATUS0 = new("SDP_DONE_STATUS0");
    this.SDP_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SDP_DONE_STATUS0.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.SDP_DONE_STATUS0.add_def_property("spec_access", "rwto");
    this.SDP_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.SDP_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.SDP_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.SDP_DONE_STATUS1 = new("SDP_DONE_STATUS1");
    this.SDP_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SDP_DONE_STATUS1.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.SDP_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.SDP_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.SDP_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.SDP_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    this.CDP_DONE_STATUS0 = new("CDP_DONE_STATUS0");
    this.CDP_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDP_DONE_STATUS0.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.CDP_DONE_STATUS0.add_def_property("spec_access", "rwo");
    this.CDP_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.CDP_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.CDP_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.CDP_DONE_STATUS1 = new("CDP_DONE_STATUS1");
    this.CDP_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDP_DONE_STATUS1.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.CDP_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.CDP_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.CDP_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.CDP_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    this.PDP_DONE_STATUS0 = new("PDP_DONE_STATUS0");
    this.PDP_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PDP_DONE_STATUS0.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.PDP_DONE_STATUS0.add_def_property("spec_access", "rwo");
    this.PDP_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.PDP_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.PDP_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.PDP_DONE_STATUS1 = new("PDP_DONE_STATUS1");
    this.PDP_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PDP_DONE_STATUS1.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.PDP_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.PDP_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.PDP_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.PDP_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    this.BDMA_DONE_STATUS0 = new("BDMA_DONE_STATUS0");
    this.BDMA_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BDMA_DONE_STATUS0.configure(this, 1, 6, "RW", 0, 1'h0, 1, 1, 0);
    this.BDMA_DONE_STATUS0.add_def_property("spec_access", "rwo");
    this.BDMA_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.BDMA_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.BDMA_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.BDMA_DONE_STATUS1 = new("BDMA_DONE_STATUS1");
    this.BDMA_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BDMA_DONE_STATUS1.configure(this, 1, 7, "RW", 0, 1'h0, 1, 1, 0);
    this.BDMA_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.BDMA_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.BDMA_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.BDMA_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    this.RUBIK_DONE_STATUS0 = new("RUBIK_DONE_STATUS0");
    this.RUBIK_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RUBIK_DONE_STATUS0.configure(this, 1, 8, "RW", 0, 1'h0, 1, 1, 0);
    this.RUBIK_DONE_STATUS0.add_def_property("spec_access", "rwo");
    this.RUBIK_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.RUBIK_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.RUBIK_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.RUBIK_DONE_STATUS1 = new("RUBIK_DONE_STATUS1");
    this.RUBIK_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RUBIK_DONE_STATUS1.configure(this, 1, 9, "RW", 0, 1'h0, 1, 1, 0);
    this.RUBIK_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.RUBIK_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.RUBIK_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.RUBIK_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    this.CDMA_DAT_DONE_STATUS0 = new("CDMA_DAT_DONE_STATUS0");
    this.CDMA_DAT_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_DAT_DONE_STATUS0.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_DAT_DONE_STATUS0.add_def_property("spec_access", "rwo");
    this.CDMA_DAT_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.CDMA_DAT_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.CDMA_DAT_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.CDMA_DAT_DONE_STATUS1 = new("CDMA_DAT_DONE_STATUS1");
    this.CDMA_DAT_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_DAT_DONE_STATUS1.configure(this, 1, 17, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_DAT_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.CDMA_DAT_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.CDMA_DAT_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.CDMA_DAT_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    this.CDMA_WT_DONE_STATUS0 = new("CDMA_WT_DONE_STATUS0");
    this.CDMA_WT_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_WT_DONE_STATUS0.configure(this, 1, 18, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_WT_DONE_STATUS0.add_def_property("spec_access", "rwo");
    this.CDMA_WT_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.CDMA_WT_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.CDMA_WT_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.CDMA_WT_DONE_STATUS1 = new("CDMA_WT_DONE_STATUS1");
    this.CDMA_WT_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_WT_DONE_STATUS1.configure(this, 1, 19, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_WT_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.CDMA_WT_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.CDMA_WT_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.CDMA_WT_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    this.CACC_DONE_STATUS0 = new("CACC_DONE_STATUS0");
    this.CACC_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CACC_DONE_STATUS0.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.CACC_DONE_STATUS0.add_def_property("spec_access", "rwo");
    this.CACC_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.CACC_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.CACC_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.CACC_DONE_STATUS1 = new("CACC_DONE_STATUS1");
    this.CACC_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CACC_DONE_STATUS1.configure(this, 1, 21, "RW", 0, 1'h0, 1, 1, 0);
    this.CACC_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.CACC_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.CACC_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.CACC_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_DONE_STATUS0"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "SDP_DONE_STATUS1"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "CDP_DONE_STATUS0"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "CDP_DONE_STATUS1"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "PDP_DONE_STATUS0"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "PDP_DONE_STATUS1"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "BDMA_DONE_STATUS0"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "BDMA_DONE_STATUS1"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "RUBIK_DONE_STATUS0"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "RUBIK_DONE_STATUS1"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_DAT_DONE_STATUS0"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_DAT_DONE_STATUS1"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_WT_DONE_STATUS0"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_WT_DONE_STATUS1"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "CACC_DONE_STATUS0"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "CACC_DONE_STATUS1"}, 21, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_STATUS

// Block NVDLA_GLB
class block_addrmap_NVDLA_NVDLA_GLB extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_GLB_S_NVDLA_HW_VERSION S_NVDLA_HW_VERSION;
  rand reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_MASK S_INTR_MASK;
  rand reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_SET S_INTR_SET;
  rand reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_STATUS S_INTR_STATUS;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_GLB");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_NVDLA_HW_VERSION = new("S_NVDLA_HW_VERSION");
    this.S_NVDLA_HW_VERSION.configure(this, null, "");
    this.S_NVDLA_HW_VERSION.set_rdl_tag("S_NVDLA_HW_VERSION_");
    this.S_NVDLA_HW_VERSION.set_reg_test_info(0, 0, 0);
    this.S_NVDLA_HW_VERSION.build();
    this.default_map.add_reg(this.S_NVDLA_HW_VERSION, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_INTR_MASK = new("S_INTR_MASK");
    this.S_INTR_MASK.configure(this, null, "");
    this.S_INTR_MASK.set_rdl_tag("S_INTR_MASK_");
    this.S_INTR_MASK.set_reg_test_info(0, 0, 2);
    this.S_INTR_MASK.build();
    this.default_map.add_reg(this.S_INTR_MASK, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.S_INTR_SET = new("S_INTR_SET");
    this.S_INTR_SET.configure(this, null, "");
    this.S_INTR_SET.set_rdl_tag("S_INTR_SET_");
    this.S_INTR_SET.set_reg_test_info(0, 0, 2);
    this.S_INTR_SET.build();
    this.default_map.add_reg(this.S_INTR_SET, `UVM_REG_ADDR_WIDTH'h8, "WO", 0);
    this.S_INTR_STATUS = new("S_INTR_STATUS");
    this.S_INTR_STATUS.configure(this, null, "");
    this.S_INTR_STATUS.set_rdl_tag("S_INTR_STATUS_");
    this.S_INTR_STATUS.set_reg_test_info(0, 0, 2);
    this.S_INTR_STATUS.build();
    this.default_map.add_reg(this.S_INTR_STATUS, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_GLB)
endclass : block_addrmap_NVDLA_NVDLA_GLB

// CFG_RD_WEIGHT_0
class reg_addrmap_NVDLA_NVDLA_MCIF_CFG_RD_WEIGHT_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RD_WEIGHT_BDMA;
  rand uvm_reg_field_rdl RD_WEIGHT_SDP;
  rand uvm_reg_field_rdl RD_WEIGHT_PDP;
  rand uvm_reg_field_rdl RD_WEIGHT_CDP;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_MCIF_CFG_RD_WEIGHT_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RD_WEIGHT_BDMA = new("RD_WEIGHT_BDMA");
    this.RD_WEIGHT_BDMA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_BDMA.configure(this, 8, 0, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_BDMA.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_BDMA.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_BDMA.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_BDMA.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_SDP = new("RD_WEIGHT_SDP");
    this.RD_WEIGHT_SDP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_SDP.configure(this, 8, 8, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_SDP.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_SDP.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_SDP.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_SDP.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_PDP = new("RD_WEIGHT_PDP");
    this.RD_WEIGHT_PDP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_PDP.configure(this, 8, 16, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_PDP.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_PDP.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_PDP.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_PDP.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_CDP = new("RD_WEIGHT_CDP");
    this.RD_WEIGHT_CDP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_CDP.configure(this, 8, 24, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_CDP.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_CDP.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_CDP.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_CDP.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_BDMA"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_SDP"}, 8, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_PDP"}, 16, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_CDP"}, 24, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_MCIF_CFG_RD_WEIGHT_0

// CFG_RD_WEIGHT_1
class reg_addrmap_NVDLA_NVDLA_MCIF_CFG_RD_WEIGHT_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RD_WEIGHT_SDP_B;
  rand uvm_reg_field_rdl RD_WEIGHT_SDP_N;
  rand uvm_reg_field_rdl RD_WEIGHT_SDP_E;
  rand uvm_reg_field_rdl RD_WEIGHT_CDMA_DAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_MCIF_CFG_RD_WEIGHT_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RD_WEIGHT_SDP_B = new("RD_WEIGHT_SDP_B");
    this.RD_WEIGHT_SDP_B.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_SDP_B.configure(this, 8, 0, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_SDP_B.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_SDP_B.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_SDP_B.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_SDP_B.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_SDP_N = new("RD_WEIGHT_SDP_N");
    this.RD_WEIGHT_SDP_N.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_SDP_N.configure(this, 8, 8, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_SDP_N.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_SDP_N.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_SDP_N.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_SDP_N.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_SDP_E = new("RD_WEIGHT_SDP_E");
    this.RD_WEIGHT_SDP_E.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_SDP_E.configure(this, 8, 16, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_SDP_E.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_SDP_E.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_SDP_E.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_SDP_E.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_CDMA_DAT = new("RD_WEIGHT_CDMA_DAT");
    this.RD_WEIGHT_CDMA_DAT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_CDMA_DAT.configure(this, 8, 24, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_CDMA_DAT.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_CDMA_DAT.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_CDMA_DAT.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_CDMA_DAT.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_SDP_B"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_SDP_N"}, 8, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_SDP_E"}, 16, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_CDMA_DAT"}, 24, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_MCIF_CFG_RD_WEIGHT_1

// CFG_RD_WEIGHT_2
class reg_addrmap_NVDLA_NVDLA_MCIF_CFG_RD_WEIGHT_2 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RD_WEIGHT_CDMA_WT;
  rand uvm_reg_field_rdl RD_WEIGHT_RBK;
  rand uvm_reg_field_rdl RD_WEIGHT_RSV_1;
  rand uvm_reg_field_rdl RD_WEIGHT_RSV_0;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_MCIF_CFG_RD_WEIGHT_2");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RD_WEIGHT_CDMA_WT = new("RD_WEIGHT_CDMA_WT");
    this.RD_WEIGHT_CDMA_WT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_CDMA_WT.configure(this, 8, 0, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_CDMA_WT.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_CDMA_WT.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_CDMA_WT.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_CDMA_WT.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_RBK = new("RD_WEIGHT_RBK");
    this.RD_WEIGHT_RBK.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_RBK.configure(this, 8, 8, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_RBK.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_RBK.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_RBK.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_RBK.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_RSV_1 = new("RD_WEIGHT_RSV_1");
    this.RD_WEIGHT_RSV_1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_RSV_1.configure(this, 8, 16, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_RSV_1.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_RSV_1.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_RSV_1.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_RSV_1.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_RSV_0 = new("RD_WEIGHT_RSV_0");
    this.RD_WEIGHT_RSV_0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_RSV_0.configure(this, 8, 24, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_RSV_0.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_RSV_0.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_RSV_0.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_RSV_0.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_CDMA_WT"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_RBK"}, 8, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_RSV_1"}, 16, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_RSV_0"}, 24, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_MCIF_CFG_RD_WEIGHT_2

// CFG_WR_WEIGHT_0
class reg_addrmap_NVDLA_NVDLA_MCIF_CFG_WR_WEIGHT_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WR_WEIGHT_BDMA;
  rand uvm_reg_field_rdl WR_WEIGHT_SDP;
  rand uvm_reg_field_rdl WR_WEIGHT_PDP;
  rand uvm_reg_field_rdl WR_WEIGHT_CDP;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_MCIF_CFG_WR_WEIGHT_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WR_WEIGHT_BDMA = new("WR_WEIGHT_BDMA");
    this.WR_WEIGHT_BDMA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_BDMA.configure(this, 8, 0, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_BDMA.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_BDMA.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_BDMA.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_BDMA.add_def_property("reset_mask", "0xff");
    this.WR_WEIGHT_SDP = new("WR_WEIGHT_SDP");
    this.WR_WEIGHT_SDP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_SDP.configure(this, 8, 8, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_SDP.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_SDP.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_SDP.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_SDP.add_def_property("reset_mask", "0xff");
    this.WR_WEIGHT_PDP = new("WR_WEIGHT_PDP");
    this.WR_WEIGHT_PDP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_PDP.configure(this, 8, 16, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_PDP.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_PDP.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_PDP.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_PDP.add_def_property("reset_mask", "0xff");
    this.WR_WEIGHT_CDP = new("WR_WEIGHT_CDP");
    this.WR_WEIGHT_CDP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_CDP.configure(this, 8, 24, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_CDP.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_CDP.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_CDP.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_CDP.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_BDMA"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_SDP"}, 8, 8);
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_PDP"}, 16, 8);
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_CDP"}, 24, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_MCIF_CFG_WR_WEIGHT_0

// CFG_WR_WEIGHT_1
class reg_addrmap_NVDLA_NVDLA_MCIF_CFG_WR_WEIGHT_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WR_WEIGHT_RBK;
  rand uvm_reg_field_rdl WR_WEIGHT_RSV_2;
  rand uvm_reg_field_rdl WR_WEIGHT_RSV_1;
  rand uvm_reg_field_rdl WR_WEIGHT_RSV_0;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_MCIF_CFG_WR_WEIGHT_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WR_WEIGHT_RBK = new("WR_WEIGHT_RBK");
    this.WR_WEIGHT_RBK.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_RBK.configure(this, 8, 0, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_RBK.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_RBK.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_RBK.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_RBK.add_def_property("reset_mask", "0xff");
    this.WR_WEIGHT_RSV_2 = new("WR_WEIGHT_RSV_2");
    this.WR_WEIGHT_RSV_2.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_RSV_2.configure(this, 8, 8, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_RSV_2.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_RSV_2.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_RSV_2.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_RSV_2.add_def_property("reset_mask", "0xff");
    this.WR_WEIGHT_RSV_1 = new("WR_WEIGHT_RSV_1");
    this.WR_WEIGHT_RSV_1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_RSV_1.configure(this, 8, 16, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_RSV_1.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_RSV_1.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_RSV_1.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_RSV_1.add_def_property("reset_mask", "0xff");
    this.WR_WEIGHT_RSV_0 = new("WR_WEIGHT_RSV_0");
    this.WR_WEIGHT_RSV_0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_RSV_0.configure(this, 8, 24, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_RSV_0.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_RSV_0.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_RSV_0.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_RSV_0.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_RBK"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_RSV_2"}, 8, 8);
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_RSV_1"}, 16, 8);
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_RSV_0"}, 24, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_MCIF_CFG_WR_WEIGHT_1

// CFG_OUTSTANDING_CNT
class reg_addrmap_NVDLA_NVDLA_MCIF_CFG_OUTSTANDING_CNT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RD_OS_CNT;
  rand uvm_reg_field_rdl WR_OS_CNT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_MCIF_CFG_OUTSTANDING_CNT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RD_OS_CNT = new("RD_OS_CNT");
    this.RD_OS_CNT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_OS_CNT.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 0);
    this.RD_OS_CNT.add_def_property("spec_access", "rw");
    this.RD_OS_CNT.add_def_property("spec_sw_default", "0x0");
    this.RD_OS_CNT.add_def_property("sw_default_mask", "0x0");
    this.RD_OS_CNT.add_def_property("reset_mask", "0xff");
    this.WR_OS_CNT = new("WR_OS_CNT");
    this.WR_OS_CNT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_OS_CNT.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 0);
    this.WR_OS_CNT.add_def_property("spec_access", "rw");
    this.WR_OS_CNT.add_def_property("spec_sw_default", "0x0");
    this.WR_OS_CNT.add_def_property("sw_default_mask", "0x0");
    this.WR_OS_CNT.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RD_OS_CNT"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "WR_OS_CNT"}, 8, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_MCIF_CFG_OUTSTANDING_CNT

// STATUS
class reg_addrmap_NVDLA_NVDLA_MCIF_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl IDLE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_MCIF_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.IDLE = new("IDLE");
    this.IDLE.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.IDLE.configure(this, 1, 8, "RO", 1, 1'h1, 1, 0, 1);
    this.IDLE.add_def_property("spec_access", "r");
    this.IDLE.add_def_property("spec_sw_default", "0x0");
    this.IDLE.add_def_property("sw_default_mask", "0x0");
    this.IDLE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "IDLE"}, 8, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_MCIF_STATUS

// Block NVDLA_MCIF
class block_addrmap_NVDLA_NVDLA_MCIF extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_MCIF_CFG_RD_WEIGHT_0 CFG_RD_WEIGHT_0;
  rand reg_addrmap_NVDLA_NVDLA_MCIF_CFG_RD_WEIGHT_1 CFG_RD_WEIGHT_1;
  rand reg_addrmap_NVDLA_NVDLA_MCIF_CFG_RD_WEIGHT_2 CFG_RD_WEIGHT_2;
  rand reg_addrmap_NVDLA_NVDLA_MCIF_CFG_WR_WEIGHT_0 CFG_WR_WEIGHT_0;
  rand reg_addrmap_NVDLA_NVDLA_MCIF_CFG_WR_WEIGHT_1 CFG_WR_WEIGHT_1;
  rand reg_addrmap_NVDLA_NVDLA_MCIF_CFG_OUTSTANDING_CNT CFG_OUTSTANDING_CNT;
  rand reg_addrmap_NVDLA_NVDLA_MCIF_STATUS STATUS;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_MCIF");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.CFG_RD_WEIGHT_0 = new("CFG_RD_WEIGHT_0");
    this.CFG_RD_WEIGHT_0.configure(this, null, "");
    this.CFG_RD_WEIGHT_0.set_rdl_tag("CFG_RD_WEIGHT_0_");
    this.CFG_RD_WEIGHT_0.set_reg_test_info(0, 0, 2);
    this.CFG_RD_WEIGHT_0.build();
    this.default_map.add_reg(this.CFG_RD_WEIGHT_0, `UVM_REG_ADDR_WIDTH'h0, "RW", 0);
    this.CFG_RD_WEIGHT_1 = new("CFG_RD_WEIGHT_1");
    this.CFG_RD_WEIGHT_1.configure(this, null, "");
    this.CFG_RD_WEIGHT_1.set_rdl_tag("CFG_RD_WEIGHT_1_");
    this.CFG_RD_WEIGHT_1.set_reg_test_info(0, 0, 2);
    this.CFG_RD_WEIGHT_1.build();
    this.default_map.add_reg(this.CFG_RD_WEIGHT_1, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.CFG_RD_WEIGHT_2 = new("CFG_RD_WEIGHT_2");
    this.CFG_RD_WEIGHT_2.configure(this, null, "");
    this.CFG_RD_WEIGHT_2.set_rdl_tag("CFG_RD_WEIGHT_2_");
    this.CFG_RD_WEIGHT_2.set_reg_test_info(0, 0, 2);
    this.CFG_RD_WEIGHT_2.build();
    this.default_map.add_reg(this.CFG_RD_WEIGHT_2, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.CFG_WR_WEIGHT_0 = new("CFG_WR_WEIGHT_0");
    this.CFG_WR_WEIGHT_0.configure(this, null, "");
    this.CFG_WR_WEIGHT_0.set_rdl_tag("CFG_WR_WEIGHT_0_");
    this.CFG_WR_WEIGHT_0.set_reg_test_info(0, 0, 2);
    this.CFG_WR_WEIGHT_0.build();
    this.default_map.add_reg(this.CFG_WR_WEIGHT_0, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.CFG_WR_WEIGHT_1 = new("CFG_WR_WEIGHT_1");
    this.CFG_WR_WEIGHT_1.configure(this, null, "");
    this.CFG_WR_WEIGHT_1.set_rdl_tag("CFG_WR_WEIGHT_1_");
    this.CFG_WR_WEIGHT_1.set_reg_test_info(0, 0, 2);
    this.CFG_WR_WEIGHT_1.build();
    this.default_map.add_reg(this.CFG_WR_WEIGHT_1, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.CFG_OUTSTANDING_CNT = new("CFG_OUTSTANDING_CNT");
    this.CFG_OUTSTANDING_CNT.configure(this, null, "");
    this.CFG_OUTSTANDING_CNT.set_rdl_tag("CFG_OUTSTANDING_CNT_");
    this.CFG_OUTSTANDING_CNT.set_reg_test_info(0, 0, 2);
    this.CFG_OUTSTANDING_CNT.build();
    this.default_map.add_reg(this.CFG_OUTSTANDING_CNT, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.STATUS = new("STATUS");
    this.STATUS.configure(this, null, "");
    this.STATUS.set_rdl_tag("STATUS_");
    this.STATUS.set_reg_test_info(0, 0, 32);
    this.STATUS.build();
    this.default_map.add_reg(this.STATUS, `UVM_REG_ADDR_WIDTH'h18, "RO", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_MCIF)
endclass : block_addrmap_NVDLA_NVDLA_MCIF

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_CDMA_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_CDMA_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_S_POINTER

// S_ARBITER
class reg_addrmap_NVDLA_NVDLA_CDMA_S_ARBITER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ARB_WEIGHT;
  rand uvm_reg_field_rdl ARB_WMB;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_S_ARBITER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ARB_WEIGHT = new("ARB_WEIGHT");
    this.ARB_WEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ARB_WEIGHT.configure(this, 4, 0, "RW", 0, 4'hf, 1, 1, 0);
    this.ARB_WEIGHT.add_def_property("spec_access", "rw");
    this.ARB_WEIGHT.add_def_property("spec_sw_default", "0x0");
    this.ARB_WEIGHT.add_def_property("sw_default_mask", "0x0");
    this.ARB_WEIGHT.add_def_property("reset_mask", "0xf");
    this.ARB_WMB = new("ARB_WMB");
    this.ARB_WMB.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ARB_WMB.configure(this, 4, 16, "RW", 0, 4'h3, 1, 1, 0);
    this.ARB_WMB.add_def_property("spec_access", "rw");
    this.ARB_WMB.add_def_property("spec_sw_default", "0x0");
    this.ARB_WMB.add_def_property("sw_default_mask", "0x0");
    this.ARB_WMB.add_def_property("reset_mask", "0xf");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ARB_WEIGHT"}, 0, 4);
    add_hdl_path_slice({rdl_reg_name, "ARB_WMB"}, 16, 4);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_S_ARBITER

// S_CBUF_FLUSH_STATUS
class reg_addrmap_NVDLA_NVDLA_CDMA_S_CBUF_FLUSH_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl FLUSH_DONE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_S_CBUF_FLUSH_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.FLUSH_DONE = new("FLUSH_DONE");
    this.FLUSH_DONE.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.FLUSH_DONE.configure(this, 1, 0, "RO", 1, 1'h0, 1, 0, 1);
    this.FLUSH_DONE.add_def_property("spec_access", "r");
    this.FLUSH_DONE.add_def_property("spec_sw_default", "0x0");
    this.FLUSH_DONE.add_def_property("sw_default_mask", "0x0");
    this.FLUSH_DONE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "FLUSH_DONE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_S_CBUF_FLUSH_STATUS

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_OP_ENABLE

// D_MISC_CFG
class reg_addrmap_NVDLA_NVDLA_CDMA_D_MISC_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CONV_MODE;
  rand uvm_reg_field_rdl IN_PRECISION;
  rand uvm_reg_field_rdl PROC_PRECISION;
  rand uvm_reg_field_rdl DATA_REUSE;
  rand uvm_reg_field_rdl WEIGHT_REUSE;
  rand uvm_reg_field_rdl SKIP_DATA_RLS;
  rand uvm_reg_field_rdl SKIP_WEIGHT_RLS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_MISC_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CONV_MODE = new("CONV_MODE");
    this.CONV_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONV_MODE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.CONV_MODE.add_def_property("spec_access", "rw");
    this.CONV_MODE.add_def_property("spec_sw_default", "0x0");
    this.CONV_MODE.add_def_property("sw_default_mask", "0x0");
    this.CONV_MODE.add_def_property("reset_mask", "0x1");
    this.IN_PRECISION = new("IN_PRECISION");
    this.IN_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.IN_PRECISION.configure(this, 2, 8, "RW", 0, 2'h1, 1, 1, 0);
    this.IN_PRECISION.add_def_property("spec_access", "rw");
    this.IN_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.IN_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.IN_PRECISION.add_def_property("reset_mask", "0x3");
    this.PROC_PRECISION = new("PROC_PRECISION");
    this.PROC_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PROC_PRECISION.configure(this, 2, 12, "RW", 0, 2'h1, 1, 1, 0);
    this.PROC_PRECISION.add_def_property("spec_access", "rw");
    this.PROC_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.PROC_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.PROC_PRECISION.add_def_property("reset_mask", "0x3");
    this.DATA_REUSE = new("DATA_REUSE");
    this.DATA_REUSE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATA_REUSE.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.DATA_REUSE.add_def_property("spec_access", "rw");
    this.DATA_REUSE.add_def_property("spec_sw_default", "0x0");
    this.DATA_REUSE.add_def_property("sw_default_mask", "0x0");
    this.DATA_REUSE.add_def_property("reset_mask", "0x1");
    this.WEIGHT_REUSE = new("WEIGHT_REUSE");
    this.WEIGHT_REUSE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_REUSE.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.WEIGHT_REUSE.add_def_property("spec_access", "rw");
    this.WEIGHT_REUSE.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_REUSE.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_REUSE.add_def_property("reset_mask", "0x1");
    this.SKIP_DATA_RLS = new("SKIP_DATA_RLS");
    this.SKIP_DATA_RLS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SKIP_DATA_RLS.configure(this, 1, 24, "RW", 0, 1'h0, 1, 1, 0);
    this.SKIP_DATA_RLS.add_def_property("spec_access", "rw");
    this.SKIP_DATA_RLS.add_def_property("spec_sw_default", "0x0");
    this.SKIP_DATA_RLS.add_def_property("sw_default_mask", "0x0");
    this.SKIP_DATA_RLS.add_def_property("reset_mask", "0x1");
    this.SKIP_WEIGHT_RLS = new("SKIP_WEIGHT_RLS");
    this.SKIP_WEIGHT_RLS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SKIP_WEIGHT_RLS.configure(this, 1, 28, "RW", 0, 1'h0, 1, 1, 0);
    this.SKIP_WEIGHT_RLS.add_def_property("spec_access", "rw");
    this.SKIP_WEIGHT_RLS.add_def_property("spec_sw_default", "0x0");
    this.SKIP_WEIGHT_RLS.add_def_property("sw_default_mask", "0x0");
    this.SKIP_WEIGHT_RLS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CONV_MODE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "IN_PRECISION"}, 8, 2);
    add_hdl_path_slice({rdl_reg_name, "PROC_PRECISION"}, 12, 2);
    add_hdl_path_slice({rdl_reg_name, "DATA_REUSE"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_REUSE"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "SKIP_DATA_RLS"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "SKIP_WEIGHT_RLS"}, 28, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_MISC_CFG

// D_DATAIN_FORMAT
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_FORMAT;
  rand uvm_reg_field_rdl PIXEL_FORMAT;
  rand uvm_reg_field_rdl PIXEL_MAPPING;
  rand uvm_reg_field_rdl PIXEL_SIGN_OVERRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_FORMAT = new("DATAIN_FORMAT");
    this.DATAIN_FORMAT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_FORMAT.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.DATAIN_FORMAT.add_def_property("spec_access", "rw");
    this.DATAIN_FORMAT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_FORMAT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_FORMAT.add_def_property("reset_mask", "0x1");
    this.PIXEL_FORMAT = new("PIXEL_FORMAT");
    this.PIXEL_FORMAT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PIXEL_FORMAT.configure(this, 6, 8, "RW", 0, 6'hc, 1, 1, 0);
    this.PIXEL_FORMAT.add_def_property("spec_access", "rw");
    this.PIXEL_FORMAT.add_def_property("spec_sw_default", "0x0");
    this.PIXEL_FORMAT.add_def_property("sw_default_mask", "0x0");
    this.PIXEL_FORMAT.add_def_property("reset_mask", "0x3f");
    this.PIXEL_MAPPING = new("PIXEL_MAPPING");
    this.PIXEL_MAPPING.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PIXEL_MAPPING.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.PIXEL_MAPPING.add_def_property("spec_access", "rw");
    this.PIXEL_MAPPING.add_def_property("spec_sw_default", "0x0");
    this.PIXEL_MAPPING.add_def_property("sw_default_mask", "0x0");
    this.PIXEL_MAPPING.add_def_property("reset_mask", "0x1");
    this.PIXEL_SIGN_OVERRIDE = new("PIXEL_SIGN_OVERRIDE");
    this.PIXEL_SIGN_OVERRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PIXEL_SIGN_OVERRIDE.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.PIXEL_SIGN_OVERRIDE.add_def_property("spec_access", "rw");
    this.PIXEL_SIGN_OVERRIDE.add_def_property("spec_sw_default", "0x0");
    this.PIXEL_SIGN_OVERRIDE.add_def_property("sw_default_mask", "0x0");
    this.PIXEL_SIGN_OVERRIDE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_FORMAT"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "PIXEL_FORMAT"}, 8, 6);
    add_hdl_path_slice({rdl_reg_name, "PIXEL_MAPPING"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "PIXEL_SIGN_OVERRIDE"}, 20, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_FORMAT

// D_DATAIN_SIZE_0
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_WIDTH;
  rand uvm_reg_field_rdl DATAIN_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_WIDTH = new("DATAIN_WIDTH");
    this.DATAIN_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_WIDTH.add_def_property("spec_access", "rw");
    this.DATAIN_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_WIDTH.add_def_property("reset_mask", "0x1fff");
    this.DATAIN_HEIGHT = new("DATAIN_HEIGHT");
    this.DATAIN_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_HEIGHT.configure(this, 13, 16, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_HEIGHT.add_def_property("spec_access", "rw");
    this.DATAIN_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_WIDTH"}, 0, 13);
    add_hdl_path_slice({rdl_reg_name, "DATAIN_HEIGHT"}, 16, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_0

// D_DATAIN_SIZE_1
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_CHANNEL = new("DATAIN_CHANNEL");
    this.DATAIN_CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.DATAIN_CHANNEL.add_def_property("spec_access", "rw");
    this.DATAIN_CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_1

// D_DATAIN_SIZE_EXT_0
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_WIDTH_EXT;
  rand uvm_reg_field_rdl DATAIN_HEIGHT_EXT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_WIDTH_EXT = new("DATAIN_WIDTH_EXT");
    this.DATAIN_WIDTH_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_WIDTH_EXT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_WIDTH_EXT.add_def_property("spec_access", "rw");
    this.DATAIN_WIDTH_EXT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_WIDTH_EXT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_WIDTH_EXT.add_def_property("reset_mask", "0x1fff");
    this.DATAIN_HEIGHT_EXT = new("DATAIN_HEIGHT_EXT");
    this.DATAIN_HEIGHT_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_HEIGHT_EXT.configure(this, 13, 16, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_HEIGHT_EXT.add_def_property("spec_access", "rw");
    this.DATAIN_HEIGHT_EXT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_HEIGHT_EXT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_HEIGHT_EXT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_WIDTH_EXT"}, 0, 13);
    add_hdl_path_slice({rdl_reg_name, "DATAIN_HEIGHT_EXT"}, 16, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0

// D_PIXEL_OFFSET
class reg_addrmap_NVDLA_NVDLA_CDMA_D_PIXEL_OFFSET extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PIXEL_X_OFFSET;
  rand uvm_reg_field_rdl PIXEL_Y_OFFSET;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_PIXEL_OFFSET");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PIXEL_X_OFFSET = new("PIXEL_X_OFFSET");
    this.PIXEL_X_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PIXEL_X_OFFSET.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.PIXEL_X_OFFSET.add_def_property("spec_access", "rw");
    this.PIXEL_X_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.PIXEL_X_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.PIXEL_X_OFFSET.add_def_property("reset_mask", "0x1f");
    this.PIXEL_Y_OFFSET = new("PIXEL_Y_OFFSET");
    this.PIXEL_Y_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PIXEL_Y_OFFSET.configure(this, 3, 16, "RW", 0, 3'h0, 1, 1, 0);
    this.PIXEL_Y_OFFSET.add_def_property("spec_access", "rw");
    this.PIXEL_Y_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.PIXEL_Y_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.PIXEL_Y_OFFSET.add_def_property("reset_mask", "0x7");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PIXEL_X_OFFSET"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "PIXEL_Y_OFFSET"}, 16, 3);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_PIXEL_OFFSET

// D_DAIN_RAM_TYPE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_RAM_TYPE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_RAM_TYPE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_RAM_TYPE = new("DATAIN_RAM_TYPE");
    this.DATAIN_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DATAIN_RAM_TYPE.add_def_property("spec_access", "rw");
    this.DATAIN_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_RAM_TYPE

// D_DAIN_ADDR_HIGH_0
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_ADDR_HIGH_0;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_ADDR_HIGH_0 = new("DATAIN_ADDR_HIGH_0");
    this.DATAIN_ADDR_HIGH_0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_ADDR_HIGH_0.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DATAIN_ADDR_HIGH_0.add_def_property("spec_access", "rw");
    this.DATAIN_ADDR_HIGH_0.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_ADDR_HIGH_0.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_ADDR_HIGH_0.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_ADDR_HIGH_0"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0

// D_DAIN_ADDR_LOW_0
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_ADDR_LOW_0;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_ADDR_LOW_0 = new("DATAIN_ADDR_LOW_0");
    this.DATAIN_ADDR_LOW_0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_ADDR_LOW_0.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DATAIN_ADDR_LOW_0.add_def_property("spec_access", "rw");
    this.DATAIN_ADDR_LOW_0.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_ADDR_LOW_0.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_ADDR_LOW_0.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_ADDR_LOW_0"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_0

// D_DAIN_ADDR_HIGH_1
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_ADDR_HIGH_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_ADDR_HIGH_1 = new("DATAIN_ADDR_HIGH_1");
    this.DATAIN_ADDR_HIGH_1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_ADDR_HIGH_1.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DATAIN_ADDR_HIGH_1.add_def_property("spec_access", "rw");
    this.DATAIN_ADDR_HIGH_1.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_ADDR_HIGH_1.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_ADDR_HIGH_1.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_ADDR_HIGH_1"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1

// D_DAIN_ADDR_LOW_1
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_ADDR_LOW_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_ADDR_LOW_1 = new("DATAIN_ADDR_LOW_1");
    this.DATAIN_ADDR_LOW_1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_ADDR_LOW_1.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DATAIN_ADDR_LOW_1.add_def_property("spec_access", "rw");
    this.DATAIN_ADDR_LOW_1.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_ADDR_LOW_1.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_ADDR_LOW_1.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_ADDR_LOW_1"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_1

// D_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LINE_STRIDE = new("LINE_STRIDE");
    this.LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LINE_STRIDE.add_def_property("spec_access", "rw");
    this.LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_STRIDE

// D_LINE_UV_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_UV_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl UV_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_UV_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.UV_LINE_STRIDE = new("UV_LINE_STRIDE");
    this.UV_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.UV_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.UV_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.UV_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.UV_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.UV_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "UV_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_UV_STRIDE

// D_SURF_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_SURF_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SURF_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_SURF_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SURF_STRIDE = new("SURF_STRIDE");
    this.SURF_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SURF_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SURF_STRIDE.add_def_property("spec_access", "rw");
    this.SURF_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.SURF_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.SURF_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SURF_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_SURF_STRIDE

// D_DAIN_MAP
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_MAP extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LINE_PACKED;
  rand uvm_reg_field_rdl SURF_PACKED;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_MAP");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LINE_PACKED = new("LINE_PACKED");
    this.LINE_PACKED.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LINE_PACKED.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.LINE_PACKED.add_def_property("spec_access", "rw");
    this.LINE_PACKED.add_def_property("spec_sw_default", "0x0");
    this.LINE_PACKED.add_def_property("sw_default_mask", "0x0");
    this.LINE_PACKED.add_def_property("reset_mask", "0x1");
    this.SURF_PACKED = new("SURF_PACKED");
    this.SURF_PACKED.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SURF_PACKED.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.SURF_PACKED.add_def_property("spec_access", "rw");
    this.SURF_PACKED.add_def_property("spec_sw_default", "0x0");
    this.SURF_PACKED.add_def_property("sw_default_mask", "0x0");
    this.SURF_PACKED.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LINE_PACKED"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "SURF_PACKED"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_MAP

// D_RESERVED_X_CFG
class reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_X_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RSV_PER_LINE;
  rand uvm_reg_field_rdl RSV_PER_UV_LINE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_X_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RSV_PER_LINE = new("RSV_PER_LINE");
    this.RSV_PER_LINE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RSV_PER_LINE.configure(this, 10, 0, "RW", 0, 10'h0, 1, 1, 0);
    this.RSV_PER_LINE.add_def_property("spec_access", "rw");
    this.RSV_PER_LINE.add_def_property("spec_sw_default", "0x0");
    this.RSV_PER_LINE.add_def_property("sw_default_mask", "0x0");
    this.RSV_PER_LINE.add_def_property("reset_mask", "0x3ff");
    this.RSV_PER_UV_LINE = new("RSV_PER_UV_LINE");
    this.RSV_PER_UV_LINE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RSV_PER_UV_LINE.configure(this, 10, 16, "RW", 0, 10'h0, 1, 1, 0);
    this.RSV_PER_UV_LINE.add_def_property("spec_access", "rw");
    this.RSV_PER_UV_LINE.add_def_property("spec_sw_default", "0x0");
    this.RSV_PER_UV_LINE.add_def_property("sw_default_mask", "0x0");
    this.RSV_PER_UV_LINE.add_def_property("reset_mask", "0x3ff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RSV_PER_LINE"}, 0, 10);
    add_hdl_path_slice({rdl_reg_name, "RSV_PER_UV_LINE"}, 16, 10);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_X_CFG

// D_RESERVED_Y_CFG
class reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_Y_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RSV_HEIGHT;
  rand uvm_reg_field_rdl RSV_Y_INDEX;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_Y_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RSV_HEIGHT = new("RSV_HEIGHT");
    this.RSV_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RSV_HEIGHT.configure(this, 3, 0, "RW", 0, 3'h0, 1, 1, 0);
    this.RSV_HEIGHT.add_def_property("spec_access", "rw");
    this.RSV_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.RSV_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.RSV_HEIGHT.add_def_property("reset_mask", "0x7");
    this.RSV_Y_INDEX = new("RSV_Y_INDEX");
    this.RSV_Y_INDEX.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RSV_Y_INDEX.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.RSV_Y_INDEX.add_def_property("spec_access", "rw");
    this.RSV_Y_INDEX.add_def_property("spec_sw_default", "0x0");
    this.RSV_Y_INDEX.add_def_property("sw_default_mask", "0x0");
    this.RSV_Y_INDEX.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RSV_HEIGHT"}, 0, 3);
    add_hdl_path_slice({rdl_reg_name, "RSV_Y_INDEX"}, 16, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_Y_CFG

// D_BATCH_NUMBER
class reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_NUMBER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BATCHES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_NUMBER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BATCHES = new("BATCHES");
    this.BATCHES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BATCHES.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 1);
    this.BATCHES.add_def_property("spec_access", "rw");
    this.BATCHES.add_def_property("spec_sw_default", "0x0");
    this.BATCHES.add_def_property("sw_default_mask", "0x0");
    this.BATCHES.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BATCHES"}, 0, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_NUMBER

// D_BATCH_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BATCH_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BATCH_STRIDE = new("BATCH_STRIDE");
    this.BATCH_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BATCH_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BATCH_STRIDE.add_def_property("spec_access", "rw");
    this.BATCH_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.BATCH_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.BATCH_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BATCH_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_STRIDE

// D_ENTRY_PER_SLICE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_ENTRY_PER_SLICE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ENTRIES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_ENTRY_PER_SLICE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ENTRIES = new("ENTRIES");
    this.ENTRIES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ENTRIES.configure(this, 14, 0, "RW", 0, 14'h0, 1, 1, 1);
    this.ENTRIES.add_def_property("spec_access", "rw");
    this.ENTRIES.add_def_property("spec_sw_default", "0x0");
    this.ENTRIES.add_def_property("sw_default_mask", "0x0");
    this.ENTRIES.add_def_property("reset_mask", "0x3fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ENTRIES"}, 0, 14);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_ENTRY_PER_SLICE

// D_FETCH_GRAIN
class reg_addrmap_NVDLA_NVDLA_CDMA_D_FETCH_GRAIN extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl GRAINS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_FETCH_GRAIN");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.GRAINS = new("GRAINS");
    this.GRAINS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.GRAINS.configure(this, 12, 0, "RW", 0, 12'h0, 1, 1, 1);
    this.GRAINS.add_def_property("spec_access", "rw");
    this.GRAINS.add_def_property("spec_sw_default", "0x0");
    this.GRAINS.add_def_property("sw_default_mask", "0x0");
    this.GRAINS.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "GRAINS"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_FETCH_GRAIN

// D_WEIGHT_FORMAT
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_FORMAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_FORMAT = new("WEIGHT_FORMAT");
    this.WEIGHT_FORMAT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_FORMAT.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.WEIGHT_FORMAT.add_def_property("spec_access", "rw");
    this.WEIGHT_FORMAT.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_FORMAT.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_FORMAT.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_FORMAT"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_FORMAT

// D_WEIGHT_SIZE_0
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BYTE_PER_KERNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BYTE_PER_KERNEL = new("BYTE_PER_KERNEL");
    this.BYTE_PER_KERNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BYTE_PER_KERNEL.configure(this, 18, 0, "RW", 0, 18'h0, 1, 1, 1);
    this.BYTE_PER_KERNEL.add_def_property("spec_access", "rw");
    this.BYTE_PER_KERNEL.add_def_property("spec_sw_default", "0x0");
    this.BYTE_PER_KERNEL.add_def_property("sw_default_mask", "0x0");
    this.BYTE_PER_KERNEL.add_def_property("reset_mask", "0x3ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BYTE_PER_KERNEL"}, 0, 18);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_0

// D_WEIGHT_SIZE_1
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_KERNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_KERNEL = new("WEIGHT_KERNEL");
    this.WEIGHT_KERNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_KERNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.WEIGHT_KERNEL.add_def_property("spec_access", "rw");
    this.WEIGHT_KERNEL.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_KERNEL.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_KERNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_KERNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_1

// D_WEIGHT_RAM_TYPE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_RAM_TYPE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_RAM_TYPE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_RAM_TYPE = new("WEIGHT_RAM_TYPE");
    this.WEIGHT_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.WEIGHT_RAM_TYPE.add_def_property("spec_access", "rw");
    this.WEIGHT_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_RAM_TYPE

// D_WEIGHT_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_ADDR_HIGH = new("WEIGHT_ADDR_HIGH");
    this.WEIGHT_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WEIGHT_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.WEIGHT_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH

// D_WEIGHT_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_ADDR_LOW = new("WEIGHT_ADDR_LOW");
    this.WEIGHT_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WEIGHT_ADDR_LOW.add_def_property("spec_access", "rw");
    this.WEIGHT_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_LOW

// D_WEIGHT_BYTES
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_BYTES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_BYTES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_BYTES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_BYTES = new("WEIGHT_BYTES");
    this.WEIGHT_BYTES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_BYTES.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WEIGHT_BYTES.add_def_property("spec_access", "rw");
    this.WEIGHT_BYTES.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_BYTES.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_BYTES.add_def_property("reset_mask", "0x1ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_BYTES"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_BYTES

// D_WGS_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WGS_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WGS_ADDR_HIGH = new("WGS_ADDR_HIGH");
    this.WGS_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WGS_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WGS_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.WGS_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.WGS_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.WGS_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WGS_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_HIGH

// D_WGS_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WGS_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WGS_ADDR_LOW = new("WGS_ADDR_LOW");
    this.WGS_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WGS_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WGS_ADDR_LOW.add_def_property("spec_access", "rw");
    this.WGS_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.WGS_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.WGS_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WGS_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_LOW

// D_WMB_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WMB_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WMB_ADDR_HIGH = new("WMB_ADDR_HIGH");
    this.WMB_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WMB_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WMB_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.WMB_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.WMB_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.WMB_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WMB_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_HIGH

// D_WMB_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WMB_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WMB_ADDR_LOW = new("WMB_ADDR_LOW");
    this.WMB_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WMB_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WMB_ADDR_LOW.add_def_property("spec_access", "rw");
    this.WMB_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.WMB_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.WMB_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WMB_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_LOW

// D_WMB_BYTES
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_BYTES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WMB_BYTES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_BYTES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WMB_BYTES = new("WMB_BYTES");
    this.WMB_BYTES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WMB_BYTES.configure(this, 28, 0, "RW", 0, 28'h0, 1, 1, 1);
    this.WMB_BYTES.add_def_property("spec_access", "rw");
    this.WMB_BYTES.add_def_property("spec_sw_default", "0x0");
    this.WMB_BYTES.add_def_property("sw_default_mask", "0x0");
    this.WMB_BYTES.add_def_property("reset_mask", "0x1fffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WMB_BYTES"}, 0, 28);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_BYTES

// D_MEAN_FORMAT
class reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl MEAN_FORMAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.MEAN_FORMAT = new("MEAN_FORMAT");
    this.MEAN_FORMAT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.MEAN_FORMAT.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.MEAN_FORMAT.add_def_property("spec_access", "rw");
    this.MEAN_FORMAT.add_def_property("spec_sw_default", "0x0");
    this.MEAN_FORMAT.add_def_property("sw_default_mask", "0x0");
    this.MEAN_FORMAT.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "MEAN_FORMAT"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_FORMAT

// D_MEAN_GLOBAL_0
class reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl MEAN_RY;
  rand uvm_reg_field_rdl MEAN_GU;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.MEAN_RY = new("MEAN_RY");
    this.MEAN_RY.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.MEAN_RY.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 0);
    this.MEAN_RY.add_def_property("spec_access", "rw");
    this.MEAN_RY.add_def_property("spec_sw_default", "0x0");
    this.MEAN_RY.add_def_property("sw_default_mask", "0x0");
    this.MEAN_RY.add_def_property("reset_mask", "0xffff");
    this.MEAN_GU = new("MEAN_GU");
    this.MEAN_GU.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.MEAN_GU.configure(this, 16, 16, "RW", 0, 16'h0, 1, 1, 0);
    this.MEAN_GU.add_def_property("spec_access", "rw");
    this.MEAN_GU.add_def_property("spec_sw_default", "0x0");
    this.MEAN_GU.add_def_property("sw_default_mask", "0x0");
    this.MEAN_GU.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "MEAN_RY"}, 0, 16);
    add_hdl_path_slice({rdl_reg_name, "MEAN_GU"}, 16, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_0

// D_MEAN_GLOBAL_1
class reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl MEAN_BV;
  rand uvm_reg_field_rdl MEAN_AX;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.MEAN_BV = new("MEAN_BV");
    this.MEAN_BV.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.MEAN_BV.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 0);
    this.MEAN_BV.add_def_property("spec_access", "rw");
    this.MEAN_BV.add_def_property("spec_sw_default", "0x0");
    this.MEAN_BV.add_def_property("sw_default_mask", "0x0");
    this.MEAN_BV.add_def_property("reset_mask", "0xffff");
    this.MEAN_AX = new("MEAN_AX");
    this.MEAN_AX.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.MEAN_AX.configure(this, 16, 16, "RW", 0, 16'h0, 1, 1, 0);
    this.MEAN_AX.add_def_property("spec_access", "rw");
    this.MEAN_AX.add_def_property("spec_sw_default", "0x0");
    this.MEAN_AX.add_def_property("sw_default_mask", "0x0");
    this.MEAN_AX.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "MEAN_BV"}, 0, 16);
    add_hdl_path_slice({rdl_reg_name, "MEAN_AX"}, 16, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_1

// D_CVT_CFG
class reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CVT_EN;
  rand uvm_reg_field_rdl CVT_TRUNCATE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CVT_EN = new("CVT_EN");
    this.CVT_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CVT_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.CVT_EN.add_def_property("spec_access", "rw");
    this.CVT_EN.add_def_property("spec_sw_default", "0x0");
    this.CVT_EN.add_def_property("sw_default_mask", "0x0");
    this.CVT_EN.add_def_property("reset_mask", "0x1");
    this.CVT_TRUNCATE = new("CVT_TRUNCATE");
    this.CVT_TRUNCATE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CVT_TRUNCATE.configure(this, 6, 4, "RW", 0, 6'h0, 1, 1, 0);
    this.CVT_TRUNCATE.add_def_property("spec_access", "rw");
    this.CVT_TRUNCATE.add_def_property("spec_sw_default", "0x0");
    this.CVT_TRUNCATE.add_def_property("sw_default_mask", "0x0");
    this.CVT_TRUNCATE.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CVT_EN"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CVT_TRUNCATE"}, 4, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_CFG

// D_CVT_OFFSET
class reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_OFFSET extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CVT_OFFSET;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_OFFSET");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CVT_OFFSET = new("CVT_OFFSET");
    this.CVT_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CVT_OFFSET.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.CVT_OFFSET.add_def_property("spec_access", "rw");
    this.CVT_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.CVT_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.CVT_OFFSET.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CVT_OFFSET"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_OFFSET

// D_CVT_SCALE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CVT_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CVT_SCALE = new("CVT_SCALE");
    this.CVT_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CVT_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.CVT_SCALE.add_def_property("spec_access", "rw");
    this.CVT_SCALE.add_def_property("spec_sw_default", "0x0");
    this.CVT_SCALE.add_def_property("sw_default_mask", "0x0");
    this.CVT_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CVT_SCALE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_SCALE

// D_CONV_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_CONV_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CONV_X_STRIDE;
  rand uvm_reg_field_rdl CONV_Y_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_CONV_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CONV_X_STRIDE = new("CONV_X_STRIDE");
    this.CONV_X_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONV_X_STRIDE.configure(this, 3, 0, "RW", 0, 3'h0, 1, 1, 0);
    this.CONV_X_STRIDE.add_def_property("spec_access", "rw");
    this.CONV_X_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.CONV_X_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.CONV_X_STRIDE.add_def_property("reset_mask", "0x7");
    this.CONV_Y_STRIDE = new("CONV_Y_STRIDE");
    this.CONV_Y_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONV_Y_STRIDE.configure(this, 3, 16, "RW", 0, 3'h0, 1, 1, 0);
    this.CONV_Y_STRIDE.add_def_property("spec_access", "rw");
    this.CONV_Y_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.CONV_Y_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.CONV_Y_STRIDE.add_def_property("reset_mask", "0x7");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CONV_X_STRIDE"}, 0, 3);
    add_hdl_path_slice({rdl_reg_name, "CONV_Y_STRIDE"}, 16, 3);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_CONV_STRIDE

// D_ZERO_PADDING
class reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_LEFT;
  rand uvm_reg_field_rdl PAD_RIGHT;
  rand uvm_reg_field_rdl PAD_TOP;
  rand uvm_reg_field_rdl PAD_BOTTOM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_LEFT = new("PAD_LEFT");
    this.PAD_LEFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_LEFT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.PAD_LEFT.add_def_property("spec_access", "rw");
    this.PAD_LEFT.add_def_property("spec_sw_default", "0x0");
    this.PAD_LEFT.add_def_property("sw_default_mask", "0x0");
    this.PAD_LEFT.add_def_property("reset_mask", "0x1f");
    this.PAD_RIGHT = new("PAD_RIGHT");
    this.PAD_RIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_RIGHT.configure(this, 6, 8, "RW", 0, 6'h0, 1, 1, 0);
    this.PAD_RIGHT.add_def_property("spec_access", "rw");
    this.PAD_RIGHT.add_def_property("spec_sw_default", "0x0");
    this.PAD_RIGHT.add_def_property("sw_default_mask", "0x0");
    this.PAD_RIGHT.add_def_property("reset_mask", "0x3f");
    this.PAD_TOP = new("PAD_TOP");
    this.PAD_TOP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_TOP.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.PAD_TOP.add_def_property("spec_access", "rw");
    this.PAD_TOP.add_def_property("spec_sw_default", "0x0");
    this.PAD_TOP.add_def_property("sw_default_mask", "0x0");
    this.PAD_TOP.add_def_property("reset_mask", "0x1f");
    this.PAD_BOTTOM = new("PAD_BOTTOM");
    this.PAD_BOTTOM.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_BOTTOM.configure(this, 6, 24, "RW", 0, 6'h0, 1, 1, 0);
    this.PAD_BOTTOM.add_def_property("spec_access", "rw");
    this.PAD_BOTTOM.add_def_property("spec_sw_default", "0x0");
    this.PAD_BOTTOM.add_def_property("sw_default_mask", "0x0");
    this.PAD_BOTTOM.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_LEFT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "PAD_RIGHT"}, 8, 6);
    add_hdl_path_slice({rdl_reg_name, "PAD_TOP"}, 16, 5);
    add_hdl_path_slice({rdl_reg_name, "PAD_BOTTOM"}, 24, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING

// D_ZERO_PADDING_VALUE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE = new("PAD_VALUE");
    this.PAD_VALUE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.PAD_VALUE.add_def_property("spec_access", "rw");
    this.PAD_VALUE.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING_VALUE

// D_BANK
class reg_addrmap_NVDLA_NVDLA_CDMA_D_BANK extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATA_BANK;
  rand uvm_reg_field_rdl WEIGHT_BANK;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_BANK");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATA_BANK = new("DATA_BANK");
    this.DATA_BANK.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATA_BANK.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.DATA_BANK.add_def_property("spec_access", "rw");
    this.DATA_BANK.add_def_property("spec_sw_default", "0x0");
    this.DATA_BANK.add_def_property("sw_default_mask", "0x0");
    this.DATA_BANK.add_def_property("reset_mask", "0x1f");
    this.WEIGHT_BANK = new("WEIGHT_BANK");
    this.WEIGHT_BANK.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_BANK.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.WEIGHT_BANK.add_def_property("spec_access", "rw");
    this.WEIGHT_BANK.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_BANK.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_BANK.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATA_BANK"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_BANK"}, 16, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_BANK

// D_NAN_FLUSH_TO_ZERO
class reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_TO_ZERO;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_TO_ZERO = new("NAN_TO_ZERO");
    this.NAN_TO_ZERO.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NAN_TO_ZERO.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.NAN_TO_ZERO.add_def_property("spec_access", "rw");
    this.NAN_TO_ZERO.add_def_property("spec_sw_default", "0x0");
    this.NAN_TO_ZERO.add_def_property("sw_default_mask", "0x0");
    this.NAN_TO_ZERO.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_TO_ZERO"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO

// D_NAN_INPUT_DATA_NUM
class reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_DATA_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_DATA_NUM = new("NAN_DATA_NUM");
    this.NAN_DATA_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.NAN_DATA_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.NAN_DATA_NUM.add_def_property("spec_access", "r");
    this.NAN_DATA_NUM.add_def_property("spec_sw_default", "0x0");
    this.NAN_DATA_NUM.add_def_property("sw_default_mask", "0x0");
    this.NAN_DATA_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_DATA_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM

// D_NAN_INPUT_WEIGHT_NUM
class reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_WEIGHT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_WEIGHT_NUM = new("NAN_WEIGHT_NUM");
    this.NAN_WEIGHT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.NAN_WEIGHT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.NAN_WEIGHT_NUM.add_def_property("spec_access", "r");
    this.NAN_WEIGHT_NUM.add_def_property("spec_sw_default", "0x0");
    this.NAN_WEIGHT_NUM.add_def_property("sw_default_mask", "0x0");
    this.NAN_WEIGHT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_WEIGHT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM

// D_INF_INPUT_DATA_NUM
class reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_DATA_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl INF_DATA_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_DATA_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.INF_DATA_NUM = new("INF_DATA_NUM");
    this.INF_DATA_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.INF_DATA_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.INF_DATA_NUM.add_def_property("spec_access", "r");
    this.INF_DATA_NUM.add_def_property("spec_sw_default", "0x0");
    this.INF_DATA_NUM.add_def_property("sw_default_mask", "0x0");
    this.INF_DATA_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "INF_DATA_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_DATA_NUM

// D_INF_INPUT_WEIGHT_NUM
class reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl INF_WEIGHT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.INF_WEIGHT_NUM = new("INF_WEIGHT_NUM");
    this.INF_WEIGHT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.INF_WEIGHT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.INF_WEIGHT_NUM.add_def_property("spec_access", "r");
    this.INF_WEIGHT_NUM.add_def_property("spec_sw_default", "0x0");
    this.INF_WEIGHT_NUM.add_def_property("sw_default_mask", "0x0");
    this.INF_WEIGHT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "INF_WEIGHT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM

// D_PERF_ENABLE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DMA_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DMA_EN = new("DMA_EN");
    this.DMA_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DMA_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DMA_EN.add_def_property("spec_access", "rw");
    this.DMA_EN.add_def_property("spec_sw_default", "0x0");
    this.DMA_EN.add_def_property("sw_default_mask", "0x0");
    this.DMA_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DMA_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_ENABLE

// D_PERF_DAT_READ_STALL
class reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAT_RD_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAT_RD_STALL = new("DAT_RD_STALL");
    this.DAT_RD_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.DAT_RD_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.DAT_RD_STALL.add_def_property("spec_access", "r");
    this.DAT_RD_STALL.add_def_property("spec_sw_default", "0x0");
    this.DAT_RD_STALL.add_def_property("sw_default_mask", "0x0");
    this.DAT_RD_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAT_RD_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_STALL

// D_PERF_WT_READ_STALL
class reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WT_RD_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WT_RD_STALL = new("WT_RD_STALL");
    this.WT_RD_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.WT_RD_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.WT_RD_STALL.add_def_property("spec_access", "r");
    this.WT_RD_STALL.add_def_property("spec_sw_default", "0x0");
    this.WT_RD_STALL.add_def_property("sw_default_mask", "0x0");
    this.WT_RD_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WT_RD_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_STALL

// D_PERF_DAT_READ_LATENCY
class reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAT_RD_LATENCY;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAT_RD_LATENCY = new("DAT_RD_LATENCY");
    this.DAT_RD_LATENCY.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.DAT_RD_LATENCY.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.DAT_RD_LATENCY.add_def_property("spec_access", "r");
    this.DAT_RD_LATENCY.add_def_property("spec_sw_default", "0x0");
    this.DAT_RD_LATENCY.add_def_property("sw_default_mask", "0x0");
    this.DAT_RD_LATENCY.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAT_RD_LATENCY"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY

// D_PERF_WT_READ_LATENCY
class reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_LATENCY extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WT_RD_LATENCY;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_LATENCY");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WT_RD_LATENCY = new("WT_RD_LATENCY");
    this.WT_RD_LATENCY.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.WT_RD_LATENCY.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.WT_RD_LATENCY.add_def_property("spec_access", "r");
    this.WT_RD_LATENCY.add_def_property("spec_sw_default", "0x0");
    this.WT_RD_LATENCY.add_def_property("sw_default_mask", "0x0");
    this.WT_RD_LATENCY.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WT_RD_LATENCY"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_LATENCY

// D_CYA
class reg_addrmap_NVDLA_NVDLA_CDMA_D_CYA extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CYA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_CYA");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CYA = new("CYA");
    this.CYA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CYA.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.CYA.add_def_property("spec_access", "rw");
    this.CYA.add_def_property("spec_sw_default", "0x0");
    this.CYA.add_def_property("sw_default_mask", "0x0");
    this.CYA.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CYA"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_CYA

// Block NVDLA_CDMA
class block_addrmap_NVDLA_NVDLA_CDMA extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_S_ARBITER S_ARBITER;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_S_CBUF_FLUSH_STATUS S_CBUF_FLUSH_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_MISC_CFG D_MISC_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_FORMAT D_DATAIN_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_0 D_DATAIN_SIZE_0;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_1 D_DATAIN_SIZE_1;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0 D_DATAIN_SIZE_EXT_0;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_PIXEL_OFFSET D_PIXEL_OFFSET;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_RAM_TYPE D_DAIN_RAM_TYPE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0 D_DAIN_ADDR_HIGH_0;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_0 D_DAIN_ADDR_LOW_0;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1 D_DAIN_ADDR_HIGH_1;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_1 D_DAIN_ADDR_LOW_1;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_STRIDE D_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_UV_STRIDE D_LINE_UV_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_SURF_STRIDE D_SURF_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_MAP D_DAIN_MAP;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_X_CFG D_RESERVED_X_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_Y_CFG D_RESERVED_Y_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_NUMBER D_BATCH_NUMBER;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_STRIDE D_BATCH_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_ENTRY_PER_SLICE D_ENTRY_PER_SLICE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_FETCH_GRAIN D_FETCH_GRAIN;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_FORMAT D_WEIGHT_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_0 D_WEIGHT_SIZE_0;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_1 D_WEIGHT_SIZE_1;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_RAM_TYPE D_WEIGHT_RAM_TYPE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH D_WEIGHT_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_LOW D_WEIGHT_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_BYTES D_WEIGHT_BYTES;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_HIGH D_WGS_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_LOW D_WGS_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_HIGH D_WMB_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_LOW D_WMB_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_BYTES D_WMB_BYTES;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_FORMAT D_MEAN_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_0 D_MEAN_GLOBAL_0;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_1 D_MEAN_GLOBAL_1;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_CFG D_CVT_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_OFFSET D_CVT_OFFSET;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_SCALE D_CVT_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_CONV_STRIDE D_CONV_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING D_ZERO_PADDING;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING_VALUE D_ZERO_PADDING_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_BANK D_BANK;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO D_NAN_FLUSH_TO_ZERO;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM D_NAN_INPUT_DATA_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM D_NAN_INPUT_WEIGHT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_DATA_NUM D_INF_INPUT_DATA_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM D_INF_INPUT_WEIGHT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_ENABLE D_PERF_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_STALL D_PERF_DAT_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_STALL D_PERF_WT_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY D_PERF_DAT_READ_LATENCY;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_LATENCY D_PERF_WT_READ_LATENCY;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_CYA D_CYA;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_CDMA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.S_ARBITER = new("S_ARBITER");
    this.S_ARBITER.configure(this, null, "");
    this.S_ARBITER.set_rdl_tag("S_ARBITER_");
    this.S_ARBITER.set_reg_test_info(0, 0, 2);
    this.S_ARBITER.build();
    this.default_map.add_reg(this.S_ARBITER, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.S_CBUF_FLUSH_STATUS = new("S_CBUF_FLUSH_STATUS");
    this.S_CBUF_FLUSH_STATUS.configure(this, null, "");
    this.S_CBUF_FLUSH_STATUS.set_rdl_tag("S_CBUF_FLUSH_STATUS_");
    this.S_CBUF_FLUSH_STATUS.set_reg_test_info(0, 0, 32);
    this.S_CBUF_FLUSH_STATUS.build();
    this.default_map.add_reg(this.S_CBUF_FLUSH_STATUS, `UVM_REG_ADDR_WIDTH'hc, "RO", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.D_MISC_CFG = new("D_MISC_CFG");
    this.D_MISC_CFG.configure(this, null, "");
    this.D_MISC_CFG.set_rdl_tag("D_MISC_CFG_");
    this.D_MISC_CFG.set_reg_test_info(0, 0, 2);
    this.D_MISC_CFG.build();
    this.default_map.add_reg(this.D_MISC_CFG, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.D_DATAIN_FORMAT = new("D_DATAIN_FORMAT");
    this.D_DATAIN_FORMAT.configure(this, null, "");
    this.D_DATAIN_FORMAT.set_rdl_tag("D_DATAIN_FORMAT_");
    this.D_DATAIN_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_FORMAT.build();
    this.default_map.add_reg(this.D_DATAIN_FORMAT, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.D_DATAIN_SIZE_0 = new("D_DATAIN_SIZE_0");
    this.D_DATAIN_SIZE_0.configure(this, null, "");
    this.D_DATAIN_SIZE_0.set_rdl_tag("D_DATAIN_SIZE_0_");
    this.D_DATAIN_SIZE_0.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_SIZE_0.build();
    this.default_map.add_reg(this.D_DATAIN_SIZE_0, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.D_DATAIN_SIZE_1 = new("D_DATAIN_SIZE_1");
    this.D_DATAIN_SIZE_1.configure(this, null, "");
    this.D_DATAIN_SIZE_1.set_rdl_tag("D_DATAIN_SIZE_1_");
    this.D_DATAIN_SIZE_1.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_SIZE_1.build();
    this.default_map.add_reg(this.D_DATAIN_SIZE_1, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.D_DATAIN_SIZE_EXT_0 = new("D_DATAIN_SIZE_EXT_0");
    this.D_DATAIN_SIZE_EXT_0.configure(this, null, "");
    this.D_DATAIN_SIZE_EXT_0.set_rdl_tag("D_DATAIN_SIZE_EXT_0_");
    this.D_DATAIN_SIZE_EXT_0.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_SIZE_EXT_0.build();
    this.default_map.add_reg(this.D_DATAIN_SIZE_EXT_0, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.D_PIXEL_OFFSET = new("D_PIXEL_OFFSET");
    this.D_PIXEL_OFFSET.configure(this, null, "");
    this.D_PIXEL_OFFSET.set_rdl_tag("D_PIXEL_OFFSET_");
    this.D_PIXEL_OFFSET.set_reg_test_info(0, 0, 2);
    this.D_PIXEL_OFFSET.build();
    this.default_map.add_reg(this.D_PIXEL_OFFSET, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.D_DAIN_RAM_TYPE = new("D_DAIN_RAM_TYPE");
    this.D_DAIN_RAM_TYPE.configure(this, null, "");
    this.D_DAIN_RAM_TYPE.set_rdl_tag("D_DAIN_RAM_TYPE_");
    this.D_DAIN_RAM_TYPE.set_reg_test_info(0, 0, 2);
    this.D_DAIN_RAM_TYPE.build();
    this.default_map.add_reg(this.D_DAIN_RAM_TYPE, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.D_DAIN_ADDR_HIGH_0 = new("D_DAIN_ADDR_HIGH_0");
    this.D_DAIN_ADDR_HIGH_0.configure(this, null, "");
    this.D_DAIN_ADDR_HIGH_0.set_rdl_tag("D_DAIN_ADDR_HIGH_0_");
    this.D_DAIN_ADDR_HIGH_0.set_reg_test_info(0, 0, 2);
    this.D_DAIN_ADDR_HIGH_0.build();
    this.default_map.add_reg(this.D_DAIN_ADDR_HIGH_0, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.D_DAIN_ADDR_LOW_0 = new("D_DAIN_ADDR_LOW_0");
    this.D_DAIN_ADDR_LOW_0.configure(this, null, "");
    this.D_DAIN_ADDR_LOW_0.set_rdl_tag("D_DAIN_ADDR_LOW_0_");
    this.D_DAIN_ADDR_LOW_0.set_reg_test_info(0, 0, 2);
    this.D_DAIN_ADDR_LOW_0.build();
    this.default_map.add_reg(this.D_DAIN_ADDR_LOW_0, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.D_DAIN_ADDR_HIGH_1 = new("D_DAIN_ADDR_HIGH_1");
    this.D_DAIN_ADDR_HIGH_1.configure(this, null, "");
    this.D_DAIN_ADDR_HIGH_1.set_rdl_tag("D_DAIN_ADDR_HIGH_1_");
    this.D_DAIN_ADDR_HIGH_1.set_reg_test_info(0, 0, 2);
    this.D_DAIN_ADDR_HIGH_1.build();
    this.default_map.add_reg(this.D_DAIN_ADDR_HIGH_1, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.D_DAIN_ADDR_LOW_1 = new("D_DAIN_ADDR_LOW_1");
    this.D_DAIN_ADDR_LOW_1.configure(this, null, "");
    this.D_DAIN_ADDR_LOW_1.set_rdl_tag("D_DAIN_ADDR_LOW_1_");
    this.D_DAIN_ADDR_LOW_1.set_reg_test_info(0, 0, 2);
    this.D_DAIN_ADDR_LOW_1.build();
    this.default_map.add_reg(this.D_DAIN_ADDR_LOW_1, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.D_LINE_STRIDE = new("D_LINE_STRIDE");
    this.D_LINE_STRIDE.configure(this, null, "");
    this.D_LINE_STRIDE.set_rdl_tag("D_LINE_STRIDE_");
    this.D_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.D_LINE_UV_STRIDE = new("D_LINE_UV_STRIDE");
    this.D_LINE_UV_STRIDE.configure(this, null, "");
    this.D_LINE_UV_STRIDE.set_rdl_tag("D_LINE_UV_STRIDE_");
    this.D_LINE_UV_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_LINE_UV_STRIDE.build();
    this.default_map.add_reg(this.D_LINE_UV_STRIDE, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.D_SURF_STRIDE = new("D_SURF_STRIDE");
    this.D_SURF_STRIDE.configure(this, null, "");
    this.D_SURF_STRIDE.set_rdl_tag("D_SURF_STRIDE_");
    this.D_SURF_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_SURF_STRIDE.build();
    this.default_map.add_reg(this.D_SURF_STRIDE, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.D_DAIN_MAP = new("D_DAIN_MAP");
    this.D_DAIN_MAP.configure(this, null, "");
    this.D_DAIN_MAP.set_rdl_tag("D_DAIN_MAP_");
    this.D_DAIN_MAP.set_reg_test_info(0, 0, 2);
    this.D_DAIN_MAP.build();
    this.default_map.add_reg(this.D_DAIN_MAP, `UVM_REG_ADDR_WIDTH'h4c, "RW", 0);
    this.D_RESERVED_X_CFG = new("D_RESERVED_X_CFG");
    this.D_RESERVED_X_CFG.configure(this, null, "");
    this.D_RESERVED_X_CFG.set_rdl_tag("D_RESERVED_X_CFG_");
    this.D_RESERVED_X_CFG.set_reg_test_info(0, 0, 2);
    this.D_RESERVED_X_CFG.build();
    this.default_map.add_reg(this.D_RESERVED_X_CFG, `UVM_REG_ADDR_WIDTH'h50, "RW", 0);
    this.D_RESERVED_Y_CFG = new("D_RESERVED_Y_CFG");
    this.D_RESERVED_Y_CFG.configure(this, null, "");
    this.D_RESERVED_Y_CFG.set_rdl_tag("D_RESERVED_Y_CFG_");
    this.D_RESERVED_Y_CFG.set_reg_test_info(0, 0, 2);
    this.D_RESERVED_Y_CFG.build();
    this.default_map.add_reg(this.D_RESERVED_Y_CFG, `UVM_REG_ADDR_WIDTH'h54, "RW", 0);
    this.D_BATCH_NUMBER = new("D_BATCH_NUMBER");
    this.D_BATCH_NUMBER.configure(this, null, "");
    this.D_BATCH_NUMBER.set_rdl_tag("D_BATCH_NUMBER_");
    this.D_BATCH_NUMBER.set_reg_test_info(0, 0, 2);
    this.D_BATCH_NUMBER.build();
    this.default_map.add_reg(this.D_BATCH_NUMBER, `UVM_REG_ADDR_WIDTH'h58, "RW", 0);
    this.D_BATCH_STRIDE = new("D_BATCH_STRIDE");
    this.D_BATCH_STRIDE.configure(this, null, "");
    this.D_BATCH_STRIDE.set_rdl_tag("D_BATCH_STRIDE_");
    this.D_BATCH_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_BATCH_STRIDE.build();
    this.default_map.add_reg(this.D_BATCH_STRIDE, `UVM_REG_ADDR_WIDTH'h5c, "RW", 0);
    this.D_ENTRY_PER_SLICE = new("D_ENTRY_PER_SLICE");
    this.D_ENTRY_PER_SLICE.configure(this, null, "");
    this.D_ENTRY_PER_SLICE.set_rdl_tag("D_ENTRY_PER_SLICE_");
    this.D_ENTRY_PER_SLICE.set_reg_test_info(0, 0, 2);
    this.D_ENTRY_PER_SLICE.build();
    this.default_map.add_reg(this.D_ENTRY_PER_SLICE, `UVM_REG_ADDR_WIDTH'h60, "RW", 0);
    this.D_FETCH_GRAIN = new("D_FETCH_GRAIN");
    this.D_FETCH_GRAIN.configure(this, null, "");
    this.D_FETCH_GRAIN.set_rdl_tag("D_FETCH_GRAIN_");
    this.D_FETCH_GRAIN.set_reg_test_info(0, 0, 2);
    this.D_FETCH_GRAIN.build();
    this.default_map.add_reg(this.D_FETCH_GRAIN, `UVM_REG_ADDR_WIDTH'h64, "RW", 0);
    this.D_WEIGHT_FORMAT = new("D_WEIGHT_FORMAT");
    this.D_WEIGHT_FORMAT.configure(this, null, "");
    this.D_WEIGHT_FORMAT.set_rdl_tag("D_WEIGHT_FORMAT_");
    this.D_WEIGHT_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_FORMAT.build();
    this.default_map.add_reg(this.D_WEIGHT_FORMAT, `UVM_REG_ADDR_WIDTH'h68, "RW", 0);
    this.D_WEIGHT_SIZE_0 = new("D_WEIGHT_SIZE_0");
    this.D_WEIGHT_SIZE_0.configure(this, null, "");
    this.D_WEIGHT_SIZE_0.set_rdl_tag("D_WEIGHT_SIZE_0_");
    this.D_WEIGHT_SIZE_0.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_SIZE_0.build();
    this.default_map.add_reg(this.D_WEIGHT_SIZE_0, `UVM_REG_ADDR_WIDTH'h6c, "RW", 0);
    this.D_WEIGHT_SIZE_1 = new("D_WEIGHT_SIZE_1");
    this.D_WEIGHT_SIZE_1.configure(this, null, "");
    this.D_WEIGHT_SIZE_1.set_rdl_tag("D_WEIGHT_SIZE_1_");
    this.D_WEIGHT_SIZE_1.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_SIZE_1.build();
    this.default_map.add_reg(this.D_WEIGHT_SIZE_1, `UVM_REG_ADDR_WIDTH'h70, "RW", 0);
    this.D_WEIGHT_RAM_TYPE = new("D_WEIGHT_RAM_TYPE");
    this.D_WEIGHT_RAM_TYPE.configure(this, null, "");
    this.D_WEIGHT_RAM_TYPE.set_rdl_tag("D_WEIGHT_RAM_TYPE_");
    this.D_WEIGHT_RAM_TYPE.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_RAM_TYPE.build();
    this.default_map.add_reg(this.D_WEIGHT_RAM_TYPE, `UVM_REG_ADDR_WIDTH'h74, "RW", 0);
    this.D_WEIGHT_ADDR_HIGH = new("D_WEIGHT_ADDR_HIGH");
    this.D_WEIGHT_ADDR_HIGH.configure(this, null, "");
    this.D_WEIGHT_ADDR_HIGH.set_rdl_tag("D_WEIGHT_ADDR_HIGH_");
    this.D_WEIGHT_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_WEIGHT_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h78, "RW", 0);
    this.D_WEIGHT_ADDR_LOW = new("D_WEIGHT_ADDR_LOW");
    this.D_WEIGHT_ADDR_LOW.configure(this, null, "");
    this.D_WEIGHT_ADDR_LOW.set_rdl_tag("D_WEIGHT_ADDR_LOW_");
    this.D_WEIGHT_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_ADDR_LOW.build();
    this.default_map.add_reg(this.D_WEIGHT_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h7c, "RW", 0);
    this.D_WEIGHT_BYTES = new("D_WEIGHT_BYTES");
    this.D_WEIGHT_BYTES.configure(this, null, "");
    this.D_WEIGHT_BYTES.set_rdl_tag("D_WEIGHT_BYTES_");
    this.D_WEIGHT_BYTES.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_BYTES.build();
    this.default_map.add_reg(this.D_WEIGHT_BYTES, `UVM_REG_ADDR_WIDTH'h80, "RW", 0);
    this.D_WGS_ADDR_HIGH = new("D_WGS_ADDR_HIGH");
    this.D_WGS_ADDR_HIGH.configure(this, null, "");
    this.D_WGS_ADDR_HIGH.set_rdl_tag("D_WGS_ADDR_HIGH_");
    this.D_WGS_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_WGS_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_WGS_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h84, "RW", 0);
    this.D_WGS_ADDR_LOW = new("D_WGS_ADDR_LOW");
    this.D_WGS_ADDR_LOW.configure(this, null, "");
    this.D_WGS_ADDR_LOW.set_rdl_tag("D_WGS_ADDR_LOW_");
    this.D_WGS_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_WGS_ADDR_LOW.build();
    this.default_map.add_reg(this.D_WGS_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h88, "RW", 0);
    this.D_WMB_ADDR_HIGH = new("D_WMB_ADDR_HIGH");
    this.D_WMB_ADDR_HIGH.configure(this, null, "");
    this.D_WMB_ADDR_HIGH.set_rdl_tag("D_WMB_ADDR_HIGH_");
    this.D_WMB_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_WMB_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_WMB_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h8c, "RW", 0);
    this.D_WMB_ADDR_LOW = new("D_WMB_ADDR_LOW");
    this.D_WMB_ADDR_LOW.configure(this, null, "");
    this.D_WMB_ADDR_LOW.set_rdl_tag("D_WMB_ADDR_LOW_");
    this.D_WMB_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_WMB_ADDR_LOW.build();
    this.default_map.add_reg(this.D_WMB_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h90, "RW", 0);
    this.D_WMB_BYTES = new("D_WMB_BYTES");
    this.D_WMB_BYTES.configure(this, null, "");
    this.D_WMB_BYTES.set_rdl_tag("D_WMB_BYTES_");
    this.D_WMB_BYTES.set_reg_test_info(0, 0, 2);
    this.D_WMB_BYTES.build();
    this.default_map.add_reg(this.D_WMB_BYTES, `UVM_REG_ADDR_WIDTH'h94, "RW", 0);
    this.D_MEAN_FORMAT = new("D_MEAN_FORMAT");
    this.D_MEAN_FORMAT.configure(this, null, "");
    this.D_MEAN_FORMAT.set_rdl_tag("D_MEAN_FORMAT_");
    this.D_MEAN_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_MEAN_FORMAT.build();
    this.default_map.add_reg(this.D_MEAN_FORMAT, `UVM_REG_ADDR_WIDTH'h98, "RW", 0);
    this.D_MEAN_GLOBAL_0 = new("D_MEAN_GLOBAL_0");
    this.D_MEAN_GLOBAL_0.configure(this, null, "");
    this.D_MEAN_GLOBAL_0.set_rdl_tag("D_MEAN_GLOBAL_0_");
    this.D_MEAN_GLOBAL_0.set_reg_test_info(0, 0, 2);
    this.D_MEAN_GLOBAL_0.build();
    this.default_map.add_reg(this.D_MEAN_GLOBAL_0, `UVM_REG_ADDR_WIDTH'h9c, "RW", 0);
    this.D_MEAN_GLOBAL_1 = new("D_MEAN_GLOBAL_1");
    this.D_MEAN_GLOBAL_1.configure(this, null, "");
    this.D_MEAN_GLOBAL_1.set_rdl_tag("D_MEAN_GLOBAL_1_");
    this.D_MEAN_GLOBAL_1.set_reg_test_info(0, 0, 2);
    this.D_MEAN_GLOBAL_1.build();
    this.default_map.add_reg(this.D_MEAN_GLOBAL_1, `UVM_REG_ADDR_WIDTH'ha0, "RW", 0);
    this.D_CVT_CFG = new("D_CVT_CFG");
    this.D_CVT_CFG.configure(this, null, "");
    this.D_CVT_CFG.set_rdl_tag("D_CVT_CFG_");
    this.D_CVT_CFG.set_reg_test_info(0, 0, 2);
    this.D_CVT_CFG.build();
    this.default_map.add_reg(this.D_CVT_CFG, `UVM_REG_ADDR_WIDTH'ha4, "RW", 0);
    this.D_CVT_OFFSET = new("D_CVT_OFFSET");
    this.D_CVT_OFFSET.configure(this, null, "");
    this.D_CVT_OFFSET.set_rdl_tag("D_CVT_OFFSET_");
    this.D_CVT_OFFSET.set_reg_test_info(0, 0, 2);
    this.D_CVT_OFFSET.build();
    this.default_map.add_reg(this.D_CVT_OFFSET, `UVM_REG_ADDR_WIDTH'ha8, "RW", 0);
    this.D_CVT_SCALE = new("D_CVT_SCALE");
    this.D_CVT_SCALE.configure(this, null, "");
    this.D_CVT_SCALE.set_rdl_tag("D_CVT_SCALE_");
    this.D_CVT_SCALE.set_reg_test_info(0, 0, 2);
    this.D_CVT_SCALE.build();
    this.default_map.add_reg(this.D_CVT_SCALE, `UVM_REG_ADDR_WIDTH'hac, "RW", 0);
    this.D_CONV_STRIDE = new("D_CONV_STRIDE");
    this.D_CONV_STRIDE.configure(this, null, "");
    this.D_CONV_STRIDE.set_rdl_tag("D_CONV_STRIDE_");
    this.D_CONV_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_CONV_STRIDE.build();
    this.default_map.add_reg(this.D_CONV_STRIDE, `UVM_REG_ADDR_WIDTH'hb0, "RW", 0);
    this.D_ZERO_PADDING = new("D_ZERO_PADDING");
    this.D_ZERO_PADDING.configure(this, null, "");
    this.D_ZERO_PADDING.set_rdl_tag("D_ZERO_PADDING_");
    this.D_ZERO_PADDING.set_reg_test_info(0, 0, 2);
    this.D_ZERO_PADDING.build();
    this.default_map.add_reg(this.D_ZERO_PADDING, `UVM_REG_ADDR_WIDTH'hb4, "RW", 0);
    this.D_ZERO_PADDING_VALUE = new("D_ZERO_PADDING_VALUE");
    this.D_ZERO_PADDING_VALUE.configure(this, null, "");
    this.D_ZERO_PADDING_VALUE.set_rdl_tag("D_ZERO_PADDING_VALUE_");
    this.D_ZERO_PADDING_VALUE.set_reg_test_info(0, 0, 2);
    this.D_ZERO_PADDING_VALUE.build();
    this.default_map.add_reg(this.D_ZERO_PADDING_VALUE, `UVM_REG_ADDR_WIDTH'hb8, "RW", 0);
    this.D_BANK = new("D_BANK");
    this.D_BANK.configure(this, null, "");
    this.D_BANK.set_rdl_tag("D_BANK_");
    this.D_BANK.set_reg_test_info(0, 0, 2);
    this.D_BANK.build();
    this.default_map.add_reg(this.D_BANK, `UVM_REG_ADDR_WIDTH'hbc, "RW", 0);
    this.D_NAN_FLUSH_TO_ZERO = new("D_NAN_FLUSH_TO_ZERO");
    this.D_NAN_FLUSH_TO_ZERO.configure(this, null, "");
    this.D_NAN_FLUSH_TO_ZERO.set_rdl_tag("D_NAN_FLUSH_TO_ZERO_");
    this.D_NAN_FLUSH_TO_ZERO.set_reg_test_info(0, 0, 2);
    this.D_NAN_FLUSH_TO_ZERO.build();
    this.default_map.add_reg(this.D_NAN_FLUSH_TO_ZERO, `UVM_REG_ADDR_WIDTH'hc0, "RW", 0);
    this.D_NAN_INPUT_DATA_NUM = new("D_NAN_INPUT_DATA_NUM");
    this.D_NAN_INPUT_DATA_NUM.configure(this, null, "");
    this.D_NAN_INPUT_DATA_NUM.set_rdl_tag("D_NAN_INPUT_DATA_NUM_");
    this.D_NAN_INPUT_DATA_NUM.set_reg_test_info(0, 0, 32);
    this.D_NAN_INPUT_DATA_NUM.build();
    this.default_map.add_reg(this.D_NAN_INPUT_DATA_NUM, `UVM_REG_ADDR_WIDTH'hc4, "RO", 0);
    this.D_NAN_INPUT_WEIGHT_NUM = new("D_NAN_INPUT_WEIGHT_NUM");
    this.D_NAN_INPUT_WEIGHT_NUM.configure(this, null, "");
    this.D_NAN_INPUT_WEIGHT_NUM.set_rdl_tag("D_NAN_INPUT_WEIGHT_NUM_");
    this.D_NAN_INPUT_WEIGHT_NUM.set_reg_test_info(0, 0, 32);
    this.D_NAN_INPUT_WEIGHT_NUM.build();
    this.default_map.add_reg(this.D_NAN_INPUT_WEIGHT_NUM, `UVM_REG_ADDR_WIDTH'hc8, "RO", 0);
    this.D_INF_INPUT_DATA_NUM = new("D_INF_INPUT_DATA_NUM");
    this.D_INF_INPUT_DATA_NUM.configure(this, null, "");
    this.D_INF_INPUT_DATA_NUM.set_rdl_tag("D_INF_INPUT_DATA_NUM_");
    this.D_INF_INPUT_DATA_NUM.set_reg_test_info(0, 0, 32);
    this.D_INF_INPUT_DATA_NUM.build();
    this.default_map.add_reg(this.D_INF_INPUT_DATA_NUM, `UVM_REG_ADDR_WIDTH'hcc, "RO", 0);
    this.D_INF_INPUT_WEIGHT_NUM = new("D_INF_INPUT_WEIGHT_NUM");
    this.D_INF_INPUT_WEIGHT_NUM.configure(this, null, "");
    this.D_INF_INPUT_WEIGHT_NUM.set_rdl_tag("D_INF_INPUT_WEIGHT_NUM_");
    this.D_INF_INPUT_WEIGHT_NUM.set_reg_test_info(0, 0, 32);
    this.D_INF_INPUT_WEIGHT_NUM.build();
    this.default_map.add_reg(this.D_INF_INPUT_WEIGHT_NUM, `UVM_REG_ADDR_WIDTH'hd0, "RO", 0);
    this.D_PERF_ENABLE = new("D_PERF_ENABLE");
    this.D_PERF_ENABLE.configure(this, null, "");
    this.D_PERF_ENABLE.set_rdl_tag("D_PERF_ENABLE_");
    this.D_PERF_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_PERF_ENABLE.build();
    this.default_map.add_reg(this.D_PERF_ENABLE, `UVM_REG_ADDR_WIDTH'hd4, "RW", 0);
    this.D_PERF_DAT_READ_STALL = new("D_PERF_DAT_READ_STALL");
    this.D_PERF_DAT_READ_STALL.configure(this, null, "");
    this.D_PERF_DAT_READ_STALL.set_rdl_tag("D_PERF_DAT_READ_STALL_");
    this.D_PERF_DAT_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_DAT_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_DAT_READ_STALL, `UVM_REG_ADDR_WIDTH'hd8, "RO", 0);
    this.D_PERF_WT_READ_STALL = new("D_PERF_WT_READ_STALL");
    this.D_PERF_WT_READ_STALL.configure(this, null, "");
    this.D_PERF_WT_READ_STALL.set_rdl_tag("D_PERF_WT_READ_STALL_");
    this.D_PERF_WT_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_WT_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_WT_READ_STALL, `UVM_REG_ADDR_WIDTH'hdc, "RO", 0);
    this.D_PERF_DAT_READ_LATENCY = new("D_PERF_DAT_READ_LATENCY");
    this.D_PERF_DAT_READ_LATENCY.configure(this, null, "");
    this.D_PERF_DAT_READ_LATENCY.set_rdl_tag("D_PERF_DAT_READ_LATENCY_");
    this.D_PERF_DAT_READ_LATENCY.set_reg_test_info(0, 0, 32);
    this.D_PERF_DAT_READ_LATENCY.build();
    this.default_map.add_reg(this.D_PERF_DAT_READ_LATENCY, `UVM_REG_ADDR_WIDTH'he0, "RO", 0);
    this.D_PERF_WT_READ_LATENCY = new("D_PERF_WT_READ_LATENCY");
    this.D_PERF_WT_READ_LATENCY.configure(this, null, "");
    this.D_PERF_WT_READ_LATENCY.set_rdl_tag("D_PERF_WT_READ_LATENCY_");
    this.D_PERF_WT_READ_LATENCY.set_reg_test_info(0, 0, 32);
    this.D_PERF_WT_READ_LATENCY.build();
    this.default_map.add_reg(this.D_PERF_WT_READ_LATENCY, `UVM_REG_ADDR_WIDTH'he4, "RO", 0);
    this.D_CYA = new("D_CYA");
    this.D_CYA.configure(this, null, "");
    this.D_CYA.set_rdl_tag("D_CYA_");
    this.D_CYA.set_reg_test_info(0, 0, 2);
    this.D_CYA.build();
    this.default_map.add_reg(this.D_CYA, `UVM_REG_ADDR_WIDTH'he8, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_CDMA)
endclass : block_addrmap_NVDLA_NVDLA_CDMA

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_CSC_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_CSC_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_S_POINTER

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_CSC_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_OP_ENABLE

// D_MISC_CFG
class reg_addrmap_NVDLA_NVDLA_CSC_D_MISC_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CONV_MODE;
  rand uvm_reg_field_rdl IN_PRECISION;
  rand uvm_reg_field_rdl PROC_PRECISION;
  rand uvm_reg_field_rdl DATA_REUSE;
  rand uvm_reg_field_rdl WEIGHT_REUSE;
  rand uvm_reg_field_rdl SKIP_DATA_RLS;
  rand uvm_reg_field_rdl SKIP_WEIGHT_RLS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_MISC_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CONV_MODE = new("CONV_MODE");
    this.CONV_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONV_MODE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.CONV_MODE.add_def_property("spec_access", "rw");
    this.CONV_MODE.add_def_property("spec_sw_default", "0x0");
    this.CONV_MODE.add_def_property("sw_default_mask", "0x0");
    this.CONV_MODE.add_def_property("reset_mask", "0x1");
    this.IN_PRECISION = new("IN_PRECISION");
    this.IN_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.IN_PRECISION.configure(this, 2, 8, "RW", 0, 2'h1, 1, 1, 0);
    this.IN_PRECISION.add_def_property("spec_access", "rw");
    this.IN_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.IN_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.IN_PRECISION.add_def_property("reset_mask", "0x3");
    this.PROC_PRECISION = new("PROC_PRECISION");
    this.PROC_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PROC_PRECISION.configure(this, 2, 12, "RW", 0, 2'h1, 1, 1, 0);
    this.PROC_PRECISION.add_def_property("spec_access", "rw");
    this.PROC_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.PROC_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.PROC_PRECISION.add_def_property("reset_mask", "0x3");
    this.DATA_REUSE = new("DATA_REUSE");
    this.DATA_REUSE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATA_REUSE.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.DATA_REUSE.add_def_property("spec_access", "rw");
    this.DATA_REUSE.add_def_property("spec_sw_default", "0x0");
    this.DATA_REUSE.add_def_property("sw_default_mask", "0x0");
    this.DATA_REUSE.add_def_property("reset_mask", "0x1");
    this.WEIGHT_REUSE = new("WEIGHT_REUSE");
    this.WEIGHT_REUSE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_REUSE.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.WEIGHT_REUSE.add_def_property("spec_access", "rw");
    this.WEIGHT_REUSE.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_REUSE.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_REUSE.add_def_property("reset_mask", "0x1");
    this.SKIP_DATA_RLS = new("SKIP_DATA_RLS");
    this.SKIP_DATA_RLS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SKIP_DATA_RLS.configure(this, 1, 24, "RW", 0, 1'h0, 1, 1, 0);
    this.SKIP_DATA_RLS.add_def_property("spec_access", "rw");
    this.SKIP_DATA_RLS.add_def_property("spec_sw_default", "0x0");
    this.SKIP_DATA_RLS.add_def_property("sw_default_mask", "0x0");
    this.SKIP_DATA_RLS.add_def_property("reset_mask", "0x1");
    this.SKIP_WEIGHT_RLS = new("SKIP_WEIGHT_RLS");
    this.SKIP_WEIGHT_RLS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SKIP_WEIGHT_RLS.configure(this, 1, 28, "RW", 0, 1'h0, 1, 1, 0);
    this.SKIP_WEIGHT_RLS.add_def_property("spec_access", "rw");
    this.SKIP_WEIGHT_RLS.add_def_property("spec_sw_default", "0x0");
    this.SKIP_WEIGHT_RLS.add_def_property("sw_default_mask", "0x0");
    this.SKIP_WEIGHT_RLS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CONV_MODE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "IN_PRECISION"}, 8, 2);
    add_hdl_path_slice({rdl_reg_name, "PROC_PRECISION"}, 12, 2);
    add_hdl_path_slice({rdl_reg_name, "DATA_REUSE"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_REUSE"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "SKIP_DATA_RLS"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "SKIP_WEIGHT_RLS"}, 28, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_MISC_CFG

// D_DATAIN_FORMAT
class reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_FORMAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_FORMAT = new("DATAIN_FORMAT");
    this.DATAIN_FORMAT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_FORMAT.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DATAIN_FORMAT.add_def_property("spec_access", "rw");
    this.DATAIN_FORMAT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_FORMAT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_FORMAT.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_FORMAT"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_FORMAT

// D_DATAIN_SIZE_EXT_0
class reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_WIDTH_EXT;
  rand uvm_reg_field_rdl DATAIN_HEIGHT_EXT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_WIDTH_EXT = new("DATAIN_WIDTH_EXT");
    this.DATAIN_WIDTH_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_WIDTH_EXT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_WIDTH_EXT.add_def_property("spec_access", "rw");
    this.DATAIN_WIDTH_EXT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_WIDTH_EXT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_WIDTH_EXT.add_def_property("reset_mask", "0x1fff");
    this.DATAIN_HEIGHT_EXT = new("DATAIN_HEIGHT_EXT");
    this.DATAIN_HEIGHT_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_HEIGHT_EXT.configure(this, 13, 16, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_HEIGHT_EXT.add_def_property("spec_access", "rw");
    this.DATAIN_HEIGHT_EXT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_HEIGHT_EXT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_HEIGHT_EXT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_WIDTH_EXT"}, 0, 13);
    add_hdl_path_slice({rdl_reg_name, "DATAIN_HEIGHT_EXT"}, 16, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_0

// D_DATAIN_SIZE_EXT_1
class reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_CHANNEL_EXT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_CHANNEL_EXT = new("DATAIN_CHANNEL_EXT");
    this.DATAIN_CHANNEL_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_CHANNEL_EXT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.DATAIN_CHANNEL_EXT.add_def_property("spec_access", "rw");
    this.DATAIN_CHANNEL_EXT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_CHANNEL_EXT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_CHANNEL_EXT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_CHANNEL_EXT"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_1

// D_BATCH_NUMBER
class reg_addrmap_NVDLA_NVDLA_CSC_D_BATCH_NUMBER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BATCHES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_BATCH_NUMBER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BATCHES = new("BATCHES");
    this.BATCHES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BATCHES.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 1);
    this.BATCHES.add_def_property("spec_access", "rw");
    this.BATCHES.add_def_property("spec_sw_default", "0x0");
    this.BATCHES.add_def_property("sw_default_mask", "0x0");
    this.BATCHES.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BATCHES"}, 0, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_BATCH_NUMBER

// D_POST_Y_EXTENSION
class reg_addrmap_NVDLA_NVDLA_CSC_D_POST_Y_EXTENSION extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl Y_EXTENSION;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_POST_Y_EXTENSION");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.Y_EXTENSION = new("Y_EXTENSION");
    this.Y_EXTENSION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.Y_EXTENSION.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 1);
    this.Y_EXTENSION.add_def_property("spec_access", "rw");
    this.Y_EXTENSION.add_def_property("spec_sw_default", "0x0");
    this.Y_EXTENSION.add_def_property("sw_default_mask", "0x0");
    this.Y_EXTENSION.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "Y_EXTENSION"}, 0, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_POST_Y_EXTENSION

// D_ENTRY_PER_SLICE
class reg_addrmap_NVDLA_NVDLA_CSC_D_ENTRY_PER_SLICE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ENTRIES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_ENTRY_PER_SLICE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ENTRIES = new("ENTRIES");
    this.ENTRIES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ENTRIES.configure(this, 14, 0, "RW", 0, 14'h0, 1, 1, 1);
    this.ENTRIES.add_def_property("spec_access", "rw");
    this.ENTRIES.add_def_property("spec_sw_default", "0x0");
    this.ENTRIES.add_def_property("sw_default_mask", "0x0");
    this.ENTRIES.add_def_property("reset_mask", "0x3fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ENTRIES"}, 0, 14);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_ENTRY_PER_SLICE

// D_WEIGHT_FORMAT
class reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_FORMAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_FORMAT = new("WEIGHT_FORMAT");
    this.WEIGHT_FORMAT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_FORMAT.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.WEIGHT_FORMAT.add_def_property("spec_access", "rw");
    this.WEIGHT_FORMAT.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_FORMAT.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_FORMAT.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_FORMAT"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_FORMAT

// D_WEIGHT_SIZE_EXT_0
class reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_WIDTH_EXT;
  rand uvm_reg_field_rdl WEIGHT_HEIGHT_EXT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_WIDTH_EXT = new("WEIGHT_WIDTH_EXT");
    this.WEIGHT_WIDTH_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_WIDTH_EXT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.WEIGHT_WIDTH_EXT.add_def_property("spec_access", "rw");
    this.WEIGHT_WIDTH_EXT.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_WIDTH_EXT.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_WIDTH_EXT.add_def_property("reset_mask", "0x1f");
    this.WEIGHT_HEIGHT_EXT = new("WEIGHT_HEIGHT_EXT");
    this.WEIGHT_HEIGHT_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_HEIGHT_EXT.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.WEIGHT_HEIGHT_EXT.add_def_property("spec_access", "rw");
    this.WEIGHT_HEIGHT_EXT.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_HEIGHT_EXT.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_HEIGHT_EXT.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_WIDTH_EXT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_HEIGHT_EXT"}, 16, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0

// D_WEIGHT_SIZE_EXT_1
class reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_CHANNEL_EXT;
  rand uvm_reg_field_rdl WEIGHT_KERNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_CHANNEL_EXT = new("WEIGHT_CHANNEL_EXT");
    this.WEIGHT_CHANNEL_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_CHANNEL_EXT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 0);
    this.WEIGHT_CHANNEL_EXT.add_def_property("spec_access", "rw");
    this.WEIGHT_CHANNEL_EXT.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_CHANNEL_EXT.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_CHANNEL_EXT.add_def_property("reset_mask", "0x1fff");
    this.WEIGHT_KERNEL = new("WEIGHT_KERNEL");
    this.WEIGHT_KERNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_KERNEL.configure(this, 13, 16, "RW", 0, 13'h0, 1, 1, 0);
    this.WEIGHT_KERNEL.add_def_property("spec_access", "rw");
    this.WEIGHT_KERNEL.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_KERNEL.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_KERNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_CHANNEL_EXT"}, 0, 13);
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_KERNEL"}, 16, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1

// D_WEIGHT_BYTES
class reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_BYTES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_BYTES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_BYTES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_BYTES = new("WEIGHT_BYTES");
    this.WEIGHT_BYTES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_BYTES.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WEIGHT_BYTES.add_def_property("spec_access", "rw");
    this.WEIGHT_BYTES.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_BYTES.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_BYTES.add_def_property("reset_mask", "0x1ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_BYTES"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_BYTES

// D_WMB_BYTES
class reg_addrmap_NVDLA_NVDLA_CSC_D_WMB_BYTES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WMB_BYTES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_WMB_BYTES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WMB_BYTES = new("WMB_BYTES");
    this.WMB_BYTES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WMB_BYTES.configure(this, 28, 0, "RW", 0, 28'h0, 1, 1, 1);
    this.WMB_BYTES.add_def_property("spec_access", "rw");
    this.WMB_BYTES.add_def_property("spec_sw_default", "0x0");
    this.WMB_BYTES.add_def_property("sw_default_mask", "0x0");
    this.WMB_BYTES.add_def_property("reset_mask", "0x1fffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WMB_BYTES"}, 0, 28);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_WMB_BYTES

// D_DATAOUT_SIZE_0
class reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAOUT_WIDTH;
  rand uvm_reg_field_rdl DATAOUT_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAOUT_WIDTH = new("DATAOUT_WIDTH");
    this.DATAOUT_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAOUT_WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAOUT_WIDTH.add_def_property("spec_access", "rw");
    this.DATAOUT_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.DATAOUT_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.DATAOUT_WIDTH.add_def_property("reset_mask", "0x1fff");
    this.DATAOUT_HEIGHT = new("DATAOUT_HEIGHT");
    this.DATAOUT_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAOUT_HEIGHT.configure(this, 13, 16, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAOUT_HEIGHT.add_def_property("spec_access", "rw");
    this.DATAOUT_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.DATAOUT_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.DATAOUT_HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAOUT_WIDTH"}, 0, 13);
    add_hdl_path_slice({rdl_reg_name, "DATAOUT_HEIGHT"}, 16, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_0

// D_DATAOUT_SIZE_1
class reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAOUT_CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAOUT_CHANNEL = new("DATAOUT_CHANNEL");
    this.DATAOUT_CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAOUT_CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.DATAOUT_CHANNEL.add_def_property("spec_access", "rw");
    this.DATAOUT_CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.DATAOUT_CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.DATAOUT_CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAOUT_CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_1

// D_ATOMICS
class reg_addrmap_NVDLA_NVDLA_CSC_D_ATOMICS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ATOMICS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_ATOMICS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ATOMICS = new("ATOMICS");
    this.ATOMICS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ATOMICS.configure(this, 21, 0, "RW", 0, 21'h1, 1, 1, 1);
    this.ATOMICS.add_def_property("spec_access", "rw");
    this.ATOMICS.add_def_property("spec_sw_default", "0x0");
    this.ATOMICS.add_def_property("sw_default_mask", "0x0");
    this.ATOMICS.add_def_property("reset_mask", "0x1fffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ATOMICS"}, 0, 21);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_ATOMICS

// D_RELEASE
class reg_addrmap_NVDLA_NVDLA_CSC_D_RELEASE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RLS_SLICES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_RELEASE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RLS_SLICES = new("RLS_SLICES");
    this.RLS_SLICES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RLS_SLICES.configure(this, 12, 0, "RW", 0, 12'h1, 1, 1, 1);
    this.RLS_SLICES.add_def_property("spec_access", "rw");
    this.RLS_SLICES.add_def_property("spec_sw_default", "0x0");
    this.RLS_SLICES.add_def_property("sw_default_mask", "0x0");
    this.RLS_SLICES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RLS_SLICES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_RELEASE

// D_CONV_STRIDE_EXT
class reg_addrmap_NVDLA_NVDLA_CSC_D_CONV_STRIDE_EXT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CONV_X_STRIDE_EXT;
  rand uvm_reg_field_rdl CONV_Y_STRIDE_EXT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_CONV_STRIDE_EXT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CONV_X_STRIDE_EXT = new("CONV_X_STRIDE_EXT");
    this.CONV_X_STRIDE_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONV_X_STRIDE_EXT.configure(this, 3, 0, "RW", 0, 3'h0, 1, 1, 0);
    this.CONV_X_STRIDE_EXT.add_def_property("spec_access", "rw");
    this.CONV_X_STRIDE_EXT.add_def_property("spec_sw_default", "0x0");
    this.CONV_X_STRIDE_EXT.add_def_property("sw_default_mask", "0x0");
    this.CONV_X_STRIDE_EXT.add_def_property("reset_mask", "0x7");
    this.CONV_Y_STRIDE_EXT = new("CONV_Y_STRIDE_EXT");
    this.CONV_Y_STRIDE_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONV_Y_STRIDE_EXT.configure(this, 3, 16, "RW", 0, 3'h0, 1, 1, 0);
    this.CONV_Y_STRIDE_EXT.add_def_property("spec_access", "rw");
    this.CONV_Y_STRIDE_EXT.add_def_property("spec_sw_default", "0x0");
    this.CONV_Y_STRIDE_EXT.add_def_property("sw_default_mask", "0x0");
    this.CONV_Y_STRIDE_EXT.add_def_property("reset_mask", "0x7");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CONV_X_STRIDE_EXT"}, 0, 3);
    add_hdl_path_slice({rdl_reg_name, "CONV_Y_STRIDE_EXT"}, 16, 3);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_CONV_STRIDE_EXT

// D_DILATION_EXT
class reg_addrmap_NVDLA_NVDLA_CSC_D_DILATION_EXT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl X_DILATION_EXT;
  rand uvm_reg_field_rdl Y_DILATION_EXT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_DILATION_EXT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.X_DILATION_EXT = new("X_DILATION_EXT");
    this.X_DILATION_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.X_DILATION_EXT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.X_DILATION_EXT.add_def_property("spec_access", "rw");
    this.X_DILATION_EXT.add_def_property("spec_sw_default", "0x0");
    this.X_DILATION_EXT.add_def_property("sw_default_mask", "0x0");
    this.X_DILATION_EXT.add_def_property("reset_mask", "0x1f");
    this.Y_DILATION_EXT = new("Y_DILATION_EXT");
    this.Y_DILATION_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.Y_DILATION_EXT.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.Y_DILATION_EXT.add_def_property("spec_access", "rw");
    this.Y_DILATION_EXT.add_def_property("spec_sw_default", "0x0");
    this.Y_DILATION_EXT.add_def_property("sw_default_mask", "0x0");
    this.Y_DILATION_EXT.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "X_DILATION_EXT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "Y_DILATION_EXT"}, 16, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_DILATION_EXT

// D_ZERO_PADDING
class reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_LEFT;
  rand uvm_reg_field_rdl PAD_TOP;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_LEFT = new("PAD_LEFT");
    this.PAD_LEFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_LEFT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.PAD_LEFT.add_def_property("spec_access", "rw");
    this.PAD_LEFT.add_def_property("spec_sw_default", "0x0");
    this.PAD_LEFT.add_def_property("sw_default_mask", "0x0");
    this.PAD_LEFT.add_def_property("reset_mask", "0x1f");
    this.PAD_TOP = new("PAD_TOP");
    this.PAD_TOP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_TOP.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.PAD_TOP.add_def_property("spec_access", "rw");
    this.PAD_TOP.add_def_property("spec_sw_default", "0x0");
    this.PAD_TOP.add_def_property("sw_default_mask", "0x0");
    this.PAD_TOP.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_LEFT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "PAD_TOP"}, 16, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING

// D_ZERO_PADDING_VALUE
class reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE = new("PAD_VALUE");
    this.PAD_VALUE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.PAD_VALUE.add_def_property("spec_access", "rw");
    this.PAD_VALUE.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING_VALUE

// D_BANK
class reg_addrmap_NVDLA_NVDLA_CSC_D_BANK extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATA_BANK;
  rand uvm_reg_field_rdl WEIGHT_BANK;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_BANK");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATA_BANK = new("DATA_BANK");
    this.DATA_BANK.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATA_BANK.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.DATA_BANK.add_def_property("spec_access", "rw");
    this.DATA_BANK.add_def_property("spec_sw_default", "0x0");
    this.DATA_BANK.add_def_property("sw_default_mask", "0x0");
    this.DATA_BANK.add_def_property("reset_mask", "0x1f");
    this.WEIGHT_BANK = new("WEIGHT_BANK");
    this.WEIGHT_BANK.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_BANK.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.WEIGHT_BANK.add_def_property("spec_access", "rw");
    this.WEIGHT_BANK.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_BANK.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_BANK.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATA_BANK"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_BANK"}, 16, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_BANK

// D_PRA_CFG
class reg_addrmap_NVDLA_NVDLA_CSC_D_PRA_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRA_TRUNCATE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_PRA_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRA_TRUNCATE = new("PRA_TRUNCATE");
    this.PRA_TRUNCATE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRA_TRUNCATE.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 1);
    this.PRA_TRUNCATE.add_def_property("spec_access", "rw");
    this.PRA_TRUNCATE.add_def_property("spec_sw_default", "0x0");
    this.PRA_TRUNCATE.add_def_property("sw_default_mask", "0x0");
    this.PRA_TRUNCATE.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRA_TRUNCATE"}, 0, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_PRA_CFG

// D_CYA
class reg_addrmap_NVDLA_NVDLA_CSC_D_CYA extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CYA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_CYA");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CYA = new("CYA");
    this.CYA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CYA.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.CYA.add_def_property("spec_access", "rw");
    this.CYA.add_def_property("spec_sw_default", "0x0");
    this.CYA.add_def_property("sw_default_mask", "0x0");
    this.CYA.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CYA"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_CYA

// Block NVDLA_CSC
class block_addrmap_NVDLA_NVDLA_CSC extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_CSC_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_CSC_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_MISC_CFG D_MISC_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_FORMAT D_DATAIN_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_0 D_DATAIN_SIZE_EXT_0;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_1 D_DATAIN_SIZE_EXT_1;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_BATCH_NUMBER D_BATCH_NUMBER;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_POST_Y_EXTENSION D_POST_Y_EXTENSION;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_ENTRY_PER_SLICE D_ENTRY_PER_SLICE;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_FORMAT D_WEIGHT_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0 D_WEIGHT_SIZE_EXT_0;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1 D_WEIGHT_SIZE_EXT_1;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_BYTES D_WEIGHT_BYTES;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_WMB_BYTES D_WMB_BYTES;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_0 D_DATAOUT_SIZE_0;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_1 D_DATAOUT_SIZE_1;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_ATOMICS D_ATOMICS;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_RELEASE D_RELEASE;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_CONV_STRIDE_EXT D_CONV_STRIDE_EXT;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_DILATION_EXT D_DILATION_EXT;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING D_ZERO_PADDING;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING_VALUE D_ZERO_PADDING_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_BANK D_BANK;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_PRA_CFG D_PRA_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_CYA D_CYA;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_CSC");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.D_MISC_CFG = new("D_MISC_CFG");
    this.D_MISC_CFG.configure(this, null, "");
    this.D_MISC_CFG.set_rdl_tag("D_MISC_CFG_");
    this.D_MISC_CFG.set_reg_test_info(0, 0, 2);
    this.D_MISC_CFG.build();
    this.default_map.add_reg(this.D_MISC_CFG, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.D_DATAIN_FORMAT = new("D_DATAIN_FORMAT");
    this.D_DATAIN_FORMAT.configure(this, null, "");
    this.D_DATAIN_FORMAT.set_rdl_tag("D_DATAIN_FORMAT_");
    this.D_DATAIN_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_FORMAT.build();
    this.default_map.add_reg(this.D_DATAIN_FORMAT, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.D_DATAIN_SIZE_EXT_0 = new("D_DATAIN_SIZE_EXT_0");
    this.D_DATAIN_SIZE_EXT_0.configure(this, null, "");
    this.D_DATAIN_SIZE_EXT_0.set_rdl_tag("D_DATAIN_SIZE_EXT_0_");
    this.D_DATAIN_SIZE_EXT_0.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_SIZE_EXT_0.build();
    this.default_map.add_reg(this.D_DATAIN_SIZE_EXT_0, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.D_DATAIN_SIZE_EXT_1 = new("D_DATAIN_SIZE_EXT_1");
    this.D_DATAIN_SIZE_EXT_1.configure(this, null, "");
    this.D_DATAIN_SIZE_EXT_1.set_rdl_tag("D_DATAIN_SIZE_EXT_1_");
    this.D_DATAIN_SIZE_EXT_1.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_SIZE_EXT_1.build();
    this.default_map.add_reg(this.D_DATAIN_SIZE_EXT_1, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.D_BATCH_NUMBER = new("D_BATCH_NUMBER");
    this.D_BATCH_NUMBER.configure(this, null, "");
    this.D_BATCH_NUMBER.set_rdl_tag("D_BATCH_NUMBER_");
    this.D_BATCH_NUMBER.set_reg_test_info(0, 0, 2);
    this.D_BATCH_NUMBER.build();
    this.default_map.add_reg(this.D_BATCH_NUMBER, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.D_POST_Y_EXTENSION = new("D_POST_Y_EXTENSION");
    this.D_POST_Y_EXTENSION.configure(this, null, "");
    this.D_POST_Y_EXTENSION.set_rdl_tag("D_POST_Y_EXTENSION_");
    this.D_POST_Y_EXTENSION.set_reg_test_info(0, 0, 2);
    this.D_POST_Y_EXTENSION.build();
    this.default_map.add_reg(this.D_POST_Y_EXTENSION, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.D_ENTRY_PER_SLICE = new("D_ENTRY_PER_SLICE");
    this.D_ENTRY_PER_SLICE.configure(this, null, "");
    this.D_ENTRY_PER_SLICE.set_rdl_tag("D_ENTRY_PER_SLICE_");
    this.D_ENTRY_PER_SLICE.set_reg_test_info(0, 0, 2);
    this.D_ENTRY_PER_SLICE.build();
    this.default_map.add_reg(this.D_ENTRY_PER_SLICE, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.D_WEIGHT_FORMAT = new("D_WEIGHT_FORMAT");
    this.D_WEIGHT_FORMAT.configure(this, null, "");
    this.D_WEIGHT_FORMAT.set_rdl_tag("D_WEIGHT_FORMAT_");
    this.D_WEIGHT_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_FORMAT.build();
    this.default_map.add_reg(this.D_WEIGHT_FORMAT, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.D_WEIGHT_SIZE_EXT_0 = new("D_WEIGHT_SIZE_EXT_0");
    this.D_WEIGHT_SIZE_EXT_0.configure(this, null, "");
    this.D_WEIGHT_SIZE_EXT_0.set_rdl_tag("D_WEIGHT_SIZE_EXT_0_");
    this.D_WEIGHT_SIZE_EXT_0.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_SIZE_EXT_0.build();
    this.default_map.add_reg(this.D_WEIGHT_SIZE_EXT_0, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.D_WEIGHT_SIZE_EXT_1 = new("D_WEIGHT_SIZE_EXT_1");
    this.D_WEIGHT_SIZE_EXT_1.configure(this, null, "");
    this.D_WEIGHT_SIZE_EXT_1.set_rdl_tag("D_WEIGHT_SIZE_EXT_1_");
    this.D_WEIGHT_SIZE_EXT_1.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_SIZE_EXT_1.build();
    this.default_map.add_reg(this.D_WEIGHT_SIZE_EXT_1, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.D_WEIGHT_BYTES = new("D_WEIGHT_BYTES");
    this.D_WEIGHT_BYTES.configure(this, null, "");
    this.D_WEIGHT_BYTES.set_rdl_tag("D_WEIGHT_BYTES_");
    this.D_WEIGHT_BYTES.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_BYTES.build();
    this.default_map.add_reg(this.D_WEIGHT_BYTES, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.D_WMB_BYTES = new("D_WMB_BYTES");
    this.D_WMB_BYTES.configure(this, null, "");
    this.D_WMB_BYTES.set_rdl_tag("D_WMB_BYTES_");
    this.D_WMB_BYTES.set_reg_test_info(0, 0, 2);
    this.D_WMB_BYTES.build();
    this.default_map.add_reg(this.D_WMB_BYTES, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.D_DATAOUT_SIZE_0 = new("D_DATAOUT_SIZE_0");
    this.D_DATAOUT_SIZE_0.configure(this, null, "");
    this.D_DATAOUT_SIZE_0.set_rdl_tag("D_DATAOUT_SIZE_0_");
    this.D_DATAOUT_SIZE_0.set_reg_test_info(0, 0, 2);
    this.D_DATAOUT_SIZE_0.build();
    this.default_map.add_reg(this.D_DATAOUT_SIZE_0, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.D_DATAOUT_SIZE_1 = new("D_DATAOUT_SIZE_1");
    this.D_DATAOUT_SIZE_1.configure(this, null, "");
    this.D_DATAOUT_SIZE_1.set_rdl_tag("D_DATAOUT_SIZE_1_");
    this.D_DATAOUT_SIZE_1.set_reg_test_info(0, 0, 2);
    this.D_DATAOUT_SIZE_1.build();
    this.default_map.add_reg(this.D_DATAOUT_SIZE_1, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.D_ATOMICS = new("D_ATOMICS");
    this.D_ATOMICS.configure(this, null, "");
    this.D_ATOMICS.set_rdl_tag("D_ATOMICS_");
    this.D_ATOMICS.set_reg_test_info(0, 0, 2);
    this.D_ATOMICS.build();
    this.default_map.add_reg(this.D_ATOMICS, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.D_RELEASE = new("D_RELEASE");
    this.D_RELEASE.configure(this, null, "");
    this.D_RELEASE.set_rdl_tag("D_RELEASE_");
    this.D_RELEASE.set_reg_test_info(0, 0, 2);
    this.D_RELEASE.build();
    this.default_map.add_reg(this.D_RELEASE, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.D_CONV_STRIDE_EXT = new("D_CONV_STRIDE_EXT");
    this.D_CONV_STRIDE_EXT.configure(this, null, "");
    this.D_CONV_STRIDE_EXT.set_rdl_tag("D_CONV_STRIDE_EXT_");
    this.D_CONV_STRIDE_EXT.set_reg_test_info(0, 0, 2);
    this.D_CONV_STRIDE_EXT.build();
    this.default_map.add_reg(this.D_CONV_STRIDE_EXT, `UVM_REG_ADDR_WIDTH'h4c, "RW", 0);
    this.D_DILATION_EXT = new("D_DILATION_EXT");
    this.D_DILATION_EXT.configure(this, null, "");
    this.D_DILATION_EXT.set_rdl_tag("D_DILATION_EXT_");
    this.D_DILATION_EXT.set_reg_test_info(0, 0, 2);
    this.D_DILATION_EXT.build();
    this.default_map.add_reg(this.D_DILATION_EXT, `UVM_REG_ADDR_WIDTH'h50, "RW", 0);
    this.D_ZERO_PADDING = new("D_ZERO_PADDING");
    this.D_ZERO_PADDING.configure(this, null, "");
    this.D_ZERO_PADDING.set_rdl_tag("D_ZERO_PADDING_");
    this.D_ZERO_PADDING.set_reg_test_info(0, 0, 2);
    this.D_ZERO_PADDING.build();
    this.default_map.add_reg(this.D_ZERO_PADDING, `UVM_REG_ADDR_WIDTH'h54, "RW", 0);
    this.D_ZERO_PADDING_VALUE = new("D_ZERO_PADDING_VALUE");
    this.D_ZERO_PADDING_VALUE.configure(this, null, "");
    this.D_ZERO_PADDING_VALUE.set_rdl_tag("D_ZERO_PADDING_VALUE_");
    this.D_ZERO_PADDING_VALUE.set_reg_test_info(0, 0, 2);
    this.D_ZERO_PADDING_VALUE.build();
    this.default_map.add_reg(this.D_ZERO_PADDING_VALUE, `UVM_REG_ADDR_WIDTH'h58, "RW", 0);
    this.D_BANK = new("D_BANK");
    this.D_BANK.configure(this, null, "");
    this.D_BANK.set_rdl_tag("D_BANK_");
    this.D_BANK.set_reg_test_info(0, 0, 2);
    this.D_BANK.build();
    this.default_map.add_reg(this.D_BANK, `UVM_REG_ADDR_WIDTH'h5c, "RW", 0);
    this.D_PRA_CFG = new("D_PRA_CFG");
    this.D_PRA_CFG.configure(this, null, "");
    this.D_PRA_CFG.set_rdl_tag("D_PRA_CFG_");
    this.D_PRA_CFG.set_reg_test_info(0, 0, 2);
    this.D_PRA_CFG.build();
    this.default_map.add_reg(this.D_PRA_CFG, `UVM_REG_ADDR_WIDTH'h60, "RW", 0);
    this.D_CYA = new("D_CYA");
    this.D_CYA.configure(this, null, "");
    this.D_CYA.set_rdl_tag("D_CYA_");
    this.D_CYA.set_reg_test_info(0, 0, 2);
    this.D_CYA.build();
    this.default_map.add_reg(this.D_CYA, `UVM_REG_ADDR_WIDTH'h64, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_CSC)
endclass : block_addrmap_NVDLA_NVDLA_CSC

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_CMAC_A_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CMAC_A_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CMAC_A_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_CMAC_A_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CMAC_A_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CMAC_A_S_POINTER

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_CMAC_A_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CMAC_A_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CMAC_A_D_OP_ENABLE

// D_MISC_CFG
class reg_addrmap_NVDLA_NVDLA_CMAC_A_D_MISC_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CONV_MODE;
  rand uvm_reg_field_rdl PROC_PRECISION;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CMAC_A_D_MISC_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CONV_MODE = new("CONV_MODE");
    this.CONV_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONV_MODE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.CONV_MODE.add_def_property("spec_access", "rw");
    this.CONV_MODE.add_def_property("spec_sw_default", "0x0");
    this.CONV_MODE.add_def_property("sw_default_mask", "0x0");
    this.CONV_MODE.add_def_property("reset_mask", "0x1");
    this.PROC_PRECISION = new("PROC_PRECISION");
    this.PROC_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PROC_PRECISION.configure(this, 2, 12, "RW", 0, 2'h1, 1, 1, 0);
    this.PROC_PRECISION.add_def_property("spec_access", "rw");
    this.PROC_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.PROC_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.PROC_PRECISION.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CONV_MODE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "PROC_PRECISION"}, 12, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CMAC_A_D_MISC_CFG

// Block NVDLA_CMAC_A
class block_addrmap_NVDLA_NVDLA_CMAC_A extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_CMAC_A_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_CMAC_A_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_CMAC_A_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_CMAC_A_D_MISC_CFG D_MISC_CFG;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_CMAC_A");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.D_MISC_CFG = new("D_MISC_CFG");
    this.D_MISC_CFG.configure(this, null, "");
    this.D_MISC_CFG.set_rdl_tag("D_MISC_CFG_");
    this.D_MISC_CFG.set_reg_test_info(0, 0, 2);
    this.D_MISC_CFG.build();
    this.default_map.add_reg(this.D_MISC_CFG, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_CMAC_A)
endclass : block_addrmap_NVDLA_NVDLA_CMAC_A

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_CMAC_B_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CMAC_B_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CMAC_B_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_CMAC_B_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CMAC_B_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CMAC_B_S_POINTER

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_CMAC_B_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CMAC_B_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CMAC_B_D_OP_ENABLE

// D_MISC_CFG
class reg_addrmap_NVDLA_NVDLA_CMAC_B_D_MISC_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CONV_MODE;
  rand uvm_reg_field_rdl PROC_PRECISION;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CMAC_B_D_MISC_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CONV_MODE = new("CONV_MODE");
    this.CONV_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONV_MODE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.CONV_MODE.add_def_property("spec_access", "rw");
    this.CONV_MODE.add_def_property("spec_sw_default", "0x0");
    this.CONV_MODE.add_def_property("sw_default_mask", "0x0");
    this.CONV_MODE.add_def_property("reset_mask", "0x1");
    this.PROC_PRECISION = new("PROC_PRECISION");
    this.PROC_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PROC_PRECISION.configure(this, 2, 12, "RW", 0, 2'h1, 1, 1, 0);
    this.PROC_PRECISION.add_def_property("spec_access", "rw");
    this.PROC_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.PROC_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.PROC_PRECISION.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CONV_MODE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "PROC_PRECISION"}, 12, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CMAC_B_D_MISC_CFG

// Block NVDLA_CMAC_B
class block_addrmap_NVDLA_NVDLA_CMAC_B extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_CMAC_B_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_CMAC_B_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_CMAC_B_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_CMAC_B_D_MISC_CFG D_MISC_CFG;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_CMAC_B");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.D_MISC_CFG = new("D_MISC_CFG");
    this.D_MISC_CFG.configure(this, null, "");
    this.D_MISC_CFG.set_rdl_tag("D_MISC_CFG_");
    this.D_MISC_CFG.set_reg_test_info(0, 0, 2);
    this.D_MISC_CFG.build();
    this.default_map.add_reg(this.D_MISC_CFG, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_CMAC_B)
endclass : block_addrmap_NVDLA_NVDLA_CMAC_B

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_CACC_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CACC_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CACC_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_CACC_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CACC_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CACC_S_POINTER

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_CACC_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CACC_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CACC_D_OP_ENABLE

// D_MISC_CFG
class reg_addrmap_NVDLA_NVDLA_CACC_D_MISC_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CONV_MODE;
  rand uvm_reg_field_rdl PROC_PRECISION;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CACC_D_MISC_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CONV_MODE = new("CONV_MODE");
    this.CONV_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONV_MODE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.CONV_MODE.add_def_property("spec_access", "rw");
    this.CONV_MODE.add_def_property("spec_sw_default", "0x0");
    this.CONV_MODE.add_def_property("sw_default_mask", "0x0");
    this.CONV_MODE.add_def_property("reset_mask", "0x1");
    this.PROC_PRECISION = new("PROC_PRECISION");
    this.PROC_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PROC_PRECISION.configure(this, 2, 12, "RW", 0, 2'h1, 1, 1, 0);
    this.PROC_PRECISION.add_def_property("spec_access", "rw");
    this.PROC_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.PROC_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.PROC_PRECISION.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CONV_MODE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "PROC_PRECISION"}, 12, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CACC_D_MISC_CFG

// D_DATAOUT_SIZE_0
class reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_SIZE_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAOUT_WIDTH;
  rand uvm_reg_field_rdl DATAOUT_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_SIZE_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAOUT_WIDTH = new("DATAOUT_WIDTH");
    this.DATAOUT_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAOUT_WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAOUT_WIDTH.add_def_property("spec_access", "rw");
    this.DATAOUT_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.DATAOUT_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.DATAOUT_WIDTH.add_def_property("reset_mask", "0x1fff");
    this.DATAOUT_HEIGHT = new("DATAOUT_HEIGHT");
    this.DATAOUT_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAOUT_HEIGHT.configure(this, 13, 16, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAOUT_HEIGHT.add_def_property("spec_access", "rw");
    this.DATAOUT_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.DATAOUT_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.DATAOUT_HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAOUT_WIDTH"}, 0, 13);
    add_hdl_path_slice({rdl_reg_name, "DATAOUT_HEIGHT"}, 16, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_SIZE_0

// D_DATAOUT_SIZE_1
class reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_SIZE_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAOUT_CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_SIZE_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAOUT_CHANNEL = new("DATAOUT_CHANNEL");
    this.DATAOUT_CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAOUT_CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.DATAOUT_CHANNEL.add_def_property("spec_access", "rw");
    this.DATAOUT_CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.DATAOUT_CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.DATAOUT_CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAOUT_CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_SIZE_1

// D_DATAOUT_ADDR
class reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_ADDR extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAOUT_ADDR;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_ADDR");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAOUT_ADDR = new("DATAOUT_ADDR");
    this.DATAOUT_ADDR.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAOUT_ADDR.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DATAOUT_ADDR.add_def_property("spec_access", "rw");
    this.DATAOUT_ADDR.add_def_property("spec_sw_default", "0x0");
    this.DATAOUT_ADDR.add_def_property("sw_default_mask", "0x0");
    this.DATAOUT_ADDR.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAOUT_ADDR"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_ADDR

// D_BATCH_NUMBER
class reg_addrmap_NVDLA_NVDLA_CACC_D_BATCH_NUMBER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BATCHES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CACC_D_BATCH_NUMBER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BATCHES = new("BATCHES");
    this.BATCHES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BATCHES.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 1);
    this.BATCHES.add_def_property("spec_access", "rw");
    this.BATCHES.add_def_property("spec_sw_default", "0x0");
    this.BATCHES.add_def_property("sw_default_mask", "0x0");
    this.BATCHES.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BATCHES"}, 0, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CACC_D_BATCH_NUMBER

// D_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_CACC_D_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CACC_D_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LINE_STRIDE = new("LINE_STRIDE");
    this.LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LINE_STRIDE.configure(this, 24, 0, "RW", 0, 24'h0, 1, 1, 1);
    this.LINE_STRIDE.add_def_property("spec_access", "rw");
    this.LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.LINE_STRIDE.add_def_property("reset_mask", "0xffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LINE_STRIDE"}, 0, 24);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CACC_D_LINE_STRIDE

// D_SURF_STRIDE
class reg_addrmap_NVDLA_NVDLA_CACC_D_SURF_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SURF_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CACC_D_SURF_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SURF_STRIDE = new("SURF_STRIDE");
    this.SURF_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SURF_STRIDE.configure(this, 24, 0, "RW", 0, 24'h0, 1, 1, 1);
    this.SURF_STRIDE.add_def_property("spec_access", "rw");
    this.SURF_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.SURF_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.SURF_STRIDE.add_def_property("reset_mask", "0xffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SURF_STRIDE"}, 0, 24);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CACC_D_SURF_STRIDE

// D_DATAOUT_MAP
class reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_MAP extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LINE_PACKED;
  rand uvm_reg_field_rdl SURF_PACKED;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_MAP");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LINE_PACKED = new("LINE_PACKED");
    this.LINE_PACKED.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LINE_PACKED.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.LINE_PACKED.add_def_property("spec_access", "rw");
    this.LINE_PACKED.add_def_property("spec_sw_default", "0x0");
    this.LINE_PACKED.add_def_property("sw_default_mask", "0x0");
    this.LINE_PACKED.add_def_property("reset_mask", "0x1");
    this.SURF_PACKED = new("SURF_PACKED");
    this.SURF_PACKED.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SURF_PACKED.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.SURF_PACKED.add_def_property("spec_access", "rw");
    this.SURF_PACKED.add_def_property("spec_sw_default", "0x0");
    this.SURF_PACKED.add_def_property("sw_default_mask", "0x0");
    this.SURF_PACKED.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LINE_PACKED"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "SURF_PACKED"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_MAP

// D_CLIP_CFG
class reg_addrmap_NVDLA_NVDLA_CACC_D_CLIP_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CLIP_TRUNCATE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CACC_D_CLIP_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CLIP_TRUNCATE = new("CLIP_TRUNCATE");
    this.CLIP_TRUNCATE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CLIP_TRUNCATE.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 1);
    this.CLIP_TRUNCATE.add_def_property("spec_access", "rw");
    this.CLIP_TRUNCATE.add_def_property("spec_sw_default", "0x0");
    this.CLIP_TRUNCATE.add_def_property("sw_default_mask", "0x0");
    this.CLIP_TRUNCATE.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CLIP_TRUNCATE"}, 0, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CACC_D_CLIP_CFG

// D_OUT_SATURATION
class reg_addrmap_NVDLA_NVDLA_CACC_D_OUT_SATURATION extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SAT_COUNT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CACC_D_OUT_SATURATION");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SAT_COUNT = new("SAT_COUNT");
    this.SAT_COUNT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.SAT_COUNT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.SAT_COUNT.add_def_property("spec_access", "r");
    this.SAT_COUNT.add_def_property("spec_sw_default", "0x0");
    this.SAT_COUNT.add_def_property("sw_default_mask", "0x0");
    this.SAT_COUNT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SAT_COUNT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CACC_D_OUT_SATURATION

// D_CYA
class reg_addrmap_NVDLA_NVDLA_CACC_D_CYA extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CYA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CACC_D_CYA");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CYA = new("CYA");
    this.CYA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CYA.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.CYA.add_def_property("spec_access", "rw");
    this.CYA.add_def_property("spec_sw_default", "0x0");
    this.CYA.add_def_property("sw_default_mask", "0x0");
    this.CYA.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CYA"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CACC_D_CYA

// Block NVDLA_CACC
class block_addrmap_NVDLA_NVDLA_CACC extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_CACC_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_CACC_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_CACC_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_CACC_D_MISC_CFG D_MISC_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_SIZE_0 D_DATAOUT_SIZE_0;
  rand reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_SIZE_1 D_DATAOUT_SIZE_1;
  rand reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_ADDR D_DATAOUT_ADDR;
  rand reg_addrmap_NVDLA_NVDLA_CACC_D_BATCH_NUMBER D_BATCH_NUMBER;
  rand reg_addrmap_NVDLA_NVDLA_CACC_D_LINE_STRIDE D_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CACC_D_SURF_STRIDE D_SURF_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CACC_D_DATAOUT_MAP D_DATAOUT_MAP;
  rand reg_addrmap_NVDLA_NVDLA_CACC_D_CLIP_CFG D_CLIP_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CACC_D_OUT_SATURATION D_OUT_SATURATION;
  rand reg_addrmap_NVDLA_NVDLA_CACC_D_CYA D_CYA;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_CACC");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.D_MISC_CFG = new("D_MISC_CFG");
    this.D_MISC_CFG.configure(this, null, "");
    this.D_MISC_CFG.set_rdl_tag("D_MISC_CFG_");
    this.D_MISC_CFG.set_reg_test_info(0, 0, 2);
    this.D_MISC_CFG.build();
    this.default_map.add_reg(this.D_MISC_CFG, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.D_DATAOUT_SIZE_0 = new("D_DATAOUT_SIZE_0");
    this.D_DATAOUT_SIZE_0.configure(this, null, "");
    this.D_DATAOUT_SIZE_0.set_rdl_tag("D_DATAOUT_SIZE_0_");
    this.D_DATAOUT_SIZE_0.set_reg_test_info(0, 0, 2);
    this.D_DATAOUT_SIZE_0.build();
    this.default_map.add_reg(this.D_DATAOUT_SIZE_0, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.D_DATAOUT_SIZE_1 = new("D_DATAOUT_SIZE_1");
    this.D_DATAOUT_SIZE_1.configure(this, null, "");
    this.D_DATAOUT_SIZE_1.set_rdl_tag("D_DATAOUT_SIZE_1_");
    this.D_DATAOUT_SIZE_1.set_reg_test_info(0, 0, 2);
    this.D_DATAOUT_SIZE_1.build();
    this.default_map.add_reg(this.D_DATAOUT_SIZE_1, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.D_DATAOUT_ADDR = new("D_DATAOUT_ADDR");
    this.D_DATAOUT_ADDR.configure(this, null, "");
    this.D_DATAOUT_ADDR.set_rdl_tag("D_DATAOUT_ADDR_");
    this.D_DATAOUT_ADDR.set_reg_test_info(0, 0, 2);
    this.D_DATAOUT_ADDR.build();
    this.default_map.add_reg(this.D_DATAOUT_ADDR, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.D_BATCH_NUMBER = new("D_BATCH_NUMBER");
    this.D_BATCH_NUMBER.configure(this, null, "");
    this.D_BATCH_NUMBER.set_rdl_tag("D_BATCH_NUMBER_");
    this.D_BATCH_NUMBER.set_reg_test_info(0, 0, 2);
    this.D_BATCH_NUMBER.build();
    this.default_map.add_reg(this.D_BATCH_NUMBER, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.D_LINE_STRIDE = new("D_LINE_STRIDE");
    this.D_LINE_STRIDE.configure(this, null, "");
    this.D_LINE_STRIDE.set_rdl_tag("D_LINE_STRIDE_");
    this.D_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.D_SURF_STRIDE = new("D_SURF_STRIDE");
    this.D_SURF_STRIDE.configure(this, null, "");
    this.D_SURF_STRIDE.set_rdl_tag("D_SURF_STRIDE_");
    this.D_SURF_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_SURF_STRIDE.build();
    this.default_map.add_reg(this.D_SURF_STRIDE, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.D_DATAOUT_MAP = new("D_DATAOUT_MAP");
    this.D_DATAOUT_MAP.configure(this, null, "");
    this.D_DATAOUT_MAP.set_rdl_tag("D_DATAOUT_MAP_");
    this.D_DATAOUT_MAP.set_reg_test_info(0, 0, 2);
    this.D_DATAOUT_MAP.build();
    this.default_map.add_reg(this.D_DATAOUT_MAP, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.D_CLIP_CFG = new("D_CLIP_CFG");
    this.D_CLIP_CFG.configure(this, null, "");
    this.D_CLIP_CFG.set_rdl_tag("D_CLIP_CFG_");
    this.D_CLIP_CFG.set_reg_test_info(0, 0, 2);
    this.D_CLIP_CFG.build();
    this.default_map.add_reg(this.D_CLIP_CFG, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.D_OUT_SATURATION = new("D_OUT_SATURATION");
    this.D_OUT_SATURATION.configure(this, null, "");
    this.D_OUT_SATURATION.set_rdl_tag("D_OUT_SATURATION_");
    this.D_OUT_SATURATION.set_reg_test_info(0, 0, 32);
    this.D_OUT_SATURATION.build();
    this.default_map.add_reg(this.D_OUT_SATURATION, `UVM_REG_ADDR_WIDTH'h30, "RO", 0);
    this.D_CYA = new("D_CYA");
    this.D_CYA.configure(this, null, "");
    this.D_CYA.set_rdl_tag("D_CYA_");
    this.D_CYA.set_reg_test_info(0, 0, 2);
    this.D_CYA.build();
    this.default_map.add_reg(this.D_CYA, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_CACC)
endclass : block_addrmap_NVDLA_NVDLA_CACC

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_POINTER

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_OP_ENABLE

// D_DATA_CUBE_WIDTH
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WIDTH = new("WIDTH");
    this.WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.WIDTH.add_def_property("spec_access", "rw");
    this.WIDTH.add_def_property("spec_sw_default", "0x0");
    this.WIDTH.add_def_property("sw_default_mask", "0x0");
    this.WIDTH.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WIDTH"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH

// D_DATA_CUBE_HEIGHT
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.HEIGHT = new("HEIGHT");
    this.HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.HEIGHT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.HEIGHT.add_def_property("spec_access", "rw");
    this.HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "HEIGHT"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT

// D_DATA_CUBE_CHANNEL
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CHANNEL = new("CHANNEL");
    this.CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CHANNEL.add_def_property("spec_access", "rw");
    this.CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL

// D_SRC_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_BASE_ADDR_LOW = new("SRC_BASE_ADDR_LOW");
    this.SRC_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.SRC_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.SRC_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.SRC_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW

// D_SRC_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_BASE_ADDR_HIGH = new("SRC_BASE_ADDR_HIGH");
    this.SRC_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.SRC_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.SRC_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.SRC_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH

// D_SRC_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_LINE_STRIDE = new("SRC_LINE_STRIDE");
    this.SRC_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.SRC_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.SRC_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.SRC_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE

// D_SRC_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_SURFACE_STRIDE = new("SRC_SURFACE_STRIDE");
    this.SRC_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.SRC_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.SRC_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.SRC_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE

// D_BRDMA_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BRDMA_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BRDMA_DISABLE;
  rand uvm_reg_field_rdl BRDMA_DATA_USE;
  rand uvm_reg_field_rdl BRDMA_DATA_SIZE;
  rand uvm_reg_field_rdl BRDMA_DATA_MODE;
  rand uvm_reg_field_rdl BRDMA_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BRDMA_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BRDMA_DISABLE = new("BRDMA_DISABLE");
    this.BRDMA_DISABLE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BRDMA_DISABLE.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.BRDMA_DISABLE.add_def_property("spec_access", "rw");
    this.BRDMA_DISABLE.add_def_property("spec_sw_default", "0x1");
    this.BRDMA_DISABLE.add_def_property("sw_default_mask", "0x0");
    this.BRDMA_DISABLE.add_def_property("reset_mask", "0x1");
    this.BRDMA_DATA_USE = new("BRDMA_DATA_USE");
    this.BRDMA_DATA_USE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BRDMA_DATA_USE.configure(this, 2, 1, "RW", 0, 2'h0, 1, 1, 0);
    this.BRDMA_DATA_USE.add_def_property("spec_access", "rw");
    this.BRDMA_DATA_USE.add_def_property("spec_sw_default", "0x0");
    this.BRDMA_DATA_USE.add_def_property("sw_default_mask", "0x0");
    this.BRDMA_DATA_USE.add_def_property("reset_mask", "0x3");
    this.BRDMA_DATA_SIZE = new("BRDMA_DATA_SIZE");
    this.BRDMA_DATA_SIZE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BRDMA_DATA_SIZE.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.BRDMA_DATA_SIZE.add_def_property("spec_access", "rw");
    this.BRDMA_DATA_SIZE.add_def_property("spec_sw_default", "0x0");
    this.BRDMA_DATA_SIZE.add_def_property("sw_default_mask", "0x0");
    this.BRDMA_DATA_SIZE.add_def_property("reset_mask", "0x1");
    this.BRDMA_DATA_MODE = new("BRDMA_DATA_MODE");
    this.BRDMA_DATA_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BRDMA_DATA_MODE.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.BRDMA_DATA_MODE.add_def_property("spec_access", "rw");
    this.BRDMA_DATA_MODE.add_def_property("spec_sw_default", "0x0");
    this.BRDMA_DATA_MODE.add_def_property("sw_default_mask", "0x0");
    this.BRDMA_DATA_MODE.add_def_property("reset_mask", "0x1");
    this.BRDMA_RAM_TYPE = new("BRDMA_RAM_TYPE");
    this.BRDMA_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BRDMA_RAM_TYPE.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.BRDMA_RAM_TYPE.add_def_property("spec_access", "rw");
    this.BRDMA_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.BRDMA_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.BRDMA_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BRDMA_DISABLE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "BRDMA_DATA_USE"}, 1, 2);
    add_hdl_path_slice({rdl_reg_name, "BRDMA_DATA_SIZE"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "BRDMA_DATA_MODE"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "BRDMA_RAM_TYPE"}, 5, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BRDMA_CFG

// D_BS_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_BASE_ADDR_LOW = new("BS_BASE_ADDR_LOW");
    this.BS_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BS_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.BS_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.BS_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.BS_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW

// D_BS_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_BASE_ADDR_HIGH = new("BS_BASE_ADDR_HIGH");
    this.BS_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BS_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.BS_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.BS_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.BS_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH

// D_BS_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_LINE_STRIDE = new("BS_LINE_STRIDE");
    this.BS_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BS_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.BS_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.BS_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.BS_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE

// D_BS_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_SURFACE_STRIDE = new("BS_SURFACE_STRIDE");
    this.BS_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BS_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.BS_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.BS_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.BS_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE

// D_BS_BATCH_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_BATCH_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_BATCH_STRIDE = new("BS_BATCH_STRIDE");
    this.BS_BATCH_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_BATCH_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BS_BATCH_STRIDE.add_def_property("spec_access", "rw");
    this.BS_BATCH_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.BS_BATCH_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.BS_BATCH_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_BATCH_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE

// D_NRDMA_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_NRDMA_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NRDMA_DISABLE;
  rand uvm_reg_field_rdl NRDMA_DATA_USE;
  rand uvm_reg_field_rdl NRDMA_DATA_SIZE;
  rand uvm_reg_field_rdl NRDMA_DATA_MODE;
  rand uvm_reg_field_rdl NRDMA_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_NRDMA_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NRDMA_DISABLE = new("NRDMA_DISABLE");
    this.NRDMA_DISABLE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NRDMA_DISABLE.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.NRDMA_DISABLE.add_def_property("spec_access", "rw");
    this.NRDMA_DISABLE.add_def_property("spec_sw_default", "0x1");
    this.NRDMA_DISABLE.add_def_property("sw_default_mask", "0x0");
    this.NRDMA_DISABLE.add_def_property("reset_mask", "0x1");
    this.NRDMA_DATA_USE = new("NRDMA_DATA_USE");
    this.NRDMA_DATA_USE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NRDMA_DATA_USE.configure(this, 2, 1, "RW", 0, 2'h0, 1, 1, 0);
    this.NRDMA_DATA_USE.add_def_property("spec_access", "rw");
    this.NRDMA_DATA_USE.add_def_property("spec_sw_default", "0x0");
    this.NRDMA_DATA_USE.add_def_property("sw_default_mask", "0x0");
    this.NRDMA_DATA_USE.add_def_property("reset_mask", "0x3");
    this.NRDMA_DATA_SIZE = new("NRDMA_DATA_SIZE");
    this.NRDMA_DATA_SIZE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NRDMA_DATA_SIZE.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.NRDMA_DATA_SIZE.add_def_property("spec_access", "rw");
    this.NRDMA_DATA_SIZE.add_def_property("spec_sw_default", "0x0");
    this.NRDMA_DATA_SIZE.add_def_property("sw_default_mask", "0x0");
    this.NRDMA_DATA_SIZE.add_def_property("reset_mask", "0x1");
    this.NRDMA_DATA_MODE = new("NRDMA_DATA_MODE");
    this.NRDMA_DATA_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NRDMA_DATA_MODE.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.NRDMA_DATA_MODE.add_def_property("spec_access", "rw");
    this.NRDMA_DATA_MODE.add_def_property("spec_sw_default", "0x0");
    this.NRDMA_DATA_MODE.add_def_property("sw_default_mask", "0x0");
    this.NRDMA_DATA_MODE.add_def_property("reset_mask", "0x1");
    this.NRDMA_RAM_TYPE = new("NRDMA_RAM_TYPE");
    this.NRDMA_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NRDMA_RAM_TYPE.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.NRDMA_RAM_TYPE.add_def_property("spec_access", "rw");
    this.NRDMA_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.NRDMA_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.NRDMA_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NRDMA_DISABLE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "NRDMA_DATA_USE"}, 1, 2);
    add_hdl_path_slice({rdl_reg_name, "NRDMA_DATA_SIZE"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "NRDMA_DATA_MODE"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "NRDMA_RAM_TYPE"}, 5, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_NRDMA_CFG

// D_BN_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_BASE_ADDR_LOW = new("BN_BASE_ADDR_LOW");
    this.BN_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BN_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.BN_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.BN_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.BN_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW

// D_BN_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_BASE_ADDR_HIGH = new("BN_BASE_ADDR_HIGH");
    this.BN_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BN_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.BN_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.BN_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.BN_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH

// D_BN_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_LINE_STRIDE = new("BN_LINE_STRIDE");
    this.BN_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BN_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.BN_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.BN_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.BN_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE

// D_BN_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_SURFACE_STRIDE = new("BN_SURFACE_STRIDE");
    this.BN_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BN_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.BN_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.BN_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.BN_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE

// D_BN_BATCH_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_BATCH_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_BATCH_STRIDE = new("BN_BATCH_STRIDE");
    this.BN_BATCH_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_BATCH_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BN_BATCH_STRIDE.add_def_property("spec_access", "rw");
    this.BN_BATCH_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.BN_BATCH_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.BN_BATCH_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_BATCH_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE

// D_ERDMA_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_ERDMA_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERDMA_DISABLE;
  rand uvm_reg_field_rdl ERDMA_DATA_USE;
  rand uvm_reg_field_rdl ERDMA_DATA_SIZE;
  rand uvm_reg_field_rdl ERDMA_DATA_MODE;
  rand uvm_reg_field_rdl ERDMA_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_ERDMA_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERDMA_DISABLE = new("ERDMA_DISABLE");
    this.ERDMA_DISABLE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERDMA_DISABLE.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.ERDMA_DISABLE.add_def_property("spec_access", "rw");
    this.ERDMA_DISABLE.add_def_property("spec_sw_default", "0x1");
    this.ERDMA_DISABLE.add_def_property("sw_default_mask", "0x0");
    this.ERDMA_DISABLE.add_def_property("reset_mask", "0x1");
    this.ERDMA_DATA_USE = new("ERDMA_DATA_USE");
    this.ERDMA_DATA_USE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERDMA_DATA_USE.configure(this, 2, 1, "RW", 0, 2'h0, 1, 1, 0);
    this.ERDMA_DATA_USE.add_def_property("spec_access", "rw");
    this.ERDMA_DATA_USE.add_def_property("spec_sw_default", "0x0");
    this.ERDMA_DATA_USE.add_def_property("sw_default_mask", "0x0");
    this.ERDMA_DATA_USE.add_def_property("reset_mask", "0x3");
    this.ERDMA_DATA_SIZE = new("ERDMA_DATA_SIZE");
    this.ERDMA_DATA_SIZE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERDMA_DATA_SIZE.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.ERDMA_DATA_SIZE.add_def_property("spec_access", "rw");
    this.ERDMA_DATA_SIZE.add_def_property("spec_sw_default", "0x0");
    this.ERDMA_DATA_SIZE.add_def_property("sw_default_mask", "0x0");
    this.ERDMA_DATA_SIZE.add_def_property("reset_mask", "0x1");
    this.ERDMA_DATA_MODE = new("ERDMA_DATA_MODE");
    this.ERDMA_DATA_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERDMA_DATA_MODE.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.ERDMA_DATA_MODE.add_def_property("spec_access", "rw");
    this.ERDMA_DATA_MODE.add_def_property("spec_sw_default", "0x0");
    this.ERDMA_DATA_MODE.add_def_property("sw_default_mask", "0x0");
    this.ERDMA_DATA_MODE.add_def_property("reset_mask", "0x1");
    this.ERDMA_RAM_TYPE = new("ERDMA_RAM_TYPE");
    this.ERDMA_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERDMA_RAM_TYPE.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.ERDMA_RAM_TYPE.add_def_property("spec_access", "rw");
    this.ERDMA_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.ERDMA_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.ERDMA_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERDMA_DISABLE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERDMA_DATA_USE"}, 1, 2);
    add_hdl_path_slice({rdl_reg_name, "ERDMA_DATA_SIZE"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERDMA_DATA_MODE"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERDMA_RAM_TYPE"}, 5, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_ERDMA_CFG

// D_EW_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_BASE_ADDR_LOW = new("EW_BASE_ADDR_LOW");
    this.EW_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.EW_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.EW_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.EW_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW

// D_EW_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_BASE_ADDR_HIGH = new("EW_BASE_ADDR_HIGH");
    this.EW_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.EW_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.EW_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.EW_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH

// D_EW_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_LINE_STRIDE = new("EW_LINE_STRIDE");
    this.EW_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.EW_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.EW_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.EW_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE

// D_EW_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_SURFACE_STRIDE = new("EW_SURFACE_STRIDE");
    this.EW_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.EW_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.EW_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.EW_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE

// D_EW_BATCH_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_BATCH_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_BATCH_STRIDE = new("EW_BATCH_STRIDE");
    this.EW_BATCH_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_BATCH_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_BATCH_STRIDE.add_def_property("spec_access", "rw");
    this.EW_BATCH_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.EW_BATCH_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.EW_BATCH_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_BATCH_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE

// D_FEATURE_MODE_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl FLYING_MODE;
  rand uvm_reg_field_rdl WINOGRAD;
  rand uvm_reg_field_rdl IN_PRECISION;
  rand uvm_reg_field_rdl PROC_PRECISION;
  rand uvm_reg_field_rdl OUT_PRECISION;
  rand uvm_reg_field_rdl BATCH_NUMBER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.FLYING_MODE = new("FLYING_MODE");
    this.FLYING_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.FLYING_MODE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.FLYING_MODE.add_def_property("spec_access", "rw");
    this.FLYING_MODE.add_def_property("spec_sw_default", "0x0");
    this.FLYING_MODE.add_def_property("sw_default_mask", "0x0");
    this.FLYING_MODE.add_def_property("reset_mask", "0x1");
    this.WINOGRAD = new("WINOGRAD");
    this.WINOGRAD.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WINOGRAD.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.WINOGRAD.add_def_property("spec_access", "rw");
    this.WINOGRAD.add_def_property("spec_sw_default", "0x0");
    this.WINOGRAD.add_def_property("sw_default_mask", "0x0");
    this.WINOGRAD.add_def_property("reset_mask", "0x1");
    this.IN_PRECISION = new("IN_PRECISION");
    this.IN_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.IN_PRECISION.configure(this, 2, 2, "RW", 0, 2'h1, 1, 1, 0);
    this.IN_PRECISION.add_def_property("spec_access", "rw");
    this.IN_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.IN_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.IN_PRECISION.add_def_property("reset_mask", "0x3");
    this.PROC_PRECISION = new("PROC_PRECISION");
    this.PROC_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PROC_PRECISION.configure(this, 2, 4, "RW", 0, 2'h1, 1, 1, 0);
    this.PROC_PRECISION.add_def_property("spec_access", "rw");
    this.PROC_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.PROC_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.PROC_PRECISION.add_def_property("reset_mask", "0x3");
    this.OUT_PRECISION = new("OUT_PRECISION");
    this.OUT_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OUT_PRECISION.configure(this, 2, 6, "RW", 0, 2'h0, 1, 1, 0);
    this.OUT_PRECISION.add_def_property("spec_access", "rw");
    this.OUT_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.OUT_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.OUT_PRECISION.add_def_property("reset_mask", "0x3");
    this.BATCH_NUMBER = new("BATCH_NUMBER");
    this.BATCH_NUMBER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BATCH_NUMBER.configure(this, 5, 8, "RW", 0, 5'h0, 1, 1, 0);
    this.BATCH_NUMBER.add_def_property("spec_access", "rw");
    this.BATCH_NUMBER.add_def_property("spec_sw_default", "0x0");
    this.BATCH_NUMBER.add_def_property("sw_default_mask", "0x0");
    this.BATCH_NUMBER.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "FLYING_MODE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "WINOGRAD"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "IN_PRECISION"}, 2, 2);
    add_hdl_path_slice({rdl_reg_name, "PROC_PRECISION"}, 4, 2);
    add_hdl_path_slice({rdl_reg_name, "OUT_PRECISION"}, 6, 2);
    add_hdl_path_slice({rdl_reg_name, "BATCH_NUMBER"}, 8, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG

// D_SRC_DMA_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_DMA_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_DMA_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_RAM_TYPE = new("SRC_RAM_TYPE");
    this.SRC_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.SRC_RAM_TYPE.add_def_property("spec_access", "rw");
    this.SRC_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.SRC_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.SRC_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_DMA_CFG

// D_STATUS_NAN_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_NAN_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_NAN_INPUT_NUM = new("STATUS_NAN_INPUT_NUM");
    this.STATUS_NAN_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_NAN_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.STATUS_NAN_INPUT_NUM.add_def_property("spec_access", "r");
    this.STATUS_NAN_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.STATUS_NAN_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.STATUS_NAN_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_NAN_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM

// D_STATUS_INF_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_INF_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_INF_INPUT_NUM = new("STATUS_INF_INPUT_NUM");
    this.STATUS_INF_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_INF_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.STATUS_INF_INPUT_NUM.add_def_property("spec_access", "r");
    this.STATUS_INF_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.STATUS_INF_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.STATUS_INF_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_INF_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM

// D_PERF_ENABLE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_DMA_EN;
  rand uvm_reg_field_rdl PERF_NAN_INF_COUNT_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_DMA_EN = new("PERF_DMA_EN");
    this.PERF_DMA_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PERF_DMA_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PERF_DMA_EN.add_def_property("spec_access", "rw");
    this.PERF_DMA_EN.add_def_property("spec_sw_default", "0x0");
    this.PERF_DMA_EN.add_def_property("sw_default_mask", "0x0");
    this.PERF_DMA_EN.add_def_property("reset_mask", "0x1");
    this.PERF_NAN_INF_COUNT_EN = new("PERF_NAN_INF_COUNT_EN");
    this.PERF_NAN_INF_COUNT_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PERF_NAN_INF_COUNT_EN.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.PERF_NAN_INF_COUNT_EN.add_def_property("spec_access", "rw");
    this.PERF_NAN_INF_COUNT_EN.add_def_property("spec_sw_default", "0x0");
    this.PERF_NAN_INF_COUNT_EN.add_def_property("sw_default_mask", "0x0");
    this.PERF_NAN_INF_COUNT_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_DMA_EN"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "PERF_NAN_INF_COUNT_EN"}, 1, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ENABLE

// D_PERF_MRDMA_READ_STALL
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl MRDMA_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.MRDMA_STALL = new("MRDMA_STALL");
    this.MRDMA_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.MRDMA_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.MRDMA_STALL.add_def_property("spec_access", "r");
    this.MRDMA_STALL.add_def_property("spec_sw_default", "0x0");
    this.MRDMA_STALL.add_def_property("sw_default_mask", "0x0");
    this.MRDMA_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "MRDMA_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL

// D_PERF_BRDMA_READ_STALL
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BRDMA_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BRDMA_STALL = new("BRDMA_STALL");
    this.BRDMA_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.BRDMA_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.BRDMA_STALL.add_def_property("spec_access", "r");
    this.BRDMA_STALL.add_def_property("spec_sw_default", "0x0");
    this.BRDMA_STALL.add_def_property("sw_default_mask", "0x0");
    this.BRDMA_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BRDMA_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL

// D_PERF_NRDMA_READ_STALL
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NRDMA_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NRDMA_STALL = new("NRDMA_STALL");
    this.NRDMA_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.NRDMA_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.NRDMA_STALL.add_def_property("spec_access", "r");
    this.NRDMA_STALL.add_def_property("spec_sw_default", "0x0");
    this.NRDMA_STALL.add_def_property("sw_default_mask", "0x0");
    this.NRDMA_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NRDMA_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL

// D_PERF_ERDMA_READ_STALL
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERDMA_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERDMA_STALL = new("ERDMA_STALL");
    this.ERDMA_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.ERDMA_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.ERDMA_STALL.add_def_property("spec_access", "r");
    this.ERDMA_STALL.add_def_property("spec_sw_default", "0x0");
    this.ERDMA_STALL.add_def_property("sw_default_mask", "0x0");
    this.ERDMA_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERDMA_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL

// Block NVDLA_SDP_RDMA
class block_addrmap_NVDLA_NVDLA_SDP_RDMA extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH D_DATA_CUBE_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT D_DATA_CUBE_HEIGHT;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL D_DATA_CUBE_CHANNEL;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW D_SRC_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH D_SRC_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE D_SRC_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE D_SRC_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BRDMA_CFG D_BRDMA_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW D_BS_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH D_BS_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE D_BS_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE D_BS_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE D_BS_BATCH_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_NRDMA_CFG D_NRDMA_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW D_BN_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH D_BN_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE D_BN_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE D_BN_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE D_BN_BATCH_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_ERDMA_CFG D_ERDMA_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW D_EW_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH D_EW_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE D_EW_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE D_EW_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE D_EW_BATCH_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG D_FEATURE_MODE_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_DMA_CFG D_SRC_DMA_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM D_STATUS_NAN_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM D_STATUS_INF_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ENABLE D_PERF_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL D_PERF_MRDMA_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL D_PERF_BRDMA_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL D_PERF_NRDMA_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL D_PERF_ERDMA_READ_STALL;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_SDP_RDMA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.D_DATA_CUBE_WIDTH = new("D_DATA_CUBE_WIDTH");
    this.D_DATA_CUBE_WIDTH.configure(this, null, "");
    this.D_DATA_CUBE_WIDTH.set_rdl_tag("D_DATA_CUBE_WIDTH_");
    this.D_DATA_CUBE_WIDTH.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_WIDTH.build();
    this.default_map.add_reg(this.D_DATA_CUBE_WIDTH, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.D_DATA_CUBE_HEIGHT = new("D_DATA_CUBE_HEIGHT");
    this.D_DATA_CUBE_HEIGHT.configure(this, null, "");
    this.D_DATA_CUBE_HEIGHT.set_rdl_tag("D_DATA_CUBE_HEIGHT_");
    this.D_DATA_CUBE_HEIGHT.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_HEIGHT.build();
    this.default_map.add_reg(this.D_DATA_CUBE_HEIGHT, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.D_DATA_CUBE_CHANNEL = new("D_DATA_CUBE_CHANNEL");
    this.D_DATA_CUBE_CHANNEL.configure(this, null, "");
    this.D_DATA_CUBE_CHANNEL.set_rdl_tag("D_DATA_CUBE_CHANNEL_");
    this.D_DATA_CUBE_CHANNEL.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_CHANNEL.build();
    this.default_map.add_reg(this.D_DATA_CUBE_CHANNEL, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.D_SRC_BASE_ADDR_LOW = new("D_SRC_BASE_ADDR_LOW");
    this.D_SRC_BASE_ADDR_LOW.configure(this, null, "");
    this.D_SRC_BASE_ADDR_LOW.set_rdl_tag("D_SRC_BASE_ADDR_LOW_");
    this.D_SRC_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_SRC_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_SRC_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.D_SRC_BASE_ADDR_HIGH = new("D_SRC_BASE_ADDR_HIGH");
    this.D_SRC_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_SRC_BASE_ADDR_HIGH.set_rdl_tag("D_SRC_BASE_ADDR_HIGH_");
    this.D_SRC_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_SRC_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_SRC_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.D_SRC_LINE_STRIDE = new("D_SRC_LINE_STRIDE");
    this.D_SRC_LINE_STRIDE.configure(this, null, "");
    this.D_SRC_LINE_STRIDE.set_rdl_tag("D_SRC_LINE_STRIDE_");
    this.D_SRC_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_SRC_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_SRC_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.D_SRC_SURFACE_STRIDE = new("D_SRC_SURFACE_STRIDE");
    this.D_SRC_SURFACE_STRIDE.configure(this, null, "");
    this.D_SRC_SURFACE_STRIDE.set_rdl_tag("D_SRC_SURFACE_STRIDE_");
    this.D_SRC_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_SRC_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_SRC_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.D_BRDMA_CFG = new("D_BRDMA_CFG");
    this.D_BRDMA_CFG.configure(this, null, "");
    this.D_BRDMA_CFG.set_rdl_tag("D_BRDMA_CFG_");
    this.D_BRDMA_CFG.set_reg_test_info(0, 0, 2);
    this.D_BRDMA_CFG.build();
    this.default_map.add_reg(this.D_BRDMA_CFG, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.D_BS_BASE_ADDR_LOW = new("D_BS_BASE_ADDR_LOW");
    this.D_BS_BASE_ADDR_LOW.configure(this, null, "");
    this.D_BS_BASE_ADDR_LOW.set_rdl_tag("D_BS_BASE_ADDR_LOW_");
    this.D_BS_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_BS_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_BS_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.D_BS_BASE_ADDR_HIGH = new("D_BS_BASE_ADDR_HIGH");
    this.D_BS_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_BS_BASE_ADDR_HIGH.set_rdl_tag("D_BS_BASE_ADDR_HIGH_");
    this.D_BS_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_BS_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_BS_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.D_BS_LINE_STRIDE = new("D_BS_LINE_STRIDE");
    this.D_BS_LINE_STRIDE.configure(this, null, "");
    this.D_BS_LINE_STRIDE.set_rdl_tag("D_BS_LINE_STRIDE_");
    this.D_BS_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_BS_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_BS_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.D_BS_SURFACE_STRIDE = new("D_BS_SURFACE_STRIDE");
    this.D_BS_SURFACE_STRIDE.configure(this, null, "");
    this.D_BS_SURFACE_STRIDE.set_rdl_tag("D_BS_SURFACE_STRIDE_");
    this.D_BS_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_BS_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_BS_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.D_BS_BATCH_STRIDE = new("D_BS_BATCH_STRIDE");
    this.D_BS_BATCH_STRIDE.configure(this, null, "");
    this.D_BS_BATCH_STRIDE.set_rdl_tag("D_BS_BATCH_STRIDE_");
    this.D_BS_BATCH_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_BS_BATCH_STRIDE.build();
    this.default_map.add_reg(this.D_BS_BATCH_STRIDE, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.D_NRDMA_CFG = new("D_NRDMA_CFG");
    this.D_NRDMA_CFG.configure(this, null, "");
    this.D_NRDMA_CFG.set_rdl_tag("D_NRDMA_CFG_");
    this.D_NRDMA_CFG.set_reg_test_info(0, 0, 2);
    this.D_NRDMA_CFG.build();
    this.default_map.add_reg(this.D_NRDMA_CFG, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.D_BN_BASE_ADDR_LOW = new("D_BN_BASE_ADDR_LOW");
    this.D_BN_BASE_ADDR_LOW.configure(this, null, "");
    this.D_BN_BASE_ADDR_LOW.set_rdl_tag("D_BN_BASE_ADDR_LOW_");
    this.D_BN_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_BN_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_BN_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.D_BN_BASE_ADDR_HIGH = new("D_BN_BASE_ADDR_HIGH");
    this.D_BN_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_BN_BASE_ADDR_HIGH.set_rdl_tag("D_BN_BASE_ADDR_HIGH_");
    this.D_BN_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_BN_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_BN_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.D_BN_LINE_STRIDE = new("D_BN_LINE_STRIDE");
    this.D_BN_LINE_STRIDE.configure(this, null, "");
    this.D_BN_LINE_STRIDE.set_rdl_tag("D_BN_LINE_STRIDE_");
    this.D_BN_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_BN_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_BN_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h4c, "RW", 0);
    this.D_BN_SURFACE_STRIDE = new("D_BN_SURFACE_STRIDE");
    this.D_BN_SURFACE_STRIDE.configure(this, null, "");
    this.D_BN_SURFACE_STRIDE.set_rdl_tag("D_BN_SURFACE_STRIDE_");
    this.D_BN_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_BN_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_BN_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h50, "RW", 0);
    this.D_BN_BATCH_STRIDE = new("D_BN_BATCH_STRIDE");
    this.D_BN_BATCH_STRIDE.configure(this, null, "");
    this.D_BN_BATCH_STRIDE.set_rdl_tag("D_BN_BATCH_STRIDE_");
    this.D_BN_BATCH_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_BN_BATCH_STRIDE.build();
    this.default_map.add_reg(this.D_BN_BATCH_STRIDE, `UVM_REG_ADDR_WIDTH'h54, "RW", 0);
    this.D_ERDMA_CFG = new("D_ERDMA_CFG");
    this.D_ERDMA_CFG.configure(this, null, "");
    this.D_ERDMA_CFG.set_rdl_tag("D_ERDMA_CFG_");
    this.D_ERDMA_CFG.set_reg_test_info(0, 0, 2);
    this.D_ERDMA_CFG.build();
    this.default_map.add_reg(this.D_ERDMA_CFG, `UVM_REG_ADDR_WIDTH'h58, "RW", 0);
    this.D_EW_BASE_ADDR_LOW = new("D_EW_BASE_ADDR_LOW");
    this.D_EW_BASE_ADDR_LOW.configure(this, null, "");
    this.D_EW_BASE_ADDR_LOW.set_rdl_tag("D_EW_BASE_ADDR_LOW_");
    this.D_EW_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_EW_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_EW_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h5c, "RW", 0);
    this.D_EW_BASE_ADDR_HIGH = new("D_EW_BASE_ADDR_HIGH");
    this.D_EW_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_EW_BASE_ADDR_HIGH.set_rdl_tag("D_EW_BASE_ADDR_HIGH_");
    this.D_EW_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_EW_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_EW_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h60, "RW", 0);
    this.D_EW_LINE_STRIDE = new("D_EW_LINE_STRIDE");
    this.D_EW_LINE_STRIDE.configure(this, null, "");
    this.D_EW_LINE_STRIDE.set_rdl_tag("D_EW_LINE_STRIDE_");
    this.D_EW_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_EW_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_EW_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h64, "RW", 0);
    this.D_EW_SURFACE_STRIDE = new("D_EW_SURFACE_STRIDE");
    this.D_EW_SURFACE_STRIDE.configure(this, null, "");
    this.D_EW_SURFACE_STRIDE.set_rdl_tag("D_EW_SURFACE_STRIDE_");
    this.D_EW_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_EW_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_EW_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h68, "RW", 0);
    this.D_EW_BATCH_STRIDE = new("D_EW_BATCH_STRIDE");
    this.D_EW_BATCH_STRIDE.configure(this, null, "");
    this.D_EW_BATCH_STRIDE.set_rdl_tag("D_EW_BATCH_STRIDE_");
    this.D_EW_BATCH_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_EW_BATCH_STRIDE.build();
    this.default_map.add_reg(this.D_EW_BATCH_STRIDE, `UVM_REG_ADDR_WIDTH'h6c, "RW", 0);
    this.D_FEATURE_MODE_CFG = new("D_FEATURE_MODE_CFG");
    this.D_FEATURE_MODE_CFG.configure(this, null, "");
    this.D_FEATURE_MODE_CFG.set_rdl_tag("D_FEATURE_MODE_CFG_");
    this.D_FEATURE_MODE_CFG.set_reg_test_info(0, 0, 2);
    this.D_FEATURE_MODE_CFG.build();
    this.default_map.add_reg(this.D_FEATURE_MODE_CFG, `UVM_REG_ADDR_WIDTH'h70, "RW", 0);
    this.D_SRC_DMA_CFG = new("D_SRC_DMA_CFG");
    this.D_SRC_DMA_CFG.configure(this, null, "");
    this.D_SRC_DMA_CFG.set_rdl_tag("D_SRC_DMA_CFG_");
    this.D_SRC_DMA_CFG.set_reg_test_info(0, 0, 2);
    this.D_SRC_DMA_CFG.build();
    this.default_map.add_reg(this.D_SRC_DMA_CFG, `UVM_REG_ADDR_WIDTH'h74, "RW", 0);
    this.D_STATUS_NAN_INPUT_NUM = new("D_STATUS_NAN_INPUT_NUM");
    this.D_STATUS_NAN_INPUT_NUM.configure(this, null, "");
    this.D_STATUS_NAN_INPUT_NUM.set_rdl_tag("D_STATUS_NAN_INPUT_NUM_");
    this.D_STATUS_NAN_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_STATUS_NAN_INPUT_NUM.build();
    this.default_map.add_reg(this.D_STATUS_NAN_INPUT_NUM, `UVM_REG_ADDR_WIDTH'h78, "RO", 0);
    this.D_STATUS_INF_INPUT_NUM = new("D_STATUS_INF_INPUT_NUM");
    this.D_STATUS_INF_INPUT_NUM.configure(this, null, "");
    this.D_STATUS_INF_INPUT_NUM.set_rdl_tag("D_STATUS_INF_INPUT_NUM_");
    this.D_STATUS_INF_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_STATUS_INF_INPUT_NUM.build();
    this.default_map.add_reg(this.D_STATUS_INF_INPUT_NUM, `UVM_REG_ADDR_WIDTH'h7c, "RO", 0);
    this.D_PERF_ENABLE = new("D_PERF_ENABLE");
    this.D_PERF_ENABLE.configure(this, null, "");
    this.D_PERF_ENABLE.set_rdl_tag("D_PERF_ENABLE_");
    this.D_PERF_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_PERF_ENABLE.build();
    this.default_map.add_reg(this.D_PERF_ENABLE, `UVM_REG_ADDR_WIDTH'h80, "RW", 0);
    this.D_PERF_MRDMA_READ_STALL = new("D_PERF_MRDMA_READ_STALL");
    this.D_PERF_MRDMA_READ_STALL.configure(this, null, "");
    this.D_PERF_MRDMA_READ_STALL.set_rdl_tag("D_PERF_MRDMA_READ_STALL_");
    this.D_PERF_MRDMA_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_MRDMA_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_MRDMA_READ_STALL, `UVM_REG_ADDR_WIDTH'h84, "RO", 0);
    this.D_PERF_BRDMA_READ_STALL = new("D_PERF_BRDMA_READ_STALL");
    this.D_PERF_BRDMA_READ_STALL.configure(this, null, "");
    this.D_PERF_BRDMA_READ_STALL.set_rdl_tag("D_PERF_BRDMA_READ_STALL_");
    this.D_PERF_BRDMA_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_BRDMA_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_BRDMA_READ_STALL, `UVM_REG_ADDR_WIDTH'h88, "RO", 0);
    this.D_PERF_NRDMA_READ_STALL = new("D_PERF_NRDMA_READ_STALL");
    this.D_PERF_NRDMA_READ_STALL.configure(this, null, "");
    this.D_PERF_NRDMA_READ_STALL.set_rdl_tag("D_PERF_NRDMA_READ_STALL_");
    this.D_PERF_NRDMA_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_NRDMA_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_NRDMA_READ_STALL, `UVM_REG_ADDR_WIDTH'h8c, "RO", 0);
    this.D_PERF_ERDMA_READ_STALL = new("D_PERF_ERDMA_READ_STALL");
    this.D_PERF_ERDMA_READ_STALL.configure(this, null, "");
    this.D_PERF_ERDMA_READ_STALL.set_rdl_tag("D_PERF_ERDMA_READ_STALL_");
    this.D_PERF_ERDMA_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_ERDMA_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_ERDMA_READ_STALL, `UVM_REG_ADDR_WIDTH'h90, "RO", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_SDP_RDMA)
endclass : block_addrmap_NVDLA_NVDLA_SDP_RDMA

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_SDP_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_SDP_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_POINTER

// S_LUT_ACCESS_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_ADDR;
  rand uvm_reg_field_rdl LUT_TABLE_ID;
  rand uvm_reg_field_rdl LUT_ACCESS_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_ADDR = new("LUT_ADDR");
    this.LUT_ADDR.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_ADDR.configure(this, 10, 0, "RW", 0, 10'h0, 1, 1, 0);
    this.LUT_ADDR.add_def_property("spec_access", "rwt");
    this.LUT_ADDR.add_def_property("spec_sw_default", "0x0");
    this.LUT_ADDR.add_def_property("sw_default_mask", "0x0");
    this.LUT_ADDR.add_def_property("reset_mask", "0x3ff");
    this.LUT_TABLE_ID = new("LUT_TABLE_ID");
    this.LUT_TABLE_ID.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_TABLE_ID.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_TABLE_ID.add_def_property("spec_access", "rw");
    this.LUT_TABLE_ID.add_def_property("spec_sw_default", "0x0");
    this.LUT_TABLE_ID.add_def_property("sw_default_mask", "0x0");
    this.LUT_TABLE_ID.add_def_property("reset_mask", "0x1");
    this.LUT_ACCESS_TYPE = new("LUT_ACCESS_TYPE");
    this.LUT_ACCESS_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_ACCESS_TYPE.configure(this, 1, 17, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_ACCESS_TYPE.add_def_property("spec_access", "rw");
    this.LUT_ACCESS_TYPE.add_def_property("spec_sw_default", "0x0");
    this.LUT_ACCESS_TYPE.add_def_property("sw_default_mask", "0x0");
    this.LUT_ACCESS_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_ADDR"}, 0, 10);
    add_hdl_path_slice({rdl_reg_name, "LUT_TABLE_ID"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_ACCESS_TYPE"}, 17, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_CFG

// S_LUT_ACCESS_DATA
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_DATA extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_DATA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_DATA");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_DATA = new("LUT_DATA");
    this.LUT_DATA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_DATA.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.LUT_DATA.add_def_property("spec_access", "rwto");
    this.LUT_DATA.add_def_property("spec_sw_default", "0x0");
    this.LUT_DATA.add_def_property("sw_default_mask", "0x0");
    this.LUT_DATA.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_DATA"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_DATA

// S_LUT_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_FUNCTION;
  rand uvm_reg_field_rdl LUT_UFLOW_PRIORITY;
  rand uvm_reg_field_rdl LUT_OFLOW_PRIORITY;
  rand uvm_reg_field_rdl LUT_HYBRID_PRIORITY;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_FUNCTION = new("LUT_LE_FUNCTION");
    this.LUT_LE_FUNCTION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_FUNCTION.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_LE_FUNCTION.add_def_property("spec_access", "rw");
    this.LUT_LE_FUNCTION.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_FUNCTION.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_FUNCTION.add_def_property("reset_mask", "0x1");
    this.LUT_UFLOW_PRIORITY = new("LUT_UFLOW_PRIORITY");
    this.LUT_UFLOW_PRIORITY.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_UFLOW_PRIORITY.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_UFLOW_PRIORITY.add_def_property("spec_access", "rw");
    this.LUT_UFLOW_PRIORITY.add_def_property("spec_sw_default", "0x0");
    this.LUT_UFLOW_PRIORITY.add_def_property("sw_default_mask", "0x0");
    this.LUT_UFLOW_PRIORITY.add_def_property("reset_mask", "0x1");
    this.LUT_OFLOW_PRIORITY = new("LUT_OFLOW_PRIORITY");
    this.LUT_OFLOW_PRIORITY.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_OFLOW_PRIORITY.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_OFLOW_PRIORITY.add_def_property("spec_access", "rw");
    this.LUT_OFLOW_PRIORITY.add_def_property("spec_sw_default", "0x0");
    this.LUT_OFLOW_PRIORITY.add_def_property("sw_default_mask", "0x0");
    this.LUT_OFLOW_PRIORITY.add_def_property("reset_mask", "0x1");
    this.LUT_HYBRID_PRIORITY = new("LUT_HYBRID_PRIORITY");
    this.LUT_HYBRID_PRIORITY.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_HYBRID_PRIORITY.configure(this, 1, 6, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_HYBRID_PRIORITY.add_def_property("spec_access", "rw");
    this.LUT_HYBRID_PRIORITY.add_def_property("spec_sw_default", "0x0");
    this.LUT_HYBRID_PRIORITY.add_def_property("sw_default_mask", "0x0");
    this.LUT_HYBRID_PRIORITY.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_FUNCTION"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_UFLOW_PRIORITY"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_OFLOW_PRIORITY"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_HYBRID_PRIORITY"}, 6, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_CFG

// S_LUT_INFO
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_INFO extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_INDEX_OFFSET;
  rand uvm_reg_field_rdl LUT_LE_INDEX_SELECT;
  rand uvm_reg_field_rdl LUT_LO_INDEX_SELECT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_INFO");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_INDEX_OFFSET = new("LUT_LE_INDEX_OFFSET");
    this.LUT_LE_INDEX_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_INDEX_OFFSET.configure(this, 8, 0, "RW", 0, 8'h0, 1, 1, 0);
    this.LUT_LE_INDEX_OFFSET.add_def_property("spec_access", "rw");
    this.LUT_LE_INDEX_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_INDEX_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_INDEX_OFFSET.add_def_property("reset_mask", "0xff");
    this.LUT_LE_INDEX_SELECT = new("LUT_LE_INDEX_SELECT");
    this.LUT_LE_INDEX_SELECT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_INDEX_SELECT.configure(this, 8, 8, "RW", 0, 8'h0, 1, 1, 0);
    this.LUT_LE_INDEX_SELECT.add_def_property("spec_access", "rw");
    this.LUT_LE_INDEX_SELECT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_INDEX_SELECT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_INDEX_SELECT.add_def_property("reset_mask", "0xff");
    this.LUT_LO_INDEX_SELECT = new("LUT_LO_INDEX_SELECT");
    this.LUT_LO_INDEX_SELECT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_INDEX_SELECT.configure(this, 8, 16, "RW", 0, 8'h0, 1, 1, 0);
    this.LUT_LO_INDEX_SELECT.add_def_property("spec_access", "rw");
    this.LUT_LO_INDEX_SELECT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_INDEX_SELECT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_INDEX_SELECT.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_INDEX_OFFSET"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_INDEX_SELECT"}, 8, 8);
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_INDEX_SELECT"}, 16, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_INFO

// S_LUT_LE_START
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_START extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_START;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_START");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_START = new("LUT_LE_START");
    this.LUT_LE_START.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_START.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LE_START.add_def_property("spec_access", "rw");
    this.LUT_LE_START.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_START.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_START.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_START"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_START

// S_LUT_LE_END
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_END extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_END;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_END");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_END = new("LUT_LE_END");
    this.LUT_LE_END.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_END.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LE_END.add_def_property("spec_access", "rw");
    this.LUT_LE_END.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_END.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_END.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_END"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_END

// S_LUT_LO_START
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_START extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_START;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_START");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_START = new("LUT_LO_START");
    this.LUT_LO_START.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_START.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LO_START.add_def_property("spec_access", "rw");
    this.LUT_LO_START.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_START.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_START.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_START"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_START

// S_LUT_LO_END
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_END extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_END;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_END");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_END = new("LUT_LO_END");
    this.LUT_LO_END.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_END.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LO_END.add_def_property("spec_access", "rw");
    this.LUT_LO_END.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_END.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_END.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_END"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_END

// S_LUT_LE_SLOPE_SCALE
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_UFLOW_SCALE;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_OFLOW_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_SLOPE_UFLOW_SCALE = new("LUT_LE_SLOPE_UFLOW_SCALE");
    this.LUT_LE_SLOPE_UFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_UFLOW_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    this.LUT_LE_SLOPE_OFLOW_SCALE = new("LUT_LE_SLOPE_OFLOW_SCALE");
    this.LUT_LE_SLOPE_OFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_OFLOW_SCALE.configure(this, 16, 16, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_UFLOW_SCALE"}, 0, 16);
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_OFLOW_SCALE"}, 16, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE

// S_LUT_LE_SLOPE_SHIFT
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_UFLOW_SHIFT;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_OFLOW_SHIFT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_SLOPE_UFLOW_SHIFT = new("LUT_LE_SLOPE_UFLOW_SHIFT");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_UFLOW_SHIFT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    this.LUT_LE_SLOPE_OFLOW_SHIFT = new("LUT_LE_SLOPE_OFLOW_SHIFT");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_OFLOW_SHIFT.configure(this, 5, 5, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_UFLOW_SHIFT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_OFLOW_SHIFT"}, 5, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT

// S_LUT_LO_SLOPE_SCALE
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_UFLOW_SCALE;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_OFLOW_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_SLOPE_UFLOW_SCALE = new("LUT_LO_SLOPE_UFLOW_SCALE");
    this.LUT_LO_SLOPE_UFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_UFLOW_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    this.LUT_LO_SLOPE_OFLOW_SCALE = new("LUT_LO_SLOPE_OFLOW_SCALE");
    this.LUT_LO_SLOPE_OFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_OFLOW_SCALE.configure(this, 16, 16, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_UFLOW_SCALE"}, 0, 16);
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_OFLOW_SCALE"}, 16, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE

// S_LUT_LO_SLOPE_SHIFT
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_UFLOW_SHIFT;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_OFLOW_SHIFT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_SLOPE_UFLOW_SHIFT = new("LUT_LO_SLOPE_UFLOW_SHIFT");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_UFLOW_SHIFT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    this.LUT_LO_SLOPE_OFLOW_SHIFT = new("LUT_LO_SLOPE_OFLOW_SHIFT");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_OFLOW_SHIFT.configure(this, 5, 5, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_UFLOW_SHIFT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_OFLOW_SHIFT"}, 5, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_SDP_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_OP_ENABLE

// D_DATA_CUBE_WIDTH
class reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WIDTH = new("WIDTH");
    this.WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.WIDTH.add_def_property("spec_access", "rw");
    this.WIDTH.add_def_property("spec_sw_default", "0x0");
    this.WIDTH.add_def_property("sw_default_mask", "0x0");
    this.WIDTH.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WIDTH"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_WIDTH

// D_DATA_CUBE_HEIGHT
class reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_HEIGHT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_HEIGHT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.HEIGHT = new("HEIGHT");
    this.HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.HEIGHT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.HEIGHT.add_def_property("spec_access", "rw");
    this.HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "HEIGHT"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_HEIGHT

// D_DATA_CUBE_CHANNEL
class reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_CHANNEL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_CHANNEL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CHANNEL = new("CHANNEL");
    this.CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CHANNEL.add_def_property("spec_access", "rw");
    this.CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_CHANNEL

// D_DST_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_BASE_ADDR_LOW = new("DST_BASE_ADDR_LOW");
    this.DST_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.DST_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.DST_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.DST_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_LOW

// D_DST_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_BASE_ADDR_HIGH = new("DST_BASE_ADDR_HIGH");
    this.DST_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.DST_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.DST_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.DST_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_HIGH

// D_DST_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DST_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DST_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_LINE_STRIDE = new("DST_LINE_STRIDE");
    this.DST_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.DST_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DST_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DST_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DST_LINE_STRIDE

// D_DST_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DST_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DST_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_SURFACE_STRIDE = new("DST_SURFACE_STRIDE");
    this.DST_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.DST_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DST_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DST_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DST_SURFACE_STRIDE

// D_DP_BS_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_BYPASS;
  rand uvm_reg_field_rdl BS_ALU_BYPASS;
  rand uvm_reg_field_rdl BS_ALU_ALGO;
  rand uvm_reg_field_rdl BS_MUL_BYPASS;
  rand uvm_reg_field_rdl BS_MUL_PRELU;
  rand uvm_reg_field_rdl BS_RELU_BYPASS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_BYPASS = new("BS_BYPASS");
    this.BS_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_BYPASS.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.BS_BYPASS.add_def_property("spec_access", "rw");
    this.BS_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BS_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BS_BYPASS.add_def_property("reset_mask", "0x1");
    this.BS_ALU_BYPASS = new("BS_ALU_BYPASS");
    this.BS_ALU_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_ALU_BYPASS.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.BS_ALU_BYPASS.add_def_property("spec_access", "rw");
    this.BS_ALU_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BS_ALU_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BS_ALU_BYPASS.add_def_property("reset_mask", "0x1");
    this.BS_ALU_ALGO = new("BS_ALU_ALGO");
    this.BS_ALU_ALGO.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_ALU_ALGO.configure(this, 2, 2, "RW", 0, 2'h0, 1, 1, 0);
    this.BS_ALU_ALGO.add_def_property("spec_access", "rw");
    this.BS_ALU_ALGO.add_def_property("spec_sw_default", "0x0");
    this.BS_ALU_ALGO.add_def_property("sw_default_mask", "0x0");
    this.BS_ALU_ALGO.add_def_property("reset_mask", "0x3");
    this.BS_MUL_BYPASS = new("BS_MUL_BYPASS");
    this.BS_MUL_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_MUL_BYPASS.configure(this, 1, 4, "RW", 0, 1'h1, 1, 1, 0);
    this.BS_MUL_BYPASS.add_def_property("spec_access", "rw");
    this.BS_MUL_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BS_MUL_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BS_MUL_BYPASS.add_def_property("reset_mask", "0x1");
    this.BS_MUL_PRELU = new("BS_MUL_PRELU");
    this.BS_MUL_PRELU.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_MUL_PRELU.configure(this, 1, 5, "RW", 0, 1'h1, 1, 1, 0);
    this.BS_MUL_PRELU.add_def_property("spec_access", "rw");
    this.BS_MUL_PRELU.add_def_property("spec_sw_default", "0x0");
    this.BS_MUL_PRELU.add_def_property("sw_default_mask", "0x0");
    this.BS_MUL_PRELU.add_def_property("reset_mask", "0x1");
    this.BS_RELU_BYPASS = new("BS_RELU_BYPASS");
    this.BS_RELU_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_RELU_BYPASS.configure(this, 1, 6, "RW", 0, 1'h1, 1, 1, 0);
    this.BS_RELU_BYPASS.add_def_property("spec_access", "rw");
    this.BS_RELU_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BS_RELU_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BS_RELU_BYPASS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_BYPASS"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "BS_ALU_BYPASS"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "BS_ALU_ALGO"}, 2, 2);
    add_hdl_path_slice({rdl_reg_name, "BS_MUL_BYPASS"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "BS_MUL_PRELU"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "BS_RELU_BYPASS"}, 6, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_CFG

// D_DP_BS_ALU_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_ALU_SRC;
  rand uvm_reg_field_rdl BS_ALU_SHIFT_VALUE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_ALU_SRC = new("BS_ALU_SRC");
    this.BS_ALU_SRC.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_ALU_SRC.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.BS_ALU_SRC.add_def_property("spec_access", "rw");
    this.BS_ALU_SRC.add_def_property("spec_sw_default", "0x0");
    this.BS_ALU_SRC.add_def_property("sw_default_mask", "0x0");
    this.BS_ALU_SRC.add_def_property("reset_mask", "0x1");
    this.BS_ALU_SHIFT_VALUE = new("BS_ALU_SHIFT_VALUE");
    this.BS_ALU_SHIFT_VALUE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_ALU_SHIFT_VALUE.configure(this, 6, 8, "RW", 0, 6'h0, 1, 1, 0);
    this.BS_ALU_SHIFT_VALUE.add_def_property("spec_access", "rw");
    this.BS_ALU_SHIFT_VALUE.add_def_property("spec_sw_default", "0x0");
    this.BS_ALU_SHIFT_VALUE.add_def_property("sw_default_mask", "0x0");
    this.BS_ALU_SHIFT_VALUE.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_ALU_SRC"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "BS_ALU_SHIFT_VALUE"}, 8, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_CFG

// D_DP_BS_ALU_SRC_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_ALU_OPERAND;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_ALU_OPERAND = new("BS_ALU_OPERAND");
    this.BS_ALU_OPERAND.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_ALU_OPERAND.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.BS_ALU_OPERAND.add_def_property("spec_access", "rw");
    this.BS_ALU_OPERAND.add_def_property("spec_sw_default", "0x0");
    this.BS_ALU_OPERAND.add_def_property("sw_default_mask", "0x0");
    this.BS_ALU_OPERAND.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_ALU_OPERAND"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE

// D_DP_BS_MUL_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_MUL_SRC;
  rand uvm_reg_field_rdl BS_MUL_SHIFT_VALUE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_MUL_SRC = new("BS_MUL_SRC");
    this.BS_MUL_SRC.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_MUL_SRC.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.BS_MUL_SRC.add_def_property("spec_access", "rw");
    this.BS_MUL_SRC.add_def_property("spec_sw_default", "0x0");
    this.BS_MUL_SRC.add_def_property("sw_default_mask", "0x0");
    this.BS_MUL_SRC.add_def_property("reset_mask", "0x1");
    this.BS_MUL_SHIFT_VALUE = new("BS_MUL_SHIFT_VALUE");
    this.BS_MUL_SHIFT_VALUE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_MUL_SHIFT_VALUE.configure(this, 8, 8, "RW", 0, 8'h0, 1, 1, 0);
    this.BS_MUL_SHIFT_VALUE.add_def_property("spec_access", "rw");
    this.BS_MUL_SHIFT_VALUE.add_def_property("spec_sw_default", "0x0");
    this.BS_MUL_SHIFT_VALUE.add_def_property("sw_default_mask", "0x0");
    this.BS_MUL_SHIFT_VALUE.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_MUL_SRC"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "BS_MUL_SHIFT_VALUE"}, 8, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_CFG

// D_DP_BS_MUL_SRC_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_MUL_OPERAND;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_MUL_OPERAND = new("BS_MUL_OPERAND");
    this.BS_MUL_OPERAND.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_MUL_OPERAND.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.BS_MUL_OPERAND.add_def_property("spec_access", "rw");
    this.BS_MUL_OPERAND.add_def_property("spec_sw_default", "0x0");
    this.BS_MUL_OPERAND.add_def_property("sw_default_mask", "0x0");
    this.BS_MUL_OPERAND.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_MUL_OPERAND"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE

// D_DP_BN_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_BYPASS;
  rand uvm_reg_field_rdl BN_ALU_BYPASS;
  rand uvm_reg_field_rdl BN_ALU_ALGO;
  rand uvm_reg_field_rdl BN_MUL_BYPASS;
  rand uvm_reg_field_rdl BN_MUL_PRELU;
  rand uvm_reg_field_rdl BN_RELU_BYPASS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_BYPASS = new("BN_BYPASS");
    this.BN_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_BYPASS.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.BN_BYPASS.add_def_property("spec_access", "rw");
    this.BN_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BN_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BN_BYPASS.add_def_property("reset_mask", "0x1");
    this.BN_ALU_BYPASS = new("BN_ALU_BYPASS");
    this.BN_ALU_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_ALU_BYPASS.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.BN_ALU_BYPASS.add_def_property("spec_access", "rw");
    this.BN_ALU_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BN_ALU_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BN_ALU_BYPASS.add_def_property("reset_mask", "0x1");
    this.BN_ALU_ALGO = new("BN_ALU_ALGO");
    this.BN_ALU_ALGO.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_ALU_ALGO.configure(this, 2, 2, "RW", 0, 2'h0, 1, 1, 0);
    this.BN_ALU_ALGO.add_def_property("spec_access", "rw");
    this.BN_ALU_ALGO.add_def_property("spec_sw_default", "0x0");
    this.BN_ALU_ALGO.add_def_property("sw_default_mask", "0x0");
    this.BN_ALU_ALGO.add_def_property("reset_mask", "0x3");
    this.BN_MUL_BYPASS = new("BN_MUL_BYPASS");
    this.BN_MUL_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_MUL_BYPASS.configure(this, 1, 4, "RW", 0, 1'h1, 1, 1, 0);
    this.BN_MUL_BYPASS.add_def_property("spec_access", "rw");
    this.BN_MUL_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BN_MUL_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BN_MUL_BYPASS.add_def_property("reset_mask", "0x1");
    this.BN_MUL_PRELU = new("BN_MUL_PRELU");
    this.BN_MUL_PRELU.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_MUL_PRELU.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.BN_MUL_PRELU.add_def_property("spec_access", "rw");
    this.BN_MUL_PRELU.add_def_property("spec_sw_default", "0x0");
    this.BN_MUL_PRELU.add_def_property("sw_default_mask", "0x0");
    this.BN_MUL_PRELU.add_def_property("reset_mask", "0x1");
    this.BN_RELU_BYPASS = new("BN_RELU_BYPASS");
    this.BN_RELU_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_RELU_BYPASS.configure(this, 1, 6, "RW", 0, 1'h1, 1, 1, 0);
    this.BN_RELU_BYPASS.add_def_property("spec_access", "rw");
    this.BN_RELU_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BN_RELU_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BN_RELU_BYPASS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_BYPASS"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "BN_ALU_BYPASS"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "BN_ALU_ALGO"}, 2, 2);
    add_hdl_path_slice({rdl_reg_name, "BN_MUL_BYPASS"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "BN_MUL_PRELU"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "BN_RELU_BYPASS"}, 6, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_CFG

// D_DP_BN_ALU_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_ALU_SRC;
  rand uvm_reg_field_rdl BN_ALU_SHIFT_VALUE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_ALU_SRC = new("BN_ALU_SRC");
    this.BN_ALU_SRC.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_ALU_SRC.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.BN_ALU_SRC.add_def_property("spec_access", "rw");
    this.BN_ALU_SRC.add_def_property("spec_sw_default", "0x0");
    this.BN_ALU_SRC.add_def_property("sw_default_mask", "0x0");
    this.BN_ALU_SRC.add_def_property("reset_mask", "0x1");
    this.BN_ALU_SHIFT_VALUE = new("BN_ALU_SHIFT_VALUE");
    this.BN_ALU_SHIFT_VALUE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_ALU_SHIFT_VALUE.configure(this, 6, 8, "RW", 0, 6'h0, 1, 1, 0);
    this.BN_ALU_SHIFT_VALUE.add_def_property("spec_access", "rw");
    this.BN_ALU_SHIFT_VALUE.add_def_property("spec_sw_default", "0x0");
    this.BN_ALU_SHIFT_VALUE.add_def_property("sw_default_mask", "0x0");
    this.BN_ALU_SHIFT_VALUE.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_ALU_SRC"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "BN_ALU_SHIFT_VALUE"}, 8, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_CFG

// D_DP_BN_ALU_SRC_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_ALU_OPERAND;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_ALU_OPERAND = new("BN_ALU_OPERAND");
    this.BN_ALU_OPERAND.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_ALU_OPERAND.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.BN_ALU_OPERAND.add_def_property("spec_access", "rw");
    this.BN_ALU_OPERAND.add_def_property("spec_sw_default", "0x0");
    this.BN_ALU_OPERAND.add_def_property("sw_default_mask", "0x0");
    this.BN_ALU_OPERAND.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_ALU_OPERAND"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE

// D_DP_BN_MUL_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_MUL_SRC;
  rand uvm_reg_field_rdl BN_MUL_SHIFT_VALUE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_MUL_SRC = new("BN_MUL_SRC");
    this.BN_MUL_SRC.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_MUL_SRC.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.BN_MUL_SRC.add_def_property("spec_access", "rw");
    this.BN_MUL_SRC.add_def_property("spec_sw_default", "0x0");
    this.BN_MUL_SRC.add_def_property("sw_default_mask", "0x0");
    this.BN_MUL_SRC.add_def_property("reset_mask", "0x1");
    this.BN_MUL_SHIFT_VALUE = new("BN_MUL_SHIFT_VALUE");
    this.BN_MUL_SHIFT_VALUE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_MUL_SHIFT_VALUE.configure(this, 8, 8, "RW", 0, 8'h0, 1, 1, 0);
    this.BN_MUL_SHIFT_VALUE.add_def_property("spec_access", "rw");
    this.BN_MUL_SHIFT_VALUE.add_def_property("spec_sw_default", "0x0");
    this.BN_MUL_SHIFT_VALUE.add_def_property("sw_default_mask", "0x0");
    this.BN_MUL_SHIFT_VALUE.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_MUL_SRC"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "BN_MUL_SHIFT_VALUE"}, 8, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_CFG

// D_DP_BN_MUL_SRC_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_MUL_OPERAND;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_MUL_OPERAND = new("BN_MUL_OPERAND");
    this.BN_MUL_OPERAND.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_MUL_OPERAND.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.BN_MUL_OPERAND.add_def_property("spec_access", "rw");
    this.BN_MUL_OPERAND.add_def_property("spec_sw_default", "0x0");
    this.BN_MUL_OPERAND.add_def_property("sw_default_mask", "0x0");
    this.BN_MUL_OPERAND.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_MUL_OPERAND"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE

// D_DP_EW_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_BYPASS;
  rand uvm_reg_field_rdl EW_ALU_BYPASS;
  rand uvm_reg_field_rdl EW_ALU_ALGO;
  rand uvm_reg_field_rdl EW_MUL_BYPASS;
  rand uvm_reg_field_rdl EW_MUL_PRELU;
  rand uvm_reg_field_rdl EW_LUT_BYPASS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_BYPASS = new("EW_BYPASS");
    this.EW_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_BYPASS.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.EW_BYPASS.add_def_property("spec_access", "rw");
    this.EW_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.EW_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.EW_BYPASS.add_def_property("reset_mask", "0x1");
    this.EW_ALU_BYPASS = new("EW_ALU_BYPASS");
    this.EW_ALU_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_BYPASS.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.EW_ALU_BYPASS.add_def_property("spec_access", "rw");
    this.EW_ALU_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.EW_ALU_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_BYPASS.add_def_property("reset_mask", "0x1");
    this.EW_ALU_ALGO = new("EW_ALU_ALGO");
    this.EW_ALU_ALGO.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_ALGO.configure(this, 2, 2, "RW", 0, 2'h0, 1, 1, 0);
    this.EW_ALU_ALGO.add_def_property("spec_access", "rw");
    this.EW_ALU_ALGO.add_def_property("spec_sw_default", "0x0");
    this.EW_ALU_ALGO.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_ALGO.add_def_property("reset_mask", "0x3");
    this.EW_MUL_BYPASS = new("EW_MUL_BYPASS");
    this.EW_MUL_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_BYPASS.configure(this, 1, 4, "RW", 0, 1'h1, 1, 1, 0);
    this.EW_MUL_BYPASS.add_def_property("spec_access", "rw");
    this.EW_MUL_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.EW_MUL_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_BYPASS.add_def_property("reset_mask", "0x1");
    this.EW_MUL_PRELU = new("EW_MUL_PRELU");
    this.EW_MUL_PRELU.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_PRELU.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.EW_MUL_PRELU.add_def_property("spec_access", "rw");
    this.EW_MUL_PRELU.add_def_property("spec_sw_default", "0x0");
    this.EW_MUL_PRELU.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_PRELU.add_def_property("reset_mask", "0x1");
    this.EW_LUT_BYPASS = new("EW_LUT_BYPASS");
    this.EW_LUT_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_LUT_BYPASS.configure(this, 1, 6, "RW", 0, 1'h1, 1, 1, 0);
    this.EW_LUT_BYPASS.add_def_property("spec_access", "rw");
    this.EW_LUT_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.EW_LUT_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.EW_LUT_BYPASS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_BYPASS"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_BYPASS"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_ALGO"}, 2, 2);
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_BYPASS"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_PRELU"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "EW_LUT_BYPASS"}, 6, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_CFG

// D_DP_EW_ALU_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_ALU_SRC;
  rand uvm_reg_field_rdl EW_ALU_CVT_BYPASS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_ALU_SRC = new("EW_ALU_SRC");
    this.EW_ALU_SRC.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_SRC.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.EW_ALU_SRC.add_def_property("spec_access", "rw");
    this.EW_ALU_SRC.add_def_property("spec_sw_default", "0x0");
    this.EW_ALU_SRC.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_SRC.add_def_property("reset_mask", "0x1");
    this.EW_ALU_CVT_BYPASS = new("EW_ALU_CVT_BYPASS");
    this.EW_ALU_CVT_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_CVT_BYPASS.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.EW_ALU_CVT_BYPASS.add_def_property("spec_access", "rw");
    this.EW_ALU_CVT_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.EW_ALU_CVT_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_CVT_BYPASS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_SRC"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_CVT_BYPASS"}, 1, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CFG

// D_DP_EW_ALU_SRC_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_ALU_OPERAND;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_ALU_OPERAND = new("EW_ALU_OPERAND");
    this.EW_ALU_OPERAND.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_OPERAND.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_ALU_OPERAND.add_def_property("spec_access", "rw");
    this.EW_ALU_OPERAND.add_def_property("spec_sw_default", "0x0");
    this.EW_ALU_OPERAND.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_OPERAND.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_OPERAND"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE

// D_DP_EW_ALU_CVT_OFFSET_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_ALU_CVT_OFFSET;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_ALU_CVT_OFFSET = new("EW_ALU_CVT_OFFSET");
    this.EW_ALU_CVT_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_CVT_OFFSET.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_ALU_CVT_OFFSET.add_def_property("spec_access", "rw");
    this.EW_ALU_CVT_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.EW_ALU_CVT_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_CVT_OFFSET.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_CVT_OFFSET"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE

// D_DP_EW_ALU_CVT_SCALE_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_ALU_CVT_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_ALU_CVT_SCALE = new("EW_ALU_CVT_SCALE");
    this.EW_ALU_CVT_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_CVT_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.EW_ALU_CVT_SCALE.add_def_property("spec_access", "rw");
    this.EW_ALU_CVT_SCALE.add_def_property("spec_sw_default", "0x0");
    this.EW_ALU_CVT_SCALE.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_CVT_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_CVT_SCALE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE

// D_DP_EW_ALU_CVT_TRUNCATE_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_ALU_CVT_TRUNCATE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_ALU_CVT_TRUNCATE = new("EW_ALU_CVT_TRUNCATE");
    this.EW_ALU_CVT_TRUNCATE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_CVT_TRUNCATE.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.EW_ALU_CVT_TRUNCATE.add_def_property("spec_access", "rw");
    this.EW_ALU_CVT_TRUNCATE.add_def_property("spec_sw_default", "0x0");
    this.EW_ALU_CVT_TRUNCATE.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_CVT_TRUNCATE.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_CVT_TRUNCATE"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE

// D_DP_EW_MUL_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_MUL_SRC;
  rand uvm_reg_field_rdl EW_MUL_CVT_BYPASS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_MUL_SRC = new("EW_MUL_SRC");
    this.EW_MUL_SRC.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_SRC.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.EW_MUL_SRC.add_def_property("spec_access", "rw");
    this.EW_MUL_SRC.add_def_property("spec_sw_default", "0x0");
    this.EW_MUL_SRC.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_SRC.add_def_property("reset_mask", "0x1");
    this.EW_MUL_CVT_BYPASS = new("EW_MUL_CVT_BYPASS");
    this.EW_MUL_CVT_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_CVT_BYPASS.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.EW_MUL_CVT_BYPASS.add_def_property("spec_access", "rw");
    this.EW_MUL_CVT_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.EW_MUL_CVT_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_CVT_BYPASS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_SRC"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_CVT_BYPASS"}, 1, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CFG

// D_DP_EW_MUL_SRC_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_MUL_OPERAND;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_MUL_OPERAND = new("EW_MUL_OPERAND");
    this.EW_MUL_OPERAND.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_OPERAND.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_MUL_OPERAND.add_def_property("spec_access", "rw");
    this.EW_MUL_OPERAND.add_def_property("spec_sw_default", "0x0");
    this.EW_MUL_OPERAND.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_OPERAND.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_OPERAND"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE

// D_DP_EW_MUL_CVT_OFFSET_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_MUL_CVT_OFFSET;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_MUL_CVT_OFFSET = new("EW_MUL_CVT_OFFSET");
    this.EW_MUL_CVT_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_CVT_OFFSET.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_MUL_CVT_OFFSET.add_def_property("spec_access", "rw");
    this.EW_MUL_CVT_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.EW_MUL_CVT_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_CVT_OFFSET.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_CVT_OFFSET"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE

// D_DP_EW_MUL_CVT_SCALE_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_MUL_CVT_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_MUL_CVT_SCALE = new("EW_MUL_CVT_SCALE");
    this.EW_MUL_CVT_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_CVT_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.EW_MUL_CVT_SCALE.add_def_property("spec_access", "rw");
    this.EW_MUL_CVT_SCALE.add_def_property("spec_sw_default", "0x0");
    this.EW_MUL_CVT_SCALE.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_CVT_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_CVT_SCALE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE

// D_DP_EW_MUL_CVT_TRUNCATE_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_MUL_CVT_TRUNCATE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_MUL_CVT_TRUNCATE = new("EW_MUL_CVT_TRUNCATE");
    this.EW_MUL_CVT_TRUNCATE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_CVT_TRUNCATE.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.EW_MUL_CVT_TRUNCATE.add_def_property("spec_access", "rw");
    this.EW_MUL_CVT_TRUNCATE.add_def_property("spec_sw_default", "0x0");
    this.EW_MUL_CVT_TRUNCATE.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_CVT_TRUNCATE.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_CVT_TRUNCATE"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE

// D_DP_EW_TRUNCATE_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_TRUNCATE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_TRUNCATE = new("EW_TRUNCATE");
    this.EW_TRUNCATE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_TRUNCATE.configure(this, 10, 0, "RW", 0, 10'h0, 1, 1, 1);
    this.EW_TRUNCATE.add_def_property("spec_access", "rw");
    this.EW_TRUNCATE.add_def_property("spec_sw_default", "0x0");
    this.EW_TRUNCATE.add_def_property("sw_default_mask", "0x0");
    this.EW_TRUNCATE.add_def_property("reset_mask", "0x3ff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_TRUNCATE"}, 0, 10);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE

// D_FEATURE_MODE_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_FEATURE_MODE_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl FLYING_MODE;
  rand uvm_reg_field_rdl OUTPUT_DST;
  rand uvm_reg_field_rdl WINOGRAD;
  rand uvm_reg_field_rdl NAN_TO_ZERO;
  rand uvm_reg_field_rdl BATCH_NUMBER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_FEATURE_MODE_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.FLYING_MODE = new("FLYING_MODE");
    this.FLYING_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.FLYING_MODE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.FLYING_MODE.add_def_property("spec_access", "rw");
    this.FLYING_MODE.add_def_property("spec_sw_default", "0x0");
    this.FLYING_MODE.add_def_property("sw_default_mask", "0x0");
    this.FLYING_MODE.add_def_property("reset_mask", "0x1");
    this.OUTPUT_DST = new("OUTPUT_DST");
    this.OUTPUT_DST.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OUTPUT_DST.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.OUTPUT_DST.add_def_property("spec_access", "rw");
    this.OUTPUT_DST.add_def_property("spec_sw_default", "0x0");
    this.OUTPUT_DST.add_def_property("sw_default_mask", "0x0");
    this.OUTPUT_DST.add_def_property("reset_mask", "0x1");
    this.WINOGRAD = new("WINOGRAD");
    this.WINOGRAD.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WINOGRAD.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.WINOGRAD.add_def_property("spec_access", "rw");
    this.WINOGRAD.add_def_property("spec_sw_default", "0x0");
    this.WINOGRAD.add_def_property("sw_default_mask", "0x0");
    this.WINOGRAD.add_def_property("reset_mask", "0x1");
    this.NAN_TO_ZERO = new("NAN_TO_ZERO");
    this.NAN_TO_ZERO.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NAN_TO_ZERO.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.NAN_TO_ZERO.add_def_property("spec_access", "rw");
    this.NAN_TO_ZERO.add_def_property("spec_sw_default", "0x0");
    this.NAN_TO_ZERO.add_def_property("sw_default_mask", "0x0");
    this.NAN_TO_ZERO.add_def_property("reset_mask", "0x1");
    this.BATCH_NUMBER = new("BATCH_NUMBER");
    this.BATCH_NUMBER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BATCH_NUMBER.configure(this, 5, 8, "RW", 0, 5'h0, 1, 1, 0);
    this.BATCH_NUMBER.add_def_property("spec_access", "rw");
    this.BATCH_NUMBER.add_def_property("spec_sw_default", "0x0");
    this.BATCH_NUMBER.add_def_property("sw_default_mask", "0x0");
    this.BATCH_NUMBER.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "FLYING_MODE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "OUTPUT_DST"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "WINOGRAD"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "NAN_TO_ZERO"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "BATCH_NUMBER"}, 8, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_FEATURE_MODE_CFG

// D_DST_DMA_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DST_DMA_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DST_DMA_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_RAM_TYPE = new("DST_RAM_TYPE");
    this.DST_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DST_RAM_TYPE.add_def_property("spec_access", "rw");
    this.DST_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.DST_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.DST_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DST_DMA_CFG

// D_DST_BATCH_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BATCH_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_BATCH_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BATCH_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_BATCH_STRIDE = new("DST_BATCH_STRIDE");
    this.DST_BATCH_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_BATCH_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_BATCH_STRIDE.add_def_property("spec_access", "rw");
    this.DST_BATCH_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DST_BATCH_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DST_BATCH_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_BATCH_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BATCH_STRIDE

// D_DATA_FORMAT
class reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PROC_PRECISION;
  rand uvm_reg_field_rdl OUT_PRECISION;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PROC_PRECISION = new("PROC_PRECISION");
    this.PROC_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PROC_PRECISION.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 0);
    this.PROC_PRECISION.add_def_property("spec_access", "rw");
    this.PROC_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.PROC_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.PROC_PRECISION.add_def_property("reset_mask", "0x3");
    this.OUT_PRECISION = new("OUT_PRECISION");
    this.OUT_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OUT_PRECISION.configure(this, 2, 2, "RW", 0, 2'h0, 1, 1, 0);
    this.OUT_PRECISION.add_def_property("spec_access", "rw");
    this.OUT_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.OUT_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.OUT_PRECISION.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PROC_PRECISION"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "OUT_PRECISION"}, 2, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_FORMAT

// D_CVT_OFFSET
class reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_OFFSET extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CVT_OFFSET;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_OFFSET");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CVT_OFFSET = new("CVT_OFFSET");
    this.CVT_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CVT_OFFSET.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.CVT_OFFSET.add_def_property("spec_access", "rw");
    this.CVT_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.CVT_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.CVT_OFFSET.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CVT_OFFSET"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_OFFSET

// D_CVT_SCALE
class reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CVT_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CVT_SCALE = new("CVT_SCALE");
    this.CVT_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CVT_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.CVT_SCALE.add_def_property("spec_access", "rw");
    this.CVT_SCALE.add_def_property("spec_sw_default", "0x0");
    this.CVT_SCALE.add_def_property("sw_default_mask", "0x0");
    this.CVT_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CVT_SCALE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SCALE

// D_CVT_SHIFT
class reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SHIFT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CVT_SHIFT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SHIFT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CVT_SHIFT = new("CVT_SHIFT");
    this.CVT_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CVT_SHIFT.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.CVT_SHIFT.add_def_property("spec_access", "rw");
    this.CVT_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.CVT_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.CVT_SHIFT.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CVT_SHIFT"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SHIFT

// D_STATUS
class reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_UNEQUAL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_UNEQUAL = new("STATUS_UNEQUAL");
    this.STATUS_UNEQUAL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_UNEQUAL.configure(this, 1, 0, "RO", 1, 1'h0, 1, 0, 1);
    this.STATUS_UNEQUAL.add_def_property("spec_access", "r");
    this.STATUS_UNEQUAL.add_def_property("spec_sw_default", "0x0");
    this.STATUS_UNEQUAL.add_def_property("sw_default_mask", "0x0");
    this.STATUS_UNEQUAL.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_UNEQUAL"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS

// D_STATUS_NAN_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_NAN_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_NAN_INPUT_NUM = new("STATUS_NAN_INPUT_NUM");
    this.STATUS_NAN_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_NAN_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.STATUS_NAN_INPUT_NUM.add_def_property("spec_access", "r");
    this.STATUS_NAN_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.STATUS_NAN_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.STATUS_NAN_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_NAN_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM

// D_STATUS_INF_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_INF_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_INF_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_INF_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_INF_INPUT_NUM = new("STATUS_INF_INPUT_NUM");
    this.STATUS_INF_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_INF_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.STATUS_INF_INPUT_NUM.add_def_property("spec_access", "r");
    this.STATUS_INF_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.STATUS_INF_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.STATUS_INF_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_INF_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_INF_INPUT_NUM

// D_STATUS_NAN_OUTPUT_NUM
class reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_NAN_OUTPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_NAN_OUTPUT_NUM = new("STATUS_NAN_OUTPUT_NUM");
    this.STATUS_NAN_OUTPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_NAN_OUTPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.STATUS_NAN_OUTPUT_NUM.add_def_property("spec_access", "r");
    this.STATUS_NAN_OUTPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.STATUS_NAN_OUTPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.STATUS_NAN_OUTPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_NAN_OUTPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM

// D_PERF_ENABLE
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_DMA_EN;
  rand uvm_reg_field_rdl PERF_LUT_EN;
  rand uvm_reg_field_rdl PERF_SAT_EN;
  rand uvm_reg_field_rdl PERF_NAN_INF_COUNT_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_DMA_EN = new("PERF_DMA_EN");
    this.PERF_DMA_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PERF_DMA_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PERF_DMA_EN.add_def_property("spec_access", "rw");
    this.PERF_DMA_EN.add_def_property("spec_sw_default", "0x0");
    this.PERF_DMA_EN.add_def_property("sw_default_mask", "0x0");
    this.PERF_DMA_EN.add_def_property("reset_mask", "0x1");
    this.PERF_LUT_EN = new("PERF_LUT_EN");
    this.PERF_LUT_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PERF_LUT_EN.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.PERF_LUT_EN.add_def_property("spec_access", "rw");
    this.PERF_LUT_EN.add_def_property("spec_sw_default", "0x0");
    this.PERF_LUT_EN.add_def_property("sw_default_mask", "0x0");
    this.PERF_LUT_EN.add_def_property("reset_mask", "0x1");
    this.PERF_SAT_EN = new("PERF_SAT_EN");
    this.PERF_SAT_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PERF_SAT_EN.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.PERF_SAT_EN.add_def_property("spec_access", "rw");
    this.PERF_SAT_EN.add_def_property("spec_sw_default", "0x0");
    this.PERF_SAT_EN.add_def_property("sw_default_mask", "0x0");
    this.PERF_SAT_EN.add_def_property("reset_mask", "0x1");
    this.PERF_NAN_INF_COUNT_EN = new("PERF_NAN_INF_COUNT_EN");
    this.PERF_NAN_INF_COUNT_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PERF_NAN_INF_COUNT_EN.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.PERF_NAN_INF_COUNT_EN.add_def_property("spec_access", "rw");
    this.PERF_NAN_INF_COUNT_EN.add_def_property("spec_sw_default", "0x0");
    this.PERF_NAN_INF_COUNT_EN.add_def_property("sw_default_mask", "0x0");
    this.PERF_NAN_INF_COUNT_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_DMA_EN"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "PERF_LUT_EN"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "PERF_SAT_EN"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "PERF_NAN_INF_COUNT_EN"}, 3, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_ENABLE

// D_PERF_WDMA_WRITE_STALL
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WDMA_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WDMA_STALL = new("WDMA_STALL");
    this.WDMA_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.WDMA_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.WDMA_STALL.add_def_property("spec_access", "r");
    this.WDMA_STALL.add_def_property("spec_sw_default", "0x0");
    this.WDMA_STALL.add_def_property("sw_default_mask", "0x0");
    this.WDMA_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WDMA_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL

// D_PERF_LUT_UFLOW
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_UFLOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_UFLOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_UFLOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_UFLOW = new("LUT_UFLOW");
    this.LUT_UFLOW.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.LUT_UFLOW.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.LUT_UFLOW.add_def_property("spec_access", "r");
    this.LUT_UFLOW.add_def_property("spec_sw_default", "0x0");
    this.LUT_UFLOW.add_def_property("sw_default_mask", "0x0");
    this.LUT_UFLOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_UFLOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_UFLOW

// D_PERF_LUT_OFLOW
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_OFLOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_OFLOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_OFLOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_OFLOW = new("LUT_OFLOW");
    this.LUT_OFLOW.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.LUT_OFLOW.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.LUT_OFLOW.add_def_property("spec_access", "r");
    this.LUT_OFLOW.add_def_property("spec_sw_default", "0x0");
    this.LUT_OFLOW.add_def_property("sw_default_mask", "0x0");
    this.LUT_OFLOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_OFLOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_OFLOW

// D_PERF_OUT_SATURATION
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_OUT_SATURATION extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OUT_SATURATION;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_OUT_SATURATION");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OUT_SATURATION = new("OUT_SATURATION");
    this.OUT_SATURATION.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.OUT_SATURATION.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.OUT_SATURATION.add_def_property("spec_access", "r");
    this.OUT_SATURATION.add_def_property("spec_sw_default", "0x0");
    this.OUT_SATURATION.add_def_property("sw_default_mask", "0x0");
    this.OUT_SATURATION.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OUT_SATURATION"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_OUT_SATURATION

// D_PERF_LUT_HYBRID
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_HYBRID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_HYBRID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_HYBRID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_HYBRID = new("LUT_HYBRID");
    this.LUT_HYBRID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.LUT_HYBRID.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.LUT_HYBRID.add_def_property("spec_access", "r");
    this.LUT_HYBRID.add_def_property("spec_sw_default", "0x0");
    this.LUT_HYBRID.add_def_property("sw_default_mask", "0x0");
    this.LUT_HYBRID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_HYBRID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_HYBRID

// D_PERF_LUT_LE_HIT
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LE_HIT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_HIT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LE_HIT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_HIT = new("LUT_LE_HIT");
    this.LUT_LE_HIT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.LUT_LE_HIT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.LUT_LE_HIT.add_def_property("spec_access", "r");
    this.LUT_LE_HIT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_HIT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_HIT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_HIT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LE_HIT

// D_PERF_LUT_LO_HIT
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LO_HIT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_HIT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LO_HIT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_HIT = new("LUT_LO_HIT");
    this.LUT_LO_HIT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.LUT_LO_HIT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.LUT_LO_HIT.add_def_property("spec_access", "r");
    this.LUT_LO_HIT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_HIT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_HIT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_HIT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LO_HIT

// Block NVDLA_SDP
class block_addrmap_NVDLA_NVDLA_SDP extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_CFG S_LUT_ACCESS_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_DATA S_LUT_ACCESS_DATA;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_CFG S_LUT_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_INFO S_LUT_INFO;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_START S_LUT_LE_START;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_END S_LUT_LE_END;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_START S_LUT_LO_START;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_END S_LUT_LO_END;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE S_LUT_LE_SLOPE_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT S_LUT_LE_SLOPE_SHIFT;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE S_LUT_LO_SLOPE_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT S_LUT_LO_SLOPE_SHIFT;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_WIDTH D_DATA_CUBE_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_HEIGHT D_DATA_CUBE_HEIGHT;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_CHANNEL D_DATA_CUBE_CHANNEL;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_LOW D_DST_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_HIGH D_DST_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DST_LINE_STRIDE D_DST_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DST_SURFACE_STRIDE D_DST_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_CFG D_DP_BS_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_CFG D_DP_BS_ALU_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE D_DP_BS_ALU_SRC_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_CFG D_DP_BS_MUL_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE D_DP_BS_MUL_SRC_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_CFG D_DP_BN_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_CFG D_DP_BN_ALU_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE D_DP_BN_ALU_SRC_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_CFG D_DP_BN_MUL_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE D_DP_BN_MUL_SRC_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_CFG D_DP_EW_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CFG D_DP_EW_ALU_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE D_DP_EW_ALU_SRC_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE D_DP_EW_ALU_CVT_OFFSET_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE D_DP_EW_ALU_CVT_SCALE_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE D_DP_EW_ALU_CVT_TRUNCATE_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CFG D_DP_EW_MUL_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE D_DP_EW_MUL_SRC_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE D_DP_EW_MUL_CVT_OFFSET_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE D_DP_EW_MUL_CVT_SCALE_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE D_DP_EW_MUL_CVT_TRUNCATE_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE D_DP_EW_TRUNCATE_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_FEATURE_MODE_CFG D_FEATURE_MODE_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DST_DMA_CFG D_DST_DMA_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BATCH_STRIDE D_DST_BATCH_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_FORMAT D_DATA_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_OFFSET D_CVT_OFFSET;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SCALE D_CVT_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SHIFT D_CVT_SHIFT;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS D_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM D_STATUS_NAN_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_INF_INPUT_NUM D_STATUS_INF_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM D_STATUS_NAN_OUTPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_ENABLE D_PERF_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL D_PERF_WDMA_WRITE_STALL;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_UFLOW D_PERF_LUT_UFLOW;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_OFLOW D_PERF_LUT_OFLOW;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_OUT_SATURATION D_PERF_OUT_SATURATION;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_HYBRID D_PERF_LUT_HYBRID;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LE_HIT D_PERF_LUT_LE_HIT;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LO_HIT D_PERF_LUT_LO_HIT;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_SDP");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.S_LUT_ACCESS_CFG = new("S_LUT_ACCESS_CFG");
    this.S_LUT_ACCESS_CFG.configure(this, null, "");
    this.S_LUT_ACCESS_CFG.set_rdl_tag("S_LUT_ACCESS_CFG_");
    this.S_LUT_ACCESS_CFG.set_reg_test_info(0, 0, 2);
    this.S_LUT_ACCESS_CFG.build();
    this.default_map.add_reg(this.S_LUT_ACCESS_CFG, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.S_LUT_ACCESS_DATA = new("S_LUT_ACCESS_DATA");
    this.S_LUT_ACCESS_DATA.configure(this, null, "");
    this.S_LUT_ACCESS_DATA.set_rdl_tag("S_LUT_ACCESS_DATA_");
    this.S_LUT_ACCESS_DATA.set_reg_test_info(0, 0, 2);
    this.S_LUT_ACCESS_DATA.build();
    this.default_map.add_reg(this.S_LUT_ACCESS_DATA, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.S_LUT_CFG = new("S_LUT_CFG");
    this.S_LUT_CFG.configure(this, null, "");
    this.S_LUT_CFG.set_rdl_tag("S_LUT_CFG_");
    this.S_LUT_CFG.set_reg_test_info(0, 0, 2);
    this.S_LUT_CFG.build();
    this.default_map.add_reg(this.S_LUT_CFG, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.S_LUT_INFO = new("S_LUT_INFO");
    this.S_LUT_INFO.configure(this, null, "");
    this.S_LUT_INFO.set_rdl_tag("S_LUT_INFO_");
    this.S_LUT_INFO.set_reg_test_info(0, 0, 2);
    this.S_LUT_INFO.build();
    this.default_map.add_reg(this.S_LUT_INFO, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.S_LUT_LE_START = new("S_LUT_LE_START");
    this.S_LUT_LE_START.configure(this, null, "");
    this.S_LUT_LE_START.set_rdl_tag("S_LUT_LE_START_");
    this.S_LUT_LE_START.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_START.build();
    this.default_map.add_reg(this.S_LUT_LE_START, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.S_LUT_LE_END = new("S_LUT_LE_END");
    this.S_LUT_LE_END.configure(this, null, "");
    this.S_LUT_LE_END.set_rdl_tag("S_LUT_LE_END_");
    this.S_LUT_LE_END.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_END.build();
    this.default_map.add_reg(this.S_LUT_LE_END, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.S_LUT_LO_START = new("S_LUT_LO_START");
    this.S_LUT_LO_START.configure(this, null, "");
    this.S_LUT_LO_START.set_rdl_tag("S_LUT_LO_START_");
    this.S_LUT_LO_START.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_START.build();
    this.default_map.add_reg(this.S_LUT_LO_START, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.S_LUT_LO_END = new("S_LUT_LO_END");
    this.S_LUT_LO_END.configure(this, null, "");
    this.S_LUT_LO_END.set_rdl_tag("S_LUT_LO_END_");
    this.S_LUT_LO_END.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_END.build();
    this.default_map.add_reg(this.S_LUT_LO_END, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.S_LUT_LE_SLOPE_SCALE = new("S_LUT_LE_SLOPE_SCALE");
    this.S_LUT_LE_SLOPE_SCALE.configure(this, null, "");
    this.S_LUT_LE_SLOPE_SCALE.set_rdl_tag("S_LUT_LE_SLOPE_SCALE_");
    this.S_LUT_LE_SLOPE_SCALE.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_SLOPE_SCALE.build();
    this.default_map.add_reg(this.S_LUT_LE_SLOPE_SCALE, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.S_LUT_LE_SLOPE_SHIFT = new("S_LUT_LE_SLOPE_SHIFT");
    this.S_LUT_LE_SLOPE_SHIFT.configure(this, null, "");
    this.S_LUT_LE_SLOPE_SHIFT.set_rdl_tag("S_LUT_LE_SLOPE_SHIFT_");
    this.S_LUT_LE_SLOPE_SHIFT.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_SLOPE_SHIFT.build();
    this.default_map.add_reg(this.S_LUT_LE_SLOPE_SHIFT, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.S_LUT_LO_SLOPE_SCALE = new("S_LUT_LO_SLOPE_SCALE");
    this.S_LUT_LO_SLOPE_SCALE.configure(this, null, "");
    this.S_LUT_LO_SLOPE_SCALE.set_rdl_tag("S_LUT_LO_SLOPE_SCALE_");
    this.S_LUT_LO_SLOPE_SCALE.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_SLOPE_SCALE.build();
    this.default_map.add_reg(this.S_LUT_LO_SLOPE_SCALE, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.S_LUT_LO_SLOPE_SHIFT = new("S_LUT_LO_SLOPE_SHIFT");
    this.S_LUT_LO_SLOPE_SHIFT.configure(this, null, "");
    this.S_LUT_LO_SLOPE_SHIFT.set_rdl_tag("S_LUT_LO_SLOPE_SHIFT_");
    this.S_LUT_LO_SLOPE_SHIFT.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_SLOPE_SHIFT.build();
    this.default_map.add_reg(this.S_LUT_LO_SLOPE_SHIFT, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.D_DATA_CUBE_WIDTH = new("D_DATA_CUBE_WIDTH");
    this.D_DATA_CUBE_WIDTH.configure(this, null, "");
    this.D_DATA_CUBE_WIDTH.set_rdl_tag("D_DATA_CUBE_WIDTH_");
    this.D_DATA_CUBE_WIDTH.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_WIDTH.build();
    this.default_map.add_reg(this.D_DATA_CUBE_WIDTH, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.D_DATA_CUBE_HEIGHT = new("D_DATA_CUBE_HEIGHT");
    this.D_DATA_CUBE_HEIGHT.configure(this, null, "");
    this.D_DATA_CUBE_HEIGHT.set_rdl_tag("D_DATA_CUBE_HEIGHT_");
    this.D_DATA_CUBE_HEIGHT.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_HEIGHT.build();
    this.default_map.add_reg(this.D_DATA_CUBE_HEIGHT, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.D_DATA_CUBE_CHANNEL = new("D_DATA_CUBE_CHANNEL");
    this.D_DATA_CUBE_CHANNEL.configure(this, null, "");
    this.D_DATA_CUBE_CHANNEL.set_rdl_tag("D_DATA_CUBE_CHANNEL_");
    this.D_DATA_CUBE_CHANNEL.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_CHANNEL.build();
    this.default_map.add_reg(this.D_DATA_CUBE_CHANNEL, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.D_DST_BASE_ADDR_LOW = new("D_DST_BASE_ADDR_LOW");
    this.D_DST_BASE_ADDR_LOW.configure(this, null, "");
    this.D_DST_BASE_ADDR_LOW.set_rdl_tag("D_DST_BASE_ADDR_LOW_");
    this.D_DST_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_DST_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_DST_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.D_DST_BASE_ADDR_HIGH = new("D_DST_BASE_ADDR_HIGH");
    this.D_DST_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_DST_BASE_ADDR_HIGH.set_rdl_tag("D_DST_BASE_ADDR_HIGH_");
    this.D_DST_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_DST_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_DST_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h4c, "RW", 0);
    this.D_DST_LINE_STRIDE = new("D_DST_LINE_STRIDE");
    this.D_DST_LINE_STRIDE.configure(this, null, "");
    this.D_DST_LINE_STRIDE.set_rdl_tag("D_DST_LINE_STRIDE_");
    this.D_DST_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DST_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_DST_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h50, "RW", 0);
    this.D_DST_SURFACE_STRIDE = new("D_DST_SURFACE_STRIDE");
    this.D_DST_SURFACE_STRIDE.configure(this, null, "");
    this.D_DST_SURFACE_STRIDE.set_rdl_tag("D_DST_SURFACE_STRIDE_");
    this.D_DST_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DST_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_DST_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h54, "RW", 0);
    this.D_DP_BS_CFG = new("D_DP_BS_CFG");
    this.D_DP_BS_CFG.configure(this, null, "");
    this.D_DP_BS_CFG.set_rdl_tag("D_DP_BS_CFG_");
    this.D_DP_BS_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_BS_CFG.build();
    this.default_map.add_reg(this.D_DP_BS_CFG, `UVM_REG_ADDR_WIDTH'h58, "RW", 0);
    this.D_DP_BS_ALU_CFG = new("D_DP_BS_ALU_CFG");
    this.D_DP_BS_ALU_CFG.configure(this, null, "");
    this.D_DP_BS_ALU_CFG.set_rdl_tag("D_DP_BS_ALU_CFG_");
    this.D_DP_BS_ALU_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_BS_ALU_CFG.build();
    this.default_map.add_reg(this.D_DP_BS_ALU_CFG, `UVM_REG_ADDR_WIDTH'h5c, "RW", 0);
    this.D_DP_BS_ALU_SRC_VALUE = new("D_DP_BS_ALU_SRC_VALUE");
    this.D_DP_BS_ALU_SRC_VALUE.configure(this, null, "");
    this.D_DP_BS_ALU_SRC_VALUE.set_rdl_tag("D_DP_BS_ALU_SRC_VALUE_");
    this.D_DP_BS_ALU_SRC_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_BS_ALU_SRC_VALUE.build();
    this.default_map.add_reg(this.D_DP_BS_ALU_SRC_VALUE, `UVM_REG_ADDR_WIDTH'h60, "RW", 0);
    this.D_DP_BS_MUL_CFG = new("D_DP_BS_MUL_CFG");
    this.D_DP_BS_MUL_CFG.configure(this, null, "");
    this.D_DP_BS_MUL_CFG.set_rdl_tag("D_DP_BS_MUL_CFG_");
    this.D_DP_BS_MUL_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_BS_MUL_CFG.build();
    this.default_map.add_reg(this.D_DP_BS_MUL_CFG, `UVM_REG_ADDR_WIDTH'h64, "RW", 0);
    this.D_DP_BS_MUL_SRC_VALUE = new("D_DP_BS_MUL_SRC_VALUE");
    this.D_DP_BS_MUL_SRC_VALUE.configure(this, null, "");
    this.D_DP_BS_MUL_SRC_VALUE.set_rdl_tag("D_DP_BS_MUL_SRC_VALUE_");
    this.D_DP_BS_MUL_SRC_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_BS_MUL_SRC_VALUE.build();
    this.default_map.add_reg(this.D_DP_BS_MUL_SRC_VALUE, `UVM_REG_ADDR_WIDTH'h68, "RW", 0);
    this.D_DP_BN_CFG = new("D_DP_BN_CFG");
    this.D_DP_BN_CFG.configure(this, null, "");
    this.D_DP_BN_CFG.set_rdl_tag("D_DP_BN_CFG_");
    this.D_DP_BN_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_BN_CFG.build();
    this.default_map.add_reg(this.D_DP_BN_CFG, `UVM_REG_ADDR_WIDTH'h6c, "RW", 0);
    this.D_DP_BN_ALU_CFG = new("D_DP_BN_ALU_CFG");
    this.D_DP_BN_ALU_CFG.configure(this, null, "");
    this.D_DP_BN_ALU_CFG.set_rdl_tag("D_DP_BN_ALU_CFG_");
    this.D_DP_BN_ALU_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_BN_ALU_CFG.build();
    this.default_map.add_reg(this.D_DP_BN_ALU_CFG, `UVM_REG_ADDR_WIDTH'h70, "RW", 0);
    this.D_DP_BN_ALU_SRC_VALUE = new("D_DP_BN_ALU_SRC_VALUE");
    this.D_DP_BN_ALU_SRC_VALUE.configure(this, null, "");
    this.D_DP_BN_ALU_SRC_VALUE.set_rdl_tag("D_DP_BN_ALU_SRC_VALUE_");
    this.D_DP_BN_ALU_SRC_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_BN_ALU_SRC_VALUE.build();
    this.default_map.add_reg(this.D_DP_BN_ALU_SRC_VALUE, `UVM_REG_ADDR_WIDTH'h74, "RW", 0);
    this.D_DP_BN_MUL_CFG = new("D_DP_BN_MUL_CFG");
    this.D_DP_BN_MUL_CFG.configure(this, null, "");
    this.D_DP_BN_MUL_CFG.set_rdl_tag("D_DP_BN_MUL_CFG_");
    this.D_DP_BN_MUL_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_BN_MUL_CFG.build();
    this.default_map.add_reg(this.D_DP_BN_MUL_CFG, `UVM_REG_ADDR_WIDTH'h78, "RW", 0);
    this.D_DP_BN_MUL_SRC_VALUE = new("D_DP_BN_MUL_SRC_VALUE");
    this.D_DP_BN_MUL_SRC_VALUE.configure(this, null, "");
    this.D_DP_BN_MUL_SRC_VALUE.set_rdl_tag("D_DP_BN_MUL_SRC_VALUE_");
    this.D_DP_BN_MUL_SRC_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_BN_MUL_SRC_VALUE.build();
    this.default_map.add_reg(this.D_DP_BN_MUL_SRC_VALUE, `UVM_REG_ADDR_WIDTH'h7c, "RW", 0);
    this.D_DP_EW_CFG = new("D_DP_EW_CFG");
    this.D_DP_EW_CFG.configure(this, null, "");
    this.D_DP_EW_CFG.set_rdl_tag("D_DP_EW_CFG_");
    this.D_DP_EW_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_CFG.build();
    this.default_map.add_reg(this.D_DP_EW_CFG, `UVM_REG_ADDR_WIDTH'h80, "RW", 0);
    this.D_DP_EW_ALU_CFG = new("D_DP_EW_ALU_CFG");
    this.D_DP_EW_ALU_CFG.configure(this, null, "");
    this.D_DP_EW_ALU_CFG.set_rdl_tag("D_DP_EW_ALU_CFG_");
    this.D_DP_EW_ALU_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_ALU_CFG.build();
    this.default_map.add_reg(this.D_DP_EW_ALU_CFG, `UVM_REG_ADDR_WIDTH'h84, "RW", 0);
    this.D_DP_EW_ALU_SRC_VALUE = new("D_DP_EW_ALU_SRC_VALUE");
    this.D_DP_EW_ALU_SRC_VALUE.configure(this, null, "");
    this.D_DP_EW_ALU_SRC_VALUE.set_rdl_tag("D_DP_EW_ALU_SRC_VALUE_");
    this.D_DP_EW_ALU_SRC_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_ALU_SRC_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_ALU_SRC_VALUE, `UVM_REG_ADDR_WIDTH'h88, "RW", 0);
    this.D_DP_EW_ALU_CVT_OFFSET_VALUE = new("D_DP_EW_ALU_CVT_OFFSET_VALUE");
    this.D_DP_EW_ALU_CVT_OFFSET_VALUE.configure(this, null, "");
    this.D_DP_EW_ALU_CVT_OFFSET_VALUE.set_rdl_tag("D_DP_EW_ALU_CVT_OFFSET_VALUE_");
    this.D_DP_EW_ALU_CVT_OFFSET_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_ALU_CVT_OFFSET_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_ALU_CVT_OFFSET_VALUE, `UVM_REG_ADDR_WIDTH'h8c, "RW", 0);
    this.D_DP_EW_ALU_CVT_SCALE_VALUE = new("D_DP_EW_ALU_CVT_SCALE_VALUE");
    this.D_DP_EW_ALU_CVT_SCALE_VALUE.configure(this, null, "");
    this.D_DP_EW_ALU_CVT_SCALE_VALUE.set_rdl_tag("D_DP_EW_ALU_CVT_SCALE_VALUE_");
    this.D_DP_EW_ALU_CVT_SCALE_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_ALU_CVT_SCALE_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_ALU_CVT_SCALE_VALUE, `UVM_REG_ADDR_WIDTH'h90, "RW", 0);
    this.D_DP_EW_ALU_CVT_TRUNCATE_VALUE = new("D_DP_EW_ALU_CVT_TRUNCATE_VALUE");
    this.D_DP_EW_ALU_CVT_TRUNCATE_VALUE.configure(this, null, "");
    this.D_DP_EW_ALU_CVT_TRUNCATE_VALUE.set_rdl_tag("D_DP_EW_ALU_CVT_TRUNCATE_VALUE_");
    this.D_DP_EW_ALU_CVT_TRUNCATE_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_ALU_CVT_TRUNCATE_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_ALU_CVT_TRUNCATE_VALUE, `UVM_REG_ADDR_WIDTH'h94, "RW", 0);
    this.D_DP_EW_MUL_CFG = new("D_DP_EW_MUL_CFG");
    this.D_DP_EW_MUL_CFG.configure(this, null, "");
    this.D_DP_EW_MUL_CFG.set_rdl_tag("D_DP_EW_MUL_CFG_");
    this.D_DP_EW_MUL_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_MUL_CFG.build();
    this.default_map.add_reg(this.D_DP_EW_MUL_CFG, `UVM_REG_ADDR_WIDTH'h98, "RW", 0);
    this.D_DP_EW_MUL_SRC_VALUE = new("D_DP_EW_MUL_SRC_VALUE");
    this.D_DP_EW_MUL_SRC_VALUE.configure(this, null, "");
    this.D_DP_EW_MUL_SRC_VALUE.set_rdl_tag("D_DP_EW_MUL_SRC_VALUE_");
    this.D_DP_EW_MUL_SRC_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_MUL_SRC_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_MUL_SRC_VALUE, `UVM_REG_ADDR_WIDTH'h9c, "RW", 0);
    this.D_DP_EW_MUL_CVT_OFFSET_VALUE = new("D_DP_EW_MUL_CVT_OFFSET_VALUE");
    this.D_DP_EW_MUL_CVT_OFFSET_VALUE.configure(this, null, "");
    this.D_DP_EW_MUL_CVT_OFFSET_VALUE.set_rdl_tag("D_DP_EW_MUL_CVT_OFFSET_VALUE_");
    this.D_DP_EW_MUL_CVT_OFFSET_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_MUL_CVT_OFFSET_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_MUL_CVT_OFFSET_VALUE, `UVM_REG_ADDR_WIDTH'ha0, "RW", 0);
    this.D_DP_EW_MUL_CVT_SCALE_VALUE = new("D_DP_EW_MUL_CVT_SCALE_VALUE");
    this.D_DP_EW_MUL_CVT_SCALE_VALUE.configure(this, null, "");
    this.D_DP_EW_MUL_CVT_SCALE_VALUE.set_rdl_tag("D_DP_EW_MUL_CVT_SCALE_VALUE_");
    this.D_DP_EW_MUL_CVT_SCALE_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_MUL_CVT_SCALE_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_MUL_CVT_SCALE_VALUE, `UVM_REG_ADDR_WIDTH'ha4, "RW", 0);
    this.D_DP_EW_MUL_CVT_TRUNCATE_VALUE = new("D_DP_EW_MUL_CVT_TRUNCATE_VALUE");
    this.D_DP_EW_MUL_CVT_TRUNCATE_VALUE.configure(this, null, "");
    this.D_DP_EW_MUL_CVT_TRUNCATE_VALUE.set_rdl_tag("D_DP_EW_MUL_CVT_TRUNCATE_VALUE_");
    this.D_DP_EW_MUL_CVT_TRUNCATE_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_MUL_CVT_TRUNCATE_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_MUL_CVT_TRUNCATE_VALUE, `UVM_REG_ADDR_WIDTH'ha8, "RW", 0);
    this.D_DP_EW_TRUNCATE_VALUE = new("D_DP_EW_TRUNCATE_VALUE");
    this.D_DP_EW_TRUNCATE_VALUE.configure(this, null, "");
    this.D_DP_EW_TRUNCATE_VALUE.set_rdl_tag("D_DP_EW_TRUNCATE_VALUE_");
    this.D_DP_EW_TRUNCATE_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_TRUNCATE_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_TRUNCATE_VALUE, `UVM_REG_ADDR_WIDTH'hac, "RW", 0);
    this.D_FEATURE_MODE_CFG = new("D_FEATURE_MODE_CFG");
    this.D_FEATURE_MODE_CFG.configure(this, null, "");
    this.D_FEATURE_MODE_CFG.set_rdl_tag("D_FEATURE_MODE_CFG_");
    this.D_FEATURE_MODE_CFG.set_reg_test_info(0, 0, 2);
    this.D_FEATURE_MODE_CFG.build();
    this.default_map.add_reg(this.D_FEATURE_MODE_CFG, `UVM_REG_ADDR_WIDTH'hb0, "RW", 0);
    this.D_DST_DMA_CFG = new("D_DST_DMA_CFG");
    this.D_DST_DMA_CFG.configure(this, null, "");
    this.D_DST_DMA_CFG.set_rdl_tag("D_DST_DMA_CFG_");
    this.D_DST_DMA_CFG.set_reg_test_info(0, 0, 2);
    this.D_DST_DMA_CFG.build();
    this.default_map.add_reg(this.D_DST_DMA_CFG, `UVM_REG_ADDR_WIDTH'hb4, "RW", 0);
    this.D_DST_BATCH_STRIDE = new("D_DST_BATCH_STRIDE");
    this.D_DST_BATCH_STRIDE.configure(this, null, "");
    this.D_DST_BATCH_STRIDE.set_rdl_tag("D_DST_BATCH_STRIDE_");
    this.D_DST_BATCH_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DST_BATCH_STRIDE.build();
    this.default_map.add_reg(this.D_DST_BATCH_STRIDE, `UVM_REG_ADDR_WIDTH'hb8, "RW", 0);
    this.D_DATA_FORMAT = new("D_DATA_FORMAT");
    this.D_DATA_FORMAT.configure(this, null, "");
    this.D_DATA_FORMAT.set_rdl_tag("D_DATA_FORMAT_");
    this.D_DATA_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_DATA_FORMAT.build();
    this.default_map.add_reg(this.D_DATA_FORMAT, `UVM_REG_ADDR_WIDTH'hbc, "RW", 0);
    this.D_CVT_OFFSET = new("D_CVT_OFFSET");
    this.D_CVT_OFFSET.configure(this, null, "");
    this.D_CVT_OFFSET.set_rdl_tag("D_CVT_OFFSET_");
    this.D_CVT_OFFSET.set_reg_test_info(0, 0, 2);
    this.D_CVT_OFFSET.build();
    this.default_map.add_reg(this.D_CVT_OFFSET, `UVM_REG_ADDR_WIDTH'hc0, "RW", 0);
    this.D_CVT_SCALE = new("D_CVT_SCALE");
    this.D_CVT_SCALE.configure(this, null, "");
    this.D_CVT_SCALE.set_rdl_tag("D_CVT_SCALE_");
    this.D_CVT_SCALE.set_reg_test_info(0, 0, 2);
    this.D_CVT_SCALE.build();
    this.default_map.add_reg(this.D_CVT_SCALE, `UVM_REG_ADDR_WIDTH'hc4, "RW", 0);
    this.D_CVT_SHIFT = new("D_CVT_SHIFT");
    this.D_CVT_SHIFT.configure(this, null, "");
    this.D_CVT_SHIFT.set_rdl_tag("D_CVT_SHIFT_");
    this.D_CVT_SHIFT.set_reg_test_info(0, 0, 2);
    this.D_CVT_SHIFT.build();
    this.default_map.add_reg(this.D_CVT_SHIFT, `UVM_REG_ADDR_WIDTH'hc8, "RW", 0);
    this.D_STATUS = new("D_STATUS");
    this.D_STATUS.configure(this, null, "");
    this.D_STATUS.set_rdl_tag("D_STATUS_");
    this.D_STATUS.set_reg_test_info(0, 0, 32);
    this.D_STATUS.build();
    this.default_map.add_reg(this.D_STATUS, `UVM_REG_ADDR_WIDTH'hcc, "RO", 0);
    this.D_STATUS_NAN_INPUT_NUM = new("D_STATUS_NAN_INPUT_NUM");
    this.D_STATUS_NAN_INPUT_NUM.configure(this, null, "");
    this.D_STATUS_NAN_INPUT_NUM.set_rdl_tag("D_STATUS_NAN_INPUT_NUM_");
    this.D_STATUS_NAN_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_STATUS_NAN_INPUT_NUM.build();
    this.default_map.add_reg(this.D_STATUS_NAN_INPUT_NUM, `UVM_REG_ADDR_WIDTH'hd0, "RO", 0);
    this.D_STATUS_INF_INPUT_NUM = new("D_STATUS_INF_INPUT_NUM");
    this.D_STATUS_INF_INPUT_NUM.configure(this, null, "");
    this.D_STATUS_INF_INPUT_NUM.set_rdl_tag("D_STATUS_INF_INPUT_NUM_");
    this.D_STATUS_INF_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_STATUS_INF_INPUT_NUM.build();
    this.default_map.add_reg(this.D_STATUS_INF_INPUT_NUM, `UVM_REG_ADDR_WIDTH'hd4, "RO", 0);
    this.D_STATUS_NAN_OUTPUT_NUM = new("D_STATUS_NAN_OUTPUT_NUM");
    this.D_STATUS_NAN_OUTPUT_NUM.configure(this, null, "");
    this.D_STATUS_NAN_OUTPUT_NUM.set_rdl_tag("D_STATUS_NAN_OUTPUT_NUM_");
    this.D_STATUS_NAN_OUTPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_STATUS_NAN_OUTPUT_NUM.build();
    this.default_map.add_reg(this.D_STATUS_NAN_OUTPUT_NUM, `UVM_REG_ADDR_WIDTH'hd8, "RO", 0);
    this.D_PERF_ENABLE = new("D_PERF_ENABLE");
    this.D_PERF_ENABLE.configure(this, null, "");
    this.D_PERF_ENABLE.set_rdl_tag("D_PERF_ENABLE_");
    this.D_PERF_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_PERF_ENABLE.build();
    this.default_map.add_reg(this.D_PERF_ENABLE, `UVM_REG_ADDR_WIDTH'hdc, "RW", 0);
    this.D_PERF_WDMA_WRITE_STALL = new("D_PERF_WDMA_WRITE_STALL");
    this.D_PERF_WDMA_WRITE_STALL.configure(this, null, "");
    this.D_PERF_WDMA_WRITE_STALL.set_rdl_tag("D_PERF_WDMA_WRITE_STALL_");
    this.D_PERF_WDMA_WRITE_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_WDMA_WRITE_STALL.build();
    this.default_map.add_reg(this.D_PERF_WDMA_WRITE_STALL, `UVM_REG_ADDR_WIDTH'he0, "RO", 0);
    this.D_PERF_LUT_UFLOW = new("D_PERF_LUT_UFLOW");
    this.D_PERF_LUT_UFLOW.configure(this, null, "");
    this.D_PERF_LUT_UFLOW.set_rdl_tag("D_PERF_LUT_UFLOW_");
    this.D_PERF_LUT_UFLOW.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_UFLOW.build();
    this.default_map.add_reg(this.D_PERF_LUT_UFLOW, `UVM_REG_ADDR_WIDTH'he4, "RO", 0);
    this.D_PERF_LUT_OFLOW = new("D_PERF_LUT_OFLOW");
    this.D_PERF_LUT_OFLOW.configure(this, null, "");
    this.D_PERF_LUT_OFLOW.set_rdl_tag("D_PERF_LUT_OFLOW_");
    this.D_PERF_LUT_OFLOW.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_OFLOW.build();
    this.default_map.add_reg(this.D_PERF_LUT_OFLOW, `UVM_REG_ADDR_WIDTH'he8, "RO", 0);
    this.D_PERF_OUT_SATURATION = new("D_PERF_OUT_SATURATION");
    this.D_PERF_OUT_SATURATION.configure(this, null, "");
    this.D_PERF_OUT_SATURATION.set_rdl_tag("D_PERF_OUT_SATURATION_");
    this.D_PERF_OUT_SATURATION.set_reg_test_info(0, 0, 32);
    this.D_PERF_OUT_SATURATION.build();
    this.default_map.add_reg(this.D_PERF_OUT_SATURATION, `UVM_REG_ADDR_WIDTH'hec, "RO", 0);
    this.D_PERF_LUT_HYBRID = new("D_PERF_LUT_HYBRID");
    this.D_PERF_LUT_HYBRID.configure(this, null, "");
    this.D_PERF_LUT_HYBRID.set_rdl_tag("D_PERF_LUT_HYBRID_");
    this.D_PERF_LUT_HYBRID.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_HYBRID.build();
    this.default_map.add_reg(this.D_PERF_LUT_HYBRID, `UVM_REG_ADDR_WIDTH'hf0, "RO", 0);
    this.D_PERF_LUT_LE_HIT = new("D_PERF_LUT_LE_HIT");
    this.D_PERF_LUT_LE_HIT.configure(this, null, "");
    this.D_PERF_LUT_LE_HIT.set_rdl_tag("D_PERF_LUT_LE_HIT_");
    this.D_PERF_LUT_LE_HIT.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_LE_HIT.build();
    this.default_map.add_reg(this.D_PERF_LUT_LE_HIT, `UVM_REG_ADDR_WIDTH'hf4, "RO", 0);
    this.D_PERF_LUT_LO_HIT = new("D_PERF_LUT_LO_HIT");
    this.D_PERF_LUT_LO_HIT.configure(this, null, "");
    this.D_PERF_LUT_LO_HIT.set_rdl_tag("D_PERF_LUT_LO_HIT_");
    this.D_PERF_LUT_LO_HIT.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_LO_HIT.build();
    this.default_map.add_reg(this.D_PERF_LUT_LO_HIT, `UVM_REG_ADDR_WIDTH'hf8, "RO", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_SDP)
endclass : block_addrmap_NVDLA_NVDLA_SDP

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_S_POINTER

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_OP_ENABLE

// D_DATA_CUBE_IN_WIDTH
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CUBE_IN_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CUBE_IN_WIDTH = new("CUBE_IN_WIDTH");
    this.CUBE_IN_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CUBE_IN_WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CUBE_IN_WIDTH.add_def_property("spec_access", "rw");
    this.CUBE_IN_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.CUBE_IN_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.CUBE_IN_WIDTH.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CUBE_IN_WIDTH"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH

// D_DATA_CUBE_IN_HEIGHT
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CUBE_IN_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CUBE_IN_HEIGHT = new("CUBE_IN_HEIGHT");
    this.CUBE_IN_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CUBE_IN_HEIGHT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CUBE_IN_HEIGHT.add_def_property("spec_access", "rw");
    this.CUBE_IN_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.CUBE_IN_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.CUBE_IN_HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CUBE_IN_HEIGHT"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT

// D_DATA_CUBE_IN_CHANNEL
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CUBE_IN_CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CUBE_IN_CHANNEL = new("CUBE_IN_CHANNEL");
    this.CUBE_IN_CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CUBE_IN_CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CUBE_IN_CHANNEL.add_def_property("spec_access", "rw");
    this.CUBE_IN_CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.CUBE_IN_CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.CUBE_IN_CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CUBE_IN_CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL

// D_FLYING_MODE
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_FLYING_MODE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl FLYING_MODE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_FLYING_MODE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.FLYING_MODE = new("FLYING_MODE");
    this.FLYING_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.FLYING_MODE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.FLYING_MODE.add_def_property("spec_access", "rw");
    this.FLYING_MODE.add_def_property("spec_sw_default", "0x0");
    this.FLYING_MODE.add_def_property("sw_default_mask", "0x0");
    this.FLYING_MODE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "FLYING_MODE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_FLYING_MODE

// D_SRC_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_BASE_ADDR_LOW = new("SRC_BASE_ADDR_LOW");
    this.SRC_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.SRC_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.SRC_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.SRC_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW

// D_SRC_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_BASE_ADDR_HIGH = new("SRC_BASE_ADDR_HIGH");
    this.SRC_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.SRC_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.SRC_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.SRC_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH

// D_SRC_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_LINE_STRIDE = new("SRC_LINE_STRIDE");
    this.SRC_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.SRC_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.SRC_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.SRC_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE

// D_SRC_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_SURFACE_STRIDE = new("SRC_SURFACE_STRIDE");
    this.SRC_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.SRC_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.SRC_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.SRC_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE

// D_SRC_RAM_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_RAM_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_RAM_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_RAM_TYPE = new("SRC_RAM_TYPE");
    this.SRC_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.SRC_RAM_TYPE.add_def_property("spec_access", "rw");
    this.SRC_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.SRC_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.SRC_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_RAM_CFG

// D_DATA_FORMAT
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl INPUT_DATA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.INPUT_DATA = new("INPUT_DATA");
    this.INPUT_DATA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.INPUT_DATA.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 1);
    this.INPUT_DATA.add_def_property("spec_access", "rw");
    this.INPUT_DATA.add_def_property("spec_sw_default", "0x0");
    this.INPUT_DATA.add_def_property("sw_default_mask", "0x0");
    this.INPUT_DATA.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "INPUT_DATA"}, 0, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_FORMAT

// D_OPERATION_MODE_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SPLIT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SPLIT_NUM = new("SPLIT_NUM");
    this.SPLIT_NUM.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SPLIT_NUM.configure(this, 8, 0, "RW", 0, 8'h0, 1, 1, 1);
    this.SPLIT_NUM.add_def_property("spec_access", "rw");
    this.SPLIT_NUM.add_def_property("spec_sw_default", "0x0");
    this.SPLIT_NUM.add_def_property("sw_default_mask", "0x0");
    this.SPLIT_NUM.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SPLIT_NUM"}, 0, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG

// D_POOLING_KERNEL_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl KERNEL_WIDTH;
  rand uvm_reg_field_rdl KERNEL_STRIDE_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.KERNEL_WIDTH = new("KERNEL_WIDTH");
    this.KERNEL_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.KERNEL_WIDTH.configure(this, 4, 0, "RW", 0, 4'h0, 1, 1, 0);
    this.KERNEL_WIDTH.add_def_property("spec_access", "rw");
    this.KERNEL_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.KERNEL_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.KERNEL_WIDTH.add_def_property("reset_mask", "0xf");
    this.KERNEL_STRIDE_WIDTH = new("KERNEL_STRIDE_WIDTH");
    this.KERNEL_STRIDE_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.KERNEL_STRIDE_WIDTH.configure(this, 4, 4, "RW", 0, 4'h0, 1, 1, 0);
    this.KERNEL_STRIDE_WIDTH.add_def_property("spec_access", "rw");
    this.KERNEL_STRIDE_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.KERNEL_STRIDE_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.KERNEL_STRIDE_WIDTH.add_def_property("reset_mask", "0xf");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "KERNEL_WIDTH"}, 0, 4);
    add_hdl_path_slice({rdl_reg_name, "KERNEL_STRIDE_WIDTH"}, 4, 4);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG

// D_POOLING_PADDING_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_WIDTH = new("PAD_WIDTH");
    this.PAD_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_WIDTH.configure(this, 4, 0, "RW", 0, 4'h0, 1, 1, 1);
    this.PAD_WIDTH.add_def_property("spec_access", "rw");
    this.PAD_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.PAD_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.PAD_WIDTH.add_def_property("reset_mask", "0xf");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_WIDTH"}, 0, 4);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG

// D_PARTIAL_WIDTH_IN
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PARTIAL_WIDTH_IN_FIRST;
  rand uvm_reg_field_rdl PARTIAL_WIDTH_IN_LAST;
  rand uvm_reg_field_rdl PARTIAL_WIDTH_IN_MID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PARTIAL_WIDTH_IN_FIRST = new("PARTIAL_WIDTH_IN_FIRST");
    this.PARTIAL_WIDTH_IN_FIRST.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PARTIAL_WIDTH_IN_FIRST.configure(this, 10, 0, "RW", 0, 10'h0, 1, 1, 0);
    this.PARTIAL_WIDTH_IN_FIRST.add_def_property("spec_access", "rw");
    this.PARTIAL_WIDTH_IN_FIRST.add_def_property("spec_sw_default", "0x0");
    this.PARTIAL_WIDTH_IN_FIRST.add_def_property("sw_default_mask", "0x0");
    this.PARTIAL_WIDTH_IN_FIRST.add_def_property("reset_mask", "0x3ff");
    this.PARTIAL_WIDTH_IN_LAST = new("PARTIAL_WIDTH_IN_LAST");
    this.PARTIAL_WIDTH_IN_LAST.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PARTIAL_WIDTH_IN_LAST.configure(this, 10, 10, "RW", 0, 10'h0, 1, 1, 0);
    this.PARTIAL_WIDTH_IN_LAST.add_def_property("spec_access", "rw");
    this.PARTIAL_WIDTH_IN_LAST.add_def_property("spec_sw_default", "0x0");
    this.PARTIAL_WIDTH_IN_LAST.add_def_property("sw_default_mask", "0x0");
    this.PARTIAL_WIDTH_IN_LAST.add_def_property("reset_mask", "0x3ff");
    this.PARTIAL_WIDTH_IN_MID = new("PARTIAL_WIDTH_IN_MID");
    this.PARTIAL_WIDTH_IN_MID.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PARTIAL_WIDTH_IN_MID.configure(this, 10, 20, "RW", 0, 10'h0, 1, 1, 0);
    this.PARTIAL_WIDTH_IN_MID.add_def_property("spec_access", "rw");
    this.PARTIAL_WIDTH_IN_MID.add_def_property("spec_sw_default", "0x0");
    this.PARTIAL_WIDTH_IN_MID.add_def_property("sw_default_mask", "0x0");
    this.PARTIAL_WIDTH_IN_MID.add_def_property("reset_mask", "0x3ff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PARTIAL_WIDTH_IN_FIRST"}, 0, 10);
    add_hdl_path_slice({rdl_reg_name, "PARTIAL_WIDTH_IN_LAST"}, 10, 10);
    add_hdl_path_slice({rdl_reg_name, "PARTIAL_WIDTH_IN_MID"}, 20, 10);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN

// D_PERF_ENABLE
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_PERF_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DMA_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_PERF_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DMA_EN = new("DMA_EN");
    this.DMA_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DMA_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DMA_EN.add_def_property("spec_access", "rw");
    this.DMA_EN.add_def_property("spec_sw_default", "0x0");
    this.DMA_EN.add_def_property("sw_default_mask", "0x0");
    this.DMA_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DMA_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_PERF_ENABLE

// D_PERF_READ_STALL
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_PERF_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_READ_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_PERF_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_READ_STALL = new("PERF_READ_STALL");
    this.PERF_READ_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_READ_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_READ_STALL.add_def_property("spec_access", "r");
    this.PERF_READ_STALL.add_def_property("spec_sw_default", "0x0");
    this.PERF_READ_STALL.add_def_property("sw_default_mask", "0x0");
    this.PERF_READ_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_READ_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_PERF_READ_STALL

// D_CYA
class reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_CYA extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CYA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_CYA");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CYA = new("CYA");
    this.CYA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CYA.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.CYA.add_def_property("spec_access", "rw");
    this.CYA.add_def_property("spec_sw_default", "0x0");
    this.CYA.add_def_property("sw_default_mask", "0x0");
    this.CYA.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CYA"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_CYA

// Block NVDLA_PDP_RDMA
class block_addrmap_NVDLA_NVDLA_PDP_RDMA extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH D_DATA_CUBE_IN_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT D_DATA_CUBE_IN_HEIGHT;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL D_DATA_CUBE_IN_CHANNEL;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_FLYING_MODE D_FLYING_MODE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW D_SRC_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH D_SRC_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE D_SRC_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE D_SRC_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_SRC_RAM_CFG D_SRC_RAM_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_DATA_FORMAT D_DATA_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG D_OPERATION_MODE_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG D_POOLING_KERNEL_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG D_POOLING_PADDING_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN D_PARTIAL_WIDTH_IN;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_PERF_ENABLE D_PERF_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_PERF_READ_STALL D_PERF_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_PDP_RDMA_D_CYA D_CYA;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_PDP_RDMA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.D_DATA_CUBE_IN_WIDTH = new("D_DATA_CUBE_IN_WIDTH");
    this.D_DATA_CUBE_IN_WIDTH.configure(this, null, "");
    this.D_DATA_CUBE_IN_WIDTH.set_rdl_tag("D_DATA_CUBE_IN_WIDTH_");
    this.D_DATA_CUBE_IN_WIDTH.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_IN_WIDTH.build();
    this.default_map.add_reg(this.D_DATA_CUBE_IN_WIDTH, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.D_DATA_CUBE_IN_HEIGHT = new("D_DATA_CUBE_IN_HEIGHT");
    this.D_DATA_CUBE_IN_HEIGHT.configure(this, null, "");
    this.D_DATA_CUBE_IN_HEIGHT.set_rdl_tag("D_DATA_CUBE_IN_HEIGHT_");
    this.D_DATA_CUBE_IN_HEIGHT.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_IN_HEIGHT.build();
    this.default_map.add_reg(this.D_DATA_CUBE_IN_HEIGHT, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.D_DATA_CUBE_IN_CHANNEL = new("D_DATA_CUBE_IN_CHANNEL");
    this.D_DATA_CUBE_IN_CHANNEL.configure(this, null, "");
    this.D_DATA_CUBE_IN_CHANNEL.set_rdl_tag("D_DATA_CUBE_IN_CHANNEL_");
    this.D_DATA_CUBE_IN_CHANNEL.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_IN_CHANNEL.build();
    this.default_map.add_reg(this.D_DATA_CUBE_IN_CHANNEL, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.D_FLYING_MODE = new("D_FLYING_MODE");
    this.D_FLYING_MODE.configure(this, null, "");
    this.D_FLYING_MODE.set_rdl_tag("D_FLYING_MODE_");
    this.D_FLYING_MODE.set_reg_test_info(0, 0, 2);
    this.D_FLYING_MODE.build();
    this.default_map.add_reg(this.D_FLYING_MODE, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.D_SRC_BASE_ADDR_LOW = new("D_SRC_BASE_ADDR_LOW");
    this.D_SRC_BASE_ADDR_LOW.configure(this, null, "");
    this.D_SRC_BASE_ADDR_LOW.set_rdl_tag("D_SRC_BASE_ADDR_LOW_");
    this.D_SRC_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_SRC_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_SRC_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.D_SRC_BASE_ADDR_HIGH = new("D_SRC_BASE_ADDR_HIGH");
    this.D_SRC_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_SRC_BASE_ADDR_HIGH.set_rdl_tag("D_SRC_BASE_ADDR_HIGH_");
    this.D_SRC_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_SRC_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_SRC_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.D_SRC_LINE_STRIDE = new("D_SRC_LINE_STRIDE");
    this.D_SRC_LINE_STRIDE.configure(this, null, "");
    this.D_SRC_LINE_STRIDE.set_rdl_tag("D_SRC_LINE_STRIDE_");
    this.D_SRC_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_SRC_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_SRC_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.D_SRC_SURFACE_STRIDE = new("D_SRC_SURFACE_STRIDE");
    this.D_SRC_SURFACE_STRIDE.configure(this, null, "");
    this.D_SRC_SURFACE_STRIDE.set_rdl_tag("D_SRC_SURFACE_STRIDE_");
    this.D_SRC_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_SRC_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_SRC_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.D_SRC_RAM_CFG = new("D_SRC_RAM_CFG");
    this.D_SRC_RAM_CFG.configure(this, null, "");
    this.D_SRC_RAM_CFG.set_rdl_tag("D_SRC_RAM_CFG_");
    this.D_SRC_RAM_CFG.set_reg_test_info(0, 0, 2);
    this.D_SRC_RAM_CFG.build();
    this.default_map.add_reg(this.D_SRC_RAM_CFG, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.D_DATA_FORMAT = new("D_DATA_FORMAT");
    this.D_DATA_FORMAT.configure(this, null, "");
    this.D_DATA_FORMAT.set_rdl_tag("D_DATA_FORMAT_");
    this.D_DATA_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_DATA_FORMAT.build();
    this.default_map.add_reg(this.D_DATA_FORMAT, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.D_OPERATION_MODE_CFG = new("D_OPERATION_MODE_CFG");
    this.D_OPERATION_MODE_CFG.configure(this, null, "");
    this.D_OPERATION_MODE_CFG.set_rdl_tag("D_OPERATION_MODE_CFG_");
    this.D_OPERATION_MODE_CFG.set_reg_test_info(0, 0, 2);
    this.D_OPERATION_MODE_CFG.build();
    this.default_map.add_reg(this.D_OPERATION_MODE_CFG, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.D_POOLING_KERNEL_CFG = new("D_POOLING_KERNEL_CFG");
    this.D_POOLING_KERNEL_CFG.configure(this, null, "");
    this.D_POOLING_KERNEL_CFG.set_rdl_tag("D_POOLING_KERNEL_CFG_");
    this.D_POOLING_KERNEL_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_KERNEL_CFG.build();
    this.default_map.add_reg(this.D_POOLING_KERNEL_CFG, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.D_POOLING_PADDING_CFG = new("D_POOLING_PADDING_CFG");
    this.D_POOLING_PADDING_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_CFG.set_rdl_tag("D_POOLING_PADDING_CFG_");
    this.D_POOLING_PADDING_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_CFG, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.D_PARTIAL_WIDTH_IN = new("D_PARTIAL_WIDTH_IN");
    this.D_PARTIAL_WIDTH_IN.configure(this, null, "");
    this.D_PARTIAL_WIDTH_IN.set_rdl_tag("D_PARTIAL_WIDTH_IN_");
    this.D_PARTIAL_WIDTH_IN.set_reg_test_info(0, 0, 2);
    this.D_PARTIAL_WIDTH_IN.build();
    this.default_map.add_reg(this.D_PARTIAL_WIDTH_IN, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.D_PERF_ENABLE = new("D_PERF_ENABLE");
    this.D_PERF_ENABLE.configure(this, null, "");
    this.D_PERF_ENABLE.set_rdl_tag("D_PERF_ENABLE_");
    this.D_PERF_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_PERF_ENABLE.build();
    this.default_map.add_reg(this.D_PERF_ENABLE, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.D_PERF_READ_STALL = new("D_PERF_READ_STALL");
    this.D_PERF_READ_STALL.configure(this, null, "");
    this.D_PERF_READ_STALL.set_rdl_tag("D_PERF_READ_STALL_");
    this.D_PERF_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_READ_STALL, `UVM_REG_ADDR_WIDTH'h48, "RO", 0);
    this.D_CYA = new("D_CYA");
    this.D_CYA.configure(this, null, "");
    this.D_CYA.set_rdl_tag("D_CYA_");
    this.D_CYA.set_reg_test_info(0, 0, 2);
    this.D_CYA.build();
    this.default_map.add_reg(this.D_CYA, `UVM_REG_ADDR_WIDTH'h4c, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_PDP_RDMA)
endclass : block_addrmap_NVDLA_NVDLA_PDP_RDMA

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_PDP_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_PDP_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_S_POINTER

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_PDP_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_OP_ENABLE

// D_DATA_CUBE_IN_WIDTH
class reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CUBE_IN_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CUBE_IN_WIDTH = new("CUBE_IN_WIDTH");
    this.CUBE_IN_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CUBE_IN_WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CUBE_IN_WIDTH.add_def_property("spec_access", "rw");
    this.CUBE_IN_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.CUBE_IN_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.CUBE_IN_WIDTH.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CUBE_IN_WIDTH"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH

// D_DATA_CUBE_IN_HEIGHT
class reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CUBE_IN_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CUBE_IN_HEIGHT = new("CUBE_IN_HEIGHT");
    this.CUBE_IN_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CUBE_IN_HEIGHT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CUBE_IN_HEIGHT.add_def_property("spec_access", "rw");
    this.CUBE_IN_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.CUBE_IN_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.CUBE_IN_HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CUBE_IN_HEIGHT"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT

// D_DATA_CUBE_IN_CHANNEL
class reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CUBE_IN_CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CUBE_IN_CHANNEL = new("CUBE_IN_CHANNEL");
    this.CUBE_IN_CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CUBE_IN_CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CUBE_IN_CHANNEL.add_def_property("spec_access", "rw");
    this.CUBE_IN_CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.CUBE_IN_CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.CUBE_IN_CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CUBE_IN_CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL

// D_DATA_CUBE_OUT_WIDTH
class reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CUBE_OUT_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CUBE_OUT_WIDTH = new("CUBE_OUT_WIDTH");
    this.CUBE_OUT_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CUBE_OUT_WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CUBE_OUT_WIDTH.add_def_property("spec_access", "rw");
    this.CUBE_OUT_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.CUBE_OUT_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.CUBE_OUT_WIDTH.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CUBE_OUT_WIDTH"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH

// D_DATA_CUBE_OUT_HEIGHT
class reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CUBE_OUT_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CUBE_OUT_HEIGHT = new("CUBE_OUT_HEIGHT");
    this.CUBE_OUT_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CUBE_OUT_HEIGHT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CUBE_OUT_HEIGHT.add_def_property("spec_access", "rw");
    this.CUBE_OUT_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.CUBE_OUT_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.CUBE_OUT_HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CUBE_OUT_HEIGHT"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT

// D_DATA_CUBE_OUT_CHANNEL
class reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CUBE_OUT_CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CUBE_OUT_CHANNEL = new("CUBE_OUT_CHANNEL");
    this.CUBE_OUT_CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CUBE_OUT_CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CUBE_OUT_CHANNEL.add_def_property("spec_access", "rw");
    this.CUBE_OUT_CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.CUBE_OUT_CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.CUBE_OUT_CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CUBE_OUT_CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL

// D_OPERATION_MODE_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_OPERATION_MODE_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl POOLING_METHOD;
  rand uvm_reg_field_rdl FLYING_MODE;
  rand uvm_reg_field_rdl SPLIT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_OPERATION_MODE_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.POOLING_METHOD = new("POOLING_METHOD");
    this.POOLING_METHOD.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.POOLING_METHOD.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 0);
    this.POOLING_METHOD.add_def_property("spec_access", "rw");
    this.POOLING_METHOD.add_def_property("spec_sw_default", "0x0");
    this.POOLING_METHOD.add_def_property("sw_default_mask", "0x0");
    this.POOLING_METHOD.add_def_property("reset_mask", "0x3");
    this.FLYING_MODE = new("FLYING_MODE");
    this.FLYING_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.FLYING_MODE.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.FLYING_MODE.add_def_property("spec_access", "rw");
    this.FLYING_MODE.add_def_property("spec_sw_default", "0x0");
    this.FLYING_MODE.add_def_property("sw_default_mask", "0x0");
    this.FLYING_MODE.add_def_property("reset_mask", "0x1");
    this.SPLIT_NUM = new("SPLIT_NUM");
    this.SPLIT_NUM.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SPLIT_NUM.configure(this, 8, 8, "RW", 0, 8'h0, 1, 1, 0);
    this.SPLIT_NUM.add_def_property("spec_access", "rw");
    this.SPLIT_NUM.add_def_property("spec_sw_default", "0x0");
    this.SPLIT_NUM.add_def_property("sw_default_mask", "0x0");
    this.SPLIT_NUM.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "POOLING_METHOD"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "FLYING_MODE"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "SPLIT_NUM"}, 8, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_OPERATION_MODE_CFG

// D_NAN_FLUSH_TO_ZERO
class reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_TO_ZERO;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_TO_ZERO = new("NAN_TO_ZERO");
    this.NAN_TO_ZERO.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NAN_TO_ZERO.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.NAN_TO_ZERO.add_def_property("spec_access", "rw");
    this.NAN_TO_ZERO.add_def_property("spec_sw_default", "0x0");
    this.NAN_TO_ZERO.add_def_property("sw_default_mask", "0x0");
    this.NAN_TO_ZERO.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_TO_ZERO"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO

// D_PARTIAL_WIDTH_IN
class reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_IN extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PARTIAL_WIDTH_IN_FIRST;
  rand uvm_reg_field_rdl PARTIAL_WIDTH_IN_LAST;
  rand uvm_reg_field_rdl PARTIAL_WIDTH_IN_MID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_IN");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PARTIAL_WIDTH_IN_FIRST = new("PARTIAL_WIDTH_IN_FIRST");
    this.PARTIAL_WIDTH_IN_FIRST.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PARTIAL_WIDTH_IN_FIRST.configure(this, 10, 0, "RW", 0, 10'h0, 1, 1, 0);
    this.PARTIAL_WIDTH_IN_FIRST.add_def_property("spec_access", "rw");
    this.PARTIAL_WIDTH_IN_FIRST.add_def_property("spec_sw_default", "0x0");
    this.PARTIAL_WIDTH_IN_FIRST.add_def_property("sw_default_mask", "0x0");
    this.PARTIAL_WIDTH_IN_FIRST.add_def_property("reset_mask", "0x3ff");
    this.PARTIAL_WIDTH_IN_LAST = new("PARTIAL_WIDTH_IN_LAST");
    this.PARTIAL_WIDTH_IN_LAST.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PARTIAL_WIDTH_IN_LAST.configure(this, 10, 10, "RW", 0, 10'h0, 1, 1, 0);
    this.PARTIAL_WIDTH_IN_LAST.add_def_property("spec_access", "rw");
    this.PARTIAL_WIDTH_IN_LAST.add_def_property("spec_sw_default", "0x0");
    this.PARTIAL_WIDTH_IN_LAST.add_def_property("sw_default_mask", "0x0");
    this.PARTIAL_WIDTH_IN_LAST.add_def_property("reset_mask", "0x3ff");
    this.PARTIAL_WIDTH_IN_MID = new("PARTIAL_WIDTH_IN_MID");
    this.PARTIAL_WIDTH_IN_MID.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PARTIAL_WIDTH_IN_MID.configure(this, 10, 20, "RW", 0, 10'h0, 1, 1, 0);
    this.PARTIAL_WIDTH_IN_MID.add_def_property("spec_access", "rw");
    this.PARTIAL_WIDTH_IN_MID.add_def_property("spec_sw_default", "0x0");
    this.PARTIAL_WIDTH_IN_MID.add_def_property("sw_default_mask", "0x0");
    this.PARTIAL_WIDTH_IN_MID.add_def_property("reset_mask", "0x3ff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PARTIAL_WIDTH_IN_FIRST"}, 0, 10);
    add_hdl_path_slice({rdl_reg_name, "PARTIAL_WIDTH_IN_LAST"}, 10, 10);
    add_hdl_path_slice({rdl_reg_name, "PARTIAL_WIDTH_IN_MID"}, 20, 10);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_IN

// D_PARTIAL_WIDTH_OUT
class reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_OUT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PARTIAL_WIDTH_OUT_FIRST;
  rand uvm_reg_field_rdl PARTIAL_WIDTH_OUT_LAST;
  rand uvm_reg_field_rdl PARTIAL_WIDTH_OUT_MID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_OUT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PARTIAL_WIDTH_OUT_FIRST = new("PARTIAL_WIDTH_OUT_FIRST");
    this.PARTIAL_WIDTH_OUT_FIRST.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PARTIAL_WIDTH_OUT_FIRST.configure(this, 10, 0, "RW", 0, 10'h0, 1, 1, 0);
    this.PARTIAL_WIDTH_OUT_FIRST.add_def_property("spec_access", "rw");
    this.PARTIAL_WIDTH_OUT_FIRST.add_def_property("spec_sw_default", "0x0");
    this.PARTIAL_WIDTH_OUT_FIRST.add_def_property("sw_default_mask", "0x0");
    this.PARTIAL_WIDTH_OUT_FIRST.add_def_property("reset_mask", "0x3ff");
    this.PARTIAL_WIDTH_OUT_LAST = new("PARTIAL_WIDTH_OUT_LAST");
    this.PARTIAL_WIDTH_OUT_LAST.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PARTIAL_WIDTH_OUT_LAST.configure(this, 10, 10, "RW", 0, 10'h0, 1, 1, 0);
    this.PARTIAL_WIDTH_OUT_LAST.add_def_property("spec_access", "rw");
    this.PARTIAL_WIDTH_OUT_LAST.add_def_property("spec_sw_default", "0x0");
    this.PARTIAL_WIDTH_OUT_LAST.add_def_property("sw_default_mask", "0x0");
    this.PARTIAL_WIDTH_OUT_LAST.add_def_property("reset_mask", "0x3ff");
    this.PARTIAL_WIDTH_OUT_MID = new("PARTIAL_WIDTH_OUT_MID");
    this.PARTIAL_WIDTH_OUT_MID.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PARTIAL_WIDTH_OUT_MID.configure(this, 10, 20, "RW", 0, 10'h0, 1, 1, 0);
    this.PARTIAL_WIDTH_OUT_MID.add_def_property("spec_access", "rw");
    this.PARTIAL_WIDTH_OUT_MID.add_def_property("spec_sw_default", "0x0");
    this.PARTIAL_WIDTH_OUT_MID.add_def_property("sw_default_mask", "0x0");
    this.PARTIAL_WIDTH_OUT_MID.add_def_property("reset_mask", "0x3ff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PARTIAL_WIDTH_OUT_FIRST"}, 0, 10);
    add_hdl_path_slice({rdl_reg_name, "PARTIAL_WIDTH_OUT_LAST"}, 10, 10);
    add_hdl_path_slice({rdl_reg_name, "PARTIAL_WIDTH_OUT_MID"}, 20, 10);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_OUT

// D_POOLING_KERNEL_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_KERNEL_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl KERNEL_WIDTH;
  rand uvm_reg_field_rdl KERNEL_HEIGHT;
  rand uvm_reg_field_rdl KERNEL_STRIDE_WIDTH;
  rand uvm_reg_field_rdl KERNEL_STRIDE_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_KERNEL_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.KERNEL_WIDTH = new("KERNEL_WIDTH");
    this.KERNEL_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.KERNEL_WIDTH.configure(this, 4, 0, "RW", 0, 4'h0, 1, 1, 0);
    this.KERNEL_WIDTH.add_def_property("spec_access", "rw");
    this.KERNEL_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.KERNEL_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.KERNEL_WIDTH.add_def_property("reset_mask", "0xf");
    this.KERNEL_HEIGHT = new("KERNEL_HEIGHT");
    this.KERNEL_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.KERNEL_HEIGHT.configure(this, 4, 8, "RW", 0, 4'h0, 1, 1, 0);
    this.KERNEL_HEIGHT.add_def_property("spec_access", "rw");
    this.KERNEL_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.KERNEL_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.KERNEL_HEIGHT.add_def_property("reset_mask", "0xf");
    this.KERNEL_STRIDE_WIDTH = new("KERNEL_STRIDE_WIDTH");
    this.KERNEL_STRIDE_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.KERNEL_STRIDE_WIDTH.configure(this, 4, 16, "RW", 0, 4'h0, 1, 1, 0);
    this.KERNEL_STRIDE_WIDTH.add_def_property("spec_access", "rw");
    this.KERNEL_STRIDE_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.KERNEL_STRIDE_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.KERNEL_STRIDE_WIDTH.add_def_property("reset_mask", "0xf");
    this.KERNEL_STRIDE_HEIGHT = new("KERNEL_STRIDE_HEIGHT");
    this.KERNEL_STRIDE_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.KERNEL_STRIDE_HEIGHT.configure(this, 4, 20, "RW", 0, 4'h0, 1, 1, 0);
    this.KERNEL_STRIDE_HEIGHT.add_def_property("spec_access", "rw");
    this.KERNEL_STRIDE_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.KERNEL_STRIDE_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.KERNEL_STRIDE_HEIGHT.add_def_property("reset_mask", "0xf");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "KERNEL_WIDTH"}, 0, 4);
    add_hdl_path_slice({rdl_reg_name, "KERNEL_HEIGHT"}, 8, 4);
    add_hdl_path_slice({rdl_reg_name, "KERNEL_STRIDE_WIDTH"}, 16, 4);
    add_hdl_path_slice({rdl_reg_name, "KERNEL_STRIDE_HEIGHT"}, 20, 4);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_KERNEL_CFG

// D_RECIP_KERNEL_WIDTH
class reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RECIP_KERNEL_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RECIP_KERNEL_WIDTH = new("RECIP_KERNEL_WIDTH");
    this.RECIP_KERNEL_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RECIP_KERNEL_WIDTH.configure(this, 17, 0, "RW", 0, 17'h0, 1, 1, 1);
    this.RECIP_KERNEL_WIDTH.add_def_property("spec_access", "rw");
    this.RECIP_KERNEL_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.RECIP_KERNEL_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.RECIP_KERNEL_WIDTH.add_def_property("reset_mask", "0x1ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RECIP_KERNEL_WIDTH"}, 0, 17);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_WIDTH

// D_RECIP_KERNEL_HEIGHT
class reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RECIP_KERNEL_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RECIP_KERNEL_HEIGHT = new("RECIP_KERNEL_HEIGHT");
    this.RECIP_KERNEL_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RECIP_KERNEL_HEIGHT.configure(this, 17, 0, "RW", 0, 17'h0, 1, 1, 1);
    this.RECIP_KERNEL_HEIGHT.add_def_property("spec_access", "rw");
    this.RECIP_KERNEL_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.RECIP_KERNEL_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.RECIP_KERNEL_HEIGHT.add_def_property("reset_mask", "0x1ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RECIP_KERNEL_HEIGHT"}, 0, 17);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT

// D_POOLING_PADDING_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_LEFT;
  rand uvm_reg_field_rdl PAD_TOP;
  rand uvm_reg_field_rdl PAD_RIGHT;
  rand uvm_reg_field_rdl PAD_BOTTOM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_LEFT = new("PAD_LEFT");
    this.PAD_LEFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_LEFT.configure(this, 3, 0, "RW", 0, 3'h0, 1, 1, 0);
    this.PAD_LEFT.add_def_property("spec_access", "rw");
    this.PAD_LEFT.add_def_property("spec_sw_default", "0x0");
    this.PAD_LEFT.add_def_property("sw_default_mask", "0x0");
    this.PAD_LEFT.add_def_property("reset_mask", "0x7");
    this.PAD_TOP = new("PAD_TOP");
    this.PAD_TOP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_TOP.configure(this, 3, 4, "RW", 0, 3'h0, 1, 1, 0);
    this.PAD_TOP.add_def_property("spec_access", "rw");
    this.PAD_TOP.add_def_property("spec_sw_default", "0x0");
    this.PAD_TOP.add_def_property("sw_default_mask", "0x0");
    this.PAD_TOP.add_def_property("reset_mask", "0x7");
    this.PAD_RIGHT = new("PAD_RIGHT");
    this.PAD_RIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_RIGHT.configure(this, 3, 8, "RW", 0, 3'h0, 1, 1, 0);
    this.PAD_RIGHT.add_def_property("spec_access", "rw");
    this.PAD_RIGHT.add_def_property("spec_sw_default", "0x0");
    this.PAD_RIGHT.add_def_property("sw_default_mask", "0x0");
    this.PAD_RIGHT.add_def_property("reset_mask", "0x7");
    this.PAD_BOTTOM = new("PAD_BOTTOM");
    this.PAD_BOTTOM.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_BOTTOM.configure(this, 3, 12, "RW", 0, 3'h0, 1, 1, 0);
    this.PAD_BOTTOM.add_def_property("spec_access", "rw");
    this.PAD_BOTTOM.add_def_property("spec_sw_default", "0x0");
    this.PAD_BOTTOM.add_def_property("sw_default_mask", "0x0");
    this.PAD_BOTTOM.add_def_property("reset_mask", "0x7");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_LEFT"}, 0, 3);
    add_hdl_path_slice({rdl_reg_name, "PAD_TOP"}, 4, 3);
    add_hdl_path_slice({rdl_reg_name, "PAD_RIGHT"}, 8, 3);
    add_hdl_path_slice({rdl_reg_name, "PAD_BOTTOM"}, 12, 3);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_CFG

// D_POOLING_PADDING_VALUE_1_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE_1X;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE_1X = new("PAD_VALUE_1X");
    this.PAD_VALUE_1X.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE_1X.configure(this, 19, 0, "RW", 0, 19'h0, 1, 1, 1);
    this.PAD_VALUE_1X.add_def_property("spec_access", "rw");
    this.PAD_VALUE_1X.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE_1X.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE_1X.add_def_property("reset_mask", "0x7ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE_1X"}, 0, 19);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG

// D_POOLING_PADDING_VALUE_2_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE_2X;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE_2X = new("PAD_VALUE_2X");
    this.PAD_VALUE_2X.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE_2X.configure(this, 19, 0, "RW", 0, 19'h0, 1, 1, 1);
    this.PAD_VALUE_2X.add_def_property("spec_access", "rw");
    this.PAD_VALUE_2X.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE_2X.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE_2X.add_def_property("reset_mask", "0x7ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE_2X"}, 0, 19);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG

// D_POOLING_PADDING_VALUE_3_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE_3X;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE_3X = new("PAD_VALUE_3X");
    this.PAD_VALUE_3X.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE_3X.configure(this, 19, 0, "RW", 0, 19'h0, 1, 1, 1);
    this.PAD_VALUE_3X.add_def_property("spec_access", "rw");
    this.PAD_VALUE_3X.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE_3X.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE_3X.add_def_property("reset_mask", "0x7ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE_3X"}, 0, 19);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG

// D_POOLING_PADDING_VALUE_4_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE_4X;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE_4X = new("PAD_VALUE_4X");
    this.PAD_VALUE_4X.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE_4X.configure(this, 19, 0, "RW", 0, 19'h0, 1, 1, 1);
    this.PAD_VALUE_4X.add_def_property("spec_access", "rw");
    this.PAD_VALUE_4X.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE_4X.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE_4X.add_def_property("reset_mask", "0x7ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE_4X"}, 0, 19);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG

// D_POOLING_PADDING_VALUE_5_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE_5X;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE_5X = new("PAD_VALUE_5X");
    this.PAD_VALUE_5X.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE_5X.configure(this, 19, 0, "RW", 0, 19'h0, 1, 1, 1);
    this.PAD_VALUE_5X.add_def_property("spec_access", "rw");
    this.PAD_VALUE_5X.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE_5X.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE_5X.add_def_property("reset_mask", "0x7ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE_5X"}, 0, 19);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG

// D_POOLING_PADDING_VALUE_6_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE_6X;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE_6X = new("PAD_VALUE_6X");
    this.PAD_VALUE_6X.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE_6X.configure(this, 19, 0, "RW", 0, 19'h0, 1, 1, 1);
    this.PAD_VALUE_6X.add_def_property("spec_access", "rw");
    this.PAD_VALUE_6X.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE_6X.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE_6X.add_def_property("reset_mask", "0x7ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE_6X"}, 0, 19);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG

// D_POOLING_PADDING_VALUE_7_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE_7X;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE_7X = new("PAD_VALUE_7X");
    this.PAD_VALUE_7X.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE_7X.configure(this, 19, 0, "RW", 0, 19'h0, 1, 1, 1);
    this.PAD_VALUE_7X.add_def_property("spec_access", "rw");
    this.PAD_VALUE_7X.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE_7X.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE_7X.add_def_property("reset_mask", "0x7ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE_7X"}, 0, 19);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG

// D_SRC_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_BASE_ADDR_LOW = new("SRC_BASE_ADDR_LOW");
    this.SRC_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.SRC_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.SRC_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.SRC_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_LOW

// D_SRC_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_BASE_ADDR_HIGH = new("SRC_BASE_ADDR_HIGH");
    this.SRC_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.SRC_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.SRC_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.SRC_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH

// D_SRC_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_LINE_STRIDE = new("SRC_LINE_STRIDE");
    this.SRC_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.SRC_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.SRC_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.SRC_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_LINE_STRIDE

// D_SRC_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_SURFACE_STRIDE = new("SRC_SURFACE_STRIDE");
    this.SRC_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.SRC_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.SRC_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.SRC_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_SURFACE_STRIDE

// D_DST_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_BASE_ADDR_LOW = new("DST_BASE_ADDR_LOW");
    this.DST_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.DST_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.DST_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.DST_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_LOW

// D_DST_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_BASE_ADDR_HIGH = new("DST_BASE_ADDR_HIGH");
    this.DST_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.DST_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.DST_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.DST_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_HIGH

// D_DST_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_PDP_D_DST_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DST_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_LINE_STRIDE = new("DST_LINE_STRIDE");
    this.DST_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.DST_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DST_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DST_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DST_LINE_STRIDE

// D_DST_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_PDP_D_DST_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DST_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_SURFACE_STRIDE = new("DST_SURFACE_STRIDE");
    this.DST_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.DST_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DST_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DST_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DST_SURFACE_STRIDE

// D_DST_RAM_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_DST_RAM_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DST_RAM_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_RAM_TYPE = new("DST_RAM_TYPE");
    this.DST_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DST_RAM_TYPE.add_def_property("spec_access", "rw");
    this.DST_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.DST_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.DST_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DST_RAM_CFG

// D_DATA_FORMAT
class reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl INPUT_DATA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.INPUT_DATA = new("INPUT_DATA");
    this.INPUT_DATA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.INPUT_DATA.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 1);
    this.INPUT_DATA.add_def_property("spec_access", "rw");
    this.INPUT_DATA.add_def_property("spec_sw_default", "0x0");
    this.INPUT_DATA.add_def_property("sw_default_mask", "0x0");
    this.INPUT_DATA.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "INPUT_DATA"}, 0, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_FORMAT

// D_INF_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_PDP_D_INF_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl INF_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_INF_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.INF_INPUT_NUM = new("INF_INPUT_NUM");
    this.INF_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.INF_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.INF_INPUT_NUM.add_def_property("spec_access", "r");
    this.INF_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.INF_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.INF_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "INF_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_INF_INPUT_NUM

// D_NAN_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_INPUT_NUM = new("NAN_INPUT_NUM");
    this.NAN_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.NAN_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.NAN_INPUT_NUM.add_def_property("spec_access", "r");
    this.NAN_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.NAN_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.NAN_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_INPUT_NUM

// D_NAN_OUTPUT_NUM
class reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_OUTPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_OUTPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_OUTPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_OUTPUT_NUM = new("NAN_OUTPUT_NUM");
    this.NAN_OUTPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.NAN_OUTPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.NAN_OUTPUT_NUM.add_def_property("spec_access", "r");
    this.NAN_OUTPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.NAN_OUTPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.NAN_OUTPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_OUTPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_OUTPUT_NUM

// D_PERF_ENABLE
class reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DMA_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DMA_EN = new("DMA_EN");
    this.DMA_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DMA_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DMA_EN.add_def_property("spec_access", "rw");
    this.DMA_EN.add_def_property("spec_sw_default", "0x0");
    this.DMA_EN.add_def_property("sw_default_mask", "0x0");
    this.DMA_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DMA_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_ENABLE

// D_PERF_WRITE_STALL
class reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_WRITE_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_WRITE_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_WRITE_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_WRITE_STALL = new("PERF_WRITE_STALL");
    this.PERF_WRITE_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_WRITE_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_WRITE_STALL.add_def_property("spec_access", "r");
    this.PERF_WRITE_STALL.add_def_property("spec_sw_default", "0x0");
    this.PERF_WRITE_STALL.add_def_property("sw_default_mask", "0x0");
    this.PERF_WRITE_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_WRITE_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_WRITE_STALL

// D_CYA
class reg_addrmap_NVDLA_NVDLA_PDP_D_CYA extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CYA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_CYA");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CYA = new("CYA");
    this.CYA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CYA.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.CYA.add_def_property("spec_access", "rw");
    this.CYA.add_def_property("spec_sw_default", "0x0");
    this.CYA.add_def_property("sw_default_mask", "0x0");
    this.CYA.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CYA"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_CYA

// Block NVDLA_PDP
class block_addrmap_NVDLA_NVDLA_PDP extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_PDP_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_PDP_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH D_DATA_CUBE_IN_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT D_DATA_CUBE_IN_HEIGHT;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL D_DATA_CUBE_IN_CHANNEL;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH D_DATA_CUBE_OUT_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT D_DATA_CUBE_OUT_HEIGHT;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL D_DATA_CUBE_OUT_CHANNEL;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_OPERATION_MODE_CFG D_OPERATION_MODE_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO D_NAN_FLUSH_TO_ZERO;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_IN D_PARTIAL_WIDTH_IN;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_OUT D_PARTIAL_WIDTH_OUT;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_KERNEL_CFG D_POOLING_KERNEL_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_WIDTH D_RECIP_KERNEL_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT D_RECIP_KERNEL_HEIGHT;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_CFG D_POOLING_PADDING_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG D_POOLING_PADDING_VALUE_1_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG D_POOLING_PADDING_VALUE_2_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG D_POOLING_PADDING_VALUE_3_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG D_POOLING_PADDING_VALUE_4_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG D_POOLING_PADDING_VALUE_5_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG D_POOLING_PADDING_VALUE_6_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG D_POOLING_PADDING_VALUE_7_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_LOW D_SRC_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH D_SRC_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_LINE_STRIDE D_SRC_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_SURFACE_STRIDE D_SRC_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_LOW D_DST_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_HIGH D_DST_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DST_LINE_STRIDE D_DST_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DST_SURFACE_STRIDE D_DST_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DST_RAM_CFG D_DST_RAM_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_FORMAT D_DATA_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_INF_INPUT_NUM D_INF_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_INPUT_NUM D_NAN_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_OUTPUT_NUM D_NAN_OUTPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_ENABLE D_PERF_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_WRITE_STALL D_PERF_WRITE_STALL;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_CYA D_CYA;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_PDP");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.D_DATA_CUBE_IN_WIDTH = new("D_DATA_CUBE_IN_WIDTH");
    this.D_DATA_CUBE_IN_WIDTH.configure(this, null, "");
    this.D_DATA_CUBE_IN_WIDTH.set_rdl_tag("D_DATA_CUBE_IN_WIDTH_");
    this.D_DATA_CUBE_IN_WIDTH.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_IN_WIDTH.build();
    this.default_map.add_reg(this.D_DATA_CUBE_IN_WIDTH, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.D_DATA_CUBE_IN_HEIGHT = new("D_DATA_CUBE_IN_HEIGHT");
    this.D_DATA_CUBE_IN_HEIGHT.configure(this, null, "");
    this.D_DATA_CUBE_IN_HEIGHT.set_rdl_tag("D_DATA_CUBE_IN_HEIGHT_");
    this.D_DATA_CUBE_IN_HEIGHT.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_IN_HEIGHT.build();
    this.default_map.add_reg(this.D_DATA_CUBE_IN_HEIGHT, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.D_DATA_CUBE_IN_CHANNEL = new("D_DATA_CUBE_IN_CHANNEL");
    this.D_DATA_CUBE_IN_CHANNEL.configure(this, null, "");
    this.D_DATA_CUBE_IN_CHANNEL.set_rdl_tag("D_DATA_CUBE_IN_CHANNEL_");
    this.D_DATA_CUBE_IN_CHANNEL.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_IN_CHANNEL.build();
    this.default_map.add_reg(this.D_DATA_CUBE_IN_CHANNEL, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.D_DATA_CUBE_OUT_WIDTH = new("D_DATA_CUBE_OUT_WIDTH");
    this.D_DATA_CUBE_OUT_WIDTH.configure(this, null, "");
    this.D_DATA_CUBE_OUT_WIDTH.set_rdl_tag("D_DATA_CUBE_OUT_WIDTH_");
    this.D_DATA_CUBE_OUT_WIDTH.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_OUT_WIDTH.build();
    this.default_map.add_reg(this.D_DATA_CUBE_OUT_WIDTH, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.D_DATA_CUBE_OUT_HEIGHT = new("D_DATA_CUBE_OUT_HEIGHT");
    this.D_DATA_CUBE_OUT_HEIGHT.configure(this, null, "");
    this.D_DATA_CUBE_OUT_HEIGHT.set_rdl_tag("D_DATA_CUBE_OUT_HEIGHT_");
    this.D_DATA_CUBE_OUT_HEIGHT.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_OUT_HEIGHT.build();
    this.default_map.add_reg(this.D_DATA_CUBE_OUT_HEIGHT, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.D_DATA_CUBE_OUT_CHANNEL = new("D_DATA_CUBE_OUT_CHANNEL");
    this.D_DATA_CUBE_OUT_CHANNEL.configure(this, null, "");
    this.D_DATA_CUBE_OUT_CHANNEL.set_rdl_tag("D_DATA_CUBE_OUT_CHANNEL_");
    this.D_DATA_CUBE_OUT_CHANNEL.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_OUT_CHANNEL.build();
    this.default_map.add_reg(this.D_DATA_CUBE_OUT_CHANNEL, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.D_OPERATION_MODE_CFG = new("D_OPERATION_MODE_CFG");
    this.D_OPERATION_MODE_CFG.configure(this, null, "");
    this.D_OPERATION_MODE_CFG.set_rdl_tag("D_OPERATION_MODE_CFG_");
    this.D_OPERATION_MODE_CFG.set_reg_test_info(0, 0, 2);
    this.D_OPERATION_MODE_CFG.build();
    this.default_map.add_reg(this.D_OPERATION_MODE_CFG, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.D_NAN_FLUSH_TO_ZERO = new("D_NAN_FLUSH_TO_ZERO");
    this.D_NAN_FLUSH_TO_ZERO.configure(this, null, "");
    this.D_NAN_FLUSH_TO_ZERO.set_rdl_tag("D_NAN_FLUSH_TO_ZERO_");
    this.D_NAN_FLUSH_TO_ZERO.set_reg_test_info(0, 0, 2);
    this.D_NAN_FLUSH_TO_ZERO.build();
    this.default_map.add_reg(this.D_NAN_FLUSH_TO_ZERO, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.D_PARTIAL_WIDTH_IN = new("D_PARTIAL_WIDTH_IN");
    this.D_PARTIAL_WIDTH_IN.configure(this, null, "");
    this.D_PARTIAL_WIDTH_IN.set_rdl_tag("D_PARTIAL_WIDTH_IN_");
    this.D_PARTIAL_WIDTH_IN.set_reg_test_info(0, 0, 2);
    this.D_PARTIAL_WIDTH_IN.build();
    this.default_map.add_reg(this.D_PARTIAL_WIDTH_IN, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.D_PARTIAL_WIDTH_OUT = new("D_PARTIAL_WIDTH_OUT");
    this.D_PARTIAL_WIDTH_OUT.configure(this, null, "");
    this.D_PARTIAL_WIDTH_OUT.set_rdl_tag("D_PARTIAL_WIDTH_OUT_");
    this.D_PARTIAL_WIDTH_OUT.set_reg_test_info(0, 0, 2);
    this.D_PARTIAL_WIDTH_OUT.build();
    this.default_map.add_reg(this.D_PARTIAL_WIDTH_OUT, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.D_POOLING_KERNEL_CFG = new("D_POOLING_KERNEL_CFG");
    this.D_POOLING_KERNEL_CFG.configure(this, null, "");
    this.D_POOLING_KERNEL_CFG.set_rdl_tag("D_POOLING_KERNEL_CFG_");
    this.D_POOLING_KERNEL_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_KERNEL_CFG.build();
    this.default_map.add_reg(this.D_POOLING_KERNEL_CFG, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.D_RECIP_KERNEL_WIDTH = new("D_RECIP_KERNEL_WIDTH");
    this.D_RECIP_KERNEL_WIDTH.configure(this, null, "");
    this.D_RECIP_KERNEL_WIDTH.set_rdl_tag("D_RECIP_KERNEL_WIDTH_");
    this.D_RECIP_KERNEL_WIDTH.set_reg_test_info(0, 0, 2);
    this.D_RECIP_KERNEL_WIDTH.build();
    this.default_map.add_reg(this.D_RECIP_KERNEL_WIDTH, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.D_RECIP_KERNEL_HEIGHT = new("D_RECIP_KERNEL_HEIGHT");
    this.D_RECIP_KERNEL_HEIGHT.configure(this, null, "");
    this.D_RECIP_KERNEL_HEIGHT.set_rdl_tag("D_RECIP_KERNEL_HEIGHT_");
    this.D_RECIP_KERNEL_HEIGHT.set_reg_test_info(0, 0, 2);
    this.D_RECIP_KERNEL_HEIGHT.build();
    this.default_map.add_reg(this.D_RECIP_KERNEL_HEIGHT, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.D_POOLING_PADDING_CFG = new("D_POOLING_PADDING_CFG");
    this.D_POOLING_PADDING_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_CFG.set_rdl_tag("D_POOLING_PADDING_CFG_");
    this.D_POOLING_PADDING_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_CFG, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.D_POOLING_PADDING_VALUE_1_CFG = new("D_POOLING_PADDING_VALUE_1_CFG");
    this.D_POOLING_PADDING_VALUE_1_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_VALUE_1_CFG.set_rdl_tag("D_POOLING_PADDING_VALUE_1_CFG_");
    this.D_POOLING_PADDING_VALUE_1_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_VALUE_1_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_VALUE_1_CFG, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.D_POOLING_PADDING_VALUE_2_CFG = new("D_POOLING_PADDING_VALUE_2_CFG");
    this.D_POOLING_PADDING_VALUE_2_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_VALUE_2_CFG.set_rdl_tag("D_POOLING_PADDING_VALUE_2_CFG_");
    this.D_POOLING_PADDING_VALUE_2_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_VALUE_2_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_VALUE_2_CFG, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.D_POOLING_PADDING_VALUE_3_CFG = new("D_POOLING_PADDING_VALUE_3_CFG");
    this.D_POOLING_PADDING_VALUE_3_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_VALUE_3_CFG.set_rdl_tag("D_POOLING_PADDING_VALUE_3_CFG_");
    this.D_POOLING_PADDING_VALUE_3_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_VALUE_3_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_VALUE_3_CFG, `UVM_REG_ADDR_WIDTH'h4c, "RW", 0);
    this.D_POOLING_PADDING_VALUE_4_CFG = new("D_POOLING_PADDING_VALUE_4_CFG");
    this.D_POOLING_PADDING_VALUE_4_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_VALUE_4_CFG.set_rdl_tag("D_POOLING_PADDING_VALUE_4_CFG_");
    this.D_POOLING_PADDING_VALUE_4_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_VALUE_4_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_VALUE_4_CFG, `UVM_REG_ADDR_WIDTH'h50, "RW", 0);
    this.D_POOLING_PADDING_VALUE_5_CFG = new("D_POOLING_PADDING_VALUE_5_CFG");
    this.D_POOLING_PADDING_VALUE_5_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_VALUE_5_CFG.set_rdl_tag("D_POOLING_PADDING_VALUE_5_CFG_");
    this.D_POOLING_PADDING_VALUE_5_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_VALUE_5_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_VALUE_5_CFG, `UVM_REG_ADDR_WIDTH'h54, "RW", 0);
    this.D_POOLING_PADDING_VALUE_6_CFG = new("D_POOLING_PADDING_VALUE_6_CFG");
    this.D_POOLING_PADDING_VALUE_6_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_VALUE_6_CFG.set_rdl_tag("D_POOLING_PADDING_VALUE_6_CFG_");
    this.D_POOLING_PADDING_VALUE_6_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_VALUE_6_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_VALUE_6_CFG, `UVM_REG_ADDR_WIDTH'h58, "RW", 0);
    this.D_POOLING_PADDING_VALUE_7_CFG = new("D_POOLING_PADDING_VALUE_7_CFG");
    this.D_POOLING_PADDING_VALUE_7_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_VALUE_7_CFG.set_rdl_tag("D_POOLING_PADDING_VALUE_7_CFG_");
    this.D_POOLING_PADDING_VALUE_7_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_VALUE_7_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_VALUE_7_CFG, `UVM_REG_ADDR_WIDTH'h5c, "RW", 0);
    this.D_SRC_BASE_ADDR_LOW = new("D_SRC_BASE_ADDR_LOW");
    this.D_SRC_BASE_ADDR_LOW.configure(this, null, "");
    this.D_SRC_BASE_ADDR_LOW.set_rdl_tag("D_SRC_BASE_ADDR_LOW_");
    this.D_SRC_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_SRC_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_SRC_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h60, "RW", 0);
    this.D_SRC_BASE_ADDR_HIGH = new("D_SRC_BASE_ADDR_HIGH");
    this.D_SRC_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_SRC_BASE_ADDR_HIGH.set_rdl_tag("D_SRC_BASE_ADDR_HIGH_");
    this.D_SRC_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_SRC_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_SRC_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h64, "RW", 0);
    this.D_SRC_LINE_STRIDE = new("D_SRC_LINE_STRIDE");
    this.D_SRC_LINE_STRIDE.configure(this, null, "");
    this.D_SRC_LINE_STRIDE.set_rdl_tag("D_SRC_LINE_STRIDE_");
    this.D_SRC_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_SRC_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_SRC_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h68, "RW", 0);
    this.D_SRC_SURFACE_STRIDE = new("D_SRC_SURFACE_STRIDE");
    this.D_SRC_SURFACE_STRIDE.configure(this, null, "");
    this.D_SRC_SURFACE_STRIDE.set_rdl_tag("D_SRC_SURFACE_STRIDE_");
    this.D_SRC_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_SRC_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_SRC_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h6c, "RW", 0);
    this.D_DST_BASE_ADDR_LOW = new("D_DST_BASE_ADDR_LOW");
    this.D_DST_BASE_ADDR_LOW.configure(this, null, "");
    this.D_DST_BASE_ADDR_LOW.set_rdl_tag("D_DST_BASE_ADDR_LOW_");
    this.D_DST_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_DST_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_DST_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h70, "RW", 0);
    this.D_DST_BASE_ADDR_HIGH = new("D_DST_BASE_ADDR_HIGH");
    this.D_DST_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_DST_BASE_ADDR_HIGH.set_rdl_tag("D_DST_BASE_ADDR_HIGH_");
    this.D_DST_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_DST_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_DST_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h74, "RW", 0);
    this.D_DST_LINE_STRIDE = new("D_DST_LINE_STRIDE");
    this.D_DST_LINE_STRIDE.configure(this, null, "");
    this.D_DST_LINE_STRIDE.set_rdl_tag("D_DST_LINE_STRIDE_");
    this.D_DST_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DST_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_DST_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h78, "RW", 0);
    this.D_DST_SURFACE_STRIDE = new("D_DST_SURFACE_STRIDE");
    this.D_DST_SURFACE_STRIDE.configure(this, null, "");
    this.D_DST_SURFACE_STRIDE.set_rdl_tag("D_DST_SURFACE_STRIDE_");
    this.D_DST_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DST_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_DST_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h7c, "RW", 0);
    this.D_DST_RAM_CFG = new("D_DST_RAM_CFG");
    this.D_DST_RAM_CFG.configure(this, null, "");
    this.D_DST_RAM_CFG.set_rdl_tag("D_DST_RAM_CFG_");
    this.D_DST_RAM_CFG.set_reg_test_info(0, 0, 2);
    this.D_DST_RAM_CFG.build();
    this.default_map.add_reg(this.D_DST_RAM_CFG, `UVM_REG_ADDR_WIDTH'h80, "RW", 0);
    this.D_DATA_FORMAT = new("D_DATA_FORMAT");
    this.D_DATA_FORMAT.configure(this, null, "");
    this.D_DATA_FORMAT.set_rdl_tag("D_DATA_FORMAT_");
    this.D_DATA_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_DATA_FORMAT.build();
    this.default_map.add_reg(this.D_DATA_FORMAT, `UVM_REG_ADDR_WIDTH'h84, "RW", 0);
    this.D_INF_INPUT_NUM = new("D_INF_INPUT_NUM");
    this.D_INF_INPUT_NUM.configure(this, null, "");
    this.D_INF_INPUT_NUM.set_rdl_tag("D_INF_INPUT_NUM_");
    this.D_INF_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_INF_INPUT_NUM.build();
    this.default_map.add_reg(this.D_INF_INPUT_NUM, `UVM_REG_ADDR_WIDTH'h88, "RO", 0);
    this.D_NAN_INPUT_NUM = new("D_NAN_INPUT_NUM");
    this.D_NAN_INPUT_NUM.configure(this, null, "");
    this.D_NAN_INPUT_NUM.set_rdl_tag("D_NAN_INPUT_NUM_");
    this.D_NAN_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_NAN_INPUT_NUM.build();
    this.default_map.add_reg(this.D_NAN_INPUT_NUM, `UVM_REG_ADDR_WIDTH'h8c, "RO", 0);
    this.D_NAN_OUTPUT_NUM = new("D_NAN_OUTPUT_NUM");
    this.D_NAN_OUTPUT_NUM.configure(this, null, "");
    this.D_NAN_OUTPUT_NUM.set_rdl_tag("D_NAN_OUTPUT_NUM_");
    this.D_NAN_OUTPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_NAN_OUTPUT_NUM.build();
    this.default_map.add_reg(this.D_NAN_OUTPUT_NUM, `UVM_REG_ADDR_WIDTH'h90, "RO", 0);
    this.D_PERF_ENABLE = new("D_PERF_ENABLE");
    this.D_PERF_ENABLE.configure(this, null, "");
    this.D_PERF_ENABLE.set_rdl_tag("D_PERF_ENABLE_");
    this.D_PERF_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_PERF_ENABLE.build();
    this.default_map.add_reg(this.D_PERF_ENABLE, `UVM_REG_ADDR_WIDTH'h94, "RW", 0);
    this.D_PERF_WRITE_STALL = new("D_PERF_WRITE_STALL");
    this.D_PERF_WRITE_STALL.configure(this, null, "");
    this.D_PERF_WRITE_STALL.set_rdl_tag("D_PERF_WRITE_STALL_");
    this.D_PERF_WRITE_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_WRITE_STALL.build();
    this.default_map.add_reg(this.D_PERF_WRITE_STALL, `UVM_REG_ADDR_WIDTH'h98, "RO", 0);
    this.D_CYA = new("D_CYA");
    this.D_CYA.configure(this, null, "");
    this.D_CYA.set_rdl_tag("D_CYA_");
    this.D_CYA.set_reg_test_info(0, 0, 2);
    this.D_CYA.build();
    this.default_map.add_reg(this.D_CYA, `UVM_REG_ADDR_WIDTH'h9c, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_PDP)
endclass : block_addrmap_NVDLA_NVDLA_PDP

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_S_POINTER

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_OP_ENABLE

// D_DATA_CUBE_WIDTH
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WIDTH = new("WIDTH");
    this.WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.WIDTH.add_def_property("spec_access", "rw");
    this.WIDTH.add_def_property("spec_sw_default", "0x0");
    this.WIDTH.add_def_property("sw_default_mask", "0x0");
    this.WIDTH.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WIDTH"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH

// D_DATA_CUBE_HEIGHT
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.HEIGHT = new("HEIGHT");
    this.HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.HEIGHT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.HEIGHT.add_def_property("spec_access", "rw");
    this.HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "HEIGHT"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT

// D_DATA_CUBE_CHANNEL
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CHANNEL = new("CHANNEL");
    this.CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CHANNEL.add_def_property("spec_access", "rw");
    this.CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL

// D_SRC_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_BASE_ADDR_LOW = new("SRC_BASE_ADDR_LOW");
    this.SRC_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.SRC_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.SRC_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.SRC_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW

// D_SRC_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_BASE_ADDR_HIGH = new("SRC_BASE_ADDR_HIGH");
    this.SRC_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.SRC_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.SRC_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.SRC_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH

// D_SRC_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_LINE_STRIDE = new("SRC_LINE_STRIDE");
    this.SRC_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.SRC_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.SRC_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.SRC_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE

// D_SRC_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_SURFACE_STRIDE = new("SRC_SURFACE_STRIDE");
    this.SRC_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.SRC_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.SRC_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.SRC_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE

// D_SRC_DMA_CFG
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_DMA_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_DMA_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_RAM_TYPE = new("SRC_RAM_TYPE");
    this.SRC_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.SRC_RAM_TYPE.add_def_property("spec_access", "rw");
    this.SRC_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.SRC_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.SRC_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_DMA_CFG

// D_SRC_COMPRESSION_EN
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_COMPRESSION_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_COMPRESSION_EN = new("SRC_COMPRESSION_EN");
    this.SRC_COMPRESSION_EN.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SRC_COMPRESSION_EN.configure(this, 1, 0, "RO", 0, 1'h0, 1, 0, 1);
    this.SRC_COMPRESSION_EN.add_def_property("spec_access", "c");
    this.SRC_COMPRESSION_EN.add_def_property("spec_sw_default", "0x0");
    this.SRC_COMPRESSION_EN.add_def_property("sw_default_mask", "0x0");
    this.SRC_COMPRESSION_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_COMPRESSION_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN

// D_OPERATION_MODE
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_OPERATION_MODE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OPERATION_MODE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_OPERATION_MODE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OPERATION_MODE = new("OPERATION_MODE");
    this.OPERATION_MODE.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.OPERATION_MODE.configure(this, 2, 0, "RO", 0, 2'h0, 1, 0, 1);
    this.OPERATION_MODE.add_def_property("spec_access", "c");
    this.OPERATION_MODE.add_def_property("spec_sw_default", "0x0");
    this.OPERATION_MODE.add_def_property("sw_default_mask", "0x0");
    this.OPERATION_MODE.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OPERATION_MODE"}, 0, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_OPERATION_MODE

// D_DATA_FORMAT
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl INPUT_DATA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.INPUT_DATA = new("INPUT_DATA");
    this.INPUT_DATA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.INPUT_DATA.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 1);
    this.INPUT_DATA.add_def_property("spec_access", "rw");
    this.INPUT_DATA.add_def_property("spec_sw_default", "0x0");
    this.INPUT_DATA.add_def_property("sw_default_mask", "0x0");
    this.INPUT_DATA.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "INPUT_DATA"}, 0, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_FORMAT

// D_PERF_ENABLE
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_PERF_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DMA_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_PERF_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DMA_EN = new("DMA_EN");
    this.DMA_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DMA_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DMA_EN.add_def_property("spec_access", "rw");
    this.DMA_EN.add_def_property("spec_sw_default", "0x0");
    this.DMA_EN.add_def_property("sw_default_mask", "0x0");
    this.DMA_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DMA_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_PERF_ENABLE

// D_PERF_READ_STALL
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_PERF_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_READ_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_PERF_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_READ_STALL = new("PERF_READ_STALL");
    this.PERF_READ_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_READ_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_READ_STALL.add_def_property("spec_access", "r");
    this.PERF_READ_STALL.add_def_property("spec_sw_default", "0x0");
    this.PERF_READ_STALL.add_def_property("sw_default_mask", "0x0");
    this.PERF_READ_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_READ_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_PERF_READ_STALL

// D_CYA
class reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_CYA extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CYA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_CYA");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CYA = new("CYA");
    this.CYA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CYA.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.CYA.add_def_property("spec_access", "rw");
    this.CYA.add_def_property("spec_sw_default", "0x0");
    this.CYA.add_def_property("sw_default_mask", "0x0");
    this.CYA.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CYA"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_CYA

// Block NVDLA_CDP_RDMA
class block_addrmap_NVDLA_NVDLA_CDP_RDMA extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH D_DATA_CUBE_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT D_DATA_CUBE_HEIGHT;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL D_DATA_CUBE_CHANNEL;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW D_SRC_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH D_SRC_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE D_SRC_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE D_SRC_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_DMA_CFG D_SRC_DMA_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN D_SRC_COMPRESSION_EN;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_OPERATION_MODE D_OPERATION_MODE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_DATA_FORMAT D_DATA_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_PERF_ENABLE D_PERF_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_PERF_READ_STALL D_PERF_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_CDP_RDMA_D_CYA D_CYA;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_CDP_RDMA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.D_DATA_CUBE_WIDTH = new("D_DATA_CUBE_WIDTH");
    this.D_DATA_CUBE_WIDTH.configure(this, null, "");
    this.D_DATA_CUBE_WIDTH.set_rdl_tag("D_DATA_CUBE_WIDTH_");
    this.D_DATA_CUBE_WIDTH.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_WIDTH.build();
    this.default_map.add_reg(this.D_DATA_CUBE_WIDTH, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.D_DATA_CUBE_HEIGHT = new("D_DATA_CUBE_HEIGHT");
    this.D_DATA_CUBE_HEIGHT.configure(this, null, "");
    this.D_DATA_CUBE_HEIGHT.set_rdl_tag("D_DATA_CUBE_HEIGHT_");
    this.D_DATA_CUBE_HEIGHT.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_HEIGHT.build();
    this.default_map.add_reg(this.D_DATA_CUBE_HEIGHT, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.D_DATA_CUBE_CHANNEL = new("D_DATA_CUBE_CHANNEL");
    this.D_DATA_CUBE_CHANNEL.configure(this, null, "");
    this.D_DATA_CUBE_CHANNEL.set_rdl_tag("D_DATA_CUBE_CHANNEL_");
    this.D_DATA_CUBE_CHANNEL.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_CHANNEL.build();
    this.default_map.add_reg(this.D_DATA_CUBE_CHANNEL, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.D_SRC_BASE_ADDR_LOW = new("D_SRC_BASE_ADDR_LOW");
    this.D_SRC_BASE_ADDR_LOW.configure(this, null, "");
    this.D_SRC_BASE_ADDR_LOW.set_rdl_tag("D_SRC_BASE_ADDR_LOW_");
    this.D_SRC_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_SRC_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_SRC_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.D_SRC_BASE_ADDR_HIGH = new("D_SRC_BASE_ADDR_HIGH");
    this.D_SRC_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_SRC_BASE_ADDR_HIGH.set_rdl_tag("D_SRC_BASE_ADDR_HIGH_");
    this.D_SRC_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_SRC_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_SRC_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.D_SRC_LINE_STRIDE = new("D_SRC_LINE_STRIDE");
    this.D_SRC_LINE_STRIDE.configure(this, null, "");
    this.D_SRC_LINE_STRIDE.set_rdl_tag("D_SRC_LINE_STRIDE_");
    this.D_SRC_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_SRC_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_SRC_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.D_SRC_SURFACE_STRIDE = new("D_SRC_SURFACE_STRIDE");
    this.D_SRC_SURFACE_STRIDE.configure(this, null, "");
    this.D_SRC_SURFACE_STRIDE.set_rdl_tag("D_SRC_SURFACE_STRIDE_");
    this.D_SRC_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_SRC_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_SRC_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.D_SRC_DMA_CFG = new("D_SRC_DMA_CFG");
    this.D_SRC_DMA_CFG.configure(this, null, "");
    this.D_SRC_DMA_CFG.set_rdl_tag("D_SRC_DMA_CFG_");
    this.D_SRC_DMA_CFG.set_reg_test_info(0, 0, 2);
    this.D_SRC_DMA_CFG.build();
    this.default_map.add_reg(this.D_SRC_DMA_CFG, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.D_SRC_COMPRESSION_EN = new("D_SRC_COMPRESSION_EN");
    this.D_SRC_COMPRESSION_EN.configure(this, null, "");
    this.D_SRC_COMPRESSION_EN.set_rdl_tag("D_SRC_COMPRESSION_EN_");
    this.D_SRC_COMPRESSION_EN.set_reg_test_info(0, 0, 0);
    this.D_SRC_COMPRESSION_EN.build();
    this.default_map.add_reg(this.D_SRC_COMPRESSION_EN, `UVM_REG_ADDR_WIDTH'h2c, "RO", 0);
    this.D_OPERATION_MODE = new("D_OPERATION_MODE");
    this.D_OPERATION_MODE.configure(this, null, "");
    this.D_OPERATION_MODE.set_rdl_tag("D_OPERATION_MODE_");
    this.D_OPERATION_MODE.set_reg_test_info(0, 0, 0);
    this.D_OPERATION_MODE.build();
    this.default_map.add_reg(this.D_OPERATION_MODE, `UVM_REG_ADDR_WIDTH'h30, "RO", 0);
    this.D_DATA_FORMAT = new("D_DATA_FORMAT");
    this.D_DATA_FORMAT.configure(this, null, "");
    this.D_DATA_FORMAT.set_rdl_tag("D_DATA_FORMAT_");
    this.D_DATA_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_DATA_FORMAT.build();
    this.default_map.add_reg(this.D_DATA_FORMAT, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.D_PERF_ENABLE = new("D_PERF_ENABLE");
    this.D_PERF_ENABLE.configure(this, null, "");
    this.D_PERF_ENABLE.set_rdl_tag("D_PERF_ENABLE_");
    this.D_PERF_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_PERF_ENABLE.build();
    this.default_map.add_reg(this.D_PERF_ENABLE, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.D_PERF_READ_STALL = new("D_PERF_READ_STALL");
    this.D_PERF_READ_STALL.configure(this, null, "");
    this.D_PERF_READ_STALL.set_rdl_tag("D_PERF_READ_STALL_");
    this.D_PERF_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_READ_STALL, `UVM_REG_ADDR_WIDTH'h3c, "RO", 0);
    this.D_CYA = new("D_CYA");
    this.D_CYA.configure(this, null, "");
    this.D_CYA.set_rdl_tag("D_CYA_");
    this.D_CYA.set_reg_test_info(0, 0, 2);
    this.D_CYA.build();
    this.default_map.add_reg(this.D_CYA, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_CDP_RDMA)
endclass : block_addrmap_NVDLA_NVDLA_CDP_RDMA

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_CDP_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_CDP_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_POINTER

// S_LUT_ACCESS_CFG
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_ADDR;
  rand uvm_reg_field_rdl LUT_TABLE_ID;
  rand uvm_reg_field_rdl LUT_ACCESS_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_ADDR = new("LUT_ADDR");
    this.LUT_ADDR.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_ADDR.configure(this, 10, 0, "RW", 0, 10'h0, 1, 1, 0);
    this.LUT_ADDR.add_def_property("spec_access", "rwto");
    this.LUT_ADDR.add_def_property("spec_sw_default", "0x0");
    this.LUT_ADDR.add_def_property("sw_default_mask", "0x0");
    this.LUT_ADDR.add_def_property("reset_mask", "0x3ff");
    this.LUT_TABLE_ID = new("LUT_TABLE_ID");
    this.LUT_TABLE_ID.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_TABLE_ID.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_TABLE_ID.add_def_property("spec_access", "rw");
    this.LUT_TABLE_ID.add_def_property("spec_sw_default", "0x0");
    this.LUT_TABLE_ID.add_def_property("sw_default_mask", "0x0");
    this.LUT_TABLE_ID.add_def_property("reset_mask", "0x1");
    this.LUT_ACCESS_TYPE = new("LUT_ACCESS_TYPE");
    this.LUT_ACCESS_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_ACCESS_TYPE.configure(this, 1, 17, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_ACCESS_TYPE.add_def_property("spec_access", "rw");
    this.LUT_ACCESS_TYPE.add_def_property("spec_sw_default", "0x0");
    this.LUT_ACCESS_TYPE.add_def_property("sw_default_mask", "0x0");
    this.LUT_ACCESS_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_ADDR"}, 0, 10);
    add_hdl_path_slice({rdl_reg_name, "LUT_TABLE_ID"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_ACCESS_TYPE"}, 17, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_CFG

// S_LUT_ACCESS_DATA
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_DATA extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_DATA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_DATA");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_DATA = new("LUT_DATA");
    this.LUT_DATA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_DATA.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.LUT_DATA.add_def_property("spec_access", "rwto");
    this.LUT_DATA.add_def_property("spec_sw_default", "0x0");
    this.LUT_DATA.add_def_property("sw_default_mask", "0x0");
    this.LUT_DATA.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_DATA"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_DATA

// S_LUT_CFG
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_FUNCTION;
  rand uvm_reg_field_rdl LUT_UFLOW_PRIORITY;
  rand uvm_reg_field_rdl LUT_OFLOW_PRIORITY;
  rand uvm_reg_field_rdl LUT_HYBRID_PRIORITY;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_FUNCTION = new("LUT_LE_FUNCTION");
    this.LUT_LE_FUNCTION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_FUNCTION.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_LE_FUNCTION.add_def_property("spec_access", "rw");
    this.LUT_LE_FUNCTION.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_FUNCTION.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_FUNCTION.add_def_property("reset_mask", "0x1");
    this.LUT_UFLOW_PRIORITY = new("LUT_UFLOW_PRIORITY");
    this.LUT_UFLOW_PRIORITY.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_UFLOW_PRIORITY.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_UFLOW_PRIORITY.add_def_property("spec_access", "rw");
    this.LUT_UFLOW_PRIORITY.add_def_property("spec_sw_default", "0x0");
    this.LUT_UFLOW_PRIORITY.add_def_property("sw_default_mask", "0x0");
    this.LUT_UFLOW_PRIORITY.add_def_property("reset_mask", "0x1");
    this.LUT_OFLOW_PRIORITY = new("LUT_OFLOW_PRIORITY");
    this.LUT_OFLOW_PRIORITY.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_OFLOW_PRIORITY.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_OFLOW_PRIORITY.add_def_property("spec_access", "rw");
    this.LUT_OFLOW_PRIORITY.add_def_property("spec_sw_default", "0x0");
    this.LUT_OFLOW_PRIORITY.add_def_property("sw_default_mask", "0x0");
    this.LUT_OFLOW_PRIORITY.add_def_property("reset_mask", "0x1");
    this.LUT_HYBRID_PRIORITY = new("LUT_HYBRID_PRIORITY");
    this.LUT_HYBRID_PRIORITY.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_HYBRID_PRIORITY.configure(this, 1, 6, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_HYBRID_PRIORITY.add_def_property("spec_access", "rw");
    this.LUT_HYBRID_PRIORITY.add_def_property("spec_sw_default", "0x0");
    this.LUT_HYBRID_PRIORITY.add_def_property("sw_default_mask", "0x0");
    this.LUT_HYBRID_PRIORITY.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_FUNCTION"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_UFLOW_PRIORITY"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_OFLOW_PRIORITY"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_HYBRID_PRIORITY"}, 6, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_CFG

// S_LUT_INFO
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_INFO extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_INDEX_OFFSET;
  rand uvm_reg_field_rdl LUT_LE_INDEX_SELECT;
  rand uvm_reg_field_rdl LUT_LO_INDEX_SELECT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_INFO");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_INDEX_OFFSET = new("LUT_LE_INDEX_OFFSET");
    this.LUT_LE_INDEX_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_INDEX_OFFSET.configure(this, 8, 0, "RW", 0, 8'h0, 1, 1, 0);
    this.LUT_LE_INDEX_OFFSET.add_def_property("spec_access", "rw");
    this.LUT_LE_INDEX_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_INDEX_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_INDEX_OFFSET.add_def_property("reset_mask", "0xff");
    this.LUT_LE_INDEX_SELECT = new("LUT_LE_INDEX_SELECT");
    this.LUT_LE_INDEX_SELECT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_INDEX_SELECT.configure(this, 8, 8, "RW", 0, 8'h0, 1, 1, 0);
    this.LUT_LE_INDEX_SELECT.add_def_property("spec_access", "rw");
    this.LUT_LE_INDEX_SELECT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_INDEX_SELECT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_INDEX_SELECT.add_def_property("reset_mask", "0xff");
    this.LUT_LO_INDEX_SELECT = new("LUT_LO_INDEX_SELECT");
    this.LUT_LO_INDEX_SELECT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_INDEX_SELECT.configure(this, 8, 16, "RW", 0, 8'h0, 1, 1, 0);
    this.LUT_LO_INDEX_SELECT.add_def_property("spec_access", "rw");
    this.LUT_LO_INDEX_SELECT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_INDEX_SELECT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_INDEX_SELECT.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_INDEX_OFFSET"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_INDEX_SELECT"}, 8, 8);
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_INDEX_SELECT"}, 16, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_INFO

// S_LUT_LE_START_LOW
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_START_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_START_LOW = new("LUT_LE_START_LOW");
    this.LUT_LE_START_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_START_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LE_START_LOW.add_def_property("spec_access", "rw");
    this.LUT_LE_START_LOW.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_START_LOW.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_START_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_START_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_LOW

// S_LUT_LE_START_HIGH
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_START_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_START_HIGH = new("LUT_LE_START_HIGH");
    this.LUT_LE_START_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_START_HIGH.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.LUT_LE_START_HIGH.add_def_property("spec_access", "rw");
    this.LUT_LE_START_HIGH.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_START_HIGH.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_START_HIGH.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_START_HIGH"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_HIGH

// S_LUT_LE_END_LOW
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_END_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_END_LOW = new("LUT_LE_END_LOW");
    this.LUT_LE_END_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_END_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LE_END_LOW.add_def_property("spec_access", "rw");
    this.LUT_LE_END_LOW.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_END_LOW.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_END_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_END_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_LOW

// S_LUT_LE_END_HIGH
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_END_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_END_HIGH = new("LUT_LE_END_HIGH");
    this.LUT_LE_END_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_END_HIGH.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.LUT_LE_END_HIGH.add_def_property("spec_access", "rw");
    this.LUT_LE_END_HIGH.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_END_HIGH.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_END_HIGH.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_END_HIGH"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_HIGH

// S_LUT_LO_START_LOW
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_START_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_START_LOW = new("LUT_LO_START_LOW");
    this.LUT_LO_START_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_START_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LO_START_LOW.add_def_property("spec_access", "rw");
    this.LUT_LO_START_LOW.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_START_LOW.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_START_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_START_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_LOW

// S_LUT_LO_START_HIGH
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_START_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_START_HIGH = new("LUT_LO_START_HIGH");
    this.LUT_LO_START_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_START_HIGH.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.LUT_LO_START_HIGH.add_def_property("spec_access", "rw");
    this.LUT_LO_START_HIGH.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_START_HIGH.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_START_HIGH.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_START_HIGH"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_HIGH

// S_LUT_LO_END_LOW
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_END_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_END_LOW = new("LUT_LO_END_LOW");
    this.LUT_LO_END_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_END_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LO_END_LOW.add_def_property("spec_access", "rw");
    this.LUT_LO_END_LOW.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_END_LOW.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_END_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_END_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_LOW

// S_LUT_LO_END_HIGH
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_END_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_END_HIGH = new("LUT_LO_END_HIGH");
    this.LUT_LO_END_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_END_HIGH.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.LUT_LO_END_HIGH.add_def_property("spec_access", "rw");
    this.LUT_LO_END_HIGH.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_END_HIGH.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_END_HIGH.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_END_HIGH"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_HIGH

// S_LUT_LE_SLOPE_SCALE
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_UFLOW_SCALE;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_OFLOW_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_SLOPE_UFLOW_SCALE = new("LUT_LE_SLOPE_UFLOW_SCALE");
    this.LUT_LE_SLOPE_UFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_UFLOW_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    this.LUT_LE_SLOPE_OFLOW_SCALE = new("LUT_LE_SLOPE_OFLOW_SCALE");
    this.LUT_LE_SLOPE_OFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_OFLOW_SCALE.configure(this, 16, 16, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_UFLOW_SCALE"}, 0, 16);
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_OFLOW_SCALE"}, 16, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE

// S_LUT_LE_SLOPE_SHIFT
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_UFLOW_SHIFT;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_OFLOW_SHIFT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_SLOPE_UFLOW_SHIFT = new("LUT_LE_SLOPE_UFLOW_SHIFT");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_UFLOW_SHIFT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    this.LUT_LE_SLOPE_OFLOW_SHIFT = new("LUT_LE_SLOPE_OFLOW_SHIFT");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_OFLOW_SHIFT.configure(this, 5, 5, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_UFLOW_SHIFT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_OFLOW_SHIFT"}, 5, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT

// S_LUT_LO_SLOPE_SCALE
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_UFLOW_SCALE;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_OFLOW_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_SLOPE_UFLOW_SCALE = new("LUT_LO_SLOPE_UFLOW_SCALE");
    this.LUT_LO_SLOPE_UFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_UFLOW_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    this.LUT_LO_SLOPE_OFLOW_SCALE = new("LUT_LO_SLOPE_OFLOW_SCALE");
    this.LUT_LO_SLOPE_OFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_OFLOW_SCALE.configure(this, 16, 16, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_UFLOW_SCALE"}, 0, 16);
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_OFLOW_SCALE"}, 16, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE

// S_LUT_LO_SLOPE_SHIFT
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_UFLOW_SHIFT;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_OFLOW_SHIFT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_SLOPE_UFLOW_SHIFT = new("LUT_LO_SLOPE_UFLOW_SHIFT");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_UFLOW_SHIFT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    this.LUT_LO_SLOPE_OFLOW_SHIFT = new("LUT_LO_SLOPE_OFLOW_SHIFT");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_OFLOW_SHIFT.configure(this, 5, 5, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_UFLOW_SHIFT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_OFLOW_SHIFT"}, 5, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_CDP_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_OP_ENABLE

// D_FUNC_BYPASS
class reg_addrmap_NVDLA_NVDLA_CDP_D_FUNC_BYPASS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SQSUM_BYPASS;
  rand uvm_reg_field_rdl MUL_BYPASS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_FUNC_BYPASS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SQSUM_BYPASS = new("SQSUM_BYPASS");
    this.SQSUM_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SQSUM_BYPASS.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.SQSUM_BYPASS.add_def_property("spec_access", "rw");
    this.SQSUM_BYPASS.add_def_property("spec_sw_default", "0x0");
    this.SQSUM_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.SQSUM_BYPASS.add_def_property("reset_mask", "0x1");
    this.MUL_BYPASS = new("MUL_BYPASS");
    this.MUL_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.MUL_BYPASS.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.MUL_BYPASS.add_def_property("spec_access", "rw");
    this.MUL_BYPASS.add_def_property("spec_sw_default", "0x0");
    this.MUL_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.MUL_BYPASS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SQSUM_BYPASS"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "MUL_BYPASS"}, 1, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_FUNC_BYPASS

// D_DST_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_BASE_ADDR_LOW = new("DST_BASE_ADDR_LOW");
    this.DST_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.DST_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.DST_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.DST_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_LOW

// D_DST_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_BASE_ADDR_HIGH = new("DST_BASE_ADDR_HIGH");
    this.DST_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.DST_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.DST_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.DST_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_HIGH

// D_DST_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDP_D_DST_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DST_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_LINE_STRIDE = new("DST_LINE_STRIDE");
    this.DST_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.DST_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DST_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DST_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DST_LINE_STRIDE

// D_DST_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDP_D_DST_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DST_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_SURFACE_STRIDE = new("DST_SURFACE_STRIDE");
    this.DST_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.DST_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DST_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DST_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DST_SURFACE_STRIDE

// D_DST_DMA_CFG
class reg_addrmap_NVDLA_NVDLA_CDP_D_DST_DMA_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DST_DMA_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_RAM_TYPE = new("DST_RAM_TYPE");
    this.DST_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DST_RAM_TYPE.add_def_property("spec_access", "rw");
    this.DST_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.DST_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.DST_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DST_DMA_CFG

// D_DST_COMPRESSION_EN
class reg_addrmap_NVDLA_NVDLA_CDP_D_DST_COMPRESSION_EN extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_COMPRESSION_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DST_COMPRESSION_EN");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_COMPRESSION_EN = new("DST_COMPRESSION_EN");
    this.DST_COMPRESSION_EN.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.DST_COMPRESSION_EN.configure(this, 1, 0, "RO", 0, 1'h0, 1, 0, 1);
    this.DST_COMPRESSION_EN.add_def_property("spec_access", "c");
    this.DST_COMPRESSION_EN.add_def_property("spec_sw_default", "0x0");
    this.DST_COMPRESSION_EN.add_def_property("sw_default_mask", "0x0");
    this.DST_COMPRESSION_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_COMPRESSION_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DST_COMPRESSION_EN

// D_DATA_FORMAT
class reg_addrmap_NVDLA_NVDLA_CDP_D_DATA_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl INPUT_DATA_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DATA_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.INPUT_DATA_TYPE = new("INPUT_DATA_TYPE");
    this.INPUT_DATA_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.INPUT_DATA_TYPE.configure(this, 2, 0, "RW", 0, 2'h1, 1, 1, 1);
    this.INPUT_DATA_TYPE.add_def_property("spec_access", "rw");
    this.INPUT_DATA_TYPE.add_def_property("spec_sw_default", "0x0");
    this.INPUT_DATA_TYPE.add_def_property("sw_default_mask", "0x0");
    this.INPUT_DATA_TYPE.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "INPUT_DATA_TYPE"}, 0, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DATA_FORMAT

// D_NAN_FLUSH_TO_ZERO
class reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_TO_ZERO;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_TO_ZERO = new("NAN_TO_ZERO");
    this.NAN_TO_ZERO.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NAN_TO_ZERO.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.NAN_TO_ZERO.add_def_property("spec_access", "rw");
    this.NAN_TO_ZERO.add_def_property("spec_sw_default", "0x0");
    this.NAN_TO_ZERO.add_def_property("sw_default_mask", "0x0");
    this.NAN_TO_ZERO.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_TO_ZERO"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO

// D_LRN_CFG
class reg_addrmap_NVDLA_NVDLA_CDP_D_LRN_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NORMALZ_LEN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_LRN_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NORMALZ_LEN = new("NORMALZ_LEN");
    this.NORMALZ_LEN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NORMALZ_LEN.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 1);
    this.NORMALZ_LEN.add_def_property("spec_access", "rw");
    this.NORMALZ_LEN.add_def_property("spec_sw_default", "0x0");
    this.NORMALZ_LEN.add_def_property("sw_default_mask", "0x0");
    this.NORMALZ_LEN.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NORMALZ_LEN"}, 0, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_LRN_CFG

// D_DATIN_OFFSET
class reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_OFFSET extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATIN_OFFSET;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_OFFSET");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATIN_OFFSET = new("DATIN_OFFSET");
    this.DATIN_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATIN_OFFSET.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.DATIN_OFFSET.add_def_property("spec_access", "rw");
    this.DATIN_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.DATIN_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.DATIN_OFFSET.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATIN_OFFSET"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_OFFSET

// D_DATIN_SCALE
class reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATIN_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATIN_SCALE = new("DATIN_SCALE");
    this.DATIN_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATIN_SCALE.configure(this, 16, 0, "RW", 0, 16'h1, 1, 1, 1);
    this.DATIN_SCALE.add_def_property("spec_access", "rw");
    this.DATIN_SCALE.add_def_property("spec_sw_default", "0x0");
    this.DATIN_SCALE.add_def_property("sw_default_mask", "0x0");
    this.DATIN_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATIN_SCALE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SCALE

// D_DATIN_SHIFTER
class reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SHIFTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATIN_SHIFTER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SHIFTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATIN_SHIFTER = new("DATIN_SHIFTER");
    this.DATIN_SHIFTER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATIN_SHIFTER.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 1);
    this.DATIN_SHIFTER.add_def_property("spec_access", "rw");
    this.DATIN_SHIFTER.add_def_property("spec_sw_default", "0x0");
    this.DATIN_SHIFTER.add_def_property("sw_default_mask", "0x0");
    this.DATIN_SHIFTER.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATIN_SHIFTER"}, 0, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SHIFTER

// D_DATOUT_OFFSET
class reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_OFFSET extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATOUT_OFFSET;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_OFFSET");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATOUT_OFFSET = new("DATOUT_OFFSET");
    this.DATOUT_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATOUT_OFFSET.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DATOUT_OFFSET.add_def_property("spec_access", "rw");
    this.DATOUT_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.DATOUT_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.DATOUT_OFFSET.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATOUT_OFFSET"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_OFFSET

// D_DATOUT_SCALE
class reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATOUT_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATOUT_SCALE = new("DATOUT_SCALE");
    this.DATOUT_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATOUT_SCALE.configure(this, 16, 0, "RW", 0, 16'h1, 1, 1, 1);
    this.DATOUT_SCALE.add_def_property("spec_access", "rw");
    this.DATOUT_SCALE.add_def_property("spec_sw_default", "0x0");
    this.DATOUT_SCALE.add_def_property("sw_default_mask", "0x0");
    this.DATOUT_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATOUT_SCALE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SCALE

// D_DATOUT_SHIFTER
class reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SHIFTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATOUT_SHIFTER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SHIFTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATOUT_SHIFTER = new("DATOUT_SHIFTER");
    this.DATOUT_SHIFTER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATOUT_SHIFTER.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.DATOUT_SHIFTER.add_def_property("spec_access", "rw");
    this.DATOUT_SHIFTER.add_def_property("spec_sw_default", "0x0");
    this.DATOUT_SHIFTER.add_def_property("sw_default_mask", "0x0");
    this.DATOUT_SHIFTER.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATOUT_SHIFTER"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SHIFTER

// D_NAN_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_INPUT_NUM = new("NAN_INPUT_NUM");
    this.NAN_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.NAN_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.NAN_INPUT_NUM.add_def_property("spec_access", "r");
    this.NAN_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.NAN_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.NAN_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_INPUT_NUM

// D_INF_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_CDP_D_INF_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl INF_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_INF_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.INF_INPUT_NUM = new("INF_INPUT_NUM");
    this.INF_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.INF_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.INF_INPUT_NUM.add_def_property("spec_access", "r");
    this.INF_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.INF_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.INF_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "INF_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_INF_INPUT_NUM

// D_NAN_OUTPUT_NUM
class reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_OUTPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_OUTPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_OUTPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_OUTPUT_NUM = new("NAN_OUTPUT_NUM");
    this.NAN_OUTPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.NAN_OUTPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.NAN_OUTPUT_NUM.add_def_property("spec_access", "r");
    this.NAN_OUTPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.NAN_OUTPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.NAN_OUTPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_OUTPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_OUTPUT_NUM

// D_OUT_SATURATION
class reg_addrmap_NVDLA_NVDLA_CDP_D_OUT_SATURATION extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OUT_SATURATION;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_OUT_SATURATION");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OUT_SATURATION = new("OUT_SATURATION");
    this.OUT_SATURATION.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.OUT_SATURATION.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.OUT_SATURATION.add_def_property("spec_access", "r");
    this.OUT_SATURATION.add_def_property("spec_sw_default", "0x0");
    this.OUT_SATURATION.add_def_property("sw_default_mask", "0x0");
    this.OUT_SATURATION.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OUT_SATURATION"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_OUT_SATURATION

// D_PERF_ENABLE
class reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DMA_EN;
  rand uvm_reg_field_rdl LUT_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DMA_EN = new("DMA_EN");
    this.DMA_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DMA_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.DMA_EN.add_def_property("spec_access", "rw");
    this.DMA_EN.add_def_property("spec_sw_default", "0x0");
    this.DMA_EN.add_def_property("sw_default_mask", "0x0");
    this.DMA_EN.add_def_property("reset_mask", "0x1");
    this.LUT_EN = new("LUT_EN");
    this.LUT_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_EN.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_EN.add_def_property("spec_access", "rw");
    this.LUT_EN.add_def_property("spec_sw_default", "0x0");
    this.LUT_EN.add_def_property("sw_default_mask", "0x0");
    this.LUT_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DMA_EN"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_EN"}, 1, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_ENABLE

// D_PERF_WRITE_STALL
class reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_WRITE_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_WRITE_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_WRITE_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_WRITE_STALL = new("PERF_WRITE_STALL");
    this.PERF_WRITE_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_WRITE_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_WRITE_STALL.add_def_property("spec_access", "r");
    this.PERF_WRITE_STALL.add_def_property("spec_sw_default", "0x0");
    this.PERF_WRITE_STALL.add_def_property("sw_default_mask", "0x0");
    this.PERF_WRITE_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_WRITE_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_WRITE_STALL

// D_PERF_LUT_UFLOW
class reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_UFLOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_LUT_UFLOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_UFLOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_LUT_UFLOW = new("PERF_LUT_UFLOW");
    this.PERF_LUT_UFLOW.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_LUT_UFLOW.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_LUT_UFLOW.add_def_property("spec_access", "r");
    this.PERF_LUT_UFLOW.add_def_property("spec_sw_default", "0x0");
    this.PERF_LUT_UFLOW.add_def_property("sw_default_mask", "0x0");
    this.PERF_LUT_UFLOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_LUT_UFLOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_UFLOW

// D_PERF_LUT_OFLOW
class reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_OFLOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_LUT_OFLOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_OFLOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_LUT_OFLOW = new("PERF_LUT_OFLOW");
    this.PERF_LUT_OFLOW.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_LUT_OFLOW.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_LUT_OFLOW.add_def_property("spec_access", "r");
    this.PERF_LUT_OFLOW.add_def_property("spec_sw_default", "0x0");
    this.PERF_LUT_OFLOW.add_def_property("sw_default_mask", "0x0");
    this.PERF_LUT_OFLOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_LUT_OFLOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_OFLOW

// D_PERF_LUT_HYBRID
class reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_HYBRID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_LUT_HYBRID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_HYBRID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_LUT_HYBRID = new("PERF_LUT_HYBRID");
    this.PERF_LUT_HYBRID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_LUT_HYBRID.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_LUT_HYBRID.add_def_property("spec_access", "r");
    this.PERF_LUT_HYBRID.add_def_property("spec_sw_default", "0x0");
    this.PERF_LUT_HYBRID.add_def_property("sw_default_mask", "0x0");
    this.PERF_LUT_HYBRID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_LUT_HYBRID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_HYBRID

// D_PERF_LUT_LE_HIT
class reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LE_HIT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_LUT_LE_HIT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LE_HIT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_LUT_LE_HIT = new("PERF_LUT_LE_HIT");
    this.PERF_LUT_LE_HIT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_LUT_LE_HIT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_LUT_LE_HIT.add_def_property("spec_access", "r");
    this.PERF_LUT_LE_HIT.add_def_property("spec_sw_default", "0x0");
    this.PERF_LUT_LE_HIT.add_def_property("sw_default_mask", "0x0");
    this.PERF_LUT_LE_HIT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_LUT_LE_HIT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LE_HIT

// D_PERF_LUT_LO_HIT
class reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LO_HIT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_LUT_LO_HIT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LO_HIT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_LUT_LO_HIT = new("PERF_LUT_LO_HIT");
    this.PERF_LUT_LO_HIT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_LUT_LO_HIT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_LUT_LO_HIT.add_def_property("spec_access", "r");
    this.PERF_LUT_LO_HIT.add_def_property("spec_sw_default", "0x0");
    this.PERF_LUT_LO_HIT.add_def_property("sw_default_mask", "0x0");
    this.PERF_LUT_LO_HIT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_LUT_LO_HIT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LO_HIT

// D_CYA
class reg_addrmap_NVDLA_NVDLA_CDP_D_CYA extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CYA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_CYA");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CYA = new("CYA");
    this.CYA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CYA.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.CYA.add_def_property("spec_access", "rw");
    this.CYA.add_def_property("spec_sw_default", "0x0");
    this.CYA.add_def_property("sw_default_mask", "0x0");
    this.CYA.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CYA"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_CYA

// Block NVDLA_CDP
class block_addrmap_NVDLA_NVDLA_CDP extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_CFG S_LUT_ACCESS_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_DATA S_LUT_ACCESS_DATA;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_CFG S_LUT_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_INFO S_LUT_INFO;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_LOW S_LUT_LE_START_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_HIGH S_LUT_LE_START_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_LOW S_LUT_LE_END_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_HIGH S_LUT_LE_END_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_LOW S_LUT_LO_START_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_HIGH S_LUT_LO_START_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_LOW S_LUT_LO_END_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_HIGH S_LUT_LO_END_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE S_LUT_LE_SLOPE_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT S_LUT_LE_SLOPE_SHIFT;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE S_LUT_LO_SLOPE_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT S_LUT_LO_SLOPE_SHIFT;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_FUNC_BYPASS D_FUNC_BYPASS;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_LOW D_DST_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_HIGH D_DST_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DST_LINE_STRIDE D_DST_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DST_SURFACE_STRIDE D_DST_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DST_DMA_CFG D_DST_DMA_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DST_COMPRESSION_EN D_DST_COMPRESSION_EN;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DATA_FORMAT D_DATA_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO D_NAN_FLUSH_TO_ZERO;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_LRN_CFG D_LRN_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_OFFSET D_DATIN_OFFSET;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SCALE D_DATIN_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SHIFTER D_DATIN_SHIFTER;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_OFFSET D_DATOUT_OFFSET;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SCALE D_DATOUT_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SHIFTER D_DATOUT_SHIFTER;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_INPUT_NUM D_NAN_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_INF_INPUT_NUM D_INF_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_OUTPUT_NUM D_NAN_OUTPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_OUT_SATURATION D_OUT_SATURATION;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_ENABLE D_PERF_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_WRITE_STALL D_PERF_WRITE_STALL;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_UFLOW D_PERF_LUT_UFLOW;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_OFLOW D_PERF_LUT_OFLOW;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_HYBRID D_PERF_LUT_HYBRID;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LE_HIT D_PERF_LUT_LE_HIT;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LO_HIT D_PERF_LUT_LO_HIT;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_CYA D_CYA;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_CDP");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.S_LUT_ACCESS_CFG = new("S_LUT_ACCESS_CFG");
    this.S_LUT_ACCESS_CFG.configure(this, null, "");
    this.S_LUT_ACCESS_CFG.set_rdl_tag("S_LUT_ACCESS_CFG_");
    this.S_LUT_ACCESS_CFG.set_reg_test_info(0, 0, 2);
    this.S_LUT_ACCESS_CFG.build();
    this.default_map.add_reg(this.S_LUT_ACCESS_CFG, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.S_LUT_ACCESS_DATA = new("S_LUT_ACCESS_DATA");
    this.S_LUT_ACCESS_DATA.configure(this, null, "");
    this.S_LUT_ACCESS_DATA.set_rdl_tag("S_LUT_ACCESS_DATA_");
    this.S_LUT_ACCESS_DATA.set_reg_test_info(0, 0, 2);
    this.S_LUT_ACCESS_DATA.build();
    this.default_map.add_reg(this.S_LUT_ACCESS_DATA, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.S_LUT_CFG = new("S_LUT_CFG");
    this.S_LUT_CFG.configure(this, null, "");
    this.S_LUT_CFG.set_rdl_tag("S_LUT_CFG_");
    this.S_LUT_CFG.set_reg_test_info(0, 0, 2);
    this.S_LUT_CFG.build();
    this.default_map.add_reg(this.S_LUT_CFG, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.S_LUT_INFO = new("S_LUT_INFO");
    this.S_LUT_INFO.configure(this, null, "");
    this.S_LUT_INFO.set_rdl_tag("S_LUT_INFO_");
    this.S_LUT_INFO.set_reg_test_info(0, 0, 2);
    this.S_LUT_INFO.build();
    this.default_map.add_reg(this.S_LUT_INFO, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.S_LUT_LE_START_LOW = new("S_LUT_LE_START_LOW");
    this.S_LUT_LE_START_LOW.configure(this, null, "");
    this.S_LUT_LE_START_LOW.set_rdl_tag("S_LUT_LE_START_LOW_");
    this.S_LUT_LE_START_LOW.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_START_LOW.build();
    this.default_map.add_reg(this.S_LUT_LE_START_LOW, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.S_LUT_LE_START_HIGH = new("S_LUT_LE_START_HIGH");
    this.S_LUT_LE_START_HIGH.configure(this, null, "");
    this.S_LUT_LE_START_HIGH.set_rdl_tag("S_LUT_LE_START_HIGH_");
    this.S_LUT_LE_START_HIGH.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_START_HIGH.build();
    this.default_map.add_reg(this.S_LUT_LE_START_HIGH, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.S_LUT_LE_END_LOW = new("S_LUT_LE_END_LOW");
    this.S_LUT_LE_END_LOW.configure(this, null, "");
    this.S_LUT_LE_END_LOW.set_rdl_tag("S_LUT_LE_END_LOW_");
    this.S_LUT_LE_END_LOW.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_END_LOW.build();
    this.default_map.add_reg(this.S_LUT_LE_END_LOW, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.S_LUT_LE_END_HIGH = new("S_LUT_LE_END_HIGH");
    this.S_LUT_LE_END_HIGH.configure(this, null, "");
    this.S_LUT_LE_END_HIGH.set_rdl_tag("S_LUT_LE_END_HIGH_");
    this.S_LUT_LE_END_HIGH.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_END_HIGH.build();
    this.default_map.add_reg(this.S_LUT_LE_END_HIGH, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.S_LUT_LO_START_LOW = new("S_LUT_LO_START_LOW");
    this.S_LUT_LO_START_LOW.configure(this, null, "");
    this.S_LUT_LO_START_LOW.set_rdl_tag("S_LUT_LO_START_LOW_");
    this.S_LUT_LO_START_LOW.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_START_LOW.build();
    this.default_map.add_reg(this.S_LUT_LO_START_LOW, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.S_LUT_LO_START_HIGH = new("S_LUT_LO_START_HIGH");
    this.S_LUT_LO_START_HIGH.configure(this, null, "");
    this.S_LUT_LO_START_HIGH.set_rdl_tag("S_LUT_LO_START_HIGH_");
    this.S_LUT_LO_START_HIGH.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_START_HIGH.build();
    this.default_map.add_reg(this.S_LUT_LO_START_HIGH, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.S_LUT_LO_END_LOW = new("S_LUT_LO_END_LOW");
    this.S_LUT_LO_END_LOW.configure(this, null, "");
    this.S_LUT_LO_END_LOW.set_rdl_tag("S_LUT_LO_END_LOW_");
    this.S_LUT_LO_END_LOW.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_END_LOW.build();
    this.default_map.add_reg(this.S_LUT_LO_END_LOW, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.S_LUT_LO_END_HIGH = new("S_LUT_LO_END_HIGH");
    this.S_LUT_LO_END_HIGH.configure(this, null, "");
    this.S_LUT_LO_END_HIGH.set_rdl_tag("S_LUT_LO_END_HIGH_");
    this.S_LUT_LO_END_HIGH.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_END_HIGH.build();
    this.default_map.add_reg(this.S_LUT_LO_END_HIGH, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.S_LUT_LE_SLOPE_SCALE = new("S_LUT_LE_SLOPE_SCALE");
    this.S_LUT_LE_SLOPE_SCALE.configure(this, null, "");
    this.S_LUT_LE_SLOPE_SCALE.set_rdl_tag("S_LUT_LE_SLOPE_SCALE_");
    this.S_LUT_LE_SLOPE_SCALE.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_SLOPE_SCALE.build();
    this.default_map.add_reg(this.S_LUT_LE_SLOPE_SCALE, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.S_LUT_LE_SLOPE_SHIFT = new("S_LUT_LE_SLOPE_SHIFT");
    this.S_LUT_LE_SLOPE_SHIFT.configure(this, null, "");
    this.S_LUT_LE_SLOPE_SHIFT.set_rdl_tag("S_LUT_LE_SLOPE_SHIFT_");
    this.S_LUT_LE_SLOPE_SHIFT.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_SLOPE_SHIFT.build();
    this.default_map.add_reg(this.S_LUT_LE_SLOPE_SHIFT, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.S_LUT_LO_SLOPE_SCALE = new("S_LUT_LO_SLOPE_SCALE");
    this.S_LUT_LO_SLOPE_SCALE.configure(this, null, "");
    this.S_LUT_LO_SLOPE_SCALE.set_rdl_tag("S_LUT_LO_SLOPE_SCALE_");
    this.S_LUT_LO_SLOPE_SCALE.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_SLOPE_SCALE.build();
    this.default_map.add_reg(this.S_LUT_LO_SLOPE_SCALE, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.S_LUT_LO_SLOPE_SHIFT = new("S_LUT_LO_SLOPE_SHIFT");
    this.S_LUT_LO_SLOPE_SHIFT.configure(this, null, "");
    this.S_LUT_LO_SLOPE_SHIFT.set_rdl_tag("S_LUT_LO_SLOPE_SHIFT_");
    this.S_LUT_LO_SLOPE_SHIFT.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_SLOPE_SHIFT.build();
    this.default_map.add_reg(this.S_LUT_LO_SLOPE_SHIFT, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.D_FUNC_BYPASS = new("D_FUNC_BYPASS");
    this.D_FUNC_BYPASS.configure(this, null, "");
    this.D_FUNC_BYPASS.set_rdl_tag("D_FUNC_BYPASS_");
    this.D_FUNC_BYPASS.set_reg_test_info(0, 0, 2);
    this.D_FUNC_BYPASS.build();
    this.default_map.add_reg(this.D_FUNC_BYPASS, `UVM_REG_ADDR_WIDTH'h4c, "RW", 0);
    this.D_DST_BASE_ADDR_LOW = new("D_DST_BASE_ADDR_LOW");
    this.D_DST_BASE_ADDR_LOW.configure(this, null, "");
    this.D_DST_BASE_ADDR_LOW.set_rdl_tag("D_DST_BASE_ADDR_LOW_");
    this.D_DST_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_DST_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_DST_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h50, "RW", 0);
    this.D_DST_BASE_ADDR_HIGH = new("D_DST_BASE_ADDR_HIGH");
    this.D_DST_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_DST_BASE_ADDR_HIGH.set_rdl_tag("D_DST_BASE_ADDR_HIGH_");
    this.D_DST_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_DST_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_DST_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h54, "RW", 0);
    this.D_DST_LINE_STRIDE = new("D_DST_LINE_STRIDE");
    this.D_DST_LINE_STRIDE.configure(this, null, "");
    this.D_DST_LINE_STRIDE.set_rdl_tag("D_DST_LINE_STRIDE_");
    this.D_DST_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DST_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_DST_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h58, "RW", 0);
    this.D_DST_SURFACE_STRIDE = new("D_DST_SURFACE_STRIDE");
    this.D_DST_SURFACE_STRIDE.configure(this, null, "");
    this.D_DST_SURFACE_STRIDE.set_rdl_tag("D_DST_SURFACE_STRIDE_");
    this.D_DST_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DST_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_DST_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h5c, "RW", 0);
    this.D_DST_DMA_CFG = new("D_DST_DMA_CFG");
    this.D_DST_DMA_CFG.configure(this, null, "");
    this.D_DST_DMA_CFG.set_rdl_tag("D_DST_DMA_CFG_");
    this.D_DST_DMA_CFG.set_reg_test_info(0, 0, 2);
    this.D_DST_DMA_CFG.build();
    this.default_map.add_reg(this.D_DST_DMA_CFG, `UVM_REG_ADDR_WIDTH'h60, "RW", 0);
    this.D_DST_COMPRESSION_EN = new("D_DST_COMPRESSION_EN");
    this.D_DST_COMPRESSION_EN.configure(this, null, "");
    this.D_DST_COMPRESSION_EN.set_rdl_tag("D_DST_COMPRESSION_EN_");
    this.D_DST_COMPRESSION_EN.set_reg_test_info(0, 0, 0);
    this.D_DST_COMPRESSION_EN.build();
    this.default_map.add_reg(this.D_DST_COMPRESSION_EN, `UVM_REG_ADDR_WIDTH'h64, "RO", 0);
    this.D_DATA_FORMAT = new("D_DATA_FORMAT");
    this.D_DATA_FORMAT.configure(this, null, "");
    this.D_DATA_FORMAT.set_rdl_tag("D_DATA_FORMAT_");
    this.D_DATA_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_DATA_FORMAT.build();
    this.default_map.add_reg(this.D_DATA_FORMAT, `UVM_REG_ADDR_WIDTH'h68, "RW", 0);
    this.D_NAN_FLUSH_TO_ZERO = new("D_NAN_FLUSH_TO_ZERO");
    this.D_NAN_FLUSH_TO_ZERO.configure(this, null, "");
    this.D_NAN_FLUSH_TO_ZERO.set_rdl_tag("D_NAN_FLUSH_TO_ZERO_");
    this.D_NAN_FLUSH_TO_ZERO.set_reg_test_info(0, 0, 2);
    this.D_NAN_FLUSH_TO_ZERO.build();
    this.default_map.add_reg(this.D_NAN_FLUSH_TO_ZERO, `UVM_REG_ADDR_WIDTH'h6c, "RW", 0);
    this.D_LRN_CFG = new("D_LRN_CFG");
    this.D_LRN_CFG.configure(this, null, "");
    this.D_LRN_CFG.set_rdl_tag("D_LRN_CFG_");
    this.D_LRN_CFG.set_reg_test_info(0, 0, 2);
    this.D_LRN_CFG.build();
    this.default_map.add_reg(this.D_LRN_CFG, `UVM_REG_ADDR_WIDTH'h70, "RW", 0);
    this.D_DATIN_OFFSET = new("D_DATIN_OFFSET");
    this.D_DATIN_OFFSET.configure(this, null, "");
    this.D_DATIN_OFFSET.set_rdl_tag("D_DATIN_OFFSET_");
    this.D_DATIN_OFFSET.set_reg_test_info(0, 0, 2);
    this.D_DATIN_OFFSET.build();
    this.default_map.add_reg(this.D_DATIN_OFFSET, `UVM_REG_ADDR_WIDTH'h74, "RW", 0);
    this.D_DATIN_SCALE = new("D_DATIN_SCALE");
    this.D_DATIN_SCALE.configure(this, null, "");
    this.D_DATIN_SCALE.set_rdl_tag("D_DATIN_SCALE_");
    this.D_DATIN_SCALE.set_reg_test_info(0, 0, 2);
    this.D_DATIN_SCALE.build();
    this.default_map.add_reg(this.D_DATIN_SCALE, `UVM_REG_ADDR_WIDTH'h78, "RW", 0);
    this.D_DATIN_SHIFTER = new("D_DATIN_SHIFTER");
    this.D_DATIN_SHIFTER.configure(this, null, "");
    this.D_DATIN_SHIFTER.set_rdl_tag("D_DATIN_SHIFTER_");
    this.D_DATIN_SHIFTER.set_reg_test_info(0, 0, 2);
    this.D_DATIN_SHIFTER.build();
    this.default_map.add_reg(this.D_DATIN_SHIFTER, `UVM_REG_ADDR_WIDTH'h7c, "RW", 0);
    this.D_DATOUT_OFFSET = new("D_DATOUT_OFFSET");
    this.D_DATOUT_OFFSET.configure(this, null, "");
    this.D_DATOUT_OFFSET.set_rdl_tag("D_DATOUT_OFFSET_");
    this.D_DATOUT_OFFSET.set_reg_test_info(0, 0, 2);
    this.D_DATOUT_OFFSET.build();
    this.default_map.add_reg(this.D_DATOUT_OFFSET, `UVM_REG_ADDR_WIDTH'h80, "RW", 0);
    this.D_DATOUT_SCALE = new("D_DATOUT_SCALE");
    this.D_DATOUT_SCALE.configure(this, null, "");
    this.D_DATOUT_SCALE.set_rdl_tag("D_DATOUT_SCALE_");
    this.D_DATOUT_SCALE.set_reg_test_info(0, 0, 2);
    this.D_DATOUT_SCALE.build();
    this.default_map.add_reg(this.D_DATOUT_SCALE, `UVM_REG_ADDR_WIDTH'h84, "RW", 0);
    this.D_DATOUT_SHIFTER = new("D_DATOUT_SHIFTER");
    this.D_DATOUT_SHIFTER.configure(this, null, "");
    this.D_DATOUT_SHIFTER.set_rdl_tag("D_DATOUT_SHIFTER_");
    this.D_DATOUT_SHIFTER.set_reg_test_info(0, 0, 2);
    this.D_DATOUT_SHIFTER.build();
    this.default_map.add_reg(this.D_DATOUT_SHIFTER, `UVM_REG_ADDR_WIDTH'h88, "RW", 0);
    this.D_NAN_INPUT_NUM = new("D_NAN_INPUT_NUM");
    this.D_NAN_INPUT_NUM.configure(this, null, "");
    this.D_NAN_INPUT_NUM.set_rdl_tag("D_NAN_INPUT_NUM_");
    this.D_NAN_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_NAN_INPUT_NUM.build();
    this.default_map.add_reg(this.D_NAN_INPUT_NUM, `UVM_REG_ADDR_WIDTH'h8c, "RO", 0);
    this.D_INF_INPUT_NUM = new("D_INF_INPUT_NUM");
    this.D_INF_INPUT_NUM.configure(this, null, "");
    this.D_INF_INPUT_NUM.set_rdl_tag("D_INF_INPUT_NUM_");
    this.D_INF_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_INF_INPUT_NUM.build();
    this.default_map.add_reg(this.D_INF_INPUT_NUM, `UVM_REG_ADDR_WIDTH'h90, "RO", 0);
    this.D_NAN_OUTPUT_NUM = new("D_NAN_OUTPUT_NUM");
    this.D_NAN_OUTPUT_NUM.configure(this, null, "");
    this.D_NAN_OUTPUT_NUM.set_rdl_tag("D_NAN_OUTPUT_NUM_");
    this.D_NAN_OUTPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_NAN_OUTPUT_NUM.build();
    this.default_map.add_reg(this.D_NAN_OUTPUT_NUM, `UVM_REG_ADDR_WIDTH'h94, "RO", 0);
    this.D_OUT_SATURATION = new("D_OUT_SATURATION");
    this.D_OUT_SATURATION.configure(this, null, "");
    this.D_OUT_SATURATION.set_rdl_tag("D_OUT_SATURATION_");
    this.D_OUT_SATURATION.set_reg_test_info(0, 0, 32);
    this.D_OUT_SATURATION.build();
    this.default_map.add_reg(this.D_OUT_SATURATION, `UVM_REG_ADDR_WIDTH'h98, "RO", 0);
    this.D_PERF_ENABLE = new("D_PERF_ENABLE");
    this.D_PERF_ENABLE.configure(this, null, "");
    this.D_PERF_ENABLE.set_rdl_tag("D_PERF_ENABLE_");
    this.D_PERF_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_PERF_ENABLE.build();
    this.default_map.add_reg(this.D_PERF_ENABLE, `UVM_REG_ADDR_WIDTH'h9c, "RW", 0);
    this.D_PERF_WRITE_STALL = new("D_PERF_WRITE_STALL");
    this.D_PERF_WRITE_STALL.configure(this, null, "");
    this.D_PERF_WRITE_STALL.set_rdl_tag("D_PERF_WRITE_STALL_");
    this.D_PERF_WRITE_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_WRITE_STALL.build();
    this.default_map.add_reg(this.D_PERF_WRITE_STALL, `UVM_REG_ADDR_WIDTH'ha0, "RO", 0);
    this.D_PERF_LUT_UFLOW = new("D_PERF_LUT_UFLOW");
    this.D_PERF_LUT_UFLOW.configure(this, null, "");
    this.D_PERF_LUT_UFLOW.set_rdl_tag("D_PERF_LUT_UFLOW_");
    this.D_PERF_LUT_UFLOW.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_UFLOW.build();
    this.default_map.add_reg(this.D_PERF_LUT_UFLOW, `UVM_REG_ADDR_WIDTH'ha4, "RO", 0);
    this.D_PERF_LUT_OFLOW = new("D_PERF_LUT_OFLOW");
    this.D_PERF_LUT_OFLOW.configure(this, null, "");
    this.D_PERF_LUT_OFLOW.set_rdl_tag("D_PERF_LUT_OFLOW_");
    this.D_PERF_LUT_OFLOW.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_OFLOW.build();
    this.default_map.add_reg(this.D_PERF_LUT_OFLOW, `UVM_REG_ADDR_WIDTH'ha8, "RO", 0);
    this.D_PERF_LUT_HYBRID = new("D_PERF_LUT_HYBRID");
    this.D_PERF_LUT_HYBRID.configure(this, null, "");
    this.D_PERF_LUT_HYBRID.set_rdl_tag("D_PERF_LUT_HYBRID_");
    this.D_PERF_LUT_HYBRID.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_HYBRID.build();
    this.default_map.add_reg(this.D_PERF_LUT_HYBRID, `UVM_REG_ADDR_WIDTH'hac, "RO", 0);
    this.D_PERF_LUT_LE_HIT = new("D_PERF_LUT_LE_HIT");
    this.D_PERF_LUT_LE_HIT.configure(this, null, "");
    this.D_PERF_LUT_LE_HIT.set_rdl_tag("D_PERF_LUT_LE_HIT_");
    this.D_PERF_LUT_LE_HIT.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_LE_HIT.build();
    this.default_map.add_reg(this.D_PERF_LUT_LE_HIT, `UVM_REG_ADDR_WIDTH'hb0, "RO", 0);
    this.D_PERF_LUT_LO_HIT = new("D_PERF_LUT_LO_HIT");
    this.D_PERF_LUT_LO_HIT.configure(this, null, "");
    this.D_PERF_LUT_LO_HIT.set_rdl_tag("D_PERF_LUT_LO_HIT_");
    this.D_PERF_LUT_LO_HIT.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_LO_HIT.build();
    this.default_map.add_reg(this.D_PERF_LUT_LO_HIT, `UVM_REG_ADDR_WIDTH'hb4, "RO", 0);
    this.D_CYA = new("D_CYA");
    this.D_CYA.configure(this, null, "");
    this.D_CYA.set_rdl_tag("D_CYA_");
    this.D_CYA.set_reg_test_info(0, 0, 2);
    this.D_CYA.build();
    this.default_map.add_reg(this.D_CYA, `UVM_REG_ADDR_WIDTH'hb8, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_CDP)
endclass : block_addrmap_NVDLA_NVDLA_CDP

// FEATURE
class reg_addrmap_NVDLA_NVDLA_GEC_FEATURE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NUM_ERR_SLICES;
  rand uvm_reg_field_rdl NUM_ERR;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_FEATURE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NUM_ERR_SLICES = new("NUM_ERR_SLICES");
    this.NUM_ERR_SLICES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.NUM_ERR_SLICES.configure(this, 6, 0, "RO", 0, 6'h3, 1, 0, 0);
    this.NUM_ERR_SLICES.add_def_property("spec_access", "c");
    this.NUM_ERR_SLICES.add_def_property("spec_sw_default", "0x0");
    this.NUM_ERR_SLICES.add_def_property("sw_default_mask", "0x0");
    this.NUM_ERR_SLICES.add_def_property("reset_mask", "0x3f");
    this.NUM_ERR = new("NUM_ERR");
    this.NUM_ERR.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.NUM_ERR.configure(this, 16, 16, "RO", 0, 16'h43, 1, 0, 0);
    this.NUM_ERR.add_def_property("spec_access", "c");
    this.NUM_ERR.add_def_property("spec_sw_default", "0x0");
    this.NUM_ERR.add_def_property("sw_default_mask", "0x0");
    this.NUM_ERR.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NUM_ERR_SLICES"}, 0, 6);
    add_hdl_path_slice({rdl_reg_name, "NUM_ERR"}, 16, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_FEATURE

// SWRESET
class reg_addrmap_NVDLA_NVDLA_GEC_SWRESET extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SWRST;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_SWRESET");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SWRST = new("SWRST");
    this.SWRST.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.SWRST.configure(this, 1, 0, "WO", 0, 1'h0, 1, 1, 1);
    this.SWRST.add_def_property("spec_access", "w");
    this.SWRST.add_def_property("spec_sw_default", "0x0");
    this.SWRST.add_def_property("sw_default_mask", "0x0");
    this.SWRST.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SWRST"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_SWRESET

// MISSIONERR_TYPE
class reg_addrmap_NVDLA_NVDLA_GEC_MISSIONERR_TYPE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CODE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_MISSIONERR_TYPE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CODE = new("CODE");
    this.CODE.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CODE.configure(this, 6, 0, "RO", 1, 6'h5, 1, 0, 1);
    this.CODE.add_def_property("spec_access", "r");
    this.CODE.add_def_property("spec_sw_default", "0x0");
    this.CODE.add_def_property("sw_default_mask", "0x0");
    this.CODE.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CODE"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_MISSIONERR_TYPE

// CURRENT_COUNTER_VALUE
class reg_addrmap_NVDLA_NVDLA_GEC_CURRENT_COUNTER_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl VALUE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_CURRENT_COUNTER_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.VALUE = new("VALUE");
    this.VALUE.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.VALUE.configure(this, 9, 0, "RO", 1, 9'h0, 1, 0, 1);
    this.VALUE.add_def_property("spec_access", "r");
    this.VALUE.add_def_property("spec_sw_default", "0x0");
    this.VALUE.add_def_property("sw_default_mask", "0x0");
    this.VALUE.add_def_property("reset_mask", "0x1ff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "VALUE"}, 0, 9);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_CURRENT_COUNTER_VALUE

// MISSIONERR_INDEX
class reg_addrmap_NVDLA_NVDLA_GEC_MISSIONERR_INDEX extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl IDX;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_MISSIONERR_INDEX");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.IDX = new("IDX");
    this.IDX.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.IDX.configure(this, 7, 0, "RW", 0, 7'h0, 1, 1, 1);
    this.IDX.add_def_property("spec_access", "rw");
    this.IDX.add_def_property("spec_sw_default", "0x0");
    this.IDX.add_def_property("sw_default_mask", "0x0");
    this.IDX.add_def_property("reset_mask", "0x7f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "IDX"}, 0, 7);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_MISSIONERR_INDEX

// CORRECTABLE_THRESHOLD
class reg_addrmap_NVDLA_NVDLA_GEC_CORRECTABLE_THRESHOLD extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl COUNT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_CORRECTABLE_THRESHOLD");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.COUNT = new("COUNT");
    this.COUNT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.COUNT.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 1);
    this.COUNT.add_def_property("spec_access", "rw");
    this.COUNT.add_def_property("spec_sw_default", "0x0");
    this.COUNT.add_def_property("sw_default_mask", "0x0");
    this.COUNT.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "COUNT"}, 0, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_CORRECTABLE_THRESHOLD

// MISSIONERR_INJECT_UNLOCK
class reg_addrmap_NVDLA_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl VALUE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.VALUE = new("VALUE");
    this.VALUE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.VALUE.configure(this, 8, 0, "RW", 0, 8'h0, 1, 1, 1);
    this.VALUE.add_def_property("spec_access", "rw");
    this.VALUE.add_def_property("spec_sw_default", "0x0");
    this.VALUE.add_def_property("sw_default_mask", "0x0");
    this.VALUE.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "VALUE"}, 0, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK

// ERRSLICE0_MISSIONERR_ENABLE
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR0;
  rand uvm_reg_field_rdl ERR1;
  rand uvm_reg_field_rdl ERR2;
  rand uvm_reg_field_rdl ERR10;
  rand uvm_reg_field_rdl ERR11;
  rand uvm_reg_field_rdl ERR7;
  rand uvm_reg_field_rdl ERR3;
  rand uvm_reg_field_rdl ERR15;
  rand uvm_reg_field_rdl ERR16;
  rand uvm_reg_field_rdl ERR14;
  rand uvm_reg_field_rdl ERR12;
  rand uvm_reg_field_rdl ERR18;
  rand uvm_reg_field_rdl ERR8;
  rand uvm_reg_field_rdl ERR6;
  rand uvm_reg_field_rdl ERR4;
  rand uvm_reg_field_rdl ERR22;
  rand uvm_reg_field_rdl ERR25;
  rand uvm_reg_field_rdl ERR28;
  rand uvm_reg_field_rdl ERR17;
  rand uvm_reg_field_rdl ERR29;
  rand uvm_reg_field_rdl ERR23;
  rand uvm_reg_field_rdl ERR24;
  rand uvm_reg_field_rdl ERR13;
  rand uvm_reg_field_rdl ERR30;
  rand uvm_reg_field_rdl ERR21;
  rand uvm_reg_field_rdl ERR26;
  rand uvm_reg_field_rdl ERR9;
  rand uvm_reg_field_rdl ERR27;
  rand uvm_reg_field_rdl ERR19;
  rand uvm_reg_field_rdl ERR20;
  rand uvm_reg_field_rdl ERR5;
  rand uvm_reg_field_rdl ERR31;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR0 = new("ERR0");
    this.ERR0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR0.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR0.add_def_property("spec_access", "rw");
    this.ERR0.add_def_property("spec_sw_default", "0x0");
    this.ERR0.add_def_property("sw_default_mask", "0x0");
    this.ERR0.add_def_property("reset_mask", "0x1");
    this.ERR1 = new("ERR1");
    this.ERR1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR1.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR1.add_def_property("spec_access", "rw");
    this.ERR1.add_def_property("spec_sw_default", "0x0");
    this.ERR1.add_def_property("sw_default_mask", "0x0");
    this.ERR1.add_def_property("reset_mask", "0x1");
    this.ERR2 = new("ERR2");
    this.ERR2.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR2.configure(this, 1, 2, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR2.add_def_property("spec_access", "rw");
    this.ERR2.add_def_property("spec_sw_default", "0x0");
    this.ERR2.add_def_property("sw_default_mask", "0x0");
    this.ERR2.add_def_property("reset_mask", "0x1");
    this.ERR10 = new("ERR10");
    this.ERR10.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR10.configure(this, 1, 10, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR10.add_def_property("spec_access", "rw");
    this.ERR10.add_def_property("spec_sw_default", "0x0");
    this.ERR10.add_def_property("sw_default_mask", "0x0");
    this.ERR10.add_def_property("reset_mask", "0x1");
    this.ERR11 = new("ERR11");
    this.ERR11.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR11.configure(this, 1, 11, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR11.add_def_property("spec_access", "rw");
    this.ERR11.add_def_property("spec_sw_default", "0x0");
    this.ERR11.add_def_property("sw_default_mask", "0x0");
    this.ERR11.add_def_property("reset_mask", "0x1");
    this.ERR7 = new("ERR7");
    this.ERR7.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR7.configure(this, 1, 7, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR7.add_def_property("spec_access", "rw");
    this.ERR7.add_def_property("spec_sw_default", "0x0");
    this.ERR7.add_def_property("sw_default_mask", "0x0");
    this.ERR7.add_def_property("reset_mask", "0x1");
    this.ERR3 = new("ERR3");
    this.ERR3.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR3.configure(this, 1, 3, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR3.add_def_property("spec_access", "rw");
    this.ERR3.add_def_property("spec_sw_default", "0x0");
    this.ERR3.add_def_property("sw_default_mask", "0x0");
    this.ERR3.add_def_property("reset_mask", "0x1");
    this.ERR15 = new("ERR15");
    this.ERR15.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR15.configure(this, 1, 15, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR15.add_def_property("spec_access", "rw");
    this.ERR15.add_def_property("spec_sw_default", "0x0");
    this.ERR15.add_def_property("sw_default_mask", "0x0");
    this.ERR15.add_def_property("reset_mask", "0x1");
    this.ERR16 = new("ERR16");
    this.ERR16.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR16.configure(this, 1, 16, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR16.add_def_property("spec_access", "rw");
    this.ERR16.add_def_property("spec_sw_default", "0x0");
    this.ERR16.add_def_property("sw_default_mask", "0x0");
    this.ERR16.add_def_property("reset_mask", "0x1");
    this.ERR14 = new("ERR14");
    this.ERR14.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR14.configure(this, 1, 14, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR14.add_def_property("spec_access", "rw");
    this.ERR14.add_def_property("spec_sw_default", "0x0");
    this.ERR14.add_def_property("sw_default_mask", "0x0");
    this.ERR14.add_def_property("reset_mask", "0x1");
    this.ERR12 = new("ERR12");
    this.ERR12.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR12.configure(this, 1, 12, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR12.add_def_property("spec_access", "rw");
    this.ERR12.add_def_property("spec_sw_default", "0x0");
    this.ERR12.add_def_property("sw_default_mask", "0x0");
    this.ERR12.add_def_property("reset_mask", "0x1");
    this.ERR18 = new("ERR18");
    this.ERR18.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR18.configure(this, 1, 18, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR18.add_def_property("spec_access", "rw");
    this.ERR18.add_def_property("spec_sw_default", "0x0");
    this.ERR18.add_def_property("sw_default_mask", "0x0");
    this.ERR18.add_def_property("reset_mask", "0x1");
    this.ERR8 = new("ERR8");
    this.ERR8.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR8.configure(this, 1, 8, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR8.add_def_property("spec_access", "rw");
    this.ERR8.add_def_property("spec_sw_default", "0x0");
    this.ERR8.add_def_property("sw_default_mask", "0x0");
    this.ERR8.add_def_property("reset_mask", "0x1");
    this.ERR6 = new("ERR6");
    this.ERR6.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR6.configure(this, 1, 6, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR6.add_def_property("spec_access", "rw");
    this.ERR6.add_def_property("spec_sw_default", "0x0");
    this.ERR6.add_def_property("sw_default_mask", "0x0");
    this.ERR6.add_def_property("reset_mask", "0x1");
    this.ERR4 = new("ERR4");
    this.ERR4.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR4.configure(this, 1, 4, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR4.add_def_property("spec_access", "rw");
    this.ERR4.add_def_property("spec_sw_default", "0x0");
    this.ERR4.add_def_property("sw_default_mask", "0x0");
    this.ERR4.add_def_property("reset_mask", "0x1");
    this.ERR22 = new("ERR22");
    this.ERR22.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR22.configure(this, 1, 22, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR22.add_def_property("spec_access", "rw");
    this.ERR22.add_def_property("spec_sw_default", "0x0");
    this.ERR22.add_def_property("sw_default_mask", "0x0");
    this.ERR22.add_def_property("reset_mask", "0x1");
    this.ERR25 = new("ERR25");
    this.ERR25.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR25.configure(this, 1, 25, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR25.add_def_property("spec_access", "rw");
    this.ERR25.add_def_property("spec_sw_default", "0x0");
    this.ERR25.add_def_property("sw_default_mask", "0x0");
    this.ERR25.add_def_property("reset_mask", "0x1");
    this.ERR28 = new("ERR28");
    this.ERR28.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR28.configure(this, 1, 28, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR28.add_def_property("spec_access", "rw");
    this.ERR28.add_def_property("spec_sw_default", "0x0");
    this.ERR28.add_def_property("sw_default_mask", "0x0");
    this.ERR28.add_def_property("reset_mask", "0x1");
    this.ERR17 = new("ERR17");
    this.ERR17.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR17.configure(this, 1, 17, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR17.add_def_property("spec_access", "rw");
    this.ERR17.add_def_property("spec_sw_default", "0x0");
    this.ERR17.add_def_property("sw_default_mask", "0x0");
    this.ERR17.add_def_property("reset_mask", "0x1");
    this.ERR29 = new("ERR29");
    this.ERR29.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR29.configure(this, 1, 29, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR29.add_def_property("spec_access", "rw");
    this.ERR29.add_def_property("spec_sw_default", "0x0");
    this.ERR29.add_def_property("sw_default_mask", "0x0");
    this.ERR29.add_def_property("reset_mask", "0x1");
    this.ERR23 = new("ERR23");
    this.ERR23.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR23.configure(this, 1, 23, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR23.add_def_property("spec_access", "rw");
    this.ERR23.add_def_property("spec_sw_default", "0x0");
    this.ERR23.add_def_property("sw_default_mask", "0x0");
    this.ERR23.add_def_property("reset_mask", "0x1");
    this.ERR24 = new("ERR24");
    this.ERR24.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR24.configure(this, 1, 24, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR24.add_def_property("spec_access", "rw");
    this.ERR24.add_def_property("spec_sw_default", "0x0");
    this.ERR24.add_def_property("sw_default_mask", "0x0");
    this.ERR24.add_def_property("reset_mask", "0x1");
    this.ERR13 = new("ERR13");
    this.ERR13.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR13.configure(this, 1, 13, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR13.add_def_property("spec_access", "rw");
    this.ERR13.add_def_property("spec_sw_default", "0x0");
    this.ERR13.add_def_property("sw_default_mask", "0x0");
    this.ERR13.add_def_property("reset_mask", "0x1");
    this.ERR30 = new("ERR30");
    this.ERR30.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR30.configure(this, 1, 30, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR30.add_def_property("spec_access", "rw");
    this.ERR30.add_def_property("spec_sw_default", "0x0");
    this.ERR30.add_def_property("sw_default_mask", "0x0");
    this.ERR30.add_def_property("reset_mask", "0x1");
    this.ERR21 = new("ERR21");
    this.ERR21.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR21.configure(this, 1, 21, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR21.add_def_property("spec_access", "rw");
    this.ERR21.add_def_property("spec_sw_default", "0x0");
    this.ERR21.add_def_property("sw_default_mask", "0x0");
    this.ERR21.add_def_property("reset_mask", "0x1");
    this.ERR26 = new("ERR26");
    this.ERR26.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR26.configure(this, 1, 26, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR26.add_def_property("spec_access", "rw");
    this.ERR26.add_def_property("spec_sw_default", "0x0");
    this.ERR26.add_def_property("sw_default_mask", "0x0");
    this.ERR26.add_def_property("reset_mask", "0x1");
    this.ERR9 = new("ERR9");
    this.ERR9.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR9.configure(this, 1, 9, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR9.add_def_property("spec_access", "rw");
    this.ERR9.add_def_property("spec_sw_default", "0x0");
    this.ERR9.add_def_property("sw_default_mask", "0x0");
    this.ERR9.add_def_property("reset_mask", "0x1");
    this.ERR27 = new("ERR27");
    this.ERR27.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR27.configure(this, 1, 27, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR27.add_def_property("spec_access", "rw");
    this.ERR27.add_def_property("spec_sw_default", "0x0");
    this.ERR27.add_def_property("sw_default_mask", "0x0");
    this.ERR27.add_def_property("reset_mask", "0x1");
    this.ERR19 = new("ERR19");
    this.ERR19.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR19.configure(this, 1, 19, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR19.add_def_property("spec_access", "rw");
    this.ERR19.add_def_property("spec_sw_default", "0x0");
    this.ERR19.add_def_property("sw_default_mask", "0x0");
    this.ERR19.add_def_property("reset_mask", "0x1");
    this.ERR20 = new("ERR20");
    this.ERR20.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR20.configure(this, 1, 20, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR20.add_def_property("spec_access", "rw");
    this.ERR20.add_def_property("spec_sw_default", "0x0");
    this.ERR20.add_def_property("sw_default_mask", "0x0");
    this.ERR20.add_def_property("reset_mask", "0x1");
    this.ERR5 = new("ERR5");
    this.ERR5.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR5.configure(this, 1, 5, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR5.add_def_property("spec_access", "rw");
    this.ERR5.add_def_property("spec_sw_default", "0x0");
    this.ERR5.add_def_property("sw_default_mask", "0x0");
    this.ERR5.add_def_property("reset_mask", "0x1");
    this.ERR31 = new("ERR31");
    this.ERR31.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR31.configure(this, 1, 31, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR31.add_def_property("spec_access", "rw");
    this.ERR31.add_def_property("spec_sw_default", "0x0");
    this.ERR31.add_def_property("sw_default_mask", "0x0");
    this.ERR31.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR0"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR1"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR2"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR10"}, 10, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR11"}, 11, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR7"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR3"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR15"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR16"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR14"}, 14, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR12"}, 12, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR18"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR8"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR6"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR4"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR22"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR25"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR28"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR17"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR29"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR23"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR24"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR13"}, 13, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR30"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR21"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR26"}, 26, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR9"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR27"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR19"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR20"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR5"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR31"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE

// ERRSLICE0_MISSIONERR_FORCE
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR0;
  rand uvm_reg_field_rdl ERR1;
  rand uvm_reg_field_rdl ERR2;
  rand uvm_reg_field_rdl ERR10;
  rand uvm_reg_field_rdl ERR11;
  rand uvm_reg_field_rdl ERR7;
  rand uvm_reg_field_rdl ERR3;
  rand uvm_reg_field_rdl ERR15;
  rand uvm_reg_field_rdl ERR16;
  rand uvm_reg_field_rdl ERR14;
  rand uvm_reg_field_rdl ERR12;
  rand uvm_reg_field_rdl ERR18;
  rand uvm_reg_field_rdl ERR8;
  rand uvm_reg_field_rdl ERR6;
  rand uvm_reg_field_rdl ERR4;
  rand uvm_reg_field_rdl ERR22;
  rand uvm_reg_field_rdl ERR25;
  rand uvm_reg_field_rdl ERR28;
  rand uvm_reg_field_rdl ERR17;
  rand uvm_reg_field_rdl ERR29;
  rand uvm_reg_field_rdl ERR23;
  rand uvm_reg_field_rdl ERR24;
  rand uvm_reg_field_rdl ERR13;
  rand uvm_reg_field_rdl ERR30;
  rand uvm_reg_field_rdl ERR21;
  rand uvm_reg_field_rdl ERR26;
  rand uvm_reg_field_rdl ERR9;
  rand uvm_reg_field_rdl ERR27;
  rand uvm_reg_field_rdl ERR19;
  rand uvm_reg_field_rdl ERR20;
  rand uvm_reg_field_rdl ERR5;
  rand uvm_reg_field_rdl ERR31;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR0 = new("ERR0");
    this.ERR0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR0.configure(this, 1, 0, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR0.add_def_property("spec_access", "w");
    this.ERR0.add_def_property("spec_sw_default", "0x0");
    this.ERR0.add_def_property("sw_default_mask", "0x0");
    this.ERR0.add_def_property("reset_mask", "0x1");
    this.ERR1 = new("ERR1");
    this.ERR1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR1.configure(this, 1, 1, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR1.add_def_property("spec_access", "w");
    this.ERR1.add_def_property("spec_sw_default", "0x0");
    this.ERR1.add_def_property("sw_default_mask", "0x0");
    this.ERR1.add_def_property("reset_mask", "0x1");
    this.ERR2 = new("ERR2");
    this.ERR2.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR2.configure(this, 1, 2, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR2.add_def_property("spec_access", "w");
    this.ERR2.add_def_property("spec_sw_default", "0x0");
    this.ERR2.add_def_property("sw_default_mask", "0x0");
    this.ERR2.add_def_property("reset_mask", "0x1");
    this.ERR10 = new("ERR10");
    this.ERR10.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR10.configure(this, 1, 10, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR10.add_def_property("spec_access", "w");
    this.ERR10.add_def_property("spec_sw_default", "0x0");
    this.ERR10.add_def_property("sw_default_mask", "0x0");
    this.ERR10.add_def_property("reset_mask", "0x1");
    this.ERR11 = new("ERR11");
    this.ERR11.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR11.configure(this, 1, 11, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR11.add_def_property("spec_access", "w");
    this.ERR11.add_def_property("spec_sw_default", "0x0");
    this.ERR11.add_def_property("sw_default_mask", "0x0");
    this.ERR11.add_def_property("reset_mask", "0x1");
    this.ERR7 = new("ERR7");
    this.ERR7.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR7.configure(this, 1, 7, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR7.add_def_property("spec_access", "w");
    this.ERR7.add_def_property("spec_sw_default", "0x0");
    this.ERR7.add_def_property("sw_default_mask", "0x0");
    this.ERR7.add_def_property("reset_mask", "0x1");
    this.ERR3 = new("ERR3");
    this.ERR3.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR3.configure(this, 1, 3, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR3.add_def_property("spec_access", "w");
    this.ERR3.add_def_property("spec_sw_default", "0x0");
    this.ERR3.add_def_property("sw_default_mask", "0x0");
    this.ERR3.add_def_property("reset_mask", "0x1");
    this.ERR15 = new("ERR15");
    this.ERR15.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR15.configure(this, 1, 15, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR15.add_def_property("spec_access", "w");
    this.ERR15.add_def_property("spec_sw_default", "0x0");
    this.ERR15.add_def_property("sw_default_mask", "0x0");
    this.ERR15.add_def_property("reset_mask", "0x1");
    this.ERR16 = new("ERR16");
    this.ERR16.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR16.configure(this, 1, 16, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR16.add_def_property("spec_access", "w");
    this.ERR16.add_def_property("spec_sw_default", "0x0");
    this.ERR16.add_def_property("sw_default_mask", "0x0");
    this.ERR16.add_def_property("reset_mask", "0x1");
    this.ERR14 = new("ERR14");
    this.ERR14.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR14.configure(this, 1, 14, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR14.add_def_property("spec_access", "w");
    this.ERR14.add_def_property("spec_sw_default", "0x0");
    this.ERR14.add_def_property("sw_default_mask", "0x0");
    this.ERR14.add_def_property("reset_mask", "0x1");
    this.ERR12 = new("ERR12");
    this.ERR12.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR12.configure(this, 1, 12, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR12.add_def_property("spec_access", "w");
    this.ERR12.add_def_property("spec_sw_default", "0x0");
    this.ERR12.add_def_property("sw_default_mask", "0x0");
    this.ERR12.add_def_property("reset_mask", "0x1");
    this.ERR18 = new("ERR18");
    this.ERR18.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR18.configure(this, 1, 18, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR18.add_def_property("spec_access", "w");
    this.ERR18.add_def_property("spec_sw_default", "0x0");
    this.ERR18.add_def_property("sw_default_mask", "0x0");
    this.ERR18.add_def_property("reset_mask", "0x1");
    this.ERR8 = new("ERR8");
    this.ERR8.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR8.configure(this, 1, 8, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR8.add_def_property("spec_access", "w");
    this.ERR8.add_def_property("spec_sw_default", "0x0");
    this.ERR8.add_def_property("sw_default_mask", "0x0");
    this.ERR8.add_def_property("reset_mask", "0x1");
    this.ERR6 = new("ERR6");
    this.ERR6.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR6.configure(this, 1, 6, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR6.add_def_property("spec_access", "w");
    this.ERR6.add_def_property("spec_sw_default", "0x0");
    this.ERR6.add_def_property("sw_default_mask", "0x0");
    this.ERR6.add_def_property("reset_mask", "0x1");
    this.ERR4 = new("ERR4");
    this.ERR4.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR4.configure(this, 1, 4, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR4.add_def_property("spec_access", "w");
    this.ERR4.add_def_property("spec_sw_default", "0x0");
    this.ERR4.add_def_property("sw_default_mask", "0x0");
    this.ERR4.add_def_property("reset_mask", "0x1");
    this.ERR22 = new("ERR22");
    this.ERR22.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR22.configure(this, 1, 22, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR22.add_def_property("spec_access", "w");
    this.ERR22.add_def_property("spec_sw_default", "0x0");
    this.ERR22.add_def_property("sw_default_mask", "0x0");
    this.ERR22.add_def_property("reset_mask", "0x1");
    this.ERR25 = new("ERR25");
    this.ERR25.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR25.configure(this, 1, 25, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR25.add_def_property("spec_access", "w");
    this.ERR25.add_def_property("spec_sw_default", "0x0");
    this.ERR25.add_def_property("sw_default_mask", "0x0");
    this.ERR25.add_def_property("reset_mask", "0x1");
    this.ERR28 = new("ERR28");
    this.ERR28.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR28.configure(this, 1, 28, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR28.add_def_property("spec_access", "w");
    this.ERR28.add_def_property("spec_sw_default", "0x0");
    this.ERR28.add_def_property("sw_default_mask", "0x0");
    this.ERR28.add_def_property("reset_mask", "0x1");
    this.ERR17 = new("ERR17");
    this.ERR17.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR17.configure(this, 1, 17, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR17.add_def_property("spec_access", "w");
    this.ERR17.add_def_property("spec_sw_default", "0x0");
    this.ERR17.add_def_property("sw_default_mask", "0x0");
    this.ERR17.add_def_property("reset_mask", "0x1");
    this.ERR29 = new("ERR29");
    this.ERR29.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR29.configure(this, 1, 29, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR29.add_def_property("spec_access", "w");
    this.ERR29.add_def_property("spec_sw_default", "0x0");
    this.ERR29.add_def_property("sw_default_mask", "0x0");
    this.ERR29.add_def_property("reset_mask", "0x1");
    this.ERR23 = new("ERR23");
    this.ERR23.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR23.configure(this, 1, 23, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR23.add_def_property("spec_access", "w");
    this.ERR23.add_def_property("spec_sw_default", "0x0");
    this.ERR23.add_def_property("sw_default_mask", "0x0");
    this.ERR23.add_def_property("reset_mask", "0x1");
    this.ERR24 = new("ERR24");
    this.ERR24.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR24.configure(this, 1, 24, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR24.add_def_property("spec_access", "w");
    this.ERR24.add_def_property("spec_sw_default", "0x0");
    this.ERR24.add_def_property("sw_default_mask", "0x0");
    this.ERR24.add_def_property("reset_mask", "0x1");
    this.ERR13 = new("ERR13");
    this.ERR13.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR13.configure(this, 1, 13, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR13.add_def_property("spec_access", "w");
    this.ERR13.add_def_property("spec_sw_default", "0x0");
    this.ERR13.add_def_property("sw_default_mask", "0x0");
    this.ERR13.add_def_property("reset_mask", "0x1");
    this.ERR30 = new("ERR30");
    this.ERR30.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR30.configure(this, 1, 30, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR30.add_def_property("spec_access", "w");
    this.ERR30.add_def_property("spec_sw_default", "0x0");
    this.ERR30.add_def_property("sw_default_mask", "0x0");
    this.ERR30.add_def_property("reset_mask", "0x1");
    this.ERR21 = new("ERR21");
    this.ERR21.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR21.configure(this, 1, 21, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR21.add_def_property("spec_access", "w");
    this.ERR21.add_def_property("spec_sw_default", "0x0");
    this.ERR21.add_def_property("sw_default_mask", "0x0");
    this.ERR21.add_def_property("reset_mask", "0x1");
    this.ERR26 = new("ERR26");
    this.ERR26.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR26.configure(this, 1, 26, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR26.add_def_property("spec_access", "w");
    this.ERR26.add_def_property("spec_sw_default", "0x0");
    this.ERR26.add_def_property("sw_default_mask", "0x0");
    this.ERR26.add_def_property("reset_mask", "0x1");
    this.ERR9 = new("ERR9");
    this.ERR9.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR9.configure(this, 1, 9, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR9.add_def_property("spec_access", "w");
    this.ERR9.add_def_property("spec_sw_default", "0x0");
    this.ERR9.add_def_property("sw_default_mask", "0x0");
    this.ERR9.add_def_property("reset_mask", "0x1");
    this.ERR27 = new("ERR27");
    this.ERR27.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR27.configure(this, 1, 27, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR27.add_def_property("spec_access", "w");
    this.ERR27.add_def_property("spec_sw_default", "0x0");
    this.ERR27.add_def_property("sw_default_mask", "0x0");
    this.ERR27.add_def_property("reset_mask", "0x1");
    this.ERR19 = new("ERR19");
    this.ERR19.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR19.configure(this, 1, 19, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR19.add_def_property("spec_access", "w");
    this.ERR19.add_def_property("spec_sw_default", "0x0");
    this.ERR19.add_def_property("sw_default_mask", "0x0");
    this.ERR19.add_def_property("reset_mask", "0x1");
    this.ERR20 = new("ERR20");
    this.ERR20.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR20.configure(this, 1, 20, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR20.add_def_property("spec_access", "w");
    this.ERR20.add_def_property("spec_sw_default", "0x0");
    this.ERR20.add_def_property("sw_default_mask", "0x0");
    this.ERR20.add_def_property("reset_mask", "0x1");
    this.ERR5 = new("ERR5");
    this.ERR5.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR5.configure(this, 1, 5, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR5.add_def_property("spec_access", "w");
    this.ERR5.add_def_property("spec_sw_default", "0x0");
    this.ERR5.add_def_property("sw_default_mask", "0x0");
    this.ERR5.add_def_property("reset_mask", "0x1");
    this.ERR31 = new("ERR31");
    this.ERR31.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR31.configure(this, 1, 31, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR31.add_def_property("spec_access", "w");
    this.ERR31.add_def_property("spec_sw_default", "0x0");
    this.ERR31.add_def_property("sw_default_mask", "0x0");
    this.ERR31.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR0"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR1"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR2"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR10"}, 10, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR11"}, 11, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR7"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR3"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR15"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR16"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR14"}, 14, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR12"}, 12, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR18"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR8"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR6"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR4"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR22"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR25"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR28"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR17"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR29"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR23"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR24"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR13"}, 13, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR30"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR21"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR26"}, 26, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR9"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR27"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR19"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR20"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR5"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR31"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE

// ERRSLICE0_MISSIONERR_STATUS
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR0;
  rand uvm_reg_field_rdl ERR1;
  rand uvm_reg_field_rdl ERR2;
  rand uvm_reg_field_rdl ERR10;
  rand uvm_reg_field_rdl ERR11;
  rand uvm_reg_field_rdl ERR7;
  rand uvm_reg_field_rdl ERR3;
  rand uvm_reg_field_rdl ERR15;
  rand uvm_reg_field_rdl ERR16;
  rand uvm_reg_field_rdl ERR14;
  rand uvm_reg_field_rdl ERR12;
  rand uvm_reg_field_rdl ERR18;
  rand uvm_reg_field_rdl ERR8;
  rand uvm_reg_field_rdl ERR6;
  rand uvm_reg_field_rdl ERR4;
  rand uvm_reg_field_rdl ERR22;
  rand uvm_reg_field_rdl ERR25;
  rand uvm_reg_field_rdl ERR28;
  rand uvm_reg_field_rdl ERR17;
  rand uvm_reg_field_rdl ERR29;
  rand uvm_reg_field_rdl ERR23;
  rand uvm_reg_field_rdl ERR24;
  rand uvm_reg_field_rdl ERR13;
  rand uvm_reg_field_rdl ERR30;
  rand uvm_reg_field_rdl ERR21;
  rand uvm_reg_field_rdl ERR26;
  rand uvm_reg_field_rdl ERR9;
  rand uvm_reg_field_rdl ERR27;
  rand uvm_reg_field_rdl ERR19;
  rand uvm_reg_field_rdl ERR20;
  rand uvm_reg_field_rdl ERR5;
  rand uvm_reg_field_rdl ERR31;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR0 = new("ERR0");
    this.ERR0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR0.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR0.add_def_property("spec_access", "rw");
    this.ERR0.add_def_property("spec_sw_default", "0x0");
    this.ERR0.add_def_property("sw_default_mask", "0x0");
    this.ERR0.add_def_property("reset_mask", "0x1");
    this.ERR1 = new("ERR1");
    this.ERR1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR1.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR1.add_def_property("spec_access", "rw");
    this.ERR1.add_def_property("spec_sw_default", "0x0");
    this.ERR1.add_def_property("sw_default_mask", "0x0");
    this.ERR1.add_def_property("reset_mask", "0x1");
    this.ERR2 = new("ERR2");
    this.ERR2.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR2.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR2.add_def_property("spec_access", "rw");
    this.ERR2.add_def_property("spec_sw_default", "0x0");
    this.ERR2.add_def_property("sw_default_mask", "0x0");
    this.ERR2.add_def_property("reset_mask", "0x1");
    this.ERR10 = new("ERR10");
    this.ERR10.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR10.configure(this, 1, 10, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR10.add_def_property("spec_access", "rw");
    this.ERR10.add_def_property("spec_sw_default", "0x0");
    this.ERR10.add_def_property("sw_default_mask", "0x0");
    this.ERR10.add_def_property("reset_mask", "0x1");
    this.ERR11 = new("ERR11");
    this.ERR11.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR11.configure(this, 1, 11, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR11.add_def_property("spec_access", "rw");
    this.ERR11.add_def_property("spec_sw_default", "0x0");
    this.ERR11.add_def_property("sw_default_mask", "0x0");
    this.ERR11.add_def_property("reset_mask", "0x1");
    this.ERR7 = new("ERR7");
    this.ERR7.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR7.configure(this, 1, 7, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR7.add_def_property("spec_access", "rw");
    this.ERR7.add_def_property("spec_sw_default", "0x0");
    this.ERR7.add_def_property("sw_default_mask", "0x0");
    this.ERR7.add_def_property("reset_mask", "0x1");
    this.ERR3 = new("ERR3");
    this.ERR3.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR3.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR3.add_def_property("spec_access", "rw");
    this.ERR3.add_def_property("spec_sw_default", "0x0");
    this.ERR3.add_def_property("sw_default_mask", "0x0");
    this.ERR3.add_def_property("reset_mask", "0x1");
    this.ERR15 = new("ERR15");
    this.ERR15.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR15.configure(this, 1, 15, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR15.add_def_property("spec_access", "rw");
    this.ERR15.add_def_property("spec_sw_default", "0x0");
    this.ERR15.add_def_property("sw_default_mask", "0x0");
    this.ERR15.add_def_property("reset_mask", "0x1");
    this.ERR16 = new("ERR16");
    this.ERR16.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR16.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR16.add_def_property("spec_access", "rw");
    this.ERR16.add_def_property("spec_sw_default", "0x0");
    this.ERR16.add_def_property("sw_default_mask", "0x0");
    this.ERR16.add_def_property("reset_mask", "0x1");
    this.ERR14 = new("ERR14");
    this.ERR14.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR14.configure(this, 1, 14, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR14.add_def_property("spec_access", "rw");
    this.ERR14.add_def_property("spec_sw_default", "0x0");
    this.ERR14.add_def_property("sw_default_mask", "0x0");
    this.ERR14.add_def_property("reset_mask", "0x1");
    this.ERR12 = new("ERR12");
    this.ERR12.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR12.configure(this, 1, 12, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR12.add_def_property("spec_access", "rw");
    this.ERR12.add_def_property("spec_sw_default", "0x0");
    this.ERR12.add_def_property("sw_default_mask", "0x0");
    this.ERR12.add_def_property("reset_mask", "0x1");
    this.ERR18 = new("ERR18");
    this.ERR18.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR18.configure(this, 1, 18, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR18.add_def_property("spec_access", "rw");
    this.ERR18.add_def_property("spec_sw_default", "0x0");
    this.ERR18.add_def_property("sw_default_mask", "0x0");
    this.ERR18.add_def_property("reset_mask", "0x1");
    this.ERR8 = new("ERR8");
    this.ERR8.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR8.configure(this, 1, 8, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR8.add_def_property("spec_access", "rw");
    this.ERR8.add_def_property("spec_sw_default", "0x0");
    this.ERR8.add_def_property("sw_default_mask", "0x0");
    this.ERR8.add_def_property("reset_mask", "0x1");
    this.ERR6 = new("ERR6");
    this.ERR6.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR6.configure(this, 1, 6, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR6.add_def_property("spec_access", "rw");
    this.ERR6.add_def_property("spec_sw_default", "0x0");
    this.ERR6.add_def_property("sw_default_mask", "0x0");
    this.ERR6.add_def_property("reset_mask", "0x1");
    this.ERR4 = new("ERR4");
    this.ERR4.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR4.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR4.add_def_property("spec_access", "rw");
    this.ERR4.add_def_property("spec_sw_default", "0x0");
    this.ERR4.add_def_property("sw_default_mask", "0x0");
    this.ERR4.add_def_property("reset_mask", "0x1");
    this.ERR22 = new("ERR22");
    this.ERR22.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR22.configure(this, 1, 22, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR22.add_def_property("spec_access", "rw");
    this.ERR22.add_def_property("spec_sw_default", "0x0");
    this.ERR22.add_def_property("sw_default_mask", "0x0");
    this.ERR22.add_def_property("reset_mask", "0x1");
    this.ERR25 = new("ERR25");
    this.ERR25.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR25.configure(this, 1, 25, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR25.add_def_property("spec_access", "rw");
    this.ERR25.add_def_property("spec_sw_default", "0x0");
    this.ERR25.add_def_property("sw_default_mask", "0x0");
    this.ERR25.add_def_property("reset_mask", "0x1");
    this.ERR28 = new("ERR28");
    this.ERR28.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR28.configure(this, 1, 28, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR28.add_def_property("spec_access", "rw");
    this.ERR28.add_def_property("spec_sw_default", "0x0");
    this.ERR28.add_def_property("sw_default_mask", "0x0");
    this.ERR28.add_def_property("reset_mask", "0x1");
    this.ERR17 = new("ERR17");
    this.ERR17.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR17.configure(this, 1, 17, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR17.add_def_property("spec_access", "rw");
    this.ERR17.add_def_property("spec_sw_default", "0x0");
    this.ERR17.add_def_property("sw_default_mask", "0x0");
    this.ERR17.add_def_property("reset_mask", "0x1");
    this.ERR29 = new("ERR29");
    this.ERR29.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR29.configure(this, 1, 29, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR29.add_def_property("spec_access", "rw");
    this.ERR29.add_def_property("spec_sw_default", "0x0");
    this.ERR29.add_def_property("sw_default_mask", "0x0");
    this.ERR29.add_def_property("reset_mask", "0x1");
    this.ERR23 = new("ERR23");
    this.ERR23.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR23.configure(this, 1, 23, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR23.add_def_property("spec_access", "rw");
    this.ERR23.add_def_property("spec_sw_default", "0x0");
    this.ERR23.add_def_property("sw_default_mask", "0x0");
    this.ERR23.add_def_property("reset_mask", "0x1");
    this.ERR24 = new("ERR24");
    this.ERR24.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR24.configure(this, 1, 24, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR24.add_def_property("spec_access", "rw");
    this.ERR24.add_def_property("spec_sw_default", "0x0");
    this.ERR24.add_def_property("sw_default_mask", "0x0");
    this.ERR24.add_def_property("reset_mask", "0x1");
    this.ERR13 = new("ERR13");
    this.ERR13.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR13.configure(this, 1, 13, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR13.add_def_property("spec_access", "rw");
    this.ERR13.add_def_property("spec_sw_default", "0x0");
    this.ERR13.add_def_property("sw_default_mask", "0x0");
    this.ERR13.add_def_property("reset_mask", "0x1");
    this.ERR30 = new("ERR30");
    this.ERR30.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR30.configure(this, 1, 30, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR30.add_def_property("spec_access", "rw");
    this.ERR30.add_def_property("spec_sw_default", "0x0");
    this.ERR30.add_def_property("sw_default_mask", "0x0");
    this.ERR30.add_def_property("reset_mask", "0x1");
    this.ERR21 = new("ERR21");
    this.ERR21.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR21.configure(this, 1, 21, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR21.add_def_property("spec_access", "rw");
    this.ERR21.add_def_property("spec_sw_default", "0x0");
    this.ERR21.add_def_property("sw_default_mask", "0x0");
    this.ERR21.add_def_property("reset_mask", "0x1");
    this.ERR26 = new("ERR26");
    this.ERR26.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR26.configure(this, 1, 26, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR26.add_def_property("spec_access", "rw");
    this.ERR26.add_def_property("spec_sw_default", "0x0");
    this.ERR26.add_def_property("sw_default_mask", "0x0");
    this.ERR26.add_def_property("reset_mask", "0x1");
    this.ERR9 = new("ERR9");
    this.ERR9.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR9.configure(this, 1, 9, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR9.add_def_property("spec_access", "rw");
    this.ERR9.add_def_property("spec_sw_default", "0x0");
    this.ERR9.add_def_property("sw_default_mask", "0x0");
    this.ERR9.add_def_property("reset_mask", "0x1");
    this.ERR27 = new("ERR27");
    this.ERR27.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR27.configure(this, 1, 27, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR27.add_def_property("spec_access", "rw");
    this.ERR27.add_def_property("spec_sw_default", "0x0");
    this.ERR27.add_def_property("sw_default_mask", "0x0");
    this.ERR27.add_def_property("reset_mask", "0x1");
    this.ERR19 = new("ERR19");
    this.ERR19.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR19.configure(this, 1, 19, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR19.add_def_property("spec_access", "rw");
    this.ERR19.add_def_property("spec_sw_default", "0x0");
    this.ERR19.add_def_property("sw_default_mask", "0x0");
    this.ERR19.add_def_property("reset_mask", "0x1");
    this.ERR20 = new("ERR20");
    this.ERR20.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR20.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR20.add_def_property("spec_access", "rw");
    this.ERR20.add_def_property("spec_sw_default", "0x0");
    this.ERR20.add_def_property("sw_default_mask", "0x0");
    this.ERR20.add_def_property("reset_mask", "0x1");
    this.ERR5 = new("ERR5");
    this.ERR5.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR5.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR5.add_def_property("spec_access", "rw");
    this.ERR5.add_def_property("spec_sw_default", "0x0");
    this.ERR5.add_def_property("sw_default_mask", "0x0");
    this.ERR5.add_def_property("reset_mask", "0x1");
    this.ERR31 = new("ERR31");
    this.ERR31.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR31.configure(this, 1, 31, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR31.add_def_property("spec_access", "rw");
    this.ERR31.add_def_property("spec_sw_default", "0x0");
    this.ERR31.add_def_property("sw_default_mask", "0x0");
    this.ERR31.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR0"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR1"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR2"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR10"}, 10, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR11"}, 11, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR7"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR3"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR15"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR16"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR14"}, 14, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR12"}, 12, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR18"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR8"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR6"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR4"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR22"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR25"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR28"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR17"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR29"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR23"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR24"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR13"}, 13, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR30"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR21"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR26"}, 26, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR9"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR27"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR19"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR20"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR5"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR31"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS

// ERRSLICE0_MISSIONERR_INJECT
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR0;
  rand uvm_reg_field_rdl ERR4;
  rand uvm_reg_field_rdl ERR1;
  rand uvm_reg_field_rdl ERR15;
  rand uvm_reg_field_rdl ERR5;
  rand uvm_reg_field_rdl ERR2;
  rand uvm_reg_field_rdl ERR19;
  rand uvm_reg_field_rdl ERR22;
  rand uvm_reg_field_rdl ERR16;
  rand uvm_reg_field_rdl ERR8;
  rand uvm_reg_field_rdl ERR6;
  rand uvm_reg_field_rdl ERR18;
  rand uvm_reg_field_rdl ERR3;
  rand uvm_reg_field_rdl ERR27;
  rand uvm_reg_field_rdl ERR20;
  rand uvm_reg_field_rdl ERR31;
  rand uvm_reg_field_rdl ERR25;
  rand uvm_reg_field_rdl ERR28;
  rand uvm_reg_field_rdl ERR17;
  rand uvm_reg_field_rdl ERR29;
  rand uvm_reg_field_rdl ERR23;
  rand uvm_reg_field_rdl ERR24;
  rand uvm_reg_field_rdl ERR7;
  rand uvm_reg_field_rdl ERR30;
  rand uvm_reg_field_rdl ERR21;
  rand uvm_reg_field_rdl ERR26;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR0 = new("ERR0");
    this.ERR0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR0.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR0.add_def_property("spec_access", "rw");
    this.ERR0.add_def_property("spec_sw_default", "0x0");
    this.ERR0.add_def_property("sw_default_mask", "0x0");
    this.ERR0.add_def_property("reset_mask", "0x1");
    this.ERR4 = new("ERR4");
    this.ERR4.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR4.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR4.add_def_property("spec_access", "rw");
    this.ERR4.add_def_property("spec_sw_default", "0x0");
    this.ERR4.add_def_property("sw_default_mask", "0x0");
    this.ERR4.add_def_property("reset_mask", "0x1");
    this.ERR1 = new("ERR1");
    this.ERR1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR1.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR1.add_def_property("spec_access", "rw");
    this.ERR1.add_def_property("spec_sw_default", "0x0");
    this.ERR1.add_def_property("sw_default_mask", "0x0");
    this.ERR1.add_def_property("reset_mask", "0x1");
    this.ERR15 = new("ERR15");
    this.ERR15.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR15.configure(this, 1, 15, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR15.add_def_property("spec_access", "rw");
    this.ERR15.add_def_property("spec_sw_default", "0x0");
    this.ERR15.add_def_property("sw_default_mask", "0x0");
    this.ERR15.add_def_property("reset_mask", "0x1");
    this.ERR5 = new("ERR5");
    this.ERR5.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR5.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR5.add_def_property("spec_access", "rw");
    this.ERR5.add_def_property("spec_sw_default", "0x0");
    this.ERR5.add_def_property("sw_default_mask", "0x0");
    this.ERR5.add_def_property("reset_mask", "0x1");
    this.ERR2 = new("ERR2");
    this.ERR2.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR2.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR2.add_def_property("spec_access", "rw");
    this.ERR2.add_def_property("spec_sw_default", "0x0");
    this.ERR2.add_def_property("sw_default_mask", "0x0");
    this.ERR2.add_def_property("reset_mask", "0x1");
    this.ERR19 = new("ERR19");
    this.ERR19.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR19.configure(this, 1, 19, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR19.add_def_property("spec_access", "rw");
    this.ERR19.add_def_property("spec_sw_default", "0x0");
    this.ERR19.add_def_property("sw_default_mask", "0x0");
    this.ERR19.add_def_property("reset_mask", "0x1");
    this.ERR22 = new("ERR22");
    this.ERR22.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR22.configure(this, 1, 22, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR22.add_def_property("spec_access", "rw");
    this.ERR22.add_def_property("spec_sw_default", "0x0");
    this.ERR22.add_def_property("sw_default_mask", "0x0");
    this.ERR22.add_def_property("reset_mask", "0x1");
    this.ERR16 = new("ERR16");
    this.ERR16.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR16.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR16.add_def_property("spec_access", "rw");
    this.ERR16.add_def_property("spec_sw_default", "0x0");
    this.ERR16.add_def_property("sw_default_mask", "0x0");
    this.ERR16.add_def_property("reset_mask", "0x1");
    this.ERR8 = new("ERR8");
    this.ERR8.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR8.configure(this, 1, 8, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR8.add_def_property("spec_access", "rw");
    this.ERR8.add_def_property("spec_sw_default", "0x0");
    this.ERR8.add_def_property("sw_default_mask", "0x0");
    this.ERR8.add_def_property("reset_mask", "0x1");
    this.ERR6 = new("ERR6");
    this.ERR6.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR6.configure(this, 1, 6, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR6.add_def_property("spec_access", "rw");
    this.ERR6.add_def_property("spec_sw_default", "0x0");
    this.ERR6.add_def_property("sw_default_mask", "0x0");
    this.ERR6.add_def_property("reset_mask", "0x1");
    this.ERR18 = new("ERR18");
    this.ERR18.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR18.configure(this, 1, 18, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR18.add_def_property("spec_access", "rw");
    this.ERR18.add_def_property("spec_sw_default", "0x0");
    this.ERR18.add_def_property("sw_default_mask", "0x0");
    this.ERR18.add_def_property("reset_mask", "0x1");
    this.ERR3 = new("ERR3");
    this.ERR3.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR3.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR3.add_def_property("spec_access", "rw");
    this.ERR3.add_def_property("spec_sw_default", "0x0");
    this.ERR3.add_def_property("sw_default_mask", "0x0");
    this.ERR3.add_def_property("reset_mask", "0x1");
    this.ERR27 = new("ERR27");
    this.ERR27.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR27.configure(this, 1, 27, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR27.add_def_property("spec_access", "rw");
    this.ERR27.add_def_property("spec_sw_default", "0x0");
    this.ERR27.add_def_property("sw_default_mask", "0x0");
    this.ERR27.add_def_property("reset_mask", "0x1");
    this.ERR20 = new("ERR20");
    this.ERR20.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR20.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR20.add_def_property("spec_access", "rw");
    this.ERR20.add_def_property("spec_sw_default", "0x0");
    this.ERR20.add_def_property("sw_default_mask", "0x0");
    this.ERR20.add_def_property("reset_mask", "0x1");
    this.ERR31 = new("ERR31");
    this.ERR31.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR31.configure(this, 1, 31, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR31.add_def_property("spec_access", "rw");
    this.ERR31.add_def_property("spec_sw_default", "0x0");
    this.ERR31.add_def_property("sw_default_mask", "0x0");
    this.ERR31.add_def_property("reset_mask", "0x1");
    this.ERR25 = new("ERR25");
    this.ERR25.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR25.configure(this, 1, 25, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR25.add_def_property("spec_access", "rw");
    this.ERR25.add_def_property("spec_sw_default", "0x0");
    this.ERR25.add_def_property("sw_default_mask", "0x0");
    this.ERR25.add_def_property("reset_mask", "0x1");
    this.ERR28 = new("ERR28");
    this.ERR28.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR28.configure(this, 1, 28, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR28.add_def_property("spec_access", "rw");
    this.ERR28.add_def_property("spec_sw_default", "0x0");
    this.ERR28.add_def_property("sw_default_mask", "0x0");
    this.ERR28.add_def_property("reset_mask", "0x1");
    this.ERR17 = new("ERR17");
    this.ERR17.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR17.configure(this, 1, 17, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR17.add_def_property("spec_access", "rw");
    this.ERR17.add_def_property("spec_sw_default", "0x0");
    this.ERR17.add_def_property("sw_default_mask", "0x0");
    this.ERR17.add_def_property("reset_mask", "0x1");
    this.ERR29 = new("ERR29");
    this.ERR29.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR29.configure(this, 1, 29, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR29.add_def_property("spec_access", "rw");
    this.ERR29.add_def_property("spec_sw_default", "0x0");
    this.ERR29.add_def_property("sw_default_mask", "0x0");
    this.ERR29.add_def_property("reset_mask", "0x1");
    this.ERR23 = new("ERR23");
    this.ERR23.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR23.configure(this, 1, 23, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR23.add_def_property("spec_access", "rw");
    this.ERR23.add_def_property("spec_sw_default", "0x0");
    this.ERR23.add_def_property("sw_default_mask", "0x0");
    this.ERR23.add_def_property("reset_mask", "0x1");
    this.ERR24 = new("ERR24");
    this.ERR24.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR24.configure(this, 1, 24, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR24.add_def_property("spec_access", "rw");
    this.ERR24.add_def_property("spec_sw_default", "0x0");
    this.ERR24.add_def_property("sw_default_mask", "0x0");
    this.ERR24.add_def_property("reset_mask", "0x1");
    this.ERR7 = new("ERR7");
    this.ERR7.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR7.configure(this, 1, 7, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR7.add_def_property("spec_access", "rw");
    this.ERR7.add_def_property("spec_sw_default", "0x0");
    this.ERR7.add_def_property("sw_default_mask", "0x0");
    this.ERR7.add_def_property("reset_mask", "0x1");
    this.ERR30 = new("ERR30");
    this.ERR30.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR30.configure(this, 1, 30, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR30.add_def_property("spec_access", "rw");
    this.ERR30.add_def_property("spec_sw_default", "0x0");
    this.ERR30.add_def_property("sw_default_mask", "0x0");
    this.ERR30.add_def_property("reset_mask", "0x1");
    this.ERR21 = new("ERR21");
    this.ERR21.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR21.configure(this, 1, 21, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR21.add_def_property("spec_access", "rw");
    this.ERR21.add_def_property("spec_sw_default", "0x0");
    this.ERR21.add_def_property("sw_default_mask", "0x0");
    this.ERR21.add_def_property("reset_mask", "0x1");
    this.ERR26 = new("ERR26");
    this.ERR26.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR26.configure(this, 1, 26, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR26.add_def_property("spec_access", "rw");
    this.ERR26.add_def_property("spec_sw_default", "0x0");
    this.ERR26.add_def_property("sw_default_mask", "0x0");
    this.ERR26.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR0"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR4"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR1"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR15"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR5"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR2"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR19"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR22"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR16"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR8"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR6"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR18"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR3"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR27"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR20"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR31"}, 31, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR25"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR28"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR17"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR29"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR23"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR24"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR7"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR30"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR21"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR26"}, 26, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT

// ERRSLICE0_LATENTERR_ENABLE
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR0;
  rand uvm_reg_field_rdl ERR1;
  rand uvm_reg_field_rdl ERR2;
  rand uvm_reg_field_rdl ERR10;
  rand uvm_reg_field_rdl ERR11;
  rand uvm_reg_field_rdl ERR7;
  rand uvm_reg_field_rdl ERR3;
  rand uvm_reg_field_rdl ERR15;
  rand uvm_reg_field_rdl ERR16;
  rand uvm_reg_field_rdl ERR14;
  rand uvm_reg_field_rdl ERR12;
  rand uvm_reg_field_rdl ERR18;
  rand uvm_reg_field_rdl ERR8;
  rand uvm_reg_field_rdl ERR6;
  rand uvm_reg_field_rdl ERR4;
  rand uvm_reg_field_rdl ERR22;
  rand uvm_reg_field_rdl ERR25;
  rand uvm_reg_field_rdl ERR28;
  rand uvm_reg_field_rdl ERR17;
  rand uvm_reg_field_rdl ERR29;
  rand uvm_reg_field_rdl ERR23;
  rand uvm_reg_field_rdl ERR24;
  rand uvm_reg_field_rdl ERR13;
  rand uvm_reg_field_rdl ERR30;
  rand uvm_reg_field_rdl ERR21;
  rand uvm_reg_field_rdl ERR26;
  rand uvm_reg_field_rdl ERR9;
  rand uvm_reg_field_rdl ERR27;
  rand uvm_reg_field_rdl ERR19;
  rand uvm_reg_field_rdl ERR20;
  rand uvm_reg_field_rdl ERR5;
  rand uvm_reg_field_rdl ERR31;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR0 = new("ERR0");
    this.ERR0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR0.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR0.add_def_property("spec_access", "rw");
    this.ERR0.add_def_property("spec_sw_default", "0x0");
    this.ERR0.add_def_property("sw_default_mask", "0x0");
    this.ERR0.add_def_property("reset_mask", "0x1");
    this.ERR1 = new("ERR1");
    this.ERR1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR1.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR1.add_def_property("spec_access", "rw");
    this.ERR1.add_def_property("spec_sw_default", "0x0");
    this.ERR1.add_def_property("sw_default_mask", "0x0");
    this.ERR1.add_def_property("reset_mask", "0x1");
    this.ERR2 = new("ERR2");
    this.ERR2.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR2.configure(this, 1, 2, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR2.add_def_property("spec_access", "rw");
    this.ERR2.add_def_property("spec_sw_default", "0x0");
    this.ERR2.add_def_property("sw_default_mask", "0x0");
    this.ERR2.add_def_property("reset_mask", "0x1");
    this.ERR10 = new("ERR10");
    this.ERR10.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR10.configure(this, 1, 10, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR10.add_def_property("spec_access", "rw");
    this.ERR10.add_def_property("spec_sw_default", "0x0");
    this.ERR10.add_def_property("sw_default_mask", "0x0");
    this.ERR10.add_def_property("reset_mask", "0x1");
    this.ERR11 = new("ERR11");
    this.ERR11.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR11.configure(this, 1, 11, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR11.add_def_property("spec_access", "rw");
    this.ERR11.add_def_property("spec_sw_default", "0x0");
    this.ERR11.add_def_property("sw_default_mask", "0x0");
    this.ERR11.add_def_property("reset_mask", "0x1");
    this.ERR7 = new("ERR7");
    this.ERR7.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR7.configure(this, 1, 7, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR7.add_def_property("spec_access", "rw");
    this.ERR7.add_def_property("spec_sw_default", "0x0");
    this.ERR7.add_def_property("sw_default_mask", "0x0");
    this.ERR7.add_def_property("reset_mask", "0x1");
    this.ERR3 = new("ERR3");
    this.ERR3.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR3.configure(this, 1, 3, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR3.add_def_property("spec_access", "rw");
    this.ERR3.add_def_property("spec_sw_default", "0x0");
    this.ERR3.add_def_property("sw_default_mask", "0x0");
    this.ERR3.add_def_property("reset_mask", "0x1");
    this.ERR15 = new("ERR15");
    this.ERR15.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR15.configure(this, 1, 15, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR15.add_def_property("spec_access", "rw");
    this.ERR15.add_def_property("spec_sw_default", "0x0");
    this.ERR15.add_def_property("sw_default_mask", "0x0");
    this.ERR15.add_def_property("reset_mask", "0x1");
    this.ERR16 = new("ERR16");
    this.ERR16.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR16.configure(this, 1, 16, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR16.add_def_property("spec_access", "rw");
    this.ERR16.add_def_property("spec_sw_default", "0x0");
    this.ERR16.add_def_property("sw_default_mask", "0x0");
    this.ERR16.add_def_property("reset_mask", "0x1");
    this.ERR14 = new("ERR14");
    this.ERR14.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR14.configure(this, 1, 14, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR14.add_def_property("spec_access", "rw");
    this.ERR14.add_def_property("spec_sw_default", "0x0");
    this.ERR14.add_def_property("sw_default_mask", "0x0");
    this.ERR14.add_def_property("reset_mask", "0x1");
    this.ERR12 = new("ERR12");
    this.ERR12.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR12.configure(this, 1, 12, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR12.add_def_property("spec_access", "rw");
    this.ERR12.add_def_property("spec_sw_default", "0x0");
    this.ERR12.add_def_property("sw_default_mask", "0x0");
    this.ERR12.add_def_property("reset_mask", "0x1");
    this.ERR18 = new("ERR18");
    this.ERR18.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR18.configure(this, 1, 18, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR18.add_def_property("spec_access", "rw");
    this.ERR18.add_def_property("spec_sw_default", "0x0");
    this.ERR18.add_def_property("sw_default_mask", "0x0");
    this.ERR18.add_def_property("reset_mask", "0x1");
    this.ERR8 = new("ERR8");
    this.ERR8.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR8.configure(this, 1, 8, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR8.add_def_property("spec_access", "rw");
    this.ERR8.add_def_property("spec_sw_default", "0x0");
    this.ERR8.add_def_property("sw_default_mask", "0x0");
    this.ERR8.add_def_property("reset_mask", "0x1");
    this.ERR6 = new("ERR6");
    this.ERR6.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR6.configure(this, 1, 6, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR6.add_def_property("spec_access", "rw");
    this.ERR6.add_def_property("spec_sw_default", "0x0");
    this.ERR6.add_def_property("sw_default_mask", "0x0");
    this.ERR6.add_def_property("reset_mask", "0x1");
    this.ERR4 = new("ERR4");
    this.ERR4.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR4.configure(this, 1, 4, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR4.add_def_property("spec_access", "rw");
    this.ERR4.add_def_property("spec_sw_default", "0x0");
    this.ERR4.add_def_property("sw_default_mask", "0x0");
    this.ERR4.add_def_property("reset_mask", "0x1");
    this.ERR22 = new("ERR22");
    this.ERR22.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR22.configure(this, 1, 22, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR22.add_def_property("spec_access", "rw");
    this.ERR22.add_def_property("spec_sw_default", "0x0");
    this.ERR22.add_def_property("sw_default_mask", "0x0");
    this.ERR22.add_def_property("reset_mask", "0x1");
    this.ERR25 = new("ERR25");
    this.ERR25.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR25.configure(this, 1, 25, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR25.add_def_property("spec_access", "rw");
    this.ERR25.add_def_property("spec_sw_default", "0x0");
    this.ERR25.add_def_property("sw_default_mask", "0x0");
    this.ERR25.add_def_property("reset_mask", "0x1");
    this.ERR28 = new("ERR28");
    this.ERR28.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR28.configure(this, 1, 28, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR28.add_def_property("spec_access", "rw");
    this.ERR28.add_def_property("spec_sw_default", "0x0");
    this.ERR28.add_def_property("sw_default_mask", "0x0");
    this.ERR28.add_def_property("reset_mask", "0x1");
    this.ERR17 = new("ERR17");
    this.ERR17.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR17.configure(this, 1, 17, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR17.add_def_property("spec_access", "rw");
    this.ERR17.add_def_property("spec_sw_default", "0x0");
    this.ERR17.add_def_property("sw_default_mask", "0x0");
    this.ERR17.add_def_property("reset_mask", "0x1");
    this.ERR29 = new("ERR29");
    this.ERR29.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR29.configure(this, 1, 29, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR29.add_def_property("spec_access", "rw");
    this.ERR29.add_def_property("spec_sw_default", "0x0");
    this.ERR29.add_def_property("sw_default_mask", "0x0");
    this.ERR29.add_def_property("reset_mask", "0x1");
    this.ERR23 = new("ERR23");
    this.ERR23.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR23.configure(this, 1, 23, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR23.add_def_property("spec_access", "rw");
    this.ERR23.add_def_property("spec_sw_default", "0x0");
    this.ERR23.add_def_property("sw_default_mask", "0x0");
    this.ERR23.add_def_property("reset_mask", "0x1");
    this.ERR24 = new("ERR24");
    this.ERR24.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR24.configure(this, 1, 24, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR24.add_def_property("spec_access", "rw");
    this.ERR24.add_def_property("spec_sw_default", "0x0");
    this.ERR24.add_def_property("sw_default_mask", "0x0");
    this.ERR24.add_def_property("reset_mask", "0x1");
    this.ERR13 = new("ERR13");
    this.ERR13.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR13.configure(this, 1, 13, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR13.add_def_property("spec_access", "rw");
    this.ERR13.add_def_property("spec_sw_default", "0x0");
    this.ERR13.add_def_property("sw_default_mask", "0x0");
    this.ERR13.add_def_property("reset_mask", "0x1");
    this.ERR30 = new("ERR30");
    this.ERR30.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR30.configure(this, 1, 30, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR30.add_def_property("spec_access", "rw");
    this.ERR30.add_def_property("spec_sw_default", "0x0");
    this.ERR30.add_def_property("sw_default_mask", "0x0");
    this.ERR30.add_def_property("reset_mask", "0x1");
    this.ERR21 = new("ERR21");
    this.ERR21.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR21.configure(this, 1, 21, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR21.add_def_property("spec_access", "rw");
    this.ERR21.add_def_property("spec_sw_default", "0x0");
    this.ERR21.add_def_property("sw_default_mask", "0x0");
    this.ERR21.add_def_property("reset_mask", "0x1");
    this.ERR26 = new("ERR26");
    this.ERR26.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR26.configure(this, 1, 26, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR26.add_def_property("spec_access", "rw");
    this.ERR26.add_def_property("spec_sw_default", "0x0");
    this.ERR26.add_def_property("sw_default_mask", "0x0");
    this.ERR26.add_def_property("reset_mask", "0x1");
    this.ERR9 = new("ERR9");
    this.ERR9.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR9.configure(this, 1, 9, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR9.add_def_property("spec_access", "rw");
    this.ERR9.add_def_property("spec_sw_default", "0x0");
    this.ERR9.add_def_property("sw_default_mask", "0x0");
    this.ERR9.add_def_property("reset_mask", "0x1");
    this.ERR27 = new("ERR27");
    this.ERR27.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR27.configure(this, 1, 27, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR27.add_def_property("spec_access", "rw");
    this.ERR27.add_def_property("spec_sw_default", "0x0");
    this.ERR27.add_def_property("sw_default_mask", "0x0");
    this.ERR27.add_def_property("reset_mask", "0x1");
    this.ERR19 = new("ERR19");
    this.ERR19.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR19.configure(this, 1, 19, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR19.add_def_property("spec_access", "rw");
    this.ERR19.add_def_property("spec_sw_default", "0x0");
    this.ERR19.add_def_property("sw_default_mask", "0x0");
    this.ERR19.add_def_property("reset_mask", "0x1");
    this.ERR20 = new("ERR20");
    this.ERR20.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR20.configure(this, 1, 20, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR20.add_def_property("spec_access", "rw");
    this.ERR20.add_def_property("spec_sw_default", "0x0");
    this.ERR20.add_def_property("sw_default_mask", "0x0");
    this.ERR20.add_def_property("reset_mask", "0x1");
    this.ERR5 = new("ERR5");
    this.ERR5.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR5.configure(this, 1, 5, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR5.add_def_property("spec_access", "rw");
    this.ERR5.add_def_property("spec_sw_default", "0x0");
    this.ERR5.add_def_property("sw_default_mask", "0x0");
    this.ERR5.add_def_property("reset_mask", "0x1");
    this.ERR31 = new("ERR31");
    this.ERR31.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR31.configure(this, 1, 31, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR31.add_def_property("spec_access", "rw");
    this.ERR31.add_def_property("spec_sw_default", "0x0");
    this.ERR31.add_def_property("sw_default_mask", "0x0");
    this.ERR31.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR0"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR1"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR2"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR10"}, 10, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR11"}, 11, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR7"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR3"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR15"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR16"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR14"}, 14, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR12"}, 12, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR18"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR8"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR6"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR4"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR22"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR25"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR28"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR17"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR29"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR23"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR24"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR13"}, 13, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR30"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR21"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR26"}, 26, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR9"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR27"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR19"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR20"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR5"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR31"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE

// ERRSLICE0_LATENTERR_FORCE
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR0;
  rand uvm_reg_field_rdl ERR1;
  rand uvm_reg_field_rdl ERR2;
  rand uvm_reg_field_rdl ERR10;
  rand uvm_reg_field_rdl ERR11;
  rand uvm_reg_field_rdl ERR7;
  rand uvm_reg_field_rdl ERR3;
  rand uvm_reg_field_rdl ERR15;
  rand uvm_reg_field_rdl ERR16;
  rand uvm_reg_field_rdl ERR14;
  rand uvm_reg_field_rdl ERR12;
  rand uvm_reg_field_rdl ERR18;
  rand uvm_reg_field_rdl ERR8;
  rand uvm_reg_field_rdl ERR6;
  rand uvm_reg_field_rdl ERR4;
  rand uvm_reg_field_rdl ERR22;
  rand uvm_reg_field_rdl ERR25;
  rand uvm_reg_field_rdl ERR28;
  rand uvm_reg_field_rdl ERR17;
  rand uvm_reg_field_rdl ERR29;
  rand uvm_reg_field_rdl ERR23;
  rand uvm_reg_field_rdl ERR24;
  rand uvm_reg_field_rdl ERR13;
  rand uvm_reg_field_rdl ERR30;
  rand uvm_reg_field_rdl ERR21;
  rand uvm_reg_field_rdl ERR26;
  rand uvm_reg_field_rdl ERR9;
  rand uvm_reg_field_rdl ERR27;
  rand uvm_reg_field_rdl ERR19;
  rand uvm_reg_field_rdl ERR20;
  rand uvm_reg_field_rdl ERR5;
  rand uvm_reg_field_rdl ERR31;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR0 = new("ERR0");
    this.ERR0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR0.configure(this, 1, 0, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR0.add_def_property("spec_access", "w");
    this.ERR0.add_def_property("spec_sw_default", "0x0");
    this.ERR0.add_def_property("sw_default_mask", "0x0");
    this.ERR0.add_def_property("reset_mask", "0x1");
    this.ERR1 = new("ERR1");
    this.ERR1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR1.configure(this, 1, 1, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR1.add_def_property("spec_access", "w");
    this.ERR1.add_def_property("spec_sw_default", "0x0");
    this.ERR1.add_def_property("sw_default_mask", "0x0");
    this.ERR1.add_def_property("reset_mask", "0x1");
    this.ERR2 = new("ERR2");
    this.ERR2.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR2.configure(this, 1, 2, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR2.add_def_property("spec_access", "w");
    this.ERR2.add_def_property("spec_sw_default", "0x0");
    this.ERR2.add_def_property("sw_default_mask", "0x0");
    this.ERR2.add_def_property("reset_mask", "0x1");
    this.ERR10 = new("ERR10");
    this.ERR10.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR10.configure(this, 1, 10, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR10.add_def_property("spec_access", "w");
    this.ERR10.add_def_property("spec_sw_default", "0x0");
    this.ERR10.add_def_property("sw_default_mask", "0x0");
    this.ERR10.add_def_property("reset_mask", "0x1");
    this.ERR11 = new("ERR11");
    this.ERR11.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR11.configure(this, 1, 11, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR11.add_def_property("spec_access", "w");
    this.ERR11.add_def_property("spec_sw_default", "0x0");
    this.ERR11.add_def_property("sw_default_mask", "0x0");
    this.ERR11.add_def_property("reset_mask", "0x1");
    this.ERR7 = new("ERR7");
    this.ERR7.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR7.configure(this, 1, 7, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR7.add_def_property("spec_access", "w");
    this.ERR7.add_def_property("spec_sw_default", "0x0");
    this.ERR7.add_def_property("sw_default_mask", "0x0");
    this.ERR7.add_def_property("reset_mask", "0x1");
    this.ERR3 = new("ERR3");
    this.ERR3.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR3.configure(this, 1, 3, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR3.add_def_property("spec_access", "w");
    this.ERR3.add_def_property("spec_sw_default", "0x0");
    this.ERR3.add_def_property("sw_default_mask", "0x0");
    this.ERR3.add_def_property("reset_mask", "0x1");
    this.ERR15 = new("ERR15");
    this.ERR15.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR15.configure(this, 1, 15, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR15.add_def_property("spec_access", "w");
    this.ERR15.add_def_property("spec_sw_default", "0x0");
    this.ERR15.add_def_property("sw_default_mask", "0x0");
    this.ERR15.add_def_property("reset_mask", "0x1");
    this.ERR16 = new("ERR16");
    this.ERR16.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR16.configure(this, 1, 16, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR16.add_def_property("spec_access", "w");
    this.ERR16.add_def_property("spec_sw_default", "0x0");
    this.ERR16.add_def_property("sw_default_mask", "0x0");
    this.ERR16.add_def_property("reset_mask", "0x1");
    this.ERR14 = new("ERR14");
    this.ERR14.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR14.configure(this, 1, 14, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR14.add_def_property("spec_access", "w");
    this.ERR14.add_def_property("spec_sw_default", "0x0");
    this.ERR14.add_def_property("sw_default_mask", "0x0");
    this.ERR14.add_def_property("reset_mask", "0x1");
    this.ERR12 = new("ERR12");
    this.ERR12.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR12.configure(this, 1, 12, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR12.add_def_property("spec_access", "w");
    this.ERR12.add_def_property("spec_sw_default", "0x0");
    this.ERR12.add_def_property("sw_default_mask", "0x0");
    this.ERR12.add_def_property("reset_mask", "0x1");
    this.ERR18 = new("ERR18");
    this.ERR18.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR18.configure(this, 1, 18, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR18.add_def_property("spec_access", "w");
    this.ERR18.add_def_property("spec_sw_default", "0x0");
    this.ERR18.add_def_property("sw_default_mask", "0x0");
    this.ERR18.add_def_property("reset_mask", "0x1");
    this.ERR8 = new("ERR8");
    this.ERR8.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR8.configure(this, 1, 8, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR8.add_def_property("spec_access", "w");
    this.ERR8.add_def_property("spec_sw_default", "0x0");
    this.ERR8.add_def_property("sw_default_mask", "0x0");
    this.ERR8.add_def_property("reset_mask", "0x1");
    this.ERR6 = new("ERR6");
    this.ERR6.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR6.configure(this, 1, 6, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR6.add_def_property("spec_access", "w");
    this.ERR6.add_def_property("spec_sw_default", "0x0");
    this.ERR6.add_def_property("sw_default_mask", "0x0");
    this.ERR6.add_def_property("reset_mask", "0x1");
    this.ERR4 = new("ERR4");
    this.ERR4.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR4.configure(this, 1, 4, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR4.add_def_property("spec_access", "w");
    this.ERR4.add_def_property("spec_sw_default", "0x0");
    this.ERR4.add_def_property("sw_default_mask", "0x0");
    this.ERR4.add_def_property("reset_mask", "0x1");
    this.ERR22 = new("ERR22");
    this.ERR22.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR22.configure(this, 1, 22, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR22.add_def_property("spec_access", "w");
    this.ERR22.add_def_property("spec_sw_default", "0x0");
    this.ERR22.add_def_property("sw_default_mask", "0x0");
    this.ERR22.add_def_property("reset_mask", "0x1");
    this.ERR25 = new("ERR25");
    this.ERR25.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR25.configure(this, 1, 25, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR25.add_def_property("spec_access", "w");
    this.ERR25.add_def_property("spec_sw_default", "0x0");
    this.ERR25.add_def_property("sw_default_mask", "0x0");
    this.ERR25.add_def_property("reset_mask", "0x1");
    this.ERR28 = new("ERR28");
    this.ERR28.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR28.configure(this, 1, 28, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR28.add_def_property("spec_access", "w");
    this.ERR28.add_def_property("spec_sw_default", "0x0");
    this.ERR28.add_def_property("sw_default_mask", "0x0");
    this.ERR28.add_def_property("reset_mask", "0x1");
    this.ERR17 = new("ERR17");
    this.ERR17.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR17.configure(this, 1, 17, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR17.add_def_property("spec_access", "w");
    this.ERR17.add_def_property("spec_sw_default", "0x0");
    this.ERR17.add_def_property("sw_default_mask", "0x0");
    this.ERR17.add_def_property("reset_mask", "0x1");
    this.ERR29 = new("ERR29");
    this.ERR29.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR29.configure(this, 1, 29, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR29.add_def_property("spec_access", "w");
    this.ERR29.add_def_property("spec_sw_default", "0x0");
    this.ERR29.add_def_property("sw_default_mask", "0x0");
    this.ERR29.add_def_property("reset_mask", "0x1");
    this.ERR23 = new("ERR23");
    this.ERR23.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR23.configure(this, 1, 23, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR23.add_def_property("spec_access", "w");
    this.ERR23.add_def_property("spec_sw_default", "0x0");
    this.ERR23.add_def_property("sw_default_mask", "0x0");
    this.ERR23.add_def_property("reset_mask", "0x1");
    this.ERR24 = new("ERR24");
    this.ERR24.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR24.configure(this, 1, 24, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR24.add_def_property("spec_access", "w");
    this.ERR24.add_def_property("spec_sw_default", "0x0");
    this.ERR24.add_def_property("sw_default_mask", "0x0");
    this.ERR24.add_def_property("reset_mask", "0x1");
    this.ERR13 = new("ERR13");
    this.ERR13.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR13.configure(this, 1, 13, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR13.add_def_property("spec_access", "w");
    this.ERR13.add_def_property("spec_sw_default", "0x0");
    this.ERR13.add_def_property("sw_default_mask", "0x0");
    this.ERR13.add_def_property("reset_mask", "0x1");
    this.ERR30 = new("ERR30");
    this.ERR30.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR30.configure(this, 1, 30, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR30.add_def_property("spec_access", "w");
    this.ERR30.add_def_property("spec_sw_default", "0x0");
    this.ERR30.add_def_property("sw_default_mask", "0x0");
    this.ERR30.add_def_property("reset_mask", "0x1");
    this.ERR21 = new("ERR21");
    this.ERR21.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR21.configure(this, 1, 21, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR21.add_def_property("spec_access", "w");
    this.ERR21.add_def_property("spec_sw_default", "0x0");
    this.ERR21.add_def_property("sw_default_mask", "0x0");
    this.ERR21.add_def_property("reset_mask", "0x1");
    this.ERR26 = new("ERR26");
    this.ERR26.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR26.configure(this, 1, 26, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR26.add_def_property("spec_access", "w");
    this.ERR26.add_def_property("spec_sw_default", "0x0");
    this.ERR26.add_def_property("sw_default_mask", "0x0");
    this.ERR26.add_def_property("reset_mask", "0x1");
    this.ERR9 = new("ERR9");
    this.ERR9.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR9.configure(this, 1, 9, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR9.add_def_property("spec_access", "w");
    this.ERR9.add_def_property("spec_sw_default", "0x0");
    this.ERR9.add_def_property("sw_default_mask", "0x0");
    this.ERR9.add_def_property("reset_mask", "0x1");
    this.ERR27 = new("ERR27");
    this.ERR27.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR27.configure(this, 1, 27, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR27.add_def_property("spec_access", "w");
    this.ERR27.add_def_property("spec_sw_default", "0x0");
    this.ERR27.add_def_property("sw_default_mask", "0x0");
    this.ERR27.add_def_property("reset_mask", "0x1");
    this.ERR19 = new("ERR19");
    this.ERR19.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR19.configure(this, 1, 19, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR19.add_def_property("spec_access", "w");
    this.ERR19.add_def_property("spec_sw_default", "0x0");
    this.ERR19.add_def_property("sw_default_mask", "0x0");
    this.ERR19.add_def_property("reset_mask", "0x1");
    this.ERR20 = new("ERR20");
    this.ERR20.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR20.configure(this, 1, 20, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR20.add_def_property("spec_access", "w");
    this.ERR20.add_def_property("spec_sw_default", "0x0");
    this.ERR20.add_def_property("sw_default_mask", "0x0");
    this.ERR20.add_def_property("reset_mask", "0x1");
    this.ERR5 = new("ERR5");
    this.ERR5.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR5.configure(this, 1, 5, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR5.add_def_property("spec_access", "w");
    this.ERR5.add_def_property("spec_sw_default", "0x0");
    this.ERR5.add_def_property("sw_default_mask", "0x0");
    this.ERR5.add_def_property("reset_mask", "0x1");
    this.ERR31 = new("ERR31");
    this.ERR31.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR31.configure(this, 1, 31, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR31.add_def_property("spec_access", "w");
    this.ERR31.add_def_property("spec_sw_default", "0x0");
    this.ERR31.add_def_property("sw_default_mask", "0x0");
    this.ERR31.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR0"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR1"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR2"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR10"}, 10, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR11"}, 11, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR7"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR3"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR15"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR16"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR14"}, 14, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR12"}, 12, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR18"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR8"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR6"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR4"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR22"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR25"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR28"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR17"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR29"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR23"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR24"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR13"}, 13, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR30"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR21"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR26"}, 26, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR9"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR27"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR19"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR20"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR5"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR31"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE

// ERRSLICE0_LATENTERR_STATUS
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR0;
  rand uvm_reg_field_rdl ERR1;
  rand uvm_reg_field_rdl ERR2;
  rand uvm_reg_field_rdl ERR10;
  rand uvm_reg_field_rdl ERR11;
  rand uvm_reg_field_rdl ERR7;
  rand uvm_reg_field_rdl ERR3;
  rand uvm_reg_field_rdl ERR15;
  rand uvm_reg_field_rdl ERR16;
  rand uvm_reg_field_rdl ERR14;
  rand uvm_reg_field_rdl ERR12;
  rand uvm_reg_field_rdl ERR18;
  rand uvm_reg_field_rdl ERR8;
  rand uvm_reg_field_rdl ERR6;
  rand uvm_reg_field_rdl ERR4;
  rand uvm_reg_field_rdl ERR22;
  rand uvm_reg_field_rdl ERR25;
  rand uvm_reg_field_rdl ERR28;
  rand uvm_reg_field_rdl ERR17;
  rand uvm_reg_field_rdl ERR29;
  rand uvm_reg_field_rdl ERR23;
  rand uvm_reg_field_rdl ERR24;
  rand uvm_reg_field_rdl ERR13;
  rand uvm_reg_field_rdl ERR30;
  rand uvm_reg_field_rdl ERR21;
  rand uvm_reg_field_rdl ERR26;
  rand uvm_reg_field_rdl ERR9;
  rand uvm_reg_field_rdl ERR27;
  rand uvm_reg_field_rdl ERR19;
  rand uvm_reg_field_rdl ERR20;
  rand uvm_reg_field_rdl ERR5;
  rand uvm_reg_field_rdl ERR31;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR0 = new("ERR0");
    this.ERR0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR0.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR0.add_def_property("spec_access", "rw");
    this.ERR0.add_def_property("spec_sw_default", "0x0");
    this.ERR0.add_def_property("sw_default_mask", "0x0");
    this.ERR0.add_def_property("reset_mask", "0x1");
    this.ERR1 = new("ERR1");
    this.ERR1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR1.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR1.add_def_property("spec_access", "rw");
    this.ERR1.add_def_property("spec_sw_default", "0x0");
    this.ERR1.add_def_property("sw_default_mask", "0x0");
    this.ERR1.add_def_property("reset_mask", "0x1");
    this.ERR2 = new("ERR2");
    this.ERR2.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR2.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR2.add_def_property("spec_access", "rw");
    this.ERR2.add_def_property("spec_sw_default", "0x0");
    this.ERR2.add_def_property("sw_default_mask", "0x0");
    this.ERR2.add_def_property("reset_mask", "0x1");
    this.ERR10 = new("ERR10");
    this.ERR10.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR10.configure(this, 1, 10, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR10.add_def_property("spec_access", "rw");
    this.ERR10.add_def_property("spec_sw_default", "0x0");
    this.ERR10.add_def_property("sw_default_mask", "0x0");
    this.ERR10.add_def_property("reset_mask", "0x1");
    this.ERR11 = new("ERR11");
    this.ERR11.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR11.configure(this, 1, 11, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR11.add_def_property("spec_access", "rw");
    this.ERR11.add_def_property("spec_sw_default", "0x0");
    this.ERR11.add_def_property("sw_default_mask", "0x0");
    this.ERR11.add_def_property("reset_mask", "0x1");
    this.ERR7 = new("ERR7");
    this.ERR7.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR7.configure(this, 1, 7, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR7.add_def_property("spec_access", "rw");
    this.ERR7.add_def_property("spec_sw_default", "0x0");
    this.ERR7.add_def_property("sw_default_mask", "0x0");
    this.ERR7.add_def_property("reset_mask", "0x1");
    this.ERR3 = new("ERR3");
    this.ERR3.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR3.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR3.add_def_property("spec_access", "rw");
    this.ERR3.add_def_property("spec_sw_default", "0x0");
    this.ERR3.add_def_property("sw_default_mask", "0x0");
    this.ERR3.add_def_property("reset_mask", "0x1");
    this.ERR15 = new("ERR15");
    this.ERR15.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR15.configure(this, 1, 15, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR15.add_def_property("spec_access", "rw");
    this.ERR15.add_def_property("spec_sw_default", "0x0");
    this.ERR15.add_def_property("sw_default_mask", "0x0");
    this.ERR15.add_def_property("reset_mask", "0x1");
    this.ERR16 = new("ERR16");
    this.ERR16.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR16.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR16.add_def_property("spec_access", "rw");
    this.ERR16.add_def_property("spec_sw_default", "0x0");
    this.ERR16.add_def_property("sw_default_mask", "0x0");
    this.ERR16.add_def_property("reset_mask", "0x1");
    this.ERR14 = new("ERR14");
    this.ERR14.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR14.configure(this, 1, 14, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR14.add_def_property("spec_access", "rw");
    this.ERR14.add_def_property("spec_sw_default", "0x0");
    this.ERR14.add_def_property("sw_default_mask", "0x0");
    this.ERR14.add_def_property("reset_mask", "0x1");
    this.ERR12 = new("ERR12");
    this.ERR12.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR12.configure(this, 1, 12, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR12.add_def_property("spec_access", "rw");
    this.ERR12.add_def_property("spec_sw_default", "0x0");
    this.ERR12.add_def_property("sw_default_mask", "0x0");
    this.ERR12.add_def_property("reset_mask", "0x1");
    this.ERR18 = new("ERR18");
    this.ERR18.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR18.configure(this, 1, 18, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR18.add_def_property("spec_access", "rw");
    this.ERR18.add_def_property("spec_sw_default", "0x0");
    this.ERR18.add_def_property("sw_default_mask", "0x0");
    this.ERR18.add_def_property("reset_mask", "0x1");
    this.ERR8 = new("ERR8");
    this.ERR8.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR8.configure(this, 1, 8, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR8.add_def_property("spec_access", "rw");
    this.ERR8.add_def_property("spec_sw_default", "0x0");
    this.ERR8.add_def_property("sw_default_mask", "0x0");
    this.ERR8.add_def_property("reset_mask", "0x1");
    this.ERR6 = new("ERR6");
    this.ERR6.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR6.configure(this, 1, 6, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR6.add_def_property("spec_access", "rw");
    this.ERR6.add_def_property("spec_sw_default", "0x0");
    this.ERR6.add_def_property("sw_default_mask", "0x0");
    this.ERR6.add_def_property("reset_mask", "0x1");
    this.ERR4 = new("ERR4");
    this.ERR4.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR4.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR4.add_def_property("spec_access", "rw");
    this.ERR4.add_def_property("spec_sw_default", "0x0");
    this.ERR4.add_def_property("sw_default_mask", "0x0");
    this.ERR4.add_def_property("reset_mask", "0x1");
    this.ERR22 = new("ERR22");
    this.ERR22.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR22.configure(this, 1, 22, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR22.add_def_property("spec_access", "rw");
    this.ERR22.add_def_property("spec_sw_default", "0x0");
    this.ERR22.add_def_property("sw_default_mask", "0x0");
    this.ERR22.add_def_property("reset_mask", "0x1");
    this.ERR25 = new("ERR25");
    this.ERR25.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR25.configure(this, 1, 25, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR25.add_def_property("spec_access", "rw");
    this.ERR25.add_def_property("spec_sw_default", "0x0");
    this.ERR25.add_def_property("sw_default_mask", "0x0");
    this.ERR25.add_def_property("reset_mask", "0x1");
    this.ERR28 = new("ERR28");
    this.ERR28.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR28.configure(this, 1, 28, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR28.add_def_property("spec_access", "rw");
    this.ERR28.add_def_property("spec_sw_default", "0x0");
    this.ERR28.add_def_property("sw_default_mask", "0x0");
    this.ERR28.add_def_property("reset_mask", "0x1");
    this.ERR17 = new("ERR17");
    this.ERR17.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR17.configure(this, 1, 17, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR17.add_def_property("spec_access", "rw");
    this.ERR17.add_def_property("spec_sw_default", "0x0");
    this.ERR17.add_def_property("sw_default_mask", "0x0");
    this.ERR17.add_def_property("reset_mask", "0x1");
    this.ERR29 = new("ERR29");
    this.ERR29.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR29.configure(this, 1, 29, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR29.add_def_property("spec_access", "rw");
    this.ERR29.add_def_property("spec_sw_default", "0x0");
    this.ERR29.add_def_property("sw_default_mask", "0x0");
    this.ERR29.add_def_property("reset_mask", "0x1");
    this.ERR23 = new("ERR23");
    this.ERR23.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR23.configure(this, 1, 23, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR23.add_def_property("spec_access", "rw");
    this.ERR23.add_def_property("spec_sw_default", "0x0");
    this.ERR23.add_def_property("sw_default_mask", "0x0");
    this.ERR23.add_def_property("reset_mask", "0x1");
    this.ERR24 = new("ERR24");
    this.ERR24.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR24.configure(this, 1, 24, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR24.add_def_property("spec_access", "rw");
    this.ERR24.add_def_property("spec_sw_default", "0x0");
    this.ERR24.add_def_property("sw_default_mask", "0x0");
    this.ERR24.add_def_property("reset_mask", "0x1");
    this.ERR13 = new("ERR13");
    this.ERR13.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR13.configure(this, 1, 13, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR13.add_def_property("spec_access", "rw");
    this.ERR13.add_def_property("spec_sw_default", "0x0");
    this.ERR13.add_def_property("sw_default_mask", "0x0");
    this.ERR13.add_def_property("reset_mask", "0x1");
    this.ERR30 = new("ERR30");
    this.ERR30.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR30.configure(this, 1, 30, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR30.add_def_property("spec_access", "rw");
    this.ERR30.add_def_property("spec_sw_default", "0x0");
    this.ERR30.add_def_property("sw_default_mask", "0x0");
    this.ERR30.add_def_property("reset_mask", "0x1");
    this.ERR21 = new("ERR21");
    this.ERR21.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR21.configure(this, 1, 21, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR21.add_def_property("spec_access", "rw");
    this.ERR21.add_def_property("spec_sw_default", "0x0");
    this.ERR21.add_def_property("sw_default_mask", "0x0");
    this.ERR21.add_def_property("reset_mask", "0x1");
    this.ERR26 = new("ERR26");
    this.ERR26.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR26.configure(this, 1, 26, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR26.add_def_property("spec_access", "rw");
    this.ERR26.add_def_property("spec_sw_default", "0x0");
    this.ERR26.add_def_property("sw_default_mask", "0x0");
    this.ERR26.add_def_property("reset_mask", "0x1");
    this.ERR9 = new("ERR9");
    this.ERR9.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR9.configure(this, 1, 9, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR9.add_def_property("spec_access", "rw");
    this.ERR9.add_def_property("spec_sw_default", "0x0");
    this.ERR9.add_def_property("sw_default_mask", "0x0");
    this.ERR9.add_def_property("reset_mask", "0x1");
    this.ERR27 = new("ERR27");
    this.ERR27.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR27.configure(this, 1, 27, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR27.add_def_property("spec_access", "rw");
    this.ERR27.add_def_property("spec_sw_default", "0x0");
    this.ERR27.add_def_property("sw_default_mask", "0x0");
    this.ERR27.add_def_property("reset_mask", "0x1");
    this.ERR19 = new("ERR19");
    this.ERR19.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR19.configure(this, 1, 19, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR19.add_def_property("spec_access", "rw");
    this.ERR19.add_def_property("spec_sw_default", "0x0");
    this.ERR19.add_def_property("sw_default_mask", "0x0");
    this.ERR19.add_def_property("reset_mask", "0x1");
    this.ERR20 = new("ERR20");
    this.ERR20.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR20.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR20.add_def_property("spec_access", "rw");
    this.ERR20.add_def_property("spec_sw_default", "0x0");
    this.ERR20.add_def_property("sw_default_mask", "0x0");
    this.ERR20.add_def_property("reset_mask", "0x1");
    this.ERR5 = new("ERR5");
    this.ERR5.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR5.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR5.add_def_property("spec_access", "rw");
    this.ERR5.add_def_property("spec_sw_default", "0x0");
    this.ERR5.add_def_property("sw_default_mask", "0x0");
    this.ERR5.add_def_property("reset_mask", "0x1");
    this.ERR31 = new("ERR31");
    this.ERR31.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR31.configure(this, 1, 31, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR31.add_def_property("spec_access", "rw");
    this.ERR31.add_def_property("spec_sw_default", "0x0");
    this.ERR31.add_def_property("sw_default_mask", "0x0");
    this.ERR31.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR0"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR1"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR2"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR10"}, 10, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR11"}, 11, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR7"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR3"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR15"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR16"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR14"}, 14, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR12"}, 12, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR18"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR8"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR6"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR4"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR22"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR25"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR28"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR17"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR29"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR23"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR24"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR13"}, 13, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR30"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR21"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR26"}, 26, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR9"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR27"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR19"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR20"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR5"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR31"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS

// ERRSLICE0_COUNTER_RELOAD
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR0;
  rand uvm_reg_field_rdl ERR1;
  rand uvm_reg_field_rdl ERR2;
  rand uvm_reg_field_rdl ERR10;
  rand uvm_reg_field_rdl ERR11;
  rand uvm_reg_field_rdl ERR7;
  rand uvm_reg_field_rdl ERR3;
  rand uvm_reg_field_rdl ERR15;
  rand uvm_reg_field_rdl ERR16;
  rand uvm_reg_field_rdl ERR14;
  rand uvm_reg_field_rdl ERR12;
  rand uvm_reg_field_rdl ERR18;
  rand uvm_reg_field_rdl ERR8;
  rand uvm_reg_field_rdl ERR6;
  rand uvm_reg_field_rdl ERR4;
  rand uvm_reg_field_rdl ERR22;
  rand uvm_reg_field_rdl ERR25;
  rand uvm_reg_field_rdl ERR28;
  rand uvm_reg_field_rdl ERR17;
  rand uvm_reg_field_rdl ERR29;
  rand uvm_reg_field_rdl ERR23;
  rand uvm_reg_field_rdl ERR24;
  rand uvm_reg_field_rdl ERR13;
  rand uvm_reg_field_rdl ERR30;
  rand uvm_reg_field_rdl ERR21;
  rand uvm_reg_field_rdl ERR26;
  rand uvm_reg_field_rdl ERR9;
  rand uvm_reg_field_rdl ERR27;
  rand uvm_reg_field_rdl ERR19;
  rand uvm_reg_field_rdl ERR20;
  rand uvm_reg_field_rdl ERR5;
  rand uvm_reg_field_rdl ERR31;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR0 = new("ERR0");
    this.ERR0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR0.configure(this, 1, 0, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR0.add_def_property("spec_access", "w");
    this.ERR0.add_def_property("spec_sw_default", "0x0");
    this.ERR0.add_def_property("sw_default_mask", "0x0");
    this.ERR0.add_def_property("reset_mask", "0x1");
    this.ERR1 = new("ERR1");
    this.ERR1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR1.configure(this, 1, 1, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR1.add_def_property("spec_access", "w");
    this.ERR1.add_def_property("spec_sw_default", "0x0");
    this.ERR1.add_def_property("sw_default_mask", "0x0");
    this.ERR1.add_def_property("reset_mask", "0x1");
    this.ERR2 = new("ERR2");
    this.ERR2.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR2.configure(this, 1, 2, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR2.add_def_property("spec_access", "w");
    this.ERR2.add_def_property("spec_sw_default", "0x0");
    this.ERR2.add_def_property("sw_default_mask", "0x0");
    this.ERR2.add_def_property("reset_mask", "0x1");
    this.ERR10 = new("ERR10");
    this.ERR10.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR10.configure(this, 1, 10, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR10.add_def_property("spec_access", "w");
    this.ERR10.add_def_property("spec_sw_default", "0x0");
    this.ERR10.add_def_property("sw_default_mask", "0x0");
    this.ERR10.add_def_property("reset_mask", "0x1");
    this.ERR11 = new("ERR11");
    this.ERR11.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR11.configure(this, 1, 11, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR11.add_def_property("spec_access", "w");
    this.ERR11.add_def_property("spec_sw_default", "0x0");
    this.ERR11.add_def_property("sw_default_mask", "0x0");
    this.ERR11.add_def_property("reset_mask", "0x1");
    this.ERR7 = new("ERR7");
    this.ERR7.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR7.configure(this, 1, 7, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR7.add_def_property("spec_access", "w");
    this.ERR7.add_def_property("spec_sw_default", "0x0");
    this.ERR7.add_def_property("sw_default_mask", "0x0");
    this.ERR7.add_def_property("reset_mask", "0x1");
    this.ERR3 = new("ERR3");
    this.ERR3.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR3.configure(this, 1, 3, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR3.add_def_property("spec_access", "w");
    this.ERR3.add_def_property("spec_sw_default", "0x0");
    this.ERR3.add_def_property("sw_default_mask", "0x0");
    this.ERR3.add_def_property("reset_mask", "0x1");
    this.ERR15 = new("ERR15");
    this.ERR15.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR15.configure(this, 1, 15, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR15.add_def_property("spec_access", "w");
    this.ERR15.add_def_property("spec_sw_default", "0x0");
    this.ERR15.add_def_property("sw_default_mask", "0x0");
    this.ERR15.add_def_property("reset_mask", "0x1");
    this.ERR16 = new("ERR16");
    this.ERR16.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR16.configure(this, 1, 16, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR16.add_def_property("spec_access", "w");
    this.ERR16.add_def_property("spec_sw_default", "0x0");
    this.ERR16.add_def_property("sw_default_mask", "0x0");
    this.ERR16.add_def_property("reset_mask", "0x1");
    this.ERR14 = new("ERR14");
    this.ERR14.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR14.configure(this, 1, 14, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR14.add_def_property("spec_access", "w");
    this.ERR14.add_def_property("spec_sw_default", "0x0");
    this.ERR14.add_def_property("sw_default_mask", "0x0");
    this.ERR14.add_def_property("reset_mask", "0x1");
    this.ERR12 = new("ERR12");
    this.ERR12.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR12.configure(this, 1, 12, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR12.add_def_property("spec_access", "w");
    this.ERR12.add_def_property("spec_sw_default", "0x0");
    this.ERR12.add_def_property("sw_default_mask", "0x0");
    this.ERR12.add_def_property("reset_mask", "0x1");
    this.ERR18 = new("ERR18");
    this.ERR18.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR18.configure(this, 1, 18, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR18.add_def_property("spec_access", "w");
    this.ERR18.add_def_property("spec_sw_default", "0x0");
    this.ERR18.add_def_property("sw_default_mask", "0x0");
    this.ERR18.add_def_property("reset_mask", "0x1");
    this.ERR8 = new("ERR8");
    this.ERR8.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR8.configure(this, 1, 8, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR8.add_def_property("spec_access", "w");
    this.ERR8.add_def_property("spec_sw_default", "0x0");
    this.ERR8.add_def_property("sw_default_mask", "0x0");
    this.ERR8.add_def_property("reset_mask", "0x1");
    this.ERR6 = new("ERR6");
    this.ERR6.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR6.configure(this, 1, 6, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR6.add_def_property("spec_access", "w");
    this.ERR6.add_def_property("spec_sw_default", "0x0");
    this.ERR6.add_def_property("sw_default_mask", "0x0");
    this.ERR6.add_def_property("reset_mask", "0x1");
    this.ERR4 = new("ERR4");
    this.ERR4.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR4.configure(this, 1, 4, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR4.add_def_property("spec_access", "w");
    this.ERR4.add_def_property("spec_sw_default", "0x0");
    this.ERR4.add_def_property("sw_default_mask", "0x0");
    this.ERR4.add_def_property("reset_mask", "0x1");
    this.ERR22 = new("ERR22");
    this.ERR22.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR22.configure(this, 1, 22, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR22.add_def_property("spec_access", "w");
    this.ERR22.add_def_property("spec_sw_default", "0x0");
    this.ERR22.add_def_property("sw_default_mask", "0x0");
    this.ERR22.add_def_property("reset_mask", "0x1");
    this.ERR25 = new("ERR25");
    this.ERR25.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR25.configure(this, 1, 25, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR25.add_def_property("spec_access", "w");
    this.ERR25.add_def_property("spec_sw_default", "0x0");
    this.ERR25.add_def_property("sw_default_mask", "0x0");
    this.ERR25.add_def_property("reset_mask", "0x1");
    this.ERR28 = new("ERR28");
    this.ERR28.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR28.configure(this, 1, 28, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR28.add_def_property("spec_access", "w");
    this.ERR28.add_def_property("spec_sw_default", "0x0");
    this.ERR28.add_def_property("sw_default_mask", "0x0");
    this.ERR28.add_def_property("reset_mask", "0x1");
    this.ERR17 = new("ERR17");
    this.ERR17.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR17.configure(this, 1, 17, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR17.add_def_property("spec_access", "w");
    this.ERR17.add_def_property("spec_sw_default", "0x0");
    this.ERR17.add_def_property("sw_default_mask", "0x0");
    this.ERR17.add_def_property("reset_mask", "0x1");
    this.ERR29 = new("ERR29");
    this.ERR29.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR29.configure(this, 1, 29, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR29.add_def_property("spec_access", "w");
    this.ERR29.add_def_property("spec_sw_default", "0x0");
    this.ERR29.add_def_property("sw_default_mask", "0x0");
    this.ERR29.add_def_property("reset_mask", "0x1");
    this.ERR23 = new("ERR23");
    this.ERR23.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR23.configure(this, 1, 23, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR23.add_def_property("spec_access", "w");
    this.ERR23.add_def_property("spec_sw_default", "0x0");
    this.ERR23.add_def_property("sw_default_mask", "0x0");
    this.ERR23.add_def_property("reset_mask", "0x1");
    this.ERR24 = new("ERR24");
    this.ERR24.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR24.configure(this, 1, 24, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR24.add_def_property("spec_access", "w");
    this.ERR24.add_def_property("spec_sw_default", "0x0");
    this.ERR24.add_def_property("sw_default_mask", "0x0");
    this.ERR24.add_def_property("reset_mask", "0x1");
    this.ERR13 = new("ERR13");
    this.ERR13.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR13.configure(this, 1, 13, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR13.add_def_property("spec_access", "w");
    this.ERR13.add_def_property("spec_sw_default", "0x0");
    this.ERR13.add_def_property("sw_default_mask", "0x0");
    this.ERR13.add_def_property("reset_mask", "0x1");
    this.ERR30 = new("ERR30");
    this.ERR30.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR30.configure(this, 1, 30, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR30.add_def_property("spec_access", "w");
    this.ERR30.add_def_property("spec_sw_default", "0x0");
    this.ERR30.add_def_property("sw_default_mask", "0x0");
    this.ERR30.add_def_property("reset_mask", "0x1");
    this.ERR21 = new("ERR21");
    this.ERR21.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR21.configure(this, 1, 21, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR21.add_def_property("spec_access", "w");
    this.ERR21.add_def_property("spec_sw_default", "0x0");
    this.ERR21.add_def_property("sw_default_mask", "0x0");
    this.ERR21.add_def_property("reset_mask", "0x1");
    this.ERR26 = new("ERR26");
    this.ERR26.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR26.configure(this, 1, 26, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR26.add_def_property("spec_access", "w");
    this.ERR26.add_def_property("spec_sw_default", "0x0");
    this.ERR26.add_def_property("sw_default_mask", "0x0");
    this.ERR26.add_def_property("reset_mask", "0x1");
    this.ERR9 = new("ERR9");
    this.ERR9.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR9.configure(this, 1, 9, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR9.add_def_property("spec_access", "w");
    this.ERR9.add_def_property("spec_sw_default", "0x0");
    this.ERR9.add_def_property("sw_default_mask", "0x0");
    this.ERR9.add_def_property("reset_mask", "0x1");
    this.ERR27 = new("ERR27");
    this.ERR27.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR27.configure(this, 1, 27, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR27.add_def_property("spec_access", "w");
    this.ERR27.add_def_property("spec_sw_default", "0x0");
    this.ERR27.add_def_property("sw_default_mask", "0x0");
    this.ERR27.add_def_property("reset_mask", "0x1");
    this.ERR19 = new("ERR19");
    this.ERR19.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR19.configure(this, 1, 19, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR19.add_def_property("spec_access", "w");
    this.ERR19.add_def_property("spec_sw_default", "0x0");
    this.ERR19.add_def_property("sw_default_mask", "0x0");
    this.ERR19.add_def_property("reset_mask", "0x1");
    this.ERR20 = new("ERR20");
    this.ERR20.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR20.configure(this, 1, 20, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR20.add_def_property("spec_access", "w");
    this.ERR20.add_def_property("spec_sw_default", "0x0");
    this.ERR20.add_def_property("sw_default_mask", "0x0");
    this.ERR20.add_def_property("reset_mask", "0x1");
    this.ERR5 = new("ERR5");
    this.ERR5.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR5.configure(this, 1, 5, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR5.add_def_property("spec_access", "w");
    this.ERR5.add_def_property("spec_sw_default", "0x0");
    this.ERR5.add_def_property("sw_default_mask", "0x0");
    this.ERR5.add_def_property("reset_mask", "0x1");
    this.ERR31 = new("ERR31");
    this.ERR31.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR31.configure(this, 1, 31, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR31.add_def_property("spec_access", "w");
    this.ERR31.add_def_property("spec_sw_default", "0x0");
    this.ERR31.add_def_property("sw_default_mask", "0x0");
    this.ERR31.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR0"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR1"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR2"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR10"}, 10, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR11"}, 11, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR7"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR3"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR15"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR16"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR14"}, 14, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR12"}, 12, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR18"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR8"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR6"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR4"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR22"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR25"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR28"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR17"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR29"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR23"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR24"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR13"}, 13, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR30"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR21"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR26"}, 26, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR9"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR27"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR19"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR20"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR5"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR31"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD

// ERRSLICE1_MISSIONERR_ENABLE
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR32;
  rand uvm_reg_field_rdl ERR33;
  rand uvm_reg_field_rdl ERR34;
  rand uvm_reg_field_rdl ERR42;
  rand uvm_reg_field_rdl ERR43;
  rand uvm_reg_field_rdl ERR39;
  rand uvm_reg_field_rdl ERR35;
  rand uvm_reg_field_rdl ERR47;
  rand uvm_reg_field_rdl ERR48;
  rand uvm_reg_field_rdl ERR46;
  rand uvm_reg_field_rdl ERR44;
  rand uvm_reg_field_rdl ERR50;
  rand uvm_reg_field_rdl ERR40;
  rand uvm_reg_field_rdl ERR38;
  rand uvm_reg_field_rdl ERR36;
  rand uvm_reg_field_rdl ERR54;
  rand uvm_reg_field_rdl ERR57;
  rand uvm_reg_field_rdl ERR60;
  rand uvm_reg_field_rdl ERR49;
  rand uvm_reg_field_rdl ERR61;
  rand uvm_reg_field_rdl ERR55;
  rand uvm_reg_field_rdl ERR56;
  rand uvm_reg_field_rdl ERR45;
  rand uvm_reg_field_rdl ERR62;
  rand uvm_reg_field_rdl ERR53;
  rand uvm_reg_field_rdl ERR58;
  rand uvm_reg_field_rdl ERR41;
  rand uvm_reg_field_rdl ERR59;
  rand uvm_reg_field_rdl ERR51;
  rand uvm_reg_field_rdl ERR52;
  rand uvm_reg_field_rdl ERR37;
  rand uvm_reg_field_rdl ERR63;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR32 = new("ERR32");
    this.ERR32.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR32.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR32.add_def_property("spec_access", "rw");
    this.ERR32.add_def_property("spec_sw_default", "0x0");
    this.ERR32.add_def_property("sw_default_mask", "0x0");
    this.ERR32.add_def_property("reset_mask", "0x1");
    this.ERR33 = new("ERR33");
    this.ERR33.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR33.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR33.add_def_property("spec_access", "rw");
    this.ERR33.add_def_property("spec_sw_default", "0x0");
    this.ERR33.add_def_property("sw_default_mask", "0x0");
    this.ERR33.add_def_property("reset_mask", "0x1");
    this.ERR34 = new("ERR34");
    this.ERR34.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR34.configure(this, 1, 2, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR34.add_def_property("spec_access", "rw");
    this.ERR34.add_def_property("spec_sw_default", "0x0");
    this.ERR34.add_def_property("sw_default_mask", "0x0");
    this.ERR34.add_def_property("reset_mask", "0x1");
    this.ERR42 = new("ERR42");
    this.ERR42.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR42.configure(this, 1, 10, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR42.add_def_property("spec_access", "rw");
    this.ERR42.add_def_property("spec_sw_default", "0x0");
    this.ERR42.add_def_property("sw_default_mask", "0x0");
    this.ERR42.add_def_property("reset_mask", "0x1");
    this.ERR43 = new("ERR43");
    this.ERR43.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR43.configure(this, 1, 11, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR43.add_def_property("spec_access", "rw");
    this.ERR43.add_def_property("spec_sw_default", "0x0");
    this.ERR43.add_def_property("sw_default_mask", "0x0");
    this.ERR43.add_def_property("reset_mask", "0x1");
    this.ERR39 = new("ERR39");
    this.ERR39.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR39.configure(this, 1, 7, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR39.add_def_property("spec_access", "rw");
    this.ERR39.add_def_property("spec_sw_default", "0x0");
    this.ERR39.add_def_property("sw_default_mask", "0x0");
    this.ERR39.add_def_property("reset_mask", "0x1");
    this.ERR35 = new("ERR35");
    this.ERR35.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR35.configure(this, 1, 3, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR35.add_def_property("spec_access", "rw");
    this.ERR35.add_def_property("spec_sw_default", "0x0");
    this.ERR35.add_def_property("sw_default_mask", "0x0");
    this.ERR35.add_def_property("reset_mask", "0x1");
    this.ERR47 = new("ERR47");
    this.ERR47.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR47.configure(this, 1, 15, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR47.add_def_property("spec_access", "rw");
    this.ERR47.add_def_property("spec_sw_default", "0x0");
    this.ERR47.add_def_property("sw_default_mask", "0x0");
    this.ERR47.add_def_property("reset_mask", "0x1");
    this.ERR48 = new("ERR48");
    this.ERR48.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR48.configure(this, 1, 16, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR48.add_def_property("spec_access", "rw");
    this.ERR48.add_def_property("spec_sw_default", "0x0");
    this.ERR48.add_def_property("sw_default_mask", "0x0");
    this.ERR48.add_def_property("reset_mask", "0x1");
    this.ERR46 = new("ERR46");
    this.ERR46.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR46.configure(this, 1, 14, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR46.add_def_property("spec_access", "rw");
    this.ERR46.add_def_property("spec_sw_default", "0x0");
    this.ERR46.add_def_property("sw_default_mask", "0x0");
    this.ERR46.add_def_property("reset_mask", "0x1");
    this.ERR44 = new("ERR44");
    this.ERR44.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR44.configure(this, 1, 12, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR44.add_def_property("spec_access", "rw");
    this.ERR44.add_def_property("spec_sw_default", "0x0");
    this.ERR44.add_def_property("sw_default_mask", "0x0");
    this.ERR44.add_def_property("reset_mask", "0x1");
    this.ERR50 = new("ERR50");
    this.ERR50.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR50.configure(this, 1, 18, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR50.add_def_property("spec_access", "rw");
    this.ERR50.add_def_property("spec_sw_default", "0x0");
    this.ERR50.add_def_property("sw_default_mask", "0x0");
    this.ERR50.add_def_property("reset_mask", "0x1");
    this.ERR40 = new("ERR40");
    this.ERR40.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR40.configure(this, 1, 8, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR40.add_def_property("spec_access", "rw");
    this.ERR40.add_def_property("spec_sw_default", "0x0");
    this.ERR40.add_def_property("sw_default_mask", "0x0");
    this.ERR40.add_def_property("reset_mask", "0x1");
    this.ERR38 = new("ERR38");
    this.ERR38.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR38.configure(this, 1, 6, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR38.add_def_property("spec_access", "rw");
    this.ERR38.add_def_property("spec_sw_default", "0x0");
    this.ERR38.add_def_property("sw_default_mask", "0x0");
    this.ERR38.add_def_property("reset_mask", "0x1");
    this.ERR36 = new("ERR36");
    this.ERR36.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR36.configure(this, 1, 4, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR36.add_def_property("spec_access", "rw");
    this.ERR36.add_def_property("spec_sw_default", "0x0");
    this.ERR36.add_def_property("sw_default_mask", "0x0");
    this.ERR36.add_def_property("reset_mask", "0x1");
    this.ERR54 = new("ERR54");
    this.ERR54.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR54.configure(this, 1, 22, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR54.add_def_property("spec_access", "rw");
    this.ERR54.add_def_property("spec_sw_default", "0x0");
    this.ERR54.add_def_property("sw_default_mask", "0x0");
    this.ERR54.add_def_property("reset_mask", "0x1");
    this.ERR57 = new("ERR57");
    this.ERR57.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR57.configure(this, 1, 25, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR57.add_def_property("spec_access", "rw");
    this.ERR57.add_def_property("spec_sw_default", "0x0");
    this.ERR57.add_def_property("sw_default_mask", "0x0");
    this.ERR57.add_def_property("reset_mask", "0x1");
    this.ERR60 = new("ERR60");
    this.ERR60.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR60.configure(this, 1, 28, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR60.add_def_property("spec_access", "rw");
    this.ERR60.add_def_property("spec_sw_default", "0x0");
    this.ERR60.add_def_property("sw_default_mask", "0x0");
    this.ERR60.add_def_property("reset_mask", "0x1");
    this.ERR49 = new("ERR49");
    this.ERR49.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR49.configure(this, 1, 17, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR49.add_def_property("spec_access", "rw");
    this.ERR49.add_def_property("spec_sw_default", "0x0");
    this.ERR49.add_def_property("sw_default_mask", "0x0");
    this.ERR49.add_def_property("reset_mask", "0x1");
    this.ERR61 = new("ERR61");
    this.ERR61.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR61.configure(this, 1, 29, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR61.add_def_property("spec_access", "rw");
    this.ERR61.add_def_property("spec_sw_default", "0x0");
    this.ERR61.add_def_property("sw_default_mask", "0x0");
    this.ERR61.add_def_property("reset_mask", "0x1");
    this.ERR55 = new("ERR55");
    this.ERR55.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR55.configure(this, 1, 23, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR55.add_def_property("spec_access", "rw");
    this.ERR55.add_def_property("spec_sw_default", "0x0");
    this.ERR55.add_def_property("sw_default_mask", "0x0");
    this.ERR55.add_def_property("reset_mask", "0x1");
    this.ERR56 = new("ERR56");
    this.ERR56.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR56.configure(this, 1, 24, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR56.add_def_property("spec_access", "rw");
    this.ERR56.add_def_property("spec_sw_default", "0x0");
    this.ERR56.add_def_property("sw_default_mask", "0x0");
    this.ERR56.add_def_property("reset_mask", "0x1");
    this.ERR45 = new("ERR45");
    this.ERR45.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR45.configure(this, 1, 13, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR45.add_def_property("spec_access", "rw");
    this.ERR45.add_def_property("spec_sw_default", "0x0");
    this.ERR45.add_def_property("sw_default_mask", "0x0");
    this.ERR45.add_def_property("reset_mask", "0x1");
    this.ERR62 = new("ERR62");
    this.ERR62.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR62.configure(this, 1, 30, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR62.add_def_property("spec_access", "rw");
    this.ERR62.add_def_property("spec_sw_default", "0x0");
    this.ERR62.add_def_property("sw_default_mask", "0x0");
    this.ERR62.add_def_property("reset_mask", "0x1");
    this.ERR53 = new("ERR53");
    this.ERR53.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR53.configure(this, 1, 21, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR53.add_def_property("spec_access", "rw");
    this.ERR53.add_def_property("spec_sw_default", "0x0");
    this.ERR53.add_def_property("sw_default_mask", "0x0");
    this.ERR53.add_def_property("reset_mask", "0x1");
    this.ERR58 = new("ERR58");
    this.ERR58.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR58.configure(this, 1, 26, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR58.add_def_property("spec_access", "rw");
    this.ERR58.add_def_property("spec_sw_default", "0x0");
    this.ERR58.add_def_property("sw_default_mask", "0x0");
    this.ERR58.add_def_property("reset_mask", "0x1");
    this.ERR41 = new("ERR41");
    this.ERR41.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR41.configure(this, 1, 9, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR41.add_def_property("spec_access", "rw");
    this.ERR41.add_def_property("spec_sw_default", "0x0");
    this.ERR41.add_def_property("sw_default_mask", "0x0");
    this.ERR41.add_def_property("reset_mask", "0x1");
    this.ERR59 = new("ERR59");
    this.ERR59.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR59.configure(this, 1, 27, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR59.add_def_property("spec_access", "rw");
    this.ERR59.add_def_property("spec_sw_default", "0x0");
    this.ERR59.add_def_property("sw_default_mask", "0x0");
    this.ERR59.add_def_property("reset_mask", "0x1");
    this.ERR51 = new("ERR51");
    this.ERR51.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR51.configure(this, 1, 19, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR51.add_def_property("spec_access", "rw");
    this.ERR51.add_def_property("spec_sw_default", "0x0");
    this.ERR51.add_def_property("sw_default_mask", "0x0");
    this.ERR51.add_def_property("reset_mask", "0x1");
    this.ERR52 = new("ERR52");
    this.ERR52.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR52.configure(this, 1, 20, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR52.add_def_property("spec_access", "rw");
    this.ERR52.add_def_property("spec_sw_default", "0x0");
    this.ERR52.add_def_property("sw_default_mask", "0x0");
    this.ERR52.add_def_property("reset_mask", "0x1");
    this.ERR37 = new("ERR37");
    this.ERR37.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR37.configure(this, 1, 5, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR37.add_def_property("spec_access", "rw");
    this.ERR37.add_def_property("spec_sw_default", "0x0");
    this.ERR37.add_def_property("sw_default_mask", "0x0");
    this.ERR37.add_def_property("reset_mask", "0x1");
    this.ERR63 = new("ERR63");
    this.ERR63.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR63.configure(this, 1, 31, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR63.add_def_property("spec_access", "rw");
    this.ERR63.add_def_property("spec_sw_default", "0x0");
    this.ERR63.add_def_property("sw_default_mask", "0x0");
    this.ERR63.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR32"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR33"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR34"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR42"}, 10, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR43"}, 11, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR39"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR35"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR47"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR48"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR46"}, 14, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR44"}, 12, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR50"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR40"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR38"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR36"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR54"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR57"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR60"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR49"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR61"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR55"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR56"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR45"}, 13, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR62"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR53"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR58"}, 26, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR41"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR59"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR51"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR52"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR37"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR63"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE

// ERRSLICE1_MISSIONERR_FORCE
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR32;
  rand uvm_reg_field_rdl ERR33;
  rand uvm_reg_field_rdl ERR34;
  rand uvm_reg_field_rdl ERR42;
  rand uvm_reg_field_rdl ERR43;
  rand uvm_reg_field_rdl ERR39;
  rand uvm_reg_field_rdl ERR35;
  rand uvm_reg_field_rdl ERR47;
  rand uvm_reg_field_rdl ERR48;
  rand uvm_reg_field_rdl ERR46;
  rand uvm_reg_field_rdl ERR44;
  rand uvm_reg_field_rdl ERR50;
  rand uvm_reg_field_rdl ERR40;
  rand uvm_reg_field_rdl ERR38;
  rand uvm_reg_field_rdl ERR36;
  rand uvm_reg_field_rdl ERR54;
  rand uvm_reg_field_rdl ERR57;
  rand uvm_reg_field_rdl ERR60;
  rand uvm_reg_field_rdl ERR49;
  rand uvm_reg_field_rdl ERR61;
  rand uvm_reg_field_rdl ERR55;
  rand uvm_reg_field_rdl ERR56;
  rand uvm_reg_field_rdl ERR45;
  rand uvm_reg_field_rdl ERR62;
  rand uvm_reg_field_rdl ERR53;
  rand uvm_reg_field_rdl ERR58;
  rand uvm_reg_field_rdl ERR41;
  rand uvm_reg_field_rdl ERR59;
  rand uvm_reg_field_rdl ERR51;
  rand uvm_reg_field_rdl ERR52;
  rand uvm_reg_field_rdl ERR37;
  rand uvm_reg_field_rdl ERR63;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR32 = new("ERR32");
    this.ERR32.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR32.configure(this, 1, 0, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR32.add_def_property("spec_access", "w");
    this.ERR32.add_def_property("spec_sw_default", "0x0");
    this.ERR32.add_def_property("sw_default_mask", "0x0");
    this.ERR32.add_def_property("reset_mask", "0x1");
    this.ERR33 = new("ERR33");
    this.ERR33.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR33.configure(this, 1, 1, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR33.add_def_property("spec_access", "w");
    this.ERR33.add_def_property("spec_sw_default", "0x0");
    this.ERR33.add_def_property("sw_default_mask", "0x0");
    this.ERR33.add_def_property("reset_mask", "0x1");
    this.ERR34 = new("ERR34");
    this.ERR34.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR34.configure(this, 1, 2, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR34.add_def_property("spec_access", "w");
    this.ERR34.add_def_property("spec_sw_default", "0x0");
    this.ERR34.add_def_property("sw_default_mask", "0x0");
    this.ERR34.add_def_property("reset_mask", "0x1");
    this.ERR42 = new("ERR42");
    this.ERR42.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR42.configure(this, 1, 10, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR42.add_def_property("spec_access", "w");
    this.ERR42.add_def_property("spec_sw_default", "0x0");
    this.ERR42.add_def_property("sw_default_mask", "0x0");
    this.ERR42.add_def_property("reset_mask", "0x1");
    this.ERR43 = new("ERR43");
    this.ERR43.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR43.configure(this, 1, 11, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR43.add_def_property("spec_access", "w");
    this.ERR43.add_def_property("spec_sw_default", "0x0");
    this.ERR43.add_def_property("sw_default_mask", "0x0");
    this.ERR43.add_def_property("reset_mask", "0x1");
    this.ERR39 = new("ERR39");
    this.ERR39.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR39.configure(this, 1, 7, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR39.add_def_property("spec_access", "w");
    this.ERR39.add_def_property("spec_sw_default", "0x0");
    this.ERR39.add_def_property("sw_default_mask", "0x0");
    this.ERR39.add_def_property("reset_mask", "0x1");
    this.ERR35 = new("ERR35");
    this.ERR35.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR35.configure(this, 1, 3, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR35.add_def_property("spec_access", "w");
    this.ERR35.add_def_property("spec_sw_default", "0x0");
    this.ERR35.add_def_property("sw_default_mask", "0x0");
    this.ERR35.add_def_property("reset_mask", "0x1");
    this.ERR47 = new("ERR47");
    this.ERR47.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR47.configure(this, 1, 15, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR47.add_def_property("spec_access", "w");
    this.ERR47.add_def_property("spec_sw_default", "0x0");
    this.ERR47.add_def_property("sw_default_mask", "0x0");
    this.ERR47.add_def_property("reset_mask", "0x1");
    this.ERR48 = new("ERR48");
    this.ERR48.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR48.configure(this, 1, 16, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR48.add_def_property("spec_access", "w");
    this.ERR48.add_def_property("spec_sw_default", "0x0");
    this.ERR48.add_def_property("sw_default_mask", "0x0");
    this.ERR48.add_def_property("reset_mask", "0x1");
    this.ERR46 = new("ERR46");
    this.ERR46.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR46.configure(this, 1, 14, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR46.add_def_property("spec_access", "w");
    this.ERR46.add_def_property("spec_sw_default", "0x0");
    this.ERR46.add_def_property("sw_default_mask", "0x0");
    this.ERR46.add_def_property("reset_mask", "0x1");
    this.ERR44 = new("ERR44");
    this.ERR44.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR44.configure(this, 1, 12, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR44.add_def_property("spec_access", "w");
    this.ERR44.add_def_property("spec_sw_default", "0x0");
    this.ERR44.add_def_property("sw_default_mask", "0x0");
    this.ERR44.add_def_property("reset_mask", "0x1");
    this.ERR50 = new("ERR50");
    this.ERR50.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR50.configure(this, 1, 18, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR50.add_def_property("spec_access", "w");
    this.ERR50.add_def_property("spec_sw_default", "0x0");
    this.ERR50.add_def_property("sw_default_mask", "0x0");
    this.ERR50.add_def_property("reset_mask", "0x1");
    this.ERR40 = new("ERR40");
    this.ERR40.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR40.configure(this, 1, 8, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR40.add_def_property("spec_access", "w");
    this.ERR40.add_def_property("spec_sw_default", "0x0");
    this.ERR40.add_def_property("sw_default_mask", "0x0");
    this.ERR40.add_def_property("reset_mask", "0x1");
    this.ERR38 = new("ERR38");
    this.ERR38.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR38.configure(this, 1, 6, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR38.add_def_property("spec_access", "w");
    this.ERR38.add_def_property("spec_sw_default", "0x0");
    this.ERR38.add_def_property("sw_default_mask", "0x0");
    this.ERR38.add_def_property("reset_mask", "0x1");
    this.ERR36 = new("ERR36");
    this.ERR36.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR36.configure(this, 1, 4, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR36.add_def_property("spec_access", "w");
    this.ERR36.add_def_property("spec_sw_default", "0x0");
    this.ERR36.add_def_property("sw_default_mask", "0x0");
    this.ERR36.add_def_property("reset_mask", "0x1");
    this.ERR54 = new("ERR54");
    this.ERR54.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR54.configure(this, 1, 22, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR54.add_def_property("spec_access", "w");
    this.ERR54.add_def_property("spec_sw_default", "0x0");
    this.ERR54.add_def_property("sw_default_mask", "0x0");
    this.ERR54.add_def_property("reset_mask", "0x1");
    this.ERR57 = new("ERR57");
    this.ERR57.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR57.configure(this, 1, 25, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR57.add_def_property("spec_access", "w");
    this.ERR57.add_def_property("spec_sw_default", "0x0");
    this.ERR57.add_def_property("sw_default_mask", "0x0");
    this.ERR57.add_def_property("reset_mask", "0x1");
    this.ERR60 = new("ERR60");
    this.ERR60.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR60.configure(this, 1, 28, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR60.add_def_property("spec_access", "w");
    this.ERR60.add_def_property("spec_sw_default", "0x0");
    this.ERR60.add_def_property("sw_default_mask", "0x0");
    this.ERR60.add_def_property("reset_mask", "0x1");
    this.ERR49 = new("ERR49");
    this.ERR49.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR49.configure(this, 1, 17, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR49.add_def_property("spec_access", "w");
    this.ERR49.add_def_property("spec_sw_default", "0x0");
    this.ERR49.add_def_property("sw_default_mask", "0x0");
    this.ERR49.add_def_property("reset_mask", "0x1");
    this.ERR61 = new("ERR61");
    this.ERR61.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR61.configure(this, 1, 29, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR61.add_def_property("spec_access", "w");
    this.ERR61.add_def_property("spec_sw_default", "0x0");
    this.ERR61.add_def_property("sw_default_mask", "0x0");
    this.ERR61.add_def_property("reset_mask", "0x1");
    this.ERR55 = new("ERR55");
    this.ERR55.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR55.configure(this, 1, 23, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR55.add_def_property("spec_access", "w");
    this.ERR55.add_def_property("spec_sw_default", "0x0");
    this.ERR55.add_def_property("sw_default_mask", "0x0");
    this.ERR55.add_def_property("reset_mask", "0x1");
    this.ERR56 = new("ERR56");
    this.ERR56.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR56.configure(this, 1, 24, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR56.add_def_property("spec_access", "w");
    this.ERR56.add_def_property("spec_sw_default", "0x0");
    this.ERR56.add_def_property("sw_default_mask", "0x0");
    this.ERR56.add_def_property("reset_mask", "0x1");
    this.ERR45 = new("ERR45");
    this.ERR45.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR45.configure(this, 1, 13, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR45.add_def_property("spec_access", "w");
    this.ERR45.add_def_property("spec_sw_default", "0x0");
    this.ERR45.add_def_property("sw_default_mask", "0x0");
    this.ERR45.add_def_property("reset_mask", "0x1");
    this.ERR62 = new("ERR62");
    this.ERR62.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR62.configure(this, 1, 30, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR62.add_def_property("spec_access", "w");
    this.ERR62.add_def_property("spec_sw_default", "0x0");
    this.ERR62.add_def_property("sw_default_mask", "0x0");
    this.ERR62.add_def_property("reset_mask", "0x1");
    this.ERR53 = new("ERR53");
    this.ERR53.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR53.configure(this, 1, 21, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR53.add_def_property("spec_access", "w");
    this.ERR53.add_def_property("spec_sw_default", "0x0");
    this.ERR53.add_def_property("sw_default_mask", "0x0");
    this.ERR53.add_def_property("reset_mask", "0x1");
    this.ERR58 = new("ERR58");
    this.ERR58.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR58.configure(this, 1, 26, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR58.add_def_property("spec_access", "w");
    this.ERR58.add_def_property("spec_sw_default", "0x0");
    this.ERR58.add_def_property("sw_default_mask", "0x0");
    this.ERR58.add_def_property("reset_mask", "0x1");
    this.ERR41 = new("ERR41");
    this.ERR41.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR41.configure(this, 1, 9, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR41.add_def_property("spec_access", "w");
    this.ERR41.add_def_property("spec_sw_default", "0x0");
    this.ERR41.add_def_property("sw_default_mask", "0x0");
    this.ERR41.add_def_property("reset_mask", "0x1");
    this.ERR59 = new("ERR59");
    this.ERR59.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR59.configure(this, 1, 27, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR59.add_def_property("spec_access", "w");
    this.ERR59.add_def_property("spec_sw_default", "0x0");
    this.ERR59.add_def_property("sw_default_mask", "0x0");
    this.ERR59.add_def_property("reset_mask", "0x1");
    this.ERR51 = new("ERR51");
    this.ERR51.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR51.configure(this, 1, 19, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR51.add_def_property("spec_access", "w");
    this.ERR51.add_def_property("spec_sw_default", "0x0");
    this.ERR51.add_def_property("sw_default_mask", "0x0");
    this.ERR51.add_def_property("reset_mask", "0x1");
    this.ERR52 = new("ERR52");
    this.ERR52.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR52.configure(this, 1, 20, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR52.add_def_property("spec_access", "w");
    this.ERR52.add_def_property("spec_sw_default", "0x0");
    this.ERR52.add_def_property("sw_default_mask", "0x0");
    this.ERR52.add_def_property("reset_mask", "0x1");
    this.ERR37 = new("ERR37");
    this.ERR37.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR37.configure(this, 1, 5, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR37.add_def_property("spec_access", "w");
    this.ERR37.add_def_property("spec_sw_default", "0x0");
    this.ERR37.add_def_property("sw_default_mask", "0x0");
    this.ERR37.add_def_property("reset_mask", "0x1");
    this.ERR63 = new("ERR63");
    this.ERR63.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR63.configure(this, 1, 31, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR63.add_def_property("spec_access", "w");
    this.ERR63.add_def_property("spec_sw_default", "0x0");
    this.ERR63.add_def_property("sw_default_mask", "0x0");
    this.ERR63.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR32"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR33"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR34"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR42"}, 10, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR43"}, 11, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR39"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR35"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR47"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR48"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR46"}, 14, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR44"}, 12, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR50"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR40"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR38"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR36"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR54"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR57"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR60"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR49"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR61"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR55"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR56"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR45"}, 13, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR62"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR53"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR58"}, 26, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR41"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR59"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR51"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR52"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR37"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR63"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE

// ERRSLICE1_MISSIONERR_STATUS
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR32;
  rand uvm_reg_field_rdl ERR33;
  rand uvm_reg_field_rdl ERR34;
  rand uvm_reg_field_rdl ERR42;
  rand uvm_reg_field_rdl ERR43;
  rand uvm_reg_field_rdl ERR39;
  rand uvm_reg_field_rdl ERR35;
  rand uvm_reg_field_rdl ERR47;
  rand uvm_reg_field_rdl ERR48;
  rand uvm_reg_field_rdl ERR46;
  rand uvm_reg_field_rdl ERR44;
  rand uvm_reg_field_rdl ERR50;
  rand uvm_reg_field_rdl ERR40;
  rand uvm_reg_field_rdl ERR38;
  rand uvm_reg_field_rdl ERR36;
  rand uvm_reg_field_rdl ERR54;
  rand uvm_reg_field_rdl ERR57;
  rand uvm_reg_field_rdl ERR60;
  rand uvm_reg_field_rdl ERR49;
  rand uvm_reg_field_rdl ERR61;
  rand uvm_reg_field_rdl ERR55;
  rand uvm_reg_field_rdl ERR56;
  rand uvm_reg_field_rdl ERR45;
  rand uvm_reg_field_rdl ERR62;
  rand uvm_reg_field_rdl ERR53;
  rand uvm_reg_field_rdl ERR58;
  rand uvm_reg_field_rdl ERR41;
  rand uvm_reg_field_rdl ERR59;
  rand uvm_reg_field_rdl ERR51;
  rand uvm_reg_field_rdl ERR52;
  rand uvm_reg_field_rdl ERR37;
  rand uvm_reg_field_rdl ERR63;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR32 = new("ERR32");
    this.ERR32.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR32.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR32.add_def_property("spec_access", "rw");
    this.ERR32.add_def_property("spec_sw_default", "0x0");
    this.ERR32.add_def_property("sw_default_mask", "0x0");
    this.ERR32.add_def_property("reset_mask", "0x1");
    this.ERR33 = new("ERR33");
    this.ERR33.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR33.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR33.add_def_property("spec_access", "rw");
    this.ERR33.add_def_property("spec_sw_default", "0x0");
    this.ERR33.add_def_property("sw_default_mask", "0x0");
    this.ERR33.add_def_property("reset_mask", "0x1");
    this.ERR34 = new("ERR34");
    this.ERR34.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR34.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR34.add_def_property("spec_access", "rw");
    this.ERR34.add_def_property("spec_sw_default", "0x0");
    this.ERR34.add_def_property("sw_default_mask", "0x0");
    this.ERR34.add_def_property("reset_mask", "0x1");
    this.ERR42 = new("ERR42");
    this.ERR42.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR42.configure(this, 1, 10, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR42.add_def_property("spec_access", "rw");
    this.ERR42.add_def_property("spec_sw_default", "0x0");
    this.ERR42.add_def_property("sw_default_mask", "0x0");
    this.ERR42.add_def_property("reset_mask", "0x1");
    this.ERR43 = new("ERR43");
    this.ERR43.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR43.configure(this, 1, 11, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR43.add_def_property("spec_access", "rw");
    this.ERR43.add_def_property("spec_sw_default", "0x0");
    this.ERR43.add_def_property("sw_default_mask", "0x0");
    this.ERR43.add_def_property("reset_mask", "0x1");
    this.ERR39 = new("ERR39");
    this.ERR39.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR39.configure(this, 1, 7, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR39.add_def_property("spec_access", "rw");
    this.ERR39.add_def_property("spec_sw_default", "0x0");
    this.ERR39.add_def_property("sw_default_mask", "0x0");
    this.ERR39.add_def_property("reset_mask", "0x1");
    this.ERR35 = new("ERR35");
    this.ERR35.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR35.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR35.add_def_property("spec_access", "rw");
    this.ERR35.add_def_property("spec_sw_default", "0x0");
    this.ERR35.add_def_property("sw_default_mask", "0x0");
    this.ERR35.add_def_property("reset_mask", "0x1");
    this.ERR47 = new("ERR47");
    this.ERR47.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR47.configure(this, 1, 15, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR47.add_def_property("spec_access", "rw");
    this.ERR47.add_def_property("spec_sw_default", "0x0");
    this.ERR47.add_def_property("sw_default_mask", "0x0");
    this.ERR47.add_def_property("reset_mask", "0x1");
    this.ERR48 = new("ERR48");
    this.ERR48.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR48.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR48.add_def_property("spec_access", "rw");
    this.ERR48.add_def_property("spec_sw_default", "0x0");
    this.ERR48.add_def_property("sw_default_mask", "0x0");
    this.ERR48.add_def_property("reset_mask", "0x1");
    this.ERR46 = new("ERR46");
    this.ERR46.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR46.configure(this, 1, 14, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR46.add_def_property("spec_access", "rw");
    this.ERR46.add_def_property("spec_sw_default", "0x0");
    this.ERR46.add_def_property("sw_default_mask", "0x0");
    this.ERR46.add_def_property("reset_mask", "0x1");
    this.ERR44 = new("ERR44");
    this.ERR44.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR44.configure(this, 1, 12, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR44.add_def_property("spec_access", "rw");
    this.ERR44.add_def_property("spec_sw_default", "0x0");
    this.ERR44.add_def_property("sw_default_mask", "0x0");
    this.ERR44.add_def_property("reset_mask", "0x1");
    this.ERR50 = new("ERR50");
    this.ERR50.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR50.configure(this, 1, 18, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR50.add_def_property("spec_access", "rw");
    this.ERR50.add_def_property("spec_sw_default", "0x0");
    this.ERR50.add_def_property("sw_default_mask", "0x0");
    this.ERR50.add_def_property("reset_mask", "0x1");
    this.ERR40 = new("ERR40");
    this.ERR40.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR40.configure(this, 1, 8, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR40.add_def_property("spec_access", "rw");
    this.ERR40.add_def_property("spec_sw_default", "0x0");
    this.ERR40.add_def_property("sw_default_mask", "0x0");
    this.ERR40.add_def_property("reset_mask", "0x1");
    this.ERR38 = new("ERR38");
    this.ERR38.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR38.configure(this, 1, 6, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR38.add_def_property("spec_access", "rw");
    this.ERR38.add_def_property("spec_sw_default", "0x0");
    this.ERR38.add_def_property("sw_default_mask", "0x0");
    this.ERR38.add_def_property("reset_mask", "0x1");
    this.ERR36 = new("ERR36");
    this.ERR36.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR36.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR36.add_def_property("spec_access", "rw");
    this.ERR36.add_def_property("spec_sw_default", "0x0");
    this.ERR36.add_def_property("sw_default_mask", "0x0");
    this.ERR36.add_def_property("reset_mask", "0x1");
    this.ERR54 = new("ERR54");
    this.ERR54.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR54.configure(this, 1, 22, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR54.add_def_property("spec_access", "rw");
    this.ERR54.add_def_property("spec_sw_default", "0x0");
    this.ERR54.add_def_property("sw_default_mask", "0x0");
    this.ERR54.add_def_property("reset_mask", "0x1");
    this.ERR57 = new("ERR57");
    this.ERR57.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR57.configure(this, 1, 25, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR57.add_def_property("spec_access", "rw");
    this.ERR57.add_def_property("spec_sw_default", "0x0");
    this.ERR57.add_def_property("sw_default_mask", "0x0");
    this.ERR57.add_def_property("reset_mask", "0x1");
    this.ERR60 = new("ERR60");
    this.ERR60.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR60.configure(this, 1, 28, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR60.add_def_property("spec_access", "rw");
    this.ERR60.add_def_property("spec_sw_default", "0x0");
    this.ERR60.add_def_property("sw_default_mask", "0x0");
    this.ERR60.add_def_property("reset_mask", "0x1");
    this.ERR49 = new("ERR49");
    this.ERR49.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR49.configure(this, 1, 17, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR49.add_def_property("spec_access", "rw");
    this.ERR49.add_def_property("spec_sw_default", "0x0");
    this.ERR49.add_def_property("sw_default_mask", "0x0");
    this.ERR49.add_def_property("reset_mask", "0x1");
    this.ERR61 = new("ERR61");
    this.ERR61.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR61.configure(this, 1, 29, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR61.add_def_property("spec_access", "rw");
    this.ERR61.add_def_property("spec_sw_default", "0x0");
    this.ERR61.add_def_property("sw_default_mask", "0x0");
    this.ERR61.add_def_property("reset_mask", "0x1");
    this.ERR55 = new("ERR55");
    this.ERR55.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR55.configure(this, 1, 23, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR55.add_def_property("spec_access", "rw");
    this.ERR55.add_def_property("spec_sw_default", "0x0");
    this.ERR55.add_def_property("sw_default_mask", "0x0");
    this.ERR55.add_def_property("reset_mask", "0x1");
    this.ERR56 = new("ERR56");
    this.ERR56.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR56.configure(this, 1, 24, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR56.add_def_property("spec_access", "rw");
    this.ERR56.add_def_property("spec_sw_default", "0x0");
    this.ERR56.add_def_property("sw_default_mask", "0x0");
    this.ERR56.add_def_property("reset_mask", "0x1");
    this.ERR45 = new("ERR45");
    this.ERR45.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR45.configure(this, 1, 13, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR45.add_def_property("spec_access", "rw");
    this.ERR45.add_def_property("spec_sw_default", "0x0");
    this.ERR45.add_def_property("sw_default_mask", "0x0");
    this.ERR45.add_def_property("reset_mask", "0x1");
    this.ERR62 = new("ERR62");
    this.ERR62.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR62.configure(this, 1, 30, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR62.add_def_property("spec_access", "rw");
    this.ERR62.add_def_property("spec_sw_default", "0x0");
    this.ERR62.add_def_property("sw_default_mask", "0x0");
    this.ERR62.add_def_property("reset_mask", "0x1");
    this.ERR53 = new("ERR53");
    this.ERR53.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR53.configure(this, 1, 21, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR53.add_def_property("spec_access", "rw");
    this.ERR53.add_def_property("spec_sw_default", "0x0");
    this.ERR53.add_def_property("sw_default_mask", "0x0");
    this.ERR53.add_def_property("reset_mask", "0x1");
    this.ERR58 = new("ERR58");
    this.ERR58.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR58.configure(this, 1, 26, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR58.add_def_property("spec_access", "rw");
    this.ERR58.add_def_property("spec_sw_default", "0x0");
    this.ERR58.add_def_property("sw_default_mask", "0x0");
    this.ERR58.add_def_property("reset_mask", "0x1");
    this.ERR41 = new("ERR41");
    this.ERR41.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR41.configure(this, 1, 9, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR41.add_def_property("spec_access", "rw");
    this.ERR41.add_def_property("spec_sw_default", "0x0");
    this.ERR41.add_def_property("sw_default_mask", "0x0");
    this.ERR41.add_def_property("reset_mask", "0x1");
    this.ERR59 = new("ERR59");
    this.ERR59.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR59.configure(this, 1, 27, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR59.add_def_property("spec_access", "rw");
    this.ERR59.add_def_property("spec_sw_default", "0x0");
    this.ERR59.add_def_property("sw_default_mask", "0x0");
    this.ERR59.add_def_property("reset_mask", "0x1");
    this.ERR51 = new("ERR51");
    this.ERR51.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR51.configure(this, 1, 19, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR51.add_def_property("spec_access", "rw");
    this.ERR51.add_def_property("spec_sw_default", "0x0");
    this.ERR51.add_def_property("sw_default_mask", "0x0");
    this.ERR51.add_def_property("reset_mask", "0x1");
    this.ERR52 = new("ERR52");
    this.ERR52.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR52.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR52.add_def_property("spec_access", "rw");
    this.ERR52.add_def_property("spec_sw_default", "0x0");
    this.ERR52.add_def_property("sw_default_mask", "0x0");
    this.ERR52.add_def_property("reset_mask", "0x1");
    this.ERR37 = new("ERR37");
    this.ERR37.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR37.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR37.add_def_property("spec_access", "rw");
    this.ERR37.add_def_property("spec_sw_default", "0x0");
    this.ERR37.add_def_property("sw_default_mask", "0x0");
    this.ERR37.add_def_property("reset_mask", "0x1");
    this.ERR63 = new("ERR63");
    this.ERR63.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR63.configure(this, 1, 31, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR63.add_def_property("spec_access", "rw");
    this.ERR63.add_def_property("spec_sw_default", "0x0");
    this.ERR63.add_def_property("sw_default_mask", "0x0");
    this.ERR63.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR32"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR33"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR34"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR42"}, 10, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR43"}, 11, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR39"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR35"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR47"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR48"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR46"}, 14, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR44"}, 12, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR50"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR40"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR38"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR36"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR54"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR57"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR60"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR49"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR61"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR55"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR56"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR45"}, 13, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR62"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR53"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR58"}, 26, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR41"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR59"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR51"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR52"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR37"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR63"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS

// ERRSLICE1_MISSIONERR_INJECT
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR32;
  rand uvm_reg_field_rdl ERR33;
  rand uvm_reg_field_rdl ERR34;
  rand uvm_reg_field_rdl ERR42;
  rand uvm_reg_field_rdl ERR43;
  rand uvm_reg_field_rdl ERR39;
  rand uvm_reg_field_rdl ERR35;
  rand uvm_reg_field_rdl ERR47;
  rand uvm_reg_field_rdl ERR48;
  rand uvm_reg_field_rdl ERR46;
  rand uvm_reg_field_rdl ERR44;
  rand uvm_reg_field_rdl ERR50;
  rand uvm_reg_field_rdl ERR40;
  rand uvm_reg_field_rdl ERR38;
  rand uvm_reg_field_rdl ERR36;
  rand uvm_reg_field_rdl ERR54;
  rand uvm_reg_field_rdl ERR57;
  rand uvm_reg_field_rdl ERR60;
  rand uvm_reg_field_rdl ERR49;
  rand uvm_reg_field_rdl ERR61;
  rand uvm_reg_field_rdl ERR55;
  rand uvm_reg_field_rdl ERR56;
  rand uvm_reg_field_rdl ERR45;
  rand uvm_reg_field_rdl ERR62;
  rand uvm_reg_field_rdl ERR53;
  rand uvm_reg_field_rdl ERR58;
  rand uvm_reg_field_rdl ERR41;
  rand uvm_reg_field_rdl ERR59;
  rand uvm_reg_field_rdl ERR51;
  rand uvm_reg_field_rdl ERR52;
  rand uvm_reg_field_rdl ERR37;
  rand uvm_reg_field_rdl ERR63;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR32 = new("ERR32");
    this.ERR32.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR32.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR32.add_def_property("spec_access", "rw");
    this.ERR32.add_def_property("spec_sw_default", "0x0");
    this.ERR32.add_def_property("sw_default_mask", "0x0");
    this.ERR32.add_def_property("reset_mask", "0x1");
    this.ERR33 = new("ERR33");
    this.ERR33.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR33.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR33.add_def_property("spec_access", "rw");
    this.ERR33.add_def_property("spec_sw_default", "0x0");
    this.ERR33.add_def_property("sw_default_mask", "0x0");
    this.ERR33.add_def_property("reset_mask", "0x1");
    this.ERR34 = new("ERR34");
    this.ERR34.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR34.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR34.add_def_property("spec_access", "rw");
    this.ERR34.add_def_property("spec_sw_default", "0x0");
    this.ERR34.add_def_property("sw_default_mask", "0x0");
    this.ERR34.add_def_property("reset_mask", "0x1");
    this.ERR42 = new("ERR42");
    this.ERR42.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR42.configure(this, 1, 10, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR42.add_def_property("spec_access", "rw");
    this.ERR42.add_def_property("spec_sw_default", "0x0");
    this.ERR42.add_def_property("sw_default_mask", "0x0");
    this.ERR42.add_def_property("reset_mask", "0x1");
    this.ERR43 = new("ERR43");
    this.ERR43.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR43.configure(this, 1, 11, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR43.add_def_property("spec_access", "rw");
    this.ERR43.add_def_property("spec_sw_default", "0x0");
    this.ERR43.add_def_property("sw_default_mask", "0x0");
    this.ERR43.add_def_property("reset_mask", "0x1");
    this.ERR39 = new("ERR39");
    this.ERR39.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR39.configure(this, 1, 7, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR39.add_def_property("spec_access", "rw");
    this.ERR39.add_def_property("spec_sw_default", "0x0");
    this.ERR39.add_def_property("sw_default_mask", "0x0");
    this.ERR39.add_def_property("reset_mask", "0x1");
    this.ERR35 = new("ERR35");
    this.ERR35.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR35.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR35.add_def_property("spec_access", "rw");
    this.ERR35.add_def_property("spec_sw_default", "0x0");
    this.ERR35.add_def_property("sw_default_mask", "0x0");
    this.ERR35.add_def_property("reset_mask", "0x1");
    this.ERR47 = new("ERR47");
    this.ERR47.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR47.configure(this, 1, 15, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR47.add_def_property("spec_access", "rw");
    this.ERR47.add_def_property("spec_sw_default", "0x0");
    this.ERR47.add_def_property("sw_default_mask", "0x0");
    this.ERR47.add_def_property("reset_mask", "0x1");
    this.ERR48 = new("ERR48");
    this.ERR48.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR48.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR48.add_def_property("spec_access", "rw");
    this.ERR48.add_def_property("spec_sw_default", "0x0");
    this.ERR48.add_def_property("sw_default_mask", "0x0");
    this.ERR48.add_def_property("reset_mask", "0x1");
    this.ERR46 = new("ERR46");
    this.ERR46.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR46.configure(this, 1, 14, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR46.add_def_property("spec_access", "rw");
    this.ERR46.add_def_property("spec_sw_default", "0x0");
    this.ERR46.add_def_property("sw_default_mask", "0x0");
    this.ERR46.add_def_property("reset_mask", "0x1");
    this.ERR44 = new("ERR44");
    this.ERR44.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR44.configure(this, 1, 12, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR44.add_def_property("spec_access", "rw");
    this.ERR44.add_def_property("spec_sw_default", "0x0");
    this.ERR44.add_def_property("sw_default_mask", "0x0");
    this.ERR44.add_def_property("reset_mask", "0x1");
    this.ERR50 = new("ERR50");
    this.ERR50.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR50.configure(this, 1, 18, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR50.add_def_property("spec_access", "rw");
    this.ERR50.add_def_property("spec_sw_default", "0x0");
    this.ERR50.add_def_property("sw_default_mask", "0x0");
    this.ERR50.add_def_property("reset_mask", "0x1");
    this.ERR40 = new("ERR40");
    this.ERR40.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR40.configure(this, 1, 8, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR40.add_def_property("spec_access", "rw");
    this.ERR40.add_def_property("spec_sw_default", "0x0");
    this.ERR40.add_def_property("sw_default_mask", "0x0");
    this.ERR40.add_def_property("reset_mask", "0x1");
    this.ERR38 = new("ERR38");
    this.ERR38.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR38.configure(this, 1, 6, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR38.add_def_property("spec_access", "rw");
    this.ERR38.add_def_property("spec_sw_default", "0x0");
    this.ERR38.add_def_property("sw_default_mask", "0x0");
    this.ERR38.add_def_property("reset_mask", "0x1");
    this.ERR36 = new("ERR36");
    this.ERR36.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR36.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR36.add_def_property("spec_access", "rw");
    this.ERR36.add_def_property("spec_sw_default", "0x0");
    this.ERR36.add_def_property("sw_default_mask", "0x0");
    this.ERR36.add_def_property("reset_mask", "0x1");
    this.ERR54 = new("ERR54");
    this.ERR54.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR54.configure(this, 1, 22, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR54.add_def_property("spec_access", "rw");
    this.ERR54.add_def_property("spec_sw_default", "0x0");
    this.ERR54.add_def_property("sw_default_mask", "0x0");
    this.ERR54.add_def_property("reset_mask", "0x1");
    this.ERR57 = new("ERR57");
    this.ERR57.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR57.configure(this, 1, 25, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR57.add_def_property("spec_access", "rw");
    this.ERR57.add_def_property("spec_sw_default", "0x0");
    this.ERR57.add_def_property("sw_default_mask", "0x0");
    this.ERR57.add_def_property("reset_mask", "0x1");
    this.ERR60 = new("ERR60");
    this.ERR60.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR60.configure(this, 1, 28, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR60.add_def_property("spec_access", "rw");
    this.ERR60.add_def_property("spec_sw_default", "0x0");
    this.ERR60.add_def_property("sw_default_mask", "0x0");
    this.ERR60.add_def_property("reset_mask", "0x1");
    this.ERR49 = new("ERR49");
    this.ERR49.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR49.configure(this, 1, 17, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR49.add_def_property("spec_access", "rw");
    this.ERR49.add_def_property("spec_sw_default", "0x0");
    this.ERR49.add_def_property("sw_default_mask", "0x0");
    this.ERR49.add_def_property("reset_mask", "0x1");
    this.ERR61 = new("ERR61");
    this.ERR61.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR61.configure(this, 1, 29, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR61.add_def_property("spec_access", "rw");
    this.ERR61.add_def_property("spec_sw_default", "0x0");
    this.ERR61.add_def_property("sw_default_mask", "0x0");
    this.ERR61.add_def_property("reset_mask", "0x1");
    this.ERR55 = new("ERR55");
    this.ERR55.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR55.configure(this, 1, 23, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR55.add_def_property("spec_access", "rw");
    this.ERR55.add_def_property("spec_sw_default", "0x0");
    this.ERR55.add_def_property("sw_default_mask", "0x0");
    this.ERR55.add_def_property("reset_mask", "0x1");
    this.ERR56 = new("ERR56");
    this.ERR56.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR56.configure(this, 1, 24, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR56.add_def_property("spec_access", "rw");
    this.ERR56.add_def_property("spec_sw_default", "0x0");
    this.ERR56.add_def_property("sw_default_mask", "0x0");
    this.ERR56.add_def_property("reset_mask", "0x1");
    this.ERR45 = new("ERR45");
    this.ERR45.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR45.configure(this, 1, 13, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR45.add_def_property("spec_access", "rw");
    this.ERR45.add_def_property("spec_sw_default", "0x0");
    this.ERR45.add_def_property("sw_default_mask", "0x0");
    this.ERR45.add_def_property("reset_mask", "0x1");
    this.ERR62 = new("ERR62");
    this.ERR62.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR62.configure(this, 1, 30, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR62.add_def_property("spec_access", "rw");
    this.ERR62.add_def_property("spec_sw_default", "0x0");
    this.ERR62.add_def_property("sw_default_mask", "0x0");
    this.ERR62.add_def_property("reset_mask", "0x1");
    this.ERR53 = new("ERR53");
    this.ERR53.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR53.configure(this, 1, 21, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR53.add_def_property("spec_access", "rw");
    this.ERR53.add_def_property("spec_sw_default", "0x0");
    this.ERR53.add_def_property("sw_default_mask", "0x0");
    this.ERR53.add_def_property("reset_mask", "0x1");
    this.ERR58 = new("ERR58");
    this.ERR58.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR58.configure(this, 1, 26, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR58.add_def_property("spec_access", "rw");
    this.ERR58.add_def_property("spec_sw_default", "0x0");
    this.ERR58.add_def_property("sw_default_mask", "0x0");
    this.ERR58.add_def_property("reset_mask", "0x1");
    this.ERR41 = new("ERR41");
    this.ERR41.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR41.configure(this, 1, 9, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR41.add_def_property("spec_access", "rw");
    this.ERR41.add_def_property("spec_sw_default", "0x0");
    this.ERR41.add_def_property("sw_default_mask", "0x0");
    this.ERR41.add_def_property("reset_mask", "0x1");
    this.ERR59 = new("ERR59");
    this.ERR59.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR59.configure(this, 1, 27, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR59.add_def_property("spec_access", "rw");
    this.ERR59.add_def_property("spec_sw_default", "0x0");
    this.ERR59.add_def_property("sw_default_mask", "0x0");
    this.ERR59.add_def_property("reset_mask", "0x1");
    this.ERR51 = new("ERR51");
    this.ERR51.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR51.configure(this, 1, 19, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR51.add_def_property("spec_access", "rw");
    this.ERR51.add_def_property("spec_sw_default", "0x0");
    this.ERR51.add_def_property("sw_default_mask", "0x0");
    this.ERR51.add_def_property("reset_mask", "0x1");
    this.ERR52 = new("ERR52");
    this.ERR52.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR52.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR52.add_def_property("spec_access", "rw");
    this.ERR52.add_def_property("spec_sw_default", "0x0");
    this.ERR52.add_def_property("sw_default_mask", "0x0");
    this.ERR52.add_def_property("reset_mask", "0x1");
    this.ERR37 = new("ERR37");
    this.ERR37.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR37.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR37.add_def_property("spec_access", "rw");
    this.ERR37.add_def_property("spec_sw_default", "0x0");
    this.ERR37.add_def_property("sw_default_mask", "0x0");
    this.ERR37.add_def_property("reset_mask", "0x1");
    this.ERR63 = new("ERR63");
    this.ERR63.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR63.configure(this, 1, 31, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR63.add_def_property("spec_access", "rw");
    this.ERR63.add_def_property("spec_sw_default", "0x0");
    this.ERR63.add_def_property("sw_default_mask", "0x0");
    this.ERR63.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR32"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR33"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR34"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR42"}, 10, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR43"}, 11, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR39"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR35"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR47"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR48"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR46"}, 14, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR44"}, 12, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR50"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR40"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR38"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR36"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR54"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR57"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR60"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR49"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR61"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR55"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR56"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR45"}, 13, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR62"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR53"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR58"}, 26, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR41"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR59"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR51"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR52"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR37"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR63"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT

// ERRSLICE1_LATENTERR_ENABLE
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR32;
  rand uvm_reg_field_rdl ERR33;
  rand uvm_reg_field_rdl ERR34;
  rand uvm_reg_field_rdl ERR42;
  rand uvm_reg_field_rdl ERR43;
  rand uvm_reg_field_rdl ERR39;
  rand uvm_reg_field_rdl ERR35;
  rand uvm_reg_field_rdl ERR47;
  rand uvm_reg_field_rdl ERR48;
  rand uvm_reg_field_rdl ERR46;
  rand uvm_reg_field_rdl ERR44;
  rand uvm_reg_field_rdl ERR50;
  rand uvm_reg_field_rdl ERR40;
  rand uvm_reg_field_rdl ERR38;
  rand uvm_reg_field_rdl ERR36;
  rand uvm_reg_field_rdl ERR54;
  rand uvm_reg_field_rdl ERR57;
  rand uvm_reg_field_rdl ERR60;
  rand uvm_reg_field_rdl ERR49;
  rand uvm_reg_field_rdl ERR61;
  rand uvm_reg_field_rdl ERR55;
  rand uvm_reg_field_rdl ERR56;
  rand uvm_reg_field_rdl ERR45;
  rand uvm_reg_field_rdl ERR62;
  rand uvm_reg_field_rdl ERR53;
  rand uvm_reg_field_rdl ERR58;
  rand uvm_reg_field_rdl ERR41;
  rand uvm_reg_field_rdl ERR59;
  rand uvm_reg_field_rdl ERR51;
  rand uvm_reg_field_rdl ERR52;
  rand uvm_reg_field_rdl ERR37;
  rand uvm_reg_field_rdl ERR63;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR32 = new("ERR32");
    this.ERR32.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR32.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR32.add_def_property("spec_access", "rw");
    this.ERR32.add_def_property("spec_sw_default", "0x0");
    this.ERR32.add_def_property("sw_default_mask", "0x0");
    this.ERR32.add_def_property("reset_mask", "0x1");
    this.ERR33 = new("ERR33");
    this.ERR33.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR33.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR33.add_def_property("spec_access", "rw");
    this.ERR33.add_def_property("spec_sw_default", "0x0");
    this.ERR33.add_def_property("sw_default_mask", "0x0");
    this.ERR33.add_def_property("reset_mask", "0x1");
    this.ERR34 = new("ERR34");
    this.ERR34.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR34.configure(this, 1, 2, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR34.add_def_property("spec_access", "rw");
    this.ERR34.add_def_property("spec_sw_default", "0x0");
    this.ERR34.add_def_property("sw_default_mask", "0x0");
    this.ERR34.add_def_property("reset_mask", "0x1");
    this.ERR42 = new("ERR42");
    this.ERR42.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR42.configure(this, 1, 10, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR42.add_def_property("spec_access", "rw");
    this.ERR42.add_def_property("spec_sw_default", "0x0");
    this.ERR42.add_def_property("sw_default_mask", "0x0");
    this.ERR42.add_def_property("reset_mask", "0x1");
    this.ERR43 = new("ERR43");
    this.ERR43.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR43.configure(this, 1, 11, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR43.add_def_property("spec_access", "rw");
    this.ERR43.add_def_property("spec_sw_default", "0x0");
    this.ERR43.add_def_property("sw_default_mask", "0x0");
    this.ERR43.add_def_property("reset_mask", "0x1");
    this.ERR39 = new("ERR39");
    this.ERR39.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR39.configure(this, 1, 7, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR39.add_def_property("spec_access", "rw");
    this.ERR39.add_def_property("spec_sw_default", "0x0");
    this.ERR39.add_def_property("sw_default_mask", "0x0");
    this.ERR39.add_def_property("reset_mask", "0x1");
    this.ERR35 = new("ERR35");
    this.ERR35.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR35.configure(this, 1, 3, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR35.add_def_property("spec_access", "rw");
    this.ERR35.add_def_property("spec_sw_default", "0x0");
    this.ERR35.add_def_property("sw_default_mask", "0x0");
    this.ERR35.add_def_property("reset_mask", "0x1");
    this.ERR47 = new("ERR47");
    this.ERR47.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR47.configure(this, 1, 15, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR47.add_def_property("spec_access", "rw");
    this.ERR47.add_def_property("spec_sw_default", "0x0");
    this.ERR47.add_def_property("sw_default_mask", "0x0");
    this.ERR47.add_def_property("reset_mask", "0x1");
    this.ERR48 = new("ERR48");
    this.ERR48.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR48.configure(this, 1, 16, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR48.add_def_property("spec_access", "rw");
    this.ERR48.add_def_property("spec_sw_default", "0x0");
    this.ERR48.add_def_property("sw_default_mask", "0x0");
    this.ERR48.add_def_property("reset_mask", "0x1");
    this.ERR46 = new("ERR46");
    this.ERR46.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR46.configure(this, 1, 14, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR46.add_def_property("spec_access", "rw");
    this.ERR46.add_def_property("spec_sw_default", "0x0");
    this.ERR46.add_def_property("sw_default_mask", "0x0");
    this.ERR46.add_def_property("reset_mask", "0x1");
    this.ERR44 = new("ERR44");
    this.ERR44.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR44.configure(this, 1, 12, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR44.add_def_property("spec_access", "rw");
    this.ERR44.add_def_property("spec_sw_default", "0x0");
    this.ERR44.add_def_property("sw_default_mask", "0x0");
    this.ERR44.add_def_property("reset_mask", "0x1");
    this.ERR50 = new("ERR50");
    this.ERR50.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR50.configure(this, 1, 18, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR50.add_def_property("spec_access", "rw");
    this.ERR50.add_def_property("spec_sw_default", "0x0");
    this.ERR50.add_def_property("sw_default_mask", "0x0");
    this.ERR50.add_def_property("reset_mask", "0x1");
    this.ERR40 = new("ERR40");
    this.ERR40.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR40.configure(this, 1, 8, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR40.add_def_property("spec_access", "rw");
    this.ERR40.add_def_property("spec_sw_default", "0x0");
    this.ERR40.add_def_property("sw_default_mask", "0x0");
    this.ERR40.add_def_property("reset_mask", "0x1");
    this.ERR38 = new("ERR38");
    this.ERR38.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR38.configure(this, 1, 6, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR38.add_def_property("spec_access", "rw");
    this.ERR38.add_def_property("spec_sw_default", "0x0");
    this.ERR38.add_def_property("sw_default_mask", "0x0");
    this.ERR38.add_def_property("reset_mask", "0x1");
    this.ERR36 = new("ERR36");
    this.ERR36.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR36.configure(this, 1, 4, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR36.add_def_property("spec_access", "rw");
    this.ERR36.add_def_property("spec_sw_default", "0x0");
    this.ERR36.add_def_property("sw_default_mask", "0x0");
    this.ERR36.add_def_property("reset_mask", "0x1");
    this.ERR54 = new("ERR54");
    this.ERR54.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR54.configure(this, 1, 22, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR54.add_def_property("spec_access", "rw");
    this.ERR54.add_def_property("spec_sw_default", "0x0");
    this.ERR54.add_def_property("sw_default_mask", "0x0");
    this.ERR54.add_def_property("reset_mask", "0x1");
    this.ERR57 = new("ERR57");
    this.ERR57.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR57.configure(this, 1, 25, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR57.add_def_property("spec_access", "rw");
    this.ERR57.add_def_property("spec_sw_default", "0x0");
    this.ERR57.add_def_property("sw_default_mask", "0x0");
    this.ERR57.add_def_property("reset_mask", "0x1");
    this.ERR60 = new("ERR60");
    this.ERR60.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR60.configure(this, 1, 28, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR60.add_def_property("spec_access", "rw");
    this.ERR60.add_def_property("spec_sw_default", "0x0");
    this.ERR60.add_def_property("sw_default_mask", "0x0");
    this.ERR60.add_def_property("reset_mask", "0x1");
    this.ERR49 = new("ERR49");
    this.ERR49.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR49.configure(this, 1, 17, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR49.add_def_property("spec_access", "rw");
    this.ERR49.add_def_property("spec_sw_default", "0x0");
    this.ERR49.add_def_property("sw_default_mask", "0x0");
    this.ERR49.add_def_property("reset_mask", "0x1");
    this.ERR61 = new("ERR61");
    this.ERR61.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR61.configure(this, 1, 29, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR61.add_def_property("spec_access", "rw");
    this.ERR61.add_def_property("spec_sw_default", "0x0");
    this.ERR61.add_def_property("sw_default_mask", "0x0");
    this.ERR61.add_def_property("reset_mask", "0x1");
    this.ERR55 = new("ERR55");
    this.ERR55.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR55.configure(this, 1, 23, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR55.add_def_property("spec_access", "rw");
    this.ERR55.add_def_property("spec_sw_default", "0x0");
    this.ERR55.add_def_property("sw_default_mask", "0x0");
    this.ERR55.add_def_property("reset_mask", "0x1");
    this.ERR56 = new("ERR56");
    this.ERR56.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR56.configure(this, 1, 24, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR56.add_def_property("spec_access", "rw");
    this.ERR56.add_def_property("spec_sw_default", "0x0");
    this.ERR56.add_def_property("sw_default_mask", "0x0");
    this.ERR56.add_def_property("reset_mask", "0x1");
    this.ERR45 = new("ERR45");
    this.ERR45.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR45.configure(this, 1, 13, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR45.add_def_property("spec_access", "rw");
    this.ERR45.add_def_property("spec_sw_default", "0x0");
    this.ERR45.add_def_property("sw_default_mask", "0x0");
    this.ERR45.add_def_property("reset_mask", "0x1");
    this.ERR62 = new("ERR62");
    this.ERR62.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR62.configure(this, 1, 30, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR62.add_def_property("spec_access", "rw");
    this.ERR62.add_def_property("spec_sw_default", "0x0");
    this.ERR62.add_def_property("sw_default_mask", "0x0");
    this.ERR62.add_def_property("reset_mask", "0x1");
    this.ERR53 = new("ERR53");
    this.ERR53.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR53.configure(this, 1, 21, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR53.add_def_property("spec_access", "rw");
    this.ERR53.add_def_property("spec_sw_default", "0x0");
    this.ERR53.add_def_property("sw_default_mask", "0x0");
    this.ERR53.add_def_property("reset_mask", "0x1");
    this.ERR58 = new("ERR58");
    this.ERR58.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR58.configure(this, 1, 26, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR58.add_def_property("spec_access", "rw");
    this.ERR58.add_def_property("spec_sw_default", "0x0");
    this.ERR58.add_def_property("sw_default_mask", "0x0");
    this.ERR58.add_def_property("reset_mask", "0x1");
    this.ERR41 = new("ERR41");
    this.ERR41.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR41.configure(this, 1, 9, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR41.add_def_property("spec_access", "rw");
    this.ERR41.add_def_property("spec_sw_default", "0x0");
    this.ERR41.add_def_property("sw_default_mask", "0x0");
    this.ERR41.add_def_property("reset_mask", "0x1");
    this.ERR59 = new("ERR59");
    this.ERR59.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR59.configure(this, 1, 27, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR59.add_def_property("spec_access", "rw");
    this.ERR59.add_def_property("spec_sw_default", "0x0");
    this.ERR59.add_def_property("sw_default_mask", "0x0");
    this.ERR59.add_def_property("reset_mask", "0x1");
    this.ERR51 = new("ERR51");
    this.ERR51.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR51.configure(this, 1, 19, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR51.add_def_property("spec_access", "rw");
    this.ERR51.add_def_property("spec_sw_default", "0x0");
    this.ERR51.add_def_property("sw_default_mask", "0x0");
    this.ERR51.add_def_property("reset_mask", "0x1");
    this.ERR52 = new("ERR52");
    this.ERR52.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR52.configure(this, 1, 20, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR52.add_def_property("spec_access", "rw");
    this.ERR52.add_def_property("spec_sw_default", "0x0");
    this.ERR52.add_def_property("sw_default_mask", "0x0");
    this.ERR52.add_def_property("reset_mask", "0x1");
    this.ERR37 = new("ERR37");
    this.ERR37.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR37.configure(this, 1, 5, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR37.add_def_property("spec_access", "rw");
    this.ERR37.add_def_property("spec_sw_default", "0x0");
    this.ERR37.add_def_property("sw_default_mask", "0x0");
    this.ERR37.add_def_property("reset_mask", "0x1");
    this.ERR63 = new("ERR63");
    this.ERR63.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR63.configure(this, 1, 31, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR63.add_def_property("spec_access", "rw");
    this.ERR63.add_def_property("spec_sw_default", "0x0");
    this.ERR63.add_def_property("sw_default_mask", "0x0");
    this.ERR63.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR32"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR33"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR34"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR42"}, 10, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR43"}, 11, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR39"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR35"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR47"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR48"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR46"}, 14, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR44"}, 12, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR50"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR40"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR38"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR36"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR54"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR57"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR60"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR49"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR61"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR55"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR56"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR45"}, 13, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR62"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR53"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR58"}, 26, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR41"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR59"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR51"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR52"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR37"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR63"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE

// ERRSLICE1_LATENTERR_FORCE
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR32;
  rand uvm_reg_field_rdl ERR33;
  rand uvm_reg_field_rdl ERR34;
  rand uvm_reg_field_rdl ERR42;
  rand uvm_reg_field_rdl ERR43;
  rand uvm_reg_field_rdl ERR39;
  rand uvm_reg_field_rdl ERR35;
  rand uvm_reg_field_rdl ERR47;
  rand uvm_reg_field_rdl ERR48;
  rand uvm_reg_field_rdl ERR46;
  rand uvm_reg_field_rdl ERR44;
  rand uvm_reg_field_rdl ERR50;
  rand uvm_reg_field_rdl ERR40;
  rand uvm_reg_field_rdl ERR38;
  rand uvm_reg_field_rdl ERR36;
  rand uvm_reg_field_rdl ERR54;
  rand uvm_reg_field_rdl ERR57;
  rand uvm_reg_field_rdl ERR60;
  rand uvm_reg_field_rdl ERR49;
  rand uvm_reg_field_rdl ERR61;
  rand uvm_reg_field_rdl ERR55;
  rand uvm_reg_field_rdl ERR56;
  rand uvm_reg_field_rdl ERR45;
  rand uvm_reg_field_rdl ERR62;
  rand uvm_reg_field_rdl ERR53;
  rand uvm_reg_field_rdl ERR58;
  rand uvm_reg_field_rdl ERR41;
  rand uvm_reg_field_rdl ERR59;
  rand uvm_reg_field_rdl ERR51;
  rand uvm_reg_field_rdl ERR52;
  rand uvm_reg_field_rdl ERR37;
  rand uvm_reg_field_rdl ERR63;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR32 = new("ERR32");
    this.ERR32.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR32.configure(this, 1, 0, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR32.add_def_property("spec_access", "w");
    this.ERR32.add_def_property("spec_sw_default", "0x0");
    this.ERR32.add_def_property("sw_default_mask", "0x0");
    this.ERR32.add_def_property("reset_mask", "0x1");
    this.ERR33 = new("ERR33");
    this.ERR33.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR33.configure(this, 1, 1, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR33.add_def_property("spec_access", "w");
    this.ERR33.add_def_property("spec_sw_default", "0x0");
    this.ERR33.add_def_property("sw_default_mask", "0x0");
    this.ERR33.add_def_property("reset_mask", "0x1");
    this.ERR34 = new("ERR34");
    this.ERR34.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR34.configure(this, 1, 2, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR34.add_def_property("spec_access", "w");
    this.ERR34.add_def_property("spec_sw_default", "0x0");
    this.ERR34.add_def_property("sw_default_mask", "0x0");
    this.ERR34.add_def_property("reset_mask", "0x1");
    this.ERR42 = new("ERR42");
    this.ERR42.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR42.configure(this, 1, 10, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR42.add_def_property("spec_access", "w");
    this.ERR42.add_def_property("spec_sw_default", "0x0");
    this.ERR42.add_def_property("sw_default_mask", "0x0");
    this.ERR42.add_def_property("reset_mask", "0x1");
    this.ERR43 = new("ERR43");
    this.ERR43.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR43.configure(this, 1, 11, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR43.add_def_property("spec_access", "w");
    this.ERR43.add_def_property("spec_sw_default", "0x0");
    this.ERR43.add_def_property("sw_default_mask", "0x0");
    this.ERR43.add_def_property("reset_mask", "0x1");
    this.ERR39 = new("ERR39");
    this.ERR39.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR39.configure(this, 1, 7, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR39.add_def_property("spec_access", "w");
    this.ERR39.add_def_property("spec_sw_default", "0x0");
    this.ERR39.add_def_property("sw_default_mask", "0x0");
    this.ERR39.add_def_property("reset_mask", "0x1");
    this.ERR35 = new("ERR35");
    this.ERR35.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR35.configure(this, 1, 3, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR35.add_def_property("spec_access", "w");
    this.ERR35.add_def_property("spec_sw_default", "0x0");
    this.ERR35.add_def_property("sw_default_mask", "0x0");
    this.ERR35.add_def_property("reset_mask", "0x1");
    this.ERR47 = new("ERR47");
    this.ERR47.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR47.configure(this, 1, 15, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR47.add_def_property("spec_access", "w");
    this.ERR47.add_def_property("spec_sw_default", "0x0");
    this.ERR47.add_def_property("sw_default_mask", "0x0");
    this.ERR47.add_def_property("reset_mask", "0x1");
    this.ERR48 = new("ERR48");
    this.ERR48.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR48.configure(this, 1, 16, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR48.add_def_property("spec_access", "w");
    this.ERR48.add_def_property("spec_sw_default", "0x0");
    this.ERR48.add_def_property("sw_default_mask", "0x0");
    this.ERR48.add_def_property("reset_mask", "0x1");
    this.ERR46 = new("ERR46");
    this.ERR46.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR46.configure(this, 1, 14, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR46.add_def_property("spec_access", "w");
    this.ERR46.add_def_property("spec_sw_default", "0x0");
    this.ERR46.add_def_property("sw_default_mask", "0x0");
    this.ERR46.add_def_property("reset_mask", "0x1");
    this.ERR44 = new("ERR44");
    this.ERR44.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR44.configure(this, 1, 12, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR44.add_def_property("spec_access", "w");
    this.ERR44.add_def_property("spec_sw_default", "0x0");
    this.ERR44.add_def_property("sw_default_mask", "0x0");
    this.ERR44.add_def_property("reset_mask", "0x1");
    this.ERR50 = new("ERR50");
    this.ERR50.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR50.configure(this, 1, 18, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR50.add_def_property("spec_access", "w");
    this.ERR50.add_def_property("spec_sw_default", "0x0");
    this.ERR50.add_def_property("sw_default_mask", "0x0");
    this.ERR50.add_def_property("reset_mask", "0x1");
    this.ERR40 = new("ERR40");
    this.ERR40.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR40.configure(this, 1, 8, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR40.add_def_property("spec_access", "w");
    this.ERR40.add_def_property("spec_sw_default", "0x0");
    this.ERR40.add_def_property("sw_default_mask", "0x0");
    this.ERR40.add_def_property("reset_mask", "0x1");
    this.ERR38 = new("ERR38");
    this.ERR38.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR38.configure(this, 1, 6, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR38.add_def_property("spec_access", "w");
    this.ERR38.add_def_property("spec_sw_default", "0x0");
    this.ERR38.add_def_property("sw_default_mask", "0x0");
    this.ERR38.add_def_property("reset_mask", "0x1");
    this.ERR36 = new("ERR36");
    this.ERR36.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR36.configure(this, 1, 4, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR36.add_def_property("spec_access", "w");
    this.ERR36.add_def_property("spec_sw_default", "0x0");
    this.ERR36.add_def_property("sw_default_mask", "0x0");
    this.ERR36.add_def_property("reset_mask", "0x1");
    this.ERR54 = new("ERR54");
    this.ERR54.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR54.configure(this, 1, 22, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR54.add_def_property("spec_access", "w");
    this.ERR54.add_def_property("spec_sw_default", "0x0");
    this.ERR54.add_def_property("sw_default_mask", "0x0");
    this.ERR54.add_def_property("reset_mask", "0x1");
    this.ERR57 = new("ERR57");
    this.ERR57.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR57.configure(this, 1, 25, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR57.add_def_property("spec_access", "w");
    this.ERR57.add_def_property("spec_sw_default", "0x0");
    this.ERR57.add_def_property("sw_default_mask", "0x0");
    this.ERR57.add_def_property("reset_mask", "0x1");
    this.ERR60 = new("ERR60");
    this.ERR60.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR60.configure(this, 1, 28, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR60.add_def_property("spec_access", "w");
    this.ERR60.add_def_property("spec_sw_default", "0x0");
    this.ERR60.add_def_property("sw_default_mask", "0x0");
    this.ERR60.add_def_property("reset_mask", "0x1");
    this.ERR49 = new("ERR49");
    this.ERR49.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR49.configure(this, 1, 17, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR49.add_def_property("spec_access", "w");
    this.ERR49.add_def_property("spec_sw_default", "0x0");
    this.ERR49.add_def_property("sw_default_mask", "0x0");
    this.ERR49.add_def_property("reset_mask", "0x1");
    this.ERR61 = new("ERR61");
    this.ERR61.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR61.configure(this, 1, 29, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR61.add_def_property("spec_access", "w");
    this.ERR61.add_def_property("spec_sw_default", "0x0");
    this.ERR61.add_def_property("sw_default_mask", "0x0");
    this.ERR61.add_def_property("reset_mask", "0x1");
    this.ERR55 = new("ERR55");
    this.ERR55.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR55.configure(this, 1, 23, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR55.add_def_property("spec_access", "w");
    this.ERR55.add_def_property("spec_sw_default", "0x0");
    this.ERR55.add_def_property("sw_default_mask", "0x0");
    this.ERR55.add_def_property("reset_mask", "0x1");
    this.ERR56 = new("ERR56");
    this.ERR56.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR56.configure(this, 1, 24, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR56.add_def_property("spec_access", "w");
    this.ERR56.add_def_property("spec_sw_default", "0x0");
    this.ERR56.add_def_property("sw_default_mask", "0x0");
    this.ERR56.add_def_property("reset_mask", "0x1");
    this.ERR45 = new("ERR45");
    this.ERR45.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR45.configure(this, 1, 13, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR45.add_def_property("spec_access", "w");
    this.ERR45.add_def_property("spec_sw_default", "0x0");
    this.ERR45.add_def_property("sw_default_mask", "0x0");
    this.ERR45.add_def_property("reset_mask", "0x1");
    this.ERR62 = new("ERR62");
    this.ERR62.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR62.configure(this, 1, 30, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR62.add_def_property("spec_access", "w");
    this.ERR62.add_def_property("spec_sw_default", "0x0");
    this.ERR62.add_def_property("sw_default_mask", "0x0");
    this.ERR62.add_def_property("reset_mask", "0x1");
    this.ERR53 = new("ERR53");
    this.ERR53.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR53.configure(this, 1, 21, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR53.add_def_property("spec_access", "w");
    this.ERR53.add_def_property("spec_sw_default", "0x0");
    this.ERR53.add_def_property("sw_default_mask", "0x0");
    this.ERR53.add_def_property("reset_mask", "0x1");
    this.ERR58 = new("ERR58");
    this.ERR58.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR58.configure(this, 1, 26, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR58.add_def_property("spec_access", "w");
    this.ERR58.add_def_property("spec_sw_default", "0x0");
    this.ERR58.add_def_property("sw_default_mask", "0x0");
    this.ERR58.add_def_property("reset_mask", "0x1");
    this.ERR41 = new("ERR41");
    this.ERR41.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR41.configure(this, 1, 9, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR41.add_def_property("spec_access", "w");
    this.ERR41.add_def_property("spec_sw_default", "0x0");
    this.ERR41.add_def_property("sw_default_mask", "0x0");
    this.ERR41.add_def_property("reset_mask", "0x1");
    this.ERR59 = new("ERR59");
    this.ERR59.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR59.configure(this, 1, 27, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR59.add_def_property("spec_access", "w");
    this.ERR59.add_def_property("spec_sw_default", "0x0");
    this.ERR59.add_def_property("sw_default_mask", "0x0");
    this.ERR59.add_def_property("reset_mask", "0x1");
    this.ERR51 = new("ERR51");
    this.ERR51.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR51.configure(this, 1, 19, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR51.add_def_property("spec_access", "w");
    this.ERR51.add_def_property("spec_sw_default", "0x0");
    this.ERR51.add_def_property("sw_default_mask", "0x0");
    this.ERR51.add_def_property("reset_mask", "0x1");
    this.ERR52 = new("ERR52");
    this.ERR52.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR52.configure(this, 1, 20, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR52.add_def_property("spec_access", "w");
    this.ERR52.add_def_property("spec_sw_default", "0x0");
    this.ERR52.add_def_property("sw_default_mask", "0x0");
    this.ERR52.add_def_property("reset_mask", "0x1");
    this.ERR37 = new("ERR37");
    this.ERR37.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR37.configure(this, 1, 5, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR37.add_def_property("spec_access", "w");
    this.ERR37.add_def_property("spec_sw_default", "0x0");
    this.ERR37.add_def_property("sw_default_mask", "0x0");
    this.ERR37.add_def_property("reset_mask", "0x1");
    this.ERR63 = new("ERR63");
    this.ERR63.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR63.configure(this, 1, 31, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR63.add_def_property("spec_access", "w");
    this.ERR63.add_def_property("spec_sw_default", "0x0");
    this.ERR63.add_def_property("sw_default_mask", "0x0");
    this.ERR63.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR32"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR33"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR34"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR42"}, 10, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR43"}, 11, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR39"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR35"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR47"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR48"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR46"}, 14, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR44"}, 12, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR50"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR40"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR38"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR36"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR54"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR57"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR60"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR49"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR61"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR55"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR56"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR45"}, 13, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR62"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR53"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR58"}, 26, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR41"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR59"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR51"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR52"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR37"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR63"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE

// ERRSLICE1_LATENTERR_STATUS
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR32;
  rand uvm_reg_field_rdl ERR33;
  rand uvm_reg_field_rdl ERR34;
  rand uvm_reg_field_rdl ERR42;
  rand uvm_reg_field_rdl ERR43;
  rand uvm_reg_field_rdl ERR39;
  rand uvm_reg_field_rdl ERR35;
  rand uvm_reg_field_rdl ERR47;
  rand uvm_reg_field_rdl ERR48;
  rand uvm_reg_field_rdl ERR46;
  rand uvm_reg_field_rdl ERR44;
  rand uvm_reg_field_rdl ERR50;
  rand uvm_reg_field_rdl ERR40;
  rand uvm_reg_field_rdl ERR38;
  rand uvm_reg_field_rdl ERR36;
  rand uvm_reg_field_rdl ERR54;
  rand uvm_reg_field_rdl ERR57;
  rand uvm_reg_field_rdl ERR60;
  rand uvm_reg_field_rdl ERR49;
  rand uvm_reg_field_rdl ERR61;
  rand uvm_reg_field_rdl ERR55;
  rand uvm_reg_field_rdl ERR56;
  rand uvm_reg_field_rdl ERR45;
  rand uvm_reg_field_rdl ERR62;
  rand uvm_reg_field_rdl ERR53;
  rand uvm_reg_field_rdl ERR58;
  rand uvm_reg_field_rdl ERR41;
  rand uvm_reg_field_rdl ERR59;
  rand uvm_reg_field_rdl ERR51;
  rand uvm_reg_field_rdl ERR52;
  rand uvm_reg_field_rdl ERR37;
  rand uvm_reg_field_rdl ERR63;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR32 = new("ERR32");
    this.ERR32.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR32.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR32.add_def_property("spec_access", "rw");
    this.ERR32.add_def_property("spec_sw_default", "0x0");
    this.ERR32.add_def_property("sw_default_mask", "0x0");
    this.ERR32.add_def_property("reset_mask", "0x1");
    this.ERR33 = new("ERR33");
    this.ERR33.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR33.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR33.add_def_property("spec_access", "rw");
    this.ERR33.add_def_property("spec_sw_default", "0x0");
    this.ERR33.add_def_property("sw_default_mask", "0x0");
    this.ERR33.add_def_property("reset_mask", "0x1");
    this.ERR34 = new("ERR34");
    this.ERR34.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR34.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR34.add_def_property("spec_access", "rw");
    this.ERR34.add_def_property("spec_sw_default", "0x0");
    this.ERR34.add_def_property("sw_default_mask", "0x0");
    this.ERR34.add_def_property("reset_mask", "0x1");
    this.ERR42 = new("ERR42");
    this.ERR42.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR42.configure(this, 1, 10, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR42.add_def_property("spec_access", "rw");
    this.ERR42.add_def_property("spec_sw_default", "0x0");
    this.ERR42.add_def_property("sw_default_mask", "0x0");
    this.ERR42.add_def_property("reset_mask", "0x1");
    this.ERR43 = new("ERR43");
    this.ERR43.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR43.configure(this, 1, 11, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR43.add_def_property("spec_access", "rw");
    this.ERR43.add_def_property("spec_sw_default", "0x0");
    this.ERR43.add_def_property("sw_default_mask", "0x0");
    this.ERR43.add_def_property("reset_mask", "0x1");
    this.ERR39 = new("ERR39");
    this.ERR39.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR39.configure(this, 1, 7, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR39.add_def_property("spec_access", "rw");
    this.ERR39.add_def_property("spec_sw_default", "0x0");
    this.ERR39.add_def_property("sw_default_mask", "0x0");
    this.ERR39.add_def_property("reset_mask", "0x1");
    this.ERR35 = new("ERR35");
    this.ERR35.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR35.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR35.add_def_property("spec_access", "rw");
    this.ERR35.add_def_property("spec_sw_default", "0x0");
    this.ERR35.add_def_property("sw_default_mask", "0x0");
    this.ERR35.add_def_property("reset_mask", "0x1");
    this.ERR47 = new("ERR47");
    this.ERR47.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR47.configure(this, 1, 15, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR47.add_def_property("spec_access", "rw");
    this.ERR47.add_def_property("spec_sw_default", "0x0");
    this.ERR47.add_def_property("sw_default_mask", "0x0");
    this.ERR47.add_def_property("reset_mask", "0x1");
    this.ERR48 = new("ERR48");
    this.ERR48.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR48.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR48.add_def_property("spec_access", "rw");
    this.ERR48.add_def_property("spec_sw_default", "0x0");
    this.ERR48.add_def_property("sw_default_mask", "0x0");
    this.ERR48.add_def_property("reset_mask", "0x1");
    this.ERR46 = new("ERR46");
    this.ERR46.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR46.configure(this, 1, 14, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR46.add_def_property("spec_access", "rw");
    this.ERR46.add_def_property("spec_sw_default", "0x0");
    this.ERR46.add_def_property("sw_default_mask", "0x0");
    this.ERR46.add_def_property("reset_mask", "0x1");
    this.ERR44 = new("ERR44");
    this.ERR44.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR44.configure(this, 1, 12, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR44.add_def_property("spec_access", "rw");
    this.ERR44.add_def_property("spec_sw_default", "0x0");
    this.ERR44.add_def_property("sw_default_mask", "0x0");
    this.ERR44.add_def_property("reset_mask", "0x1");
    this.ERR50 = new("ERR50");
    this.ERR50.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR50.configure(this, 1, 18, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR50.add_def_property("spec_access", "rw");
    this.ERR50.add_def_property("spec_sw_default", "0x0");
    this.ERR50.add_def_property("sw_default_mask", "0x0");
    this.ERR50.add_def_property("reset_mask", "0x1");
    this.ERR40 = new("ERR40");
    this.ERR40.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR40.configure(this, 1, 8, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR40.add_def_property("spec_access", "rw");
    this.ERR40.add_def_property("spec_sw_default", "0x0");
    this.ERR40.add_def_property("sw_default_mask", "0x0");
    this.ERR40.add_def_property("reset_mask", "0x1");
    this.ERR38 = new("ERR38");
    this.ERR38.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR38.configure(this, 1, 6, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR38.add_def_property("spec_access", "rw");
    this.ERR38.add_def_property("spec_sw_default", "0x0");
    this.ERR38.add_def_property("sw_default_mask", "0x0");
    this.ERR38.add_def_property("reset_mask", "0x1");
    this.ERR36 = new("ERR36");
    this.ERR36.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR36.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR36.add_def_property("spec_access", "rw");
    this.ERR36.add_def_property("spec_sw_default", "0x0");
    this.ERR36.add_def_property("sw_default_mask", "0x0");
    this.ERR36.add_def_property("reset_mask", "0x1");
    this.ERR54 = new("ERR54");
    this.ERR54.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR54.configure(this, 1, 22, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR54.add_def_property("spec_access", "rw");
    this.ERR54.add_def_property("spec_sw_default", "0x0");
    this.ERR54.add_def_property("sw_default_mask", "0x0");
    this.ERR54.add_def_property("reset_mask", "0x1");
    this.ERR57 = new("ERR57");
    this.ERR57.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR57.configure(this, 1, 25, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR57.add_def_property("spec_access", "rw");
    this.ERR57.add_def_property("spec_sw_default", "0x0");
    this.ERR57.add_def_property("sw_default_mask", "0x0");
    this.ERR57.add_def_property("reset_mask", "0x1");
    this.ERR60 = new("ERR60");
    this.ERR60.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR60.configure(this, 1, 28, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR60.add_def_property("spec_access", "rw");
    this.ERR60.add_def_property("spec_sw_default", "0x0");
    this.ERR60.add_def_property("sw_default_mask", "0x0");
    this.ERR60.add_def_property("reset_mask", "0x1");
    this.ERR49 = new("ERR49");
    this.ERR49.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR49.configure(this, 1, 17, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR49.add_def_property("spec_access", "rw");
    this.ERR49.add_def_property("spec_sw_default", "0x0");
    this.ERR49.add_def_property("sw_default_mask", "0x0");
    this.ERR49.add_def_property("reset_mask", "0x1");
    this.ERR61 = new("ERR61");
    this.ERR61.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR61.configure(this, 1, 29, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR61.add_def_property("spec_access", "rw");
    this.ERR61.add_def_property("spec_sw_default", "0x0");
    this.ERR61.add_def_property("sw_default_mask", "0x0");
    this.ERR61.add_def_property("reset_mask", "0x1");
    this.ERR55 = new("ERR55");
    this.ERR55.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR55.configure(this, 1, 23, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR55.add_def_property("spec_access", "rw");
    this.ERR55.add_def_property("spec_sw_default", "0x0");
    this.ERR55.add_def_property("sw_default_mask", "0x0");
    this.ERR55.add_def_property("reset_mask", "0x1");
    this.ERR56 = new("ERR56");
    this.ERR56.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR56.configure(this, 1, 24, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR56.add_def_property("spec_access", "rw");
    this.ERR56.add_def_property("spec_sw_default", "0x0");
    this.ERR56.add_def_property("sw_default_mask", "0x0");
    this.ERR56.add_def_property("reset_mask", "0x1");
    this.ERR45 = new("ERR45");
    this.ERR45.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR45.configure(this, 1, 13, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR45.add_def_property("spec_access", "rw");
    this.ERR45.add_def_property("spec_sw_default", "0x0");
    this.ERR45.add_def_property("sw_default_mask", "0x0");
    this.ERR45.add_def_property("reset_mask", "0x1");
    this.ERR62 = new("ERR62");
    this.ERR62.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR62.configure(this, 1, 30, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR62.add_def_property("spec_access", "rw");
    this.ERR62.add_def_property("spec_sw_default", "0x0");
    this.ERR62.add_def_property("sw_default_mask", "0x0");
    this.ERR62.add_def_property("reset_mask", "0x1");
    this.ERR53 = new("ERR53");
    this.ERR53.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR53.configure(this, 1, 21, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR53.add_def_property("spec_access", "rw");
    this.ERR53.add_def_property("spec_sw_default", "0x0");
    this.ERR53.add_def_property("sw_default_mask", "0x0");
    this.ERR53.add_def_property("reset_mask", "0x1");
    this.ERR58 = new("ERR58");
    this.ERR58.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR58.configure(this, 1, 26, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR58.add_def_property("spec_access", "rw");
    this.ERR58.add_def_property("spec_sw_default", "0x0");
    this.ERR58.add_def_property("sw_default_mask", "0x0");
    this.ERR58.add_def_property("reset_mask", "0x1");
    this.ERR41 = new("ERR41");
    this.ERR41.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR41.configure(this, 1, 9, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR41.add_def_property("spec_access", "rw");
    this.ERR41.add_def_property("spec_sw_default", "0x0");
    this.ERR41.add_def_property("sw_default_mask", "0x0");
    this.ERR41.add_def_property("reset_mask", "0x1");
    this.ERR59 = new("ERR59");
    this.ERR59.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR59.configure(this, 1, 27, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR59.add_def_property("spec_access", "rw");
    this.ERR59.add_def_property("spec_sw_default", "0x0");
    this.ERR59.add_def_property("sw_default_mask", "0x0");
    this.ERR59.add_def_property("reset_mask", "0x1");
    this.ERR51 = new("ERR51");
    this.ERR51.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR51.configure(this, 1, 19, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR51.add_def_property("spec_access", "rw");
    this.ERR51.add_def_property("spec_sw_default", "0x0");
    this.ERR51.add_def_property("sw_default_mask", "0x0");
    this.ERR51.add_def_property("reset_mask", "0x1");
    this.ERR52 = new("ERR52");
    this.ERR52.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR52.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR52.add_def_property("spec_access", "rw");
    this.ERR52.add_def_property("spec_sw_default", "0x0");
    this.ERR52.add_def_property("sw_default_mask", "0x0");
    this.ERR52.add_def_property("reset_mask", "0x1");
    this.ERR37 = new("ERR37");
    this.ERR37.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR37.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR37.add_def_property("spec_access", "rw");
    this.ERR37.add_def_property("spec_sw_default", "0x0");
    this.ERR37.add_def_property("sw_default_mask", "0x0");
    this.ERR37.add_def_property("reset_mask", "0x1");
    this.ERR63 = new("ERR63");
    this.ERR63.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR63.configure(this, 1, 31, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR63.add_def_property("spec_access", "rw");
    this.ERR63.add_def_property("spec_sw_default", "0x0");
    this.ERR63.add_def_property("sw_default_mask", "0x0");
    this.ERR63.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR32"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR33"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR34"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR42"}, 10, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR43"}, 11, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR39"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR35"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR47"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR48"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR46"}, 14, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR44"}, 12, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR50"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR40"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR38"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR36"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR54"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR57"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR60"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR49"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR61"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR55"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR56"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR45"}, 13, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR62"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR53"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR58"}, 26, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR41"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR59"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR51"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR52"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR37"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR63"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS

// ERRSLICE1_COUNTER_RELOAD
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR32;
  rand uvm_reg_field_rdl ERR33;
  rand uvm_reg_field_rdl ERR34;
  rand uvm_reg_field_rdl ERR42;
  rand uvm_reg_field_rdl ERR43;
  rand uvm_reg_field_rdl ERR39;
  rand uvm_reg_field_rdl ERR35;
  rand uvm_reg_field_rdl ERR47;
  rand uvm_reg_field_rdl ERR48;
  rand uvm_reg_field_rdl ERR46;
  rand uvm_reg_field_rdl ERR44;
  rand uvm_reg_field_rdl ERR50;
  rand uvm_reg_field_rdl ERR40;
  rand uvm_reg_field_rdl ERR38;
  rand uvm_reg_field_rdl ERR36;
  rand uvm_reg_field_rdl ERR54;
  rand uvm_reg_field_rdl ERR57;
  rand uvm_reg_field_rdl ERR60;
  rand uvm_reg_field_rdl ERR49;
  rand uvm_reg_field_rdl ERR61;
  rand uvm_reg_field_rdl ERR55;
  rand uvm_reg_field_rdl ERR56;
  rand uvm_reg_field_rdl ERR45;
  rand uvm_reg_field_rdl ERR62;
  rand uvm_reg_field_rdl ERR53;
  rand uvm_reg_field_rdl ERR58;
  rand uvm_reg_field_rdl ERR41;
  rand uvm_reg_field_rdl ERR59;
  rand uvm_reg_field_rdl ERR51;
  rand uvm_reg_field_rdl ERR52;
  rand uvm_reg_field_rdl ERR37;
  rand uvm_reg_field_rdl ERR63;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR32 = new("ERR32");
    this.ERR32.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR32.configure(this, 1, 0, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR32.add_def_property("spec_access", "w");
    this.ERR32.add_def_property("spec_sw_default", "0x0");
    this.ERR32.add_def_property("sw_default_mask", "0x0");
    this.ERR32.add_def_property("reset_mask", "0x1");
    this.ERR33 = new("ERR33");
    this.ERR33.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR33.configure(this, 1, 1, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR33.add_def_property("spec_access", "w");
    this.ERR33.add_def_property("spec_sw_default", "0x0");
    this.ERR33.add_def_property("sw_default_mask", "0x0");
    this.ERR33.add_def_property("reset_mask", "0x1");
    this.ERR34 = new("ERR34");
    this.ERR34.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR34.configure(this, 1, 2, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR34.add_def_property("spec_access", "w");
    this.ERR34.add_def_property("spec_sw_default", "0x0");
    this.ERR34.add_def_property("sw_default_mask", "0x0");
    this.ERR34.add_def_property("reset_mask", "0x1");
    this.ERR42 = new("ERR42");
    this.ERR42.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR42.configure(this, 1, 10, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR42.add_def_property("spec_access", "w");
    this.ERR42.add_def_property("spec_sw_default", "0x0");
    this.ERR42.add_def_property("sw_default_mask", "0x0");
    this.ERR42.add_def_property("reset_mask", "0x1");
    this.ERR43 = new("ERR43");
    this.ERR43.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR43.configure(this, 1, 11, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR43.add_def_property("spec_access", "w");
    this.ERR43.add_def_property("spec_sw_default", "0x0");
    this.ERR43.add_def_property("sw_default_mask", "0x0");
    this.ERR43.add_def_property("reset_mask", "0x1");
    this.ERR39 = new("ERR39");
    this.ERR39.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR39.configure(this, 1, 7, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR39.add_def_property("spec_access", "w");
    this.ERR39.add_def_property("spec_sw_default", "0x0");
    this.ERR39.add_def_property("sw_default_mask", "0x0");
    this.ERR39.add_def_property("reset_mask", "0x1");
    this.ERR35 = new("ERR35");
    this.ERR35.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR35.configure(this, 1, 3, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR35.add_def_property("spec_access", "w");
    this.ERR35.add_def_property("spec_sw_default", "0x0");
    this.ERR35.add_def_property("sw_default_mask", "0x0");
    this.ERR35.add_def_property("reset_mask", "0x1");
    this.ERR47 = new("ERR47");
    this.ERR47.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR47.configure(this, 1, 15, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR47.add_def_property("spec_access", "w");
    this.ERR47.add_def_property("spec_sw_default", "0x0");
    this.ERR47.add_def_property("sw_default_mask", "0x0");
    this.ERR47.add_def_property("reset_mask", "0x1");
    this.ERR48 = new("ERR48");
    this.ERR48.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR48.configure(this, 1, 16, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR48.add_def_property("spec_access", "w");
    this.ERR48.add_def_property("spec_sw_default", "0x0");
    this.ERR48.add_def_property("sw_default_mask", "0x0");
    this.ERR48.add_def_property("reset_mask", "0x1");
    this.ERR46 = new("ERR46");
    this.ERR46.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR46.configure(this, 1, 14, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR46.add_def_property("spec_access", "w");
    this.ERR46.add_def_property("spec_sw_default", "0x0");
    this.ERR46.add_def_property("sw_default_mask", "0x0");
    this.ERR46.add_def_property("reset_mask", "0x1");
    this.ERR44 = new("ERR44");
    this.ERR44.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR44.configure(this, 1, 12, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR44.add_def_property("spec_access", "w");
    this.ERR44.add_def_property("spec_sw_default", "0x0");
    this.ERR44.add_def_property("sw_default_mask", "0x0");
    this.ERR44.add_def_property("reset_mask", "0x1");
    this.ERR50 = new("ERR50");
    this.ERR50.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR50.configure(this, 1, 18, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR50.add_def_property("spec_access", "w");
    this.ERR50.add_def_property("spec_sw_default", "0x0");
    this.ERR50.add_def_property("sw_default_mask", "0x0");
    this.ERR50.add_def_property("reset_mask", "0x1");
    this.ERR40 = new("ERR40");
    this.ERR40.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR40.configure(this, 1, 8, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR40.add_def_property("spec_access", "w");
    this.ERR40.add_def_property("spec_sw_default", "0x0");
    this.ERR40.add_def_property("sw_default_mask", "0x0");
    this.ERR40.add_def_property("reset_mask", "0x1");
    this.ERR38 = new("ERR38");
    this.ERR38.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR38.configure(this, 1, 6, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR38.add_def_property("spec_access", "w");
    this.ERR38.add_def_property("spec_sw_default", "0x0");
    this.ERR38.add_def_property("sw_default_mask", "0x0");
    this.ERR38.add_def_property("reset_mask", "0x1");
    this.ERR36 = new("ERR36");
    this.ERR36.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR36.configure(this, 1, 4, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR36.add_def_property("spec_access", "w");
    this.ERR36.add_def_property("spec_sw_default", "0x0");
    this.ERR36.add_def_property("sw_default_mask", "0x0");
    this.ERR36.add_def_property("reset_mask", "0x1");
    this.ERR54 = new("ERR54");
    this.ERR54.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR54.configure(this, 1, 22, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR54.add_def_property("spec_access", "w");
    this.ERR54.add_def_property("spec_sw_default", "0x0");
    this.ERR54.add_def_property("sw_default_mask", "0x0");
    this.ERR54.add_def_property("reset_mask", "0x1");
    this.ERR57 = new("ERR57");
    this.ERR57.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR57.configure(this, 1, 25, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR57.add_def_property("spec_access", "w");
    this.ERR57.add_def_property("spec_sw_default", "0x0");
    this.ERR57.add_def_property("sw_default_mask", "0x0");
    this.ERR57.add_def_property("reset_mask", "0x1");
    this.ERR60 = new("ERR60");
    this.ERR60.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR60.configure(this, 1, 28, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR60.add_def_property("spec_access", "w");
    this.ERR60.add_def_property("spec_sw_default", "0x0");
    this.ERR60.add_def_property("sw_default_mask", "0x0");
    this.ERR60.add_def_property("reset_mask", "0x1");
    this.ERR49 = new("ERR49");
    this.ERR49.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR49.configure(this, 1, 17, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR49.add_def_property("spec_access", "w");
    this.ERR49.add_def_property("spec_sw_default", "0x0");
    this.ERR49.add_def_property("sw_default_mask", "0x0");
    this.ERR49.add_def_property("reset_mask", "0x1");
    this.ERR61 = new("ERR61");
    this.ERR61.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR61.configure(this, 1, 29, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR61.add_def_property("spec_access", "w");
    this.ERR61.add_def_property("spec_sw_default", "0x0");
    this.ERR61.add_def_property("sw_default_mask", "0x0");
    this.ERR61.add_def_property("reset_mask", "0x1");
    this.ERR55 = new("ERR55");
    this.ERR55.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR55.configure(this, 1, 23, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR55.add_def_property("spec_access", "w");
    this.ERR55.add_def_property("spec_sw_default", "0x0");
    this.ERR55.add_def_property("sw_default_mask", "0x0");
    this.ERR55.add_def_property("reset_mask", "0x1");
    this.ERR56 = new("ERR56");
    this.ERR56.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR56.configure(this, 1, 24, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR56.add_def_property("spec_access", "w");
    this.ERR56.add_def_property("spec_sw_default", "0x0");
    this.ERR56.add_def_property("sw_default_mask", "0x0");
    this.ERR56.add_def_property("reset_mask", "0x1");
    this.ERR45 = new("ERR45");
    this.ERR45.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR45.configure(this, 1, 13, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR45.add_def_property("spec_access", "w");
    this.ERR45.add_def_property("spec_sw_default", "0x0");
    this.ERR45.add_def_property("sw_default_mask", "0x0");
    this.ERR45.add_def_property("reset_mask", "0x1");
    this.ERR62 = new("ERR62");
    this.ERR62.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR62.configure(this, 1, 30, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR62.add_def_property("spec_access", "w");
    this.ERR62.add_def_property("spec_sw_default", "0x0");
    this.ERR62.add_def_property("sw_default_mask", "0x0");
    this.ERR62.add_def_property("reset_mask", "0x1");
    this.ERR53 = new("ERR53");
    this.ERR53.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR53.configure(this, 1, 21, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR53.add_def_property("spec_access", "w");
    this.ERR53.add_def_property("spec_sw_default", "0x0");
    this.ERR53.add_def_property("sw_default_mask", "0x0");
    this.ERR53.add_def_property("reset_mask", "0x1");
    this.ERR58 = new("ERR58");
    this.ERR58.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR58.configure(this, 1, 26, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR58.add_def_property("spec_access", "w");
    this.ERR58.add_def_property("spec_sw_default", "0x0");
    this.ERR58.add_def_property("sw_default_mask", "0x0");
    this.ERR58.add_def_property("reset_mask", "0x1");
    this.ERR41 = new("ERR41");
    this.ERR41.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR41.configure(this, 1, 9, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR41.add_def_property("spec_access", "w");
    this.ERR41.add_def_property("spec_sw_default", "0x0");
    this.ERR41.add_def_property("sw_default_mask", "0x0");
    this.ERR41.add_def_property("reset_mask", "0x1");
    this.ERR59 = new("ERR59");
    this.ERR59.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR59.configure(this, 1, 27, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR59.add_def_property("spec_access", "w");
    this.ERR59.add_def_property("spec_sw_default", "0x0");
    this.ERR59.add_def_property("sw_default_mask", "0x0");
    this.ERR59.add_def_property("reset_mask", "0x1");
    this.ERR51 = new("ERR51");
    this.ERR51.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR51.configure(this, 1, 19, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR51.add_def_property("spec_access", "w");
    this.ERR51.add_def_property("spec_sw_default", "0x0");
    this.ERR51.add_def_property("sw_default_mask", "0x0");
    this.ERR51.add_def_property("reset_mask", "0x1");
    this.ERR52 = new("ERR52");
    this.ERR52.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR52.configure(this, 1, 20, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR52.add_def_property("spec_access", "w");
    this.ERR52.add_def_property("spec_sw_default", "0x0");
    this.ERR52.add_def_property("sw_default_mask", "0x0");
    this.ERR52.add_def_property("reset_mask", "0x1");
    this.ERR37 = new("ERR37");
    this.ERR37.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR37.configure(this, 1, 5, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR37.add_def_property("spec_access", "w");
    this.ERR37.add_def_property("spec_sw_default", "0x0");
    this.ERR37.add_def_property("sw_default_mask", "0x0");
    this.ERR37.add_def_property("reset_mask", "0x1");
    this.ERR63 = new("ERR63");
    this.ERR63.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR63.configure(this, 1, 31, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR63.add_def_property("spec_access", "w");
    this.ERR63.add_def_property("spec_sw_default", "0x0");
    this.ERR63.add_def_property("sw_default_mask", "0x0");
    this.ERR63.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR32"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR33"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR34"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR42"}, 10, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR43"}, 11, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR39"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR35"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR47"}, 15, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR48"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR46"}, 14, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR44"}, 12, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR50"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR40"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR38"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR36"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR54"}, 22, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR57"}, 25, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR60"}, 28, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR49"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR61"}, 29, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR55"}, 23, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR56"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR45"}, 13, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR62"}, 30, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR53"}, 21, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR58"}, 26, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR41"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR59"}, 27, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR51"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR52"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR37"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR63"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD

// ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR63;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR63 = new("ERR63");
    this.ERR63.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR63.configure(this, 1, 31, "RW", 0, 1'h0, 1, 1, 1);
    this.ERR63.add_def_property("spec_access", "rw");
    this.ERR63.add_def_property("spec_sw_default", "0x0");
    this.ERR63.add_def_property("sw_default_mask", "0x0");
    this.ERR63.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR63"}, 31, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS

// ERRSLICE2_MISSIONERR_ENABLE
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR64;
  rand uvm_reg_field_rdl ERR65;
  rand uvm_reg_field_rdl ERR66;
  rand uvm_reg_field_rdl ERR67;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR64 = new("ERR64");
    this.ERR64.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR64.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR64.add_def_property("spec_access", "rw");
    this.ERR64.add_def_property("spec_sw_default", "0x0");
    this.ERR64.add_def_property("sw_default_mask", "0x0");
    this.ERR64.add_def_property("reset_mask", "0x1");
    this.ERR65 = new("ERR65");
    this.ERR65.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR65.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR65.add_def_property("spec_access", "rw");
    this.ERR65.add_def_property("spec_sw_default", "0x0");
    this.ERR65.add_def_property("sw_default_mask", "0x0");
    this.ERR65.add_def_property("reset_mask", "0x1");
    this.ERR66 = new("ERR66");
    this.ERR66.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR66.configure(this, 1, 2, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR66.add_def_property("spec_access", "rw");
    this.ERR66.add_def_property("spec_sw_default", "0x0");
    this.ERR66.add_def_property("sw_default_mask", "0x0");
    this.ERR66.add_def_property("reset_mask", "0x1");
    this.ERR67 = new("ERR67");
    this.ERR67.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR67.configure(this, 1, 3, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR67.add_def_property("spec_access", "rw");
    this.ERR67.add_def_property("spec_sw_default", "0x0");
    this.ERR67.add_def_property("sw_default_mask", "0x0");
    this.ERR67.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR64"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR65"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR66"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR67"}, 3, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE

// ERRSLICE2_MISSIONERR_FORCE
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR64;
  rand uvm_reg_field_rdl ERR65;
  rand uvm_reg_field_rdl ERR66;
  rand uvm_reg_field_rdl ERR67;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR64 = new("ERR64");
    this.ERR64.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR64.configure(this, 1, 0, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR64.add_def_property("spec_access", "w");
    this.ERR64.add_def_property("spec_sw_default", "0x0");
    this.ERR64.add_def_property("sw_default_mask", "0x0");
    this.ERR64.add_def_property("reset_mask", "0x1");
    this.ERR65 = new("ERR65");
    this.ERR65.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR65.configure(this, 1, 1, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR65.add_def_property("spec_access", "w");
    this.ERR65.add_def_property("spec_sw_default", "0x0");
    this.ERR65.add_def_property("sw_default_mask", "0x0");
    this.ERR65.add_def_property("reset_mask", "0x1");
    this.ERR66 = new("ERR66");
    this.ERR66.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR66.configure(this, 1, 2, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR66.add_def_property("spec_access", "w");
    this.ERR66.add_def_property("spec_sw_default", "0x0");
    this.ERR66.add_def_property("sw_default_mask", "0x0");
    this.ERR66.add_def_property("reset_mask", "0x1");
    this.ERR67 = new("ERR67");
    this.ERR67.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR67.configure(this, 1, 3, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR67.add_def_property("spec_access", "w");
    this.ERR67.add_def_property("spec_sw_default", "0x0");
    this.ERR67.add_def_property("sw_default_mask", "0x0");
    this.ERR67.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR64"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR65"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR66"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR67"}, 3, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE

// ERRSLICE2_MISSIONERR_STATUS
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR64;
  rand uvm_reg_field_rdl ERR65;
  rand uvm_reg_field_rdl ERR66;
  rand uvm_reg_field_rdl ERR67;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR64 = new("ERR64");
    this.ERR64.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR64.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR64.add_def_property("spec_access", "rw");
    this.ERR64.add_def_property("spec_sw_default", "0x0");
    this.ERR64.add_def_property("sw_default_mask", "0x0");
    this.ERR64.add_def_property("reset_mask", "0x1");
    this.ERR65 = new("ERR65");
    this.ERR65.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR65.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR65.add_def_property("spec_access", "rw");
    this.ERR65.add_def_property("spec_sw_default", "0x0");
    this.ERR65.add_def_property("sw_default_mask", "0x0");
    this.ERR65.add_def_property("reset_mask", "0x1");
    this.ERR66 = new("ERR66");
    this.ERR66.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR66.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR66.add_def_property("spec_access", "rw");
    this.ERR66.add_def_property("spec_sw_default", "0x0");
    this.ERR66.add_def_property("sw_default_mask", "0x0");
    this.ERR66.add_def_property("reset_mask", "0x1");
    this.ERR67 = new("ERR67");
    this.ERR67.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR67.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR67.add_def_property("spec_access", "rw");
    this.ERR67.add_def_property("spec_sw_default", "0x0");
    this.ERR67.add_def_property("sw_default_mask", "0x0");
    this.ERR67.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR64"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR65"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR66"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR67"}, 3, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS

// ERRSLICE2_MISSIONERR_INJECT
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR64;
  rand uvm_reg_field_rdl ERR65;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR64 = new("ERR64");
    this.ERR64.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR64.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR64.add_def_property("spec_access", "rw");
    this.ERR64.add_def_property("spec_sw_default", "0x0");
    this.ERR64.add_def_property("sw_default_mask", "0x0");
    this.ERR64.add_def_property("reset_mask", "0x1");
    this.ERR65 = new("ERR65");
    this.ERR65.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR65.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR65.add_def_property("spec_access", "rw");
    this.ERR65.add_def_property("spec_sw_default", "0x0");
    this.ERR65.add_def_property("sw_default_mask", "0x0");
    this.ERR65.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR64"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR65"}, 1, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT

// ERRSLICE2_LATENTERR_ENABLE
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR64;
  rand uvm_reg_field_rdl ERR65;
  rand uvm_reg_field_rdl ERR66;
  rand uvm_reg_field_rdl ERR67;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR64 = new("ERR64");
    this.ERR64.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR64.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR64.add_def_property("spec_access", "rw");
    this.ERR64.add_def_property("spec_sw_default", "0x0");
    this.ERR64.add_def_property("sw_default_mask", "0x0");
    this.ERR64.add_def_property("reset_mask", "0x1");
    this.ERR65 = new("ERR65");
    this.ERR65.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR65.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR65.add_def_property("spec_access", "rw");
    this.ERR65.add_def_property("spec_sw_default", "0x0");
    this.ERR65.add_def_property("sw_default_mask", "0x0");
    this.ERR65.add_def_property("reset_mask", "0x1");
    this.ERR66 = new("ERR66");
    this.ERR66.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR66.configure(this, 1, 2, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR66.add_def_property("spec_access", "rw");
    this.ERR66.add_def_property("spec_sw_default", "0x0");
    this.ERR66.add_def_property("sw_default_mask", "0x0");
    this.ERR66.add_def_property("reset_mask", "0x1");
    this.ERR67 = new("ERR67");
    this.ERR67.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR67.configure(this, 1, 3, "RW", 0, 1'h1, 1, 1, 0);
    this.ERR67.add_def_property("spec_access", "rw");
    this.ERR67.add_def_property("spec_sw_default", "0x0");
    this.ERR67.add_def_property("sw_default_mask", "0x0");
    this.ERR67.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR64"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR65"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR66"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR67"}, 3, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE

// ERRSLICE2_LATENTERR_FORCE
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR64;
  rand uvm_reg_field_rdl ERR65;
  rand uvm_reg_field_rdl ERR66;
  rand uvm_reg_field_rdl ERR67;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR64 = new("ERR64");
    this.ERR64.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR64.configure(this, 1, 0, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR64.add_def_property("spec_access", "w");
    this.ERR64.add_def_property("spec_sw_default", "0x0");
    this.ERR64.add_def_property("sw_default_mask", "0x0");
    this.ERR64.add_def_property("reset_mask", "0x1");
    this.ERR65 = new("ERR65");
    this.ERR65.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR65.configure(this, 1, 1, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR65.add_def_property("spec_access", "w");
    this.ERR65.add_def_property("spec_sw_default", "0x0");
    this.ERR65.add_def_property("sw_default_mask", "0x0");
    this.ERR65.add_def_property("reset_mask", "0x1");
    this.ERR66 = new("ERR66");
    this.ERR66.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR66.configure(this, 1, 2, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR66.add_def_property("spec_access", "w");
    this.ERR66.add_def_property("spec_sw_default", "0x0");
    this.ERR66.add_def_property("sw_default_mask", "0x0");
    this.ERR66.add_def_property("reset_mask", "0x1");
    this.ERR67 = new("ERR67");
    this.ERR67.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR67.configure(this, 1, 3, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR67.add_def_property("spec_access", "w");
    this.ERR67.add_def_property("spec_sw_default", "0x0");
    this.ERR67.add_def_property("sw_default_mask", "0x0");
    this.ERR67.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR64"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR65"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR66"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR67"}, 3, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE

// ERRSLICE2_LATENTERR_STATUS
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR64;
  rand uvm_reg_field_rdl ERR65;
  rand uvm_reg_field_rdl ERR66;
  rand uvm_reg_field_rdl ERR67;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR64 = new("ERR64");
    this.ERR64.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR64.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR64.add_def_property("spec_access", "rw");
    this.ERR64.add_def_property("spec_sw_default", "0x0");
    this.ERR64.add_def_property("sw_default_mask", "0x0");
    this.ERR64.add_def_property("reset_mask", "0x1");
    this.ERR65 = new("ERR65");
    this.ERR65.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR65.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR65.add_def_property("spec_access", "rw");
    this.ERR65.add_def_property("spec_sw_default", "0x0");
    this.ERR65.add_def_property("sw_default_mask", "0x0");
    this.ERR65.add_def_property("reset_mask", "0x1");
    this.ERR66 = new("ERR66");
    this.ERR66.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR66.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR66.add_def_property("spec_access", "rw");
    this.ERR66.add_def_property("spec_sw_default", "0x0");
    this.ERR66.add_def_property("sw_default_mask", "0x0");
    this.ERR66.add_def_property("reset_mask", "0x1");
    this.ERR67 = new("ERR67");
    this.ERR67.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERR67.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.ERR67.add_def_property("spec_access", "rw");
    this.ERR67.add_def_property("spec_sw_default", "0x0");
    this.ERR67.add_def_property("sw_default_mask", "0x0");
    this.ERR67.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR64"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR65"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR66"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR67"}, 3, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS

// ERRSLICE2_COUNTER_RELOAD
class reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERR64;
  rand uvm_reg_field_rdl ERR65;
  rand uvm_reg_field_rdl ERR66;
  rand uvm_reg_field_rdl ERR67;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERR64 = new("ERR64");
    this.ERR64.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR64.configure(this, 1, 0, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR64.add_def_property("spec_access", "w");
    this.ERR64.add_def_property("spec_sw_default", "0x0");
    this.ERR64.add_def_property("sw_default_mask", "0x0");
    this.ERR64.add_def_property("reset_mask", "0x1");
    this.ERR65 = new("ERR65");
    this.ERR65.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR65.configure(this, 1, 1, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR65.add_def_property("spec_access", "w");
    this.ERR65.add_def_property("spec_sw_default", "0x0");
    this.ERR65.add_def_property("sw_default_mask", "0x0");
    this.ERR65.add_def_property("reset_mask", "0x1");
    this.ERR66 = new("ERR66");
    this.ERR66.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR66.configure(this, 1, 2, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR66.add_def_property("spec_access", "w");
    this.ERR66.add_def_property("spec_sw_default", "0x0");
    this.ERR66.add_def_property("sw_default_mask", "0x0");
    this.ERR66.add_def_property("reset_mask", "0x1");
    this.ERR67 = new("ERR67");
    this.ERR67.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.ERR67.configure(this, 1, 3, "WO", 0, 1'h0, 1, 1, 0);
    this.ERR67.add_def_property("spec_access", "w");
    this.ERR67.add_def_property("spec_sw_default", "0x0");
    this.ERR67.add_def_property("sw_default_mask", "0x0");
    this.ERR67.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERR64"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR65"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR66"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "ERR67"}, 3, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD

// Block NVDLA_GEC
class block_addrmap_NVDLA_NVDLA_GEC extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_GEC_FEATURE FEATURE;
  rand reg_addrmap_NVDLA_NVDLA_GEC_SWRESET SWRESET;
  rand reg_addrmap_NVDLA_NVDLA_GEC_MISSIONERR_TYPE MISSIONERR_TYPE;
  rand reg_addrmap_NVDLA_NVDLA_GEC_CURRENT_COUNTER_VALUE CURRENT_COUNTER_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_GEC_MISSIONERR_INDEX MISSIONERR_INDEX;
  rand reg_addrmap_NVDLA_NVDLA_GEC_CORRECTABLE_THRESHOLD CORRECTABLE_THRESHOLD;
  rand reg_addrmap_NVDLA_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK MISSIONERR_INJECT_UNLOCK;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE ERRSLICE0_MISSIONERR_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE ERRSLICE0_MISSIONERR_FORCE;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS ERRSLICE0_MISSIONERR_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT ERRSLICE0_MISSIONERR_INJECT;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE ERRSLICE0_LATENTERR_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE ERRSLICE0_LATENTERR_FORCE;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS ERRSLICE0_LATENTERR_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD ERRSLICE0_COUNTER_RELOAD;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE ERRSLICE1_MISSIONERR_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE ERRSLICE1_MISSIONERR_FORCE;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS ERRSLICE1_MISSIONERR_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT ERRSLICE1_MISSIONERR_INJECT;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE ERRSLICE1_LATENTERR_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE ERRSLICE1_LATENTERR_FORCE;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS ERRSLICE1_LATENTERR_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD ERRSLICE1_COUNTER_RELOAD;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE ERRSLICE2_MISSIONERR_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE ERRSLICE2_MISSIONERR_FORCE;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS ERRSLICE2_MISSIONERR_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT ERRSLICE2_MISSIONERR_INJECT;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE ERRSLICE2_LATENTERR_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE ERRSLICE2_LATENTERR_FORCE;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS ERRSLICE2_LATENTERR_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD ERRSLICE2_COUNTER_RELOAD;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_GEC");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.FEATURE = new("FEATURE");
    this.FEATURE.configure(this, null, "");
    this.FEATURE.set_rdl_tag("FEATURE_");
    this.FEATURE.set_reg_test_info(0, 0, 0);
    this.FEATURE.build();
    this.default_map.add_reg(this.FEATURE, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.SWRESET = new("SWRESET");
    this.SWRESET.configure(this, null, "");
    this.SWRESET.set_rdl_tag("SWRESET_");
    this.SWRESET.set_reg_test_info(0, 0, 2);
    this.SWRESET.build();
    this.default_map.add_reg(this.SWRESET, `UVM_REG_ADDR_WIDTH'h4, "WO", 0);
    this.MISSIONERR_TYPE = new("MISSIONERR_TYPE");
    this.MISSIONERR_TYPE.configure(this, null, "");
    this.MISSIONERR_TYPE.set_rdl_tag("MISSIONERR_TYPE_");
    this.MISSIONERR_TYPE.set_reg_test_info(0, 0, 32);
    this.MISSIONERR_TYPE.build();
    this.default_map.add_reg(this.MISSIONERR_TYPE, `UVM_REG_ADDR_WIDTH'h8, "RO", 0);
    this.CURRENT_COUNTER_VALUE = new("CURRENT_COUNTER_VALUE");
    this.CURRENT_COUNTER_VALUE.configure(this, null, "");
    this.CURRENT_COUNTER_VALUE.set_rdl_tag("CURRENT_COUNTER_VALUE_");
    this.CURRENT_COUNTER_VALUE.set_reg_test_info(0, 0, 32);
    this.CURRENT_COUNTER_VALUE.build();
    this.default_map.add_reg(this.CURRENT_COUNTER_VALUE, `UVM_REG_ADDR_WIDTH'hc, "RO", 0);
    this.MISSIONERR_INDEX = new("MISSIONERR_INDEX");
    this.MISSIONERR_INDEX.configure(this, null, "");
    this.MISSIONERR_INDEX.set_rdl_tag("MISSIONERR_INDEX_");
    this.MISSIONERR_INDEX.set_reg_test_info(0, 0, 2);
    this.MISSIONERR_INDEX.build();
    this.default_map.add_reg(this.MISSIONERR_INDEX, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.CORRECTABLE_THRESHOLD = new("CORRECTABLE_THRESHOLD");
    this.CORRECTABLE_THRESHOLD.configure(this, null, "");
    this.CORRECTABLE_THRESHOLD.set_rdl_tag("CORRECTABLE_THRESHOLD_");
    this.CORRECTABLE_THRESHOLD.set_reg_test_info(0, 0, 2);
    this.CORRECTABLE_THRESHOLD.build();
    this.default_map.add_reg(this.CORRECTABLE_THRESHOLD, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.MISSIONERR_INJECT_UNLOCK = new("MISSIONERR_INJECT_UNLOCK");
    this.MISSIONERR_INJECT_UNLOCK.configure(this, null, "");
    this.MISSIONERR_INJECT_UNLOCK.set_rdl_tag("MISSIONERR_INJECT_UNLOCK_");
    this.MISSIONERR_INJECT_UNLOCK.set_reg_test_info(0, 0, 2);
    this.MISSIONERR_INJECT_UNLOCK.build();
    this.default_map.add_reg(this.MISSIONERR_INJECT_UNLOCK, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.ERRSLICE0_MISSIONERR_ENABLE = new("ERRSLICE0_MISSIONERR_ENABLE");
    this.ERRSLICE0_MISSIONERR_ENABLE.configure(this, null, "");
    this.ERRSLICE0_MISSIONERR_ENABLE.set_rdl_tag("ERRSLICE0_MISSIONERR_ENABLE_");
    this.ERRSLICE0_MISSIONERR_ENABLE.set_reg_test_info(0, 0, 2);
    this.ERRSLICE0_MISSIONERR_ENABLE.build();
    this.default_map.add_reg(this.ERRSLICE0_MISSIONERR_ENABLE, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.ERRSLICE0_MISSIONERR_FORCE = new("ERRSLICE0_MISSIONERR_FORCE");
    this.ERRSLICE0_MISSIONERR_FORCE.configure(this, null, "");
    this.ERRSLICE0_MISSIONERR_FORCE.set_rdl_tag("ERRSLICE0_MISSIONERR_FORCE_");
    this.ERRSLICE0_MISSIONERR_FORCE.set_reg_test_info(0, 0, 2);
    this.ERRSLICE0_MISSIONERR_FORCE.build();
    this.default_map.add_reg(this.ERRSLICE0_MISSIONERR_FORCE, `UVM_REG_ADDR_WIDTH'h34, "WO", 0);
    this.ERRSLICE0_MISSIONERR_STATUS = new("ERRSLICE0_MISSIONERR_STATUS");
    this.ERRSLICE0_MISSIONERR_STATUS.configure(this, null, "");
    this.ERRSLICE0_MISSIONERR_STATUS.set_rdl_tag("ERRSLICE0_MISSIONERR_STATUS_");
    this.ERRSLICE0_MISSIONERR_STATUS.set_reg_test_info(0, 0, 2);
    this.ERRSLICE0_MISSIONERR_STATUS.build();
    this.default_map.add_reg(this.ERRSLICE0_MISSIONERR_STATUS, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.ERRSLICE0_MISSIONERR_INJECT = new("ERRSLICE0_MISSIONERR_INJECT");
    this.ERRSLICE0_MISSIONERR_INJECT.configure(this, null, "");
    this.ERRSLICE0_MISSIONERR_INJECT.set_rdl_tag("ERRSLICE0_MISSIONERR_INJECT_");
    this.ERRSLICE0_MISSIONERR_INJECT.set_reg_test_info(0, 0, 2);
    this.ERRSLICE0_MISSIONERR_INJECT.build();
    this.default_map.add_reg(this.ERRSLICE0_MISSIONERR_INJECT, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.ERRSLICE0_LATENTERR_ENABLE = new("ERRSLICE0_LATENTERR_ENABLE");
    this.ERRSLICE0_LATENTERR_ENABLE.configure(this, null, "");
    this.ERRSLICE0_LATENTERR_ENABLE.set_rdl_tag("ERRSLICE0_LATENTERR_ENABLE_");
    this.ERRSLICE0_LATENTERR_ENABLE.set_reg_test_info(0, 0, 2);
    this.ERRSLICE0_LATENTERR_ENABLE.build();
    this.default_map.add_reg(this.ERRSLICE0_LATENTERR_ENABLE, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.ERRSLICE0_LATENTERR_FORCE = new("ERRSLICE0_LATENTERR_FORCE");
    this.ERRSLICE0_LATENTERR_FORCE.configure(this, null, "");
    this.ERRSLICE0_LATENTERR_FORCE.set_rdl_tag("ERRSLICE0_LATENTERR_FORCE_");
    this.ERRSLICE0_LATENTERR_FORCE.set_reg_test_info(0, 0, 2);
    this.ERRSLICE0_LATENTERR_FORCE.build();
    this.default_map.add_reg(this.ERRSLICE0_LATENTERR_FORCE, `UVM_REG_ADDR_WIDTH'h44, "WO", 0);
    this.ERRSLICE0_LATENTERR_STATUS = new("ERRSLICE0_LATENTERR_STATUS");
    this.ERRSLICE0_LATENTERR_STATUS.configure(this, null, "");
    this.ERRSLICE0_LATENTERR_STATUS.set_rdl_tag("ERRSLICE0_LATENTERR_STATUS_");
    this.ERRSLICE0_LATENTERR_STATUS.set_reg_test_info(0, 0, 2);
    this.ERRSLICE0_LATENTERR_STATUS.build();
    this.default_map.add_reg(this.ERRSLICE0_LATENTERR_STATUS, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.ERRSLICE0_COUNTER_RELOAD = new("ERRSLICE0_COUNTER_RELOAD");
    this.ERRSLICE0_COUNTER_RELOAD.configure(this, null, "");
    this.ERRSLICE0_COUNTER_RELOAD.set_rdl_tag("ERRSLICE0_COUNTER_RELOAD_");
    this.ERRSLICE0_COUNTER_RELOAD.set_reg_test_info(0, 0, 2);
    this.ERRSLICE0_COUNTER_RELOAD.build();
    this.default_map.add_reg(this.ERRSLICE0_COUNTER_RELOAD, `UVM_REG_ADDR_WIDTH'h50, "WO", 0);
    this.ERRSLICE1_MISSIONERR_ENABLE = new("ERRSLICE1_MISSIONERR_ENABLE");
    this.ERRSLICE1_MISSIONERR_ENABLE.configure(this, null, "");
    this.ERRSLICE1_MISSIONERR_ENABLE.set_rdl_tag("ERRSLICE1_MISSIONERR_ENABLE_");
    this.ERRSLICE1_MISSIONERR_ENABLE.set_reg_test_info(0, 0, 2);
    this.ERRSLICE1_MISSIONERR_ENABLE.build();
    this.default_map.add_reg(this.ERRSLICE1_MISSIONERR_ENABLE, `UVM_REG_ADDR_WIDTH'h60, "RW", 0);
    this.ERRSLICE1_MISSIONERR_FORCE = new("ERRSLICE1_MISSIONERR_FORCE");
    this.ERRSLICE1_MISSIONERR_FORCE.configure(this, null, "");
    this.ERRSLICE1_MISSIONERR_FORCE.set_rdl_tag("ERRSLICE1_MISSIONERR_FORCE_");
    this.ERRSLICE1_MISSIONERR_FORCE.set_reg_test_info(0, 0, 2);
    this.ERRSLICE1_MISSIONERR_FORCE.build();
    this.default_map.add_reg(this.ERRSLICE1_MISSIONERR_FORCE, `UVM_REG_ADDR_WIDTH'h64, "WO", 0);
    this.ERRSLICE1_MISSIONERR_STATUS = new("ERRSLICE1_MISSIONERR_STATUS");
    this.ERRSLICE1_MISSIONERR_STATUS.configure(this, null, "");
    this.ERRSLICE1_MISSIONERR_STATUS.set_rdl_tag("ERRSLICE1_MISSIONERR_STATUS_");
    this.ERRSLICE1_MISSIONERR_STATUS.set_reg_test_info(0, 0, 2);
    this.ERRSLICE1_MISSIONERR_STATUS.build();
    this.default_map.add_reg(this.ERRSLICE1_MISSIONERR_STATUS, `UVM_REG_ADDR_WIDTH'h68, "RW", 0);
    this.ERRSLICE1_MISSIONERR_INJECT = new("ERRSLICE1_MISSIONERR_INJECT");
    this.ERRSLICE1_MISSIONERR_INJECT.configure(this, null, "");
    this.ERRSLICE1_MISSIONERR_INJECT.set_rdl_tag("ERRSLICE1_MISSIONERR_INJECT_");
    this.ERRSLICE1_MISSIONERR_INJECT.set_reg_test_info(0, 0, 2);
    this.ERRSLICE1_MISSIONERR_INJECT.build();
    this.default_map.add_reg(this.ERRSLICE1_MISSIONERR_INJECT, `UVM_REG_ADDR_WIDTH'h6c, "RW", 0);
    this.ERRSLICE1_LATENTERR_ENABLE = new("ERRSLICE1_LATENTERR_ENABLE");
    this.ERRSLICE1_LATENTERR_ENABLE.configure(this, null, "");
    this.ERRSLICE1_LATENTERR_ENABLE.set_rdl_tag("ERRSLICE1_LATENTERR_ENABLE_");
    this.ERRSLICE1_LATENTERR_ENABLE.set_reg_test_info(0, 0, 2);
    this.ERRSLICE1_LATENTERR_ENABLE.build();
    this.default_map.add_reg(this.ERRSLICE1_LATENTERR_ENABLE, `UVM_REG_ADDR_WIDTH'h70, "RW", 0);
    this.ERRSLICE1_LATENTERR_FORCE = new("ERRSLICE1_LATENTERR_FORCE");
    this.ERRSLICE1_LATENTERR_FORCE.configure(this, null, "");
    this.ERRSLICE1_LATENTERR_FORCE.set_rdl_tag("ERRSLICE1_LATENTERR_FORCE_");
    this.ERRSLICE1_LATENTERR_FORCE.set_reg_test_info(0, 0, 2);
    this.ERRSLICE1_LATENTERR_FORCE.build();
    this.default_map.add_reg(this.ERRSLICE1_LATENTERR_FORCE, `UVM_REG_ADDR_WIDTH'h74, "WO", 0);
    this.ERRSLICE1_LATENTERR_STATUS = new("ERRSLICE1_LATENTERR_STATUS");
    this.ERRSLICE1_LATENTERR_STATUS.configure(this, null, "");
    this.ERRSLICE1_LATENTERR_STATUS.set_rdl_tag("ERRSLICE1_LATENTERR_STATUS_");
    this.ERRSLICE1_LATENTERR_STATUS.set_reg_test_info(0, 0, 2);
    this.ERRSLICE1_LATENTERR_STATUS.build();
    this.default_map.add_reg(this.ERRSLICE1_LATENTERR_STATUS, `UVM_REG_ADDR_WIDTH'h78, "RW", 0);
    this.ERRSLICE1_COUNTER_RELOAD = new("ERRSLICE1_COUNTER_RELOAD");
    this.ERRSLICE1_COUNTER_RELOAD.configure(this, null, "");
    this.ERRSLICE1_COUNTER_RELOAD.set_rdl_tag("ERRSLICE1_COUNTER_RELOAD_");
    this.ERRSLICE1_COUNTER_RELOAD.set_reg_test_info(0, 0, 2);
    this.ERRSLICE1_COUNTER_RELOAD.build();
    this.default_map.add_reg(this.ERRSLICE1_COUNTER_RELOAD, `UVM_REG_ADDR_WIDTH'h80, "WO", 0);
    this.ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS = new("ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS");
    this.ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS.configure(this, null, "");
    this.ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS.set_rdl_tag("ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS_");
    this.ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS.set_reg_test_info(0, 0, 2);
    this.ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS.build();
    this.default_map.add_reg(this.ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS, `UVM_REG_ADDR_WIDTH'h84, "RW", 0);
    this.ERRSLICE2_MISSIONERR_ENABLE = new("ERRSLICE2_MISSIONERR_ENABLE");
    this.ERRSLICE2_MISSIONERR_ENABLE.configure(this, null, "");
    this.ERRSLICE2_MISSIONERR_ENABLE.set_rdl_tag("ERRSLICE2_MISSIONERR_ENABLE_");
    this.ERRSLICE2_MISSIONERR_ENABLE.set_reg_test_info(0, 0, 2);
    this.ERRSLICE2_MISSIONERR_ENABLE.build();
    this.default_map.add_reg(this.ERRSLICE2_MISSIONERR_ENABLE, `UVM_REG_ADDR_WIDTH'h90, "RW", 0);
    this.ERRSLICE2_MISSIONERR_FORCE = new("ERRSLICE2_MISSIONERR_FORCE");
    this.ERRSLICE2_MISSIONERR_FORCE.configure(this, null, "");
    this.ERRSLICE2_MISSIONERR_FORCE.set_rdl_tag("ERRSLICE2_MISSIONERR_FORCE_");
    this.ERRSLICE2_MISSIONERR_FORCE.set_reg_test_info(0, 0, 2);
    this.ERRSLICE2_MISSIONERR_FORCE.build();
    this.default_map.add_reg(this.ERRSLICE2_MISSIONERR_FORCE, `UVM_REG_ADDR_WIDTH'h94, "WO", 0);
    this.ERRSLICE2_MISSIONERR_STATUS = new("ERRSLICE2_MISSIONERR_STATUS");
    this.ERRSLICE2_MISSIONERR_STATUS.configure(this, null, "");
    this.ERRSLICE2_MISSIONERR_STATUS.set_rdl_tag("ERRSLICE2_MISSIONERR_STATUS_");
    this.ERRSLICE2_MISSIONERR_STATUS.set_reg_test_info(0, 0, 2);
    this.ERRSLICE2_MISSIONERR_STATUS.build();
    this.default_map.add_reg(this.ERRSLICE2_MISSIONERR_STATUS, `UVM_REG_ADDR_WIDTH'h98, "RW", 0);
    this.ERRSLICE2_MISSIONERR_INJECT = new("ERRSLICE2_MISSIONERR_INJECT");
    this.ERRSLICE2_MISSIONERR_INJECT.configure(this, null, "");
    this.ERRSLICE2_MISSIONERR_INJECT.set_rdl_tag("ERRSLICE2_MISSIONERR_INJECT_");
    this.ERRSLICE2_MISSIONERR_INJECT.set_reg_test_info(0, 0, 2);
    this.ERRSLICE2_MISSIONERR_INJECT.build();
    this.default_map.add_reg(this.ERRSLICE2_MISSIONERR_INJECT, `UVM_REG_ADDR_WIDTH'h9c, "RW", 0);
    this.ERRSLICE2_LATENTERR_ENABLE = new("ERRSLICE2_LATENTERR_ENABLE");
    this.ERRSLICE2_LATENTERR_ENABLE.configure(this, null, "");
    this.ERRSLICE2_LATENTERR_ENABLE.set_rdl_tag("ERRSLICE2_LATENTERR_ENABLE_");
    this.ERRSLICE2_LATENTERR_ENABLE.set_reg_test_info(0, 0, 2);
    this.ERRSLICE2_LATENTERR_ENABLE.build();
    this.default_map.add_reg(this.ERRSLICE2_LATENTERR_ENABLE, `UVM_REG_ADDR_WIDTH'ha0, "RW", 0);
    this.ERRSLICE2_LATENTERR_FORCE = new("ERRSLICE2_LATENTERR_FORCE");
    this.ERRSLICE2_LATENTERR_FORCE.configure(this, null, "");
    this.ERRSLICE2_LATENTERR_FORCE.set_rdl_tag("ERRSLICE2_LATENTERR_FORCE_");
    this.ERRSLICE2_LATENTERR_FORCE.set_reg_test_info(0, 0, 2);
    this.ERRSLICE2_LATENTERR_FORCE.build();
    this.default_map.add_reg(this.ERRSLICE2_LATENTERR_FORCE, `UVM_REG_ADDR_WIDTH'ha4, "WO", 0);
    this.ERRSLICE2_LATENTERR_STATUS = new("ERRSLICE2_LATENTERR_STATUS");
    this.ERRSLICE2_LATENTERR_STATUS.configure(this, null, "");
    this.ERRSLICE2_LATENTERR_STATUS.set_rdl_tag("ERRSLICE2_LATENTERR_STATUS_");
    this.ERRSLICE2_LATENTERR_STATUS.set_reg_test_info(0, 0, 2);
    this.ERRSLICE2_LATENTERR_STATUS.build();
    this.default_map.add_reg(this.ERRSLICE2_LATENTERR_STATUS, `UVM_REG_ADDR_WIDTH'ha8, "RW", 0);
    this.ERRSLICE2_COUNTER_RELOAD = new("ERRSLICE2_COUNTER_RELOAD");
    this.ERRSLICE2_COUNTER_RELOAD.configure(this, null, "");
    this.ERRSLICE2_COUNTER_RELOAD.set_rdl_tag("ERRSLICE2_COUNTER_RELOAD_");
    this.ERRSLICE2_COUNTER_RELOAD.set_reg_test_info(0, 0, 2);
    this.ERRSLICE2_COUNTER_RELOAD.build();
    this.default_map.add_reg(this.ERRSLICE2_COUNTER_RELOAD, `UVM_REG_ADDR_WIDTH'hb0, "WO", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_GEC)
endclass : block_addrmap_NVDLA_NVDLA_GEC

// CFG_RD_WEIGHT_0
class reg_addrmap_NVDLA_NVDLA_CVIF_CFG_RD_WEIGHT_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RD_WEIGHT_BDMA;
  rand uvm_reg_field_rdl RD_WEIGHT_SDP;
  rand uvm_reg_field_rdl RD_WEIGHT_PDP;
  rand uvm_reg_field_rdl RD_WEIGHT_CDP;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CVIF_CFG_RD_WEIGHT_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RD_WEIGHT_BDMA = new("RD_WEIGHT_BDMA");
    this.RD_WEIGHT_BDMA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_BDMA.configure(this, 8, 0, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_BDMA.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_BDMA.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_BDMA.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_BDMA.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_SDP = new("RD_WEIGHT_SDP");
    this.RD_WEIGHT_SDP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_SDP.configure(this, 8, 8, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_SDP.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_SDP.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_SDP.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_SDP.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_PDP = new("RD_WEIGHT_PDP");
    this.RD_WEIGHT_PDP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_PDP.configure(this, 8, 16, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_PDP.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_PDP.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_PDP.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_PDP.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_CDP = new("RD_WEIGHT_CDP");
    this.RD_WEIGHT_CDP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_CDP.configure(this, 8, 24, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_CDP.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_CDP.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_CDP.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_CDP.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_BDMA"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_SDP"}, 8, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_PDP"}, 16, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_CDP"}, 24, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CVIF_CFG_RD_WEIGHT_0

// CFG_RD_WEIGHT_1
class reg_addrmap_NVDLA_NVDLA_CVIF_CFG_RD_WEIGHT_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RD_WEIGHT_SDP_B;
  rand uvm_reg_field_rdl RD_WEIGHT_SDP_N;
  rand uvm_reg_field_rdl RD_WEIGHT_SDP_E;
  rand uvm_reg_field_rdl RD_WEIGHT_CDMA_DAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CVIF_CFG_RD_WEIGHT_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RD_WEIGHT_SDP_B = new("RD_WEIGHT_SDP_B");
    this.RD_WEIGHT_SDP_B.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_SDP_B.configure(this, 8, 0, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_SDP_B.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_SDP_B.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_SDP_B.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_SDP_B.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_SDP_N = new("RD_WEIGHT_SDP_N");
    this.RD_WEIGHT_SDP_N.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_SDP_N.configure(this, 8, 8, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_SDP_N.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_SDP_N.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_SDP_N.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_SDP_N.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_SDP_E = new("RD_WEIGHT_SDP_E");
    this.RD_WEIGHT_SDP_E.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_SDP_E.configure(this, 8, 16, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_SDP_E.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_SDP_E.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_SDP_E.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_SDP_E.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_CDMA_DAT = new("RD_WEIGHT_CDMA_DAT");
    this.RD_WEIGHT_CDMA_DAT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_CDMA_DAT.configure(this, 8, 24, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_CDMA_DAT.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_CDMA_DAT.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_CDMA_DAT.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_CDMA_DAT.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_SDP_B"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_SDP_N"}, 8, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_SDP_E"}, 16, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_CDMA_DAT"}, 24, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CVIF_CFG_RD_WEIGHT_1

// CFG_RD_WEIGHT_2
class reg_addrmap_NVDLA_NVDLA_CVIF_CFG_RD_WEIGHT_2 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RD_WEIGHT_CDMA_WT;
  rand uvm_reg_field_rdl RD_WEIGHT_RBK;
  rand uvm_reg_field_rdl RD_WEIGHT_RSV_1;
  rand uvm_reg_field_rdl RD_WEIGHT_RSV_0;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CVIF_CFG_RD_WEIGHT_2");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RD_WEIGHT_CDMA_WT = new("RD_WEIGHT_CDMA_WT");
    this.RD_WEIGHT_CDMA_WT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_CDMA_WT.configure(this, 8, 0, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_CDMA_WT.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_CDMA_WT.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_CDMA_WT.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_CDMA_WT.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_RBK = new("RD_WEIGHT_RBK");
    this.RD_WEIGHT_RBK.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_RBK.configure(this, 8, 8, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_RBK.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_RBK.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_RBK.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_RBK.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_RSV_1 = new("RD_WEIGHT_RSV_1");
    this.RD_WEIGHT_RSV_1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_RSV_1.configure(this, 8, 16, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_RSV_1.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_RSV_1.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_RSV_1.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_RSV_1.add_def_property("reset_mask", "0xff");
    this.RD_WEIGHT_RSV_0 = new("RD_WEIGHT_RSV_0");
    this.RD_WEIGHT_RSV_0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_WEIGHT_RSV_0.configure(this, 8, 24, "RW", 0, 8'h1, 1, 1, 0);
    this.RD_WEIGHT_RSV_0.add_def_property("spec_access", "rw");
    this.RD_WEIGHT_RSV_0.add_def_property("spec_sw_default", "0x0");
    this.RD_WEIGHT_RSV_0.add_def_property("sw_default_mask", "0x0");
    this.RD_WEIGHT_RSV_0.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_CDMA_WT"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_RBK"}, 8, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_RSV_1"}, 16, 8);
    add_hdl_path_slice({rdl_reg_name, "RD_WEIGHT_RSV_0"}, 24, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CVIF_CFG_RD_WEIGHT_2

// CFG_WR_WEIGHT_0
class reg_addrmap_NVDLA_NVDLA_CVIF_CFG_WR_WEIGHT_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WR_WEIGHT_BDMA;
  rand uvm_reg_field_rdl WR_WEIGHT_SDP;
  rand uvm_reg_field_rdl WR_WEIGHT_PDP;
  rand uvm_reg_field_rdl WR_WEIGHT_CDP;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CVIF_CFG_WR_WEIGHT_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WR_WEIGHT_BDMA = new("WR_WEIGHT_BDMA");
    this.WR_WEIGHT_BDMA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_BDMA.configure(this, 8, 0, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_BDMA.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_BDMA.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_BDMA.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_BDMA.add_def_property("reset_mask", "0xff");
    this.WR_WEIGHT_SDP = new("WR_WEIGHT_SDP");
    this.WR_WEIGHT_SDP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_SDP.configure(this, 8, 8, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_SDP.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_SDP.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_SDP.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_SDP.add_def_property("reset_mask", "0xff");
    this.WR_WEIGHT_PDP = new("WR_WEIGHT_PDP");
    this.WR_WEIGHT_PDP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_PDP.configure(this, 8, 16, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_PDP.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_PDP.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_PDP.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_PDP.add_def_property("reset_mask", "0xff");
    this.WR_WEIGHT_CDP = new("WR_WEIGHT_CDP");
    this.WR_WEIGHT_CDP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_CDP.configure(this, 8, 24, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_CDP.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_CDP.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_CDP.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_CDP.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_BDMA"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_SDP"}, 8, 8);
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_PDP"}, 16, 8);
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_CDP"}, 24, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CVIF_CFG_WR_WEIGHT_0

// CFG_WR_WEIGHT_1
class reg_addrmap_NVDLA_NVDLA_CVIF_CFG_WR_WEIGHT_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WR_WEIGHT_RBK;
  rand uvm_reg_field_rdl WR_WEIGHT_RSV_2;
  rand uvm_reg_field_rdl WR_WEIGHT_RSV_1;
  rand uvm_reg_field_rdl WR_WEIGHT_RSV_0;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CVIF_CFG_WR_WEIGHT_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WR_WEIGHT_RBK = new("WR_WEIGHT_RBK");
    this.WR_WEIGHT_RBK.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_RBK.configure(this, 8, 0, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_RBK.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_RBK.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_RBK.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_RBK.add_def_property("reset_mask", "0xff");
    this.WR_WEIGHT_RSV_2 = new("WR_WEIGHT_RSV_2");
    this.WR_WEIGHT_RSV_2.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_RSV_2.configure(this, 8, 8, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_RSV_2.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_RSV_2.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_RSV_2.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_RSV_2.add_def_property("reset_mask", "0xff");
    this.WR_WEIGHT_RSV_1 = new("WR_WEIGHT_RSV_1");
    this.WR_WEIGHT_RSV_1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_RSV_1.configure(this, 8, 16, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_RSV_1.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_RSV_1.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_RSV_1.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_RSV_1.add_def_property("reset_mask", "0xff");
    this.WR_WEIGHT_RSV_0 = new("WR_WEIGHT_RSV_0");
    this.WR_WEIGHT_RSV_0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_WEIGHT_RSV_0.configure(this, 8, 24, "RW", 0, 8'h1, 1, 1, 0);
    this.WR_WEIGHT_RSV_0.add_def_property("spec_access", "rw");
    this.WR_WEIGHT_RSV_0.add_def_property("spec_sw_default", "0x0");
    this.WR_WEIGHT_RSV_0.add_def_property("sw_default_mask", "0x0");
    this.WR_WEIGHT_RSV_0.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_RBK"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_RSV_2"}, 8, 8);
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_RSV_1"}, 16, 8);
    add_hdl_path_slice({rdl_reg_name, "WR_WEIGHT_RSV_0"}, 24, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CVIF_CFG_WR_WEIGHT_1

// CFG_OUTSTANDING_CNT
class reg_addrmap_NVDLA_NVDLA_CVIF_CFG_OUTSTANDING_CNT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RD_OS_CNT;
  rand uvm_reg_field_rdl WR_OS_CNT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CVIF_CFG_OUTSTANDING_CNT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RD_OS_CNT = new("RD_OS_CNT");
    this.RD_OS_CNT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RD_OS_CNT.configure(this, 8, 0, "RW", 0, 8'hff, 1, 1, 0);
    this.RD_OS_CNT.add_def_property("spec_access", "rw");
    this.RD_OS_CNT.add_def_property("spec_sw_default", "0x0");
    this.RD_OS_CNT.add_def_property("sw_default_mask", "0x0");
    this.RD_OS_CNT.add_def_property("reset_mask", "0xff");
    this.WR_OS_CNT = new("WR_OS_CNT");
    this.WR_OS_CNT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WR_OS_CNT.configure(this, 8, 8, "RW", 0, 8'hff, 1, 1, 0);
    this.WR_OS_CNT.add_def_property("spec_access", "rw");
    this.WR_OS_CNT.add_def_property("spec_sw_default", "0x0");
    this.WR_OS_CNT.add_def_property("sw_default_mask", "0x0");
    this.WR_OS_CNT.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RD_OS_CNT"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "WR_OS_CNT"}, 8, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CVIF_CFG_OUTSTANDING_CNT

// STATUS
class reg_addrmap_NVDLA_NVDLA_CVIF_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl IDLE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CVIF_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.IDLE = new("IDLE");
    this.IDLE.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.IDLE.configure(this, 1, 8, "RO", 1, 1'h1, 1, 0, 1);
    this.IDLE.add_def_property("spec_access", "r");
    this.IDLE.add_def_property("spec_sw_default", "0x0");
    this.IDLE.add_def_property("sw_default_mask", "0x0");
    this.IDLE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "IDLE"}, 8, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CVIF_STATUS

// Block NVDLA_CVIF
class block_addrmap_NVDLA_NVDLA_CVIF extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_CVIF_CFG_RD_WEIGHT_0 CFG_RD_WEIGHT_0;
  rand reg_addrmap_NVDLA_NVDLA_CVIF_CFG_RD_WEIGHT_1 CFG_RD_WEIGHT_1;
  rand reg_addrmap_NVDLA_NVDLA_CVIF_CFG_RD_WEIGHT_2 CFG_RD_WEIGHT_2;
  rand reg_addrmap_NVDLA_NVDLA_CVIF_CFG_WR_WEIGHT_0 CFG_WR_WEIGHT_0;
  rand reg_addrmap_NVDLA_NVDLA_CVIF_CFG_WR_WEIGHT_1 CFG_WR_WEIGHT_1;
  rand reg_addrmap_NVDLA_NVDLA_CVIF_CFG_OUTSTANDING_CNT CFG_OUTSTANDING_CNT;
  rand reg_addrmap_NVDLA_NVDLA_CVIF_STATUS STATUS;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_CVIF");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.CFG_RD_WEIGHT_0 = new("CFG_RD_WEIGHT_0");
    this.CFG_RD_WEIGHT_0.configure(this, null, "");
    this.CFG_RD_WEIGHT_0.set_rdl_tag("CFG_RD_WEIGHT_0_");
    this.CFG_RD_WEIGHT_0.set_reg_test_info(0, 0, 2);
    this.CFG_RD_WEIGHT_0.build();
    this.default_map.add_reg(this.CFG_RD_WEIGHT_0, `UVM_REG_ADDR_WIDTH'h0, "RW", 0);
    this.CFG_RD_WEIGHT_1 = new("CFG_RD_WEIGHT_1");
    this.CFG_RD_WEIGHT_1.configure(this, null, "");
    this.CFG_RD_WEIGHT_1.set_rdl_tag("CFG_RD_WEIGHT_1_");
    this.CFG_RD_WEIGHT_1.set_reg_test_info(0, 0, 2);
    this.CFG_RD_WEIGHT_1.build();
    this.default_map.add_reg(this.CFG_RD_WEIGHT_1, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.CFG_RD_WEIGHT_2 = new("CFG_RD_WEIGHT_2");
    this.CFG_RD_WEIGHT_2.configure(this, null, "");
    this.CFG_RD_WEIGHT_2.set_rdl_tag("CFG_RD_WEIGHT_2_");
    this.CFG_RD_WEIGHT_2.set_reg_test_info(0, 0, 2);
    this.CFG_RD_WEIGHT_2.build();
    this.default_map.add_reg(this.CFG_RD_WEIGHT_2, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.CFG_WR_WEIGHT_0 = new("CFG_WR_WEIGHT_0");
    this.CFG_WR_WEIGHT_0.configure(this, null, "");
    this.CFG_WR_WEIGHT_0.set_rdl_tag("CFG_WR_WEIGHT_0_");
    this.CFG_WR_WEIGHT_0.set_reg_test_info(0, 0, 2);
    this.CFG_WR_WEIGHT_0.build();
    this.default_map.add_reg(this.CFG_WR_WEIGHT_0, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.CFG_WR_WEIGHT_1 = new("CFG_WR_WEIGHT_1");
    this.CFG_WR_WEIGHT_1.configure(this, null, "");
    this.CFG_WR_WEIGHT_1.set_rdl_tag("CFG_WR_WEIGHT_1_");
    this.CFG_WR_WEIGHT_1.set_reg_test_info(0, 0, 2);
    this.CFG_WR_WEIGHT_1.build();
    this.default_map.add_reg(this.CFG_WR_WEIGHT_1, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.CFG_OUTSTANDING_CNT = new("CFG_OUTSTANDING_CNT");
    this.CFG_OUTSTANDING_CNT.configure(this, null, "");
    this.CFG_OUTSTANDING_CNT.set_rdl_tag("CFG_OUTSTANDING_CNT_");
    this.CFG_OUTSTANDING_CNT.set_reg_test_info(0, 0, 2);
    this.CFG_OUTSTANDING_CNT.build();
    this.default_map.add_reg(this.CFG_OUTSTANDING_CNT, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.STATUS = new("STATUS");
    this.STATUS.configure(this, null, "");
    this.STATUS.set_rdl_tag("STATUS_");
    this.STATUS.set_reg_test_info(0, 0, 32);
    this.STATUS.build();
    this.default_map.add_reg(this.STATUS, `UVM_REG_ADDR_WIDTH'h18, "RO", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_CVIF)
endclass : block_addrmap_NVDLA_NVDLA_CVIF

// CFG_SRC_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl V32;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.V32 = new("V32");
    this.V32.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.V32.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.V32.add_def_property("spec_access", "rw");
    this.V32.add_def_property("spec_sw_default", "0x0");
    this.V32.add_def_property("sw_default_mask", "0x0");
    this.V32.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "V32"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_ADDR_LOW

// CFG_SRC_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl V8;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.V8 = new("V8");
    this.V8.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.V8.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.V8.add_def_property("spec_access", "rw");
    this.V8.add_def_property("spec_sw_default", "0x0");
    this.V8.add_def_property("sw_default_mask", "0x0");
    this.V8.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "V8"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_ADDR_HIGH

// CFG_DST_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl V32;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.V32 = new("V32");
    this.V32.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.V32.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.V32.add_def_property("spec_access", "rw");
    this.V32.add_def_property("spec_sw_default", "0x0");
    this.V32.add_def_property("sw_default_mask", "0x0");
    this.V32.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "V32"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_ADDR_LOW

// CFG_DST_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl V8;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.V8 = new("V8");
    this.V8.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.V8.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.V8.add_def_property("spec_access", "rw");
    this.V8.add_def_property("spec_sw_default", "0x0");
    this.V8.add_def_property("sw_default_mask", "0x0");
    this.V8.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "V8"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_ADDR_HIGH

// CFG_LINE
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LINE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SIZE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LINE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SIZE = new("SIZE");
    this.SIZE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SIZE.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.SIZE.add_def_property("spec_access", "rw");
    this.SIZE.add_def_property("spec_sw_default", "0x0");
    this.SIZE.add_def_property("sw_default_mask", "0x0");
    this.SIZE.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SIZE"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LINE

// CFG_CMD
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_CMD extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_RAM_TYPE;
  rand uvm_reg_field_rdl DST_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_CMD");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_RAM_TYPE = new("SRC_RAM_TYPE");
    this.SRC_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.SRC_RAM_TYPE.add_def_property("spec_access", "rw");
    this.SRC_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.SRC_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.SRC_RAM_TYPE.add_def_property("reset_mask", "0x1");
    this.DST_RAM_TYPE = new("DST_RAM_TYPE");
    this.DST_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_RAM_TYPE.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.DST_RAM_TYPE.add_def_property("spec_access", "rw");
    this.DST_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.DST_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.DST_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_RAM_TYPE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "DST_RAM_TYPE"}, 1, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_CMD

// CFG_LINE_REPEAT
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LINE_REPEAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NUMBER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LINE_REPEAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NUMBER = new("NUMBER");
    this.NUMBER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NUMBER.configure(this, 24, 0, "RW", 0, 24'h0, 1, 1, 1);
    this.NUMBER.add_def_property("spec_access", "rw");
    this.NUMBER.add_def_property("spec_sw_default", "0x0");
    this.NUMBER.add_def_property("sw_default_mask", "0x0");
    this.NUMBER.add_def_property("reset_mask", "0xffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NUMBER"}, 0, 24);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LINE_REPEAT

// CFG_SRC_LINE
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_LINE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_LINE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STRIDE = new("STRIDE");
    this.STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.STRIDE.add_def_property("spec_access", "rw");
    this.STRIDE.add_def_property("spec_sw_default", "0x0");
    this.STRIDE.add_def_property("sw_default_mask", "0x0");
    this.STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_LINE

// CFG_DST_LINE
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_LINE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_LINE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STRIDE = new("STRIDE");
    this.STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.STRIDE.add_def_property("spec_access", "rw");
    this.STRIDE.add_def_property("spec_sw_default", "0x0");
    this.STRIDE.add_def_property("sw_default_mask", "0x0");
    this.STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_LINE

// CFG_SURF_REPEAT
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SURF_REPEAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NUMBER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SURF_REPEAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NUMBER = new("NUMBER");
    this.NUMBER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NUMBER.configure(this, 24, 0, "RW", 0, 24'h0, 1, 1, 1);
    this.NUMBER.add_def_property("spec_access", "rw");
    this.NUMBER.add_def_property("spec_sw_default", "0x0");
    this.NUMBER.add_def_property("sw_default_mask", "0x0");
    this.NUMBER.add_def_property("reset_mask", "0xffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NUMBER"}, 0, 24);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SURF_REPEAT

// CFG_SRC_SURF
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_SURF extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_SURF");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STRIDE = new("STRIDE");
    this.STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.STRIDE.add_def_property("spec_access", "rw");
    this.STRIDE.add_def_property("spec_sw_default", "0x0");
    this.STRIDE.add_def_property("sw_default_mask", "0x0");
    this.STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_SURF

// CFG_DST_SURF
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_SURF extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_SURF");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STRIDE = new("STRIDE");
    this.STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.STRIDE.add_def_property("spec_access", "rw");
    this.STRIDE.add_def_property("spec_sw_default", "0x0");
    this.STRIDE.add_def_property("sw_default_mask", "0x0");
    this.STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_SURF

// CFG_OP
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_OP extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_OP");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EN = new("EN");
    this.EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.EN.add_def_property("spec_access", "rwt");
    this.EN.add_def_property("spec_sw_default", "0x0");
    this.EN.add_def_property("sw_default_mask", "0x0");
    this.EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_OP

// CFG_LAUNCH0
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LAUNCH0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl GRP0_LAUNCH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LAUNCH0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.GRP0_LAUNCH = new("GRP0_LAUNCH");
    this.GRP0_LAUNCH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.GRP0_LAUNCH.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.GRP0_LAUNCH.add_def_property("spec_access", "rwt");
    this.GRP0_LAUNCH.add_def_property("spec_sw_default", "0x0");
    this.GRP0_LAUNCH.add_def_property("sw_default_mask", "0x0");
    this.GRP0_LAUNCH.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "GRP0_LAUNCH"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LAUNCH0

// CFG_LAUNCH1
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LAUNCH1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl GRP1_LAUNCH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LAUNCH1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.GRP1_LAUNCH = new("GRP1_LAUNCH");
    this.GRP1_LAUNCH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.GRP1_LAUNCH.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.GRP1_LAUNCH.add_def_property("spec_access", "rwt");
    this.GRP1_LAUNCH.add_def_property("spec_sw_default", "0x0");
    this.GRP1_LAUNCH.add_def_property("sw_default_mask", "0x0");
    this.GRP1_LAUNCH.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "GRP1_LAUNCH"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LAUNCH1

// CFG_STATUS
class reg_addrmap_NVDLA_NVDLA_BDMA_CFG_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STALL_COUNT_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_CFG_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STALL_COUNT_EN = new("STALL_COUNT_EN");
    this.STALL_COUNT_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.STALL_COUNT_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.STALL_COUNT_EN.add_def_property("spec_access", "rw");
    this.STALL_COUNT_EN.add_def_property("spec_sw_default", "0x0");
    this.STALL_COUNT_EN.add_def_property("sw_default_mask", "0x0");
    this.STALL_COUNT_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STALL_COUNT_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_CFG_STATUS

// STATUS
class reg_addrmap_NVDLA_NVDLA_BDMA_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl FREE_SLOT;
  rand uvm_reg_field_rdl IDLE;
  rand uvm_reg_field_rdl GRP0_BUSY;
  rand uvm_reg_field_rdl GRP1_BUSY;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.FREE_SLOT = new("FREE_SLOT");
    this.FREE_SLOT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.FREE_SLOT.configure(this, 8, 0, "RO", 1, 8'h14, 1, 0, 0);
    this.FREE_SLOT.add_def_property("spec_access", "r");
    this.FREE_SLOT.add_def_property("spec_sw_default", "0x0");
    this.FREE_SLOT.add_def_property("sw_default_mask", "0x0");
    this.FREE_SLOT.add_def_property("reset_mask", "0xff");
    this.IDLE = new("IDLE");
    this.IDLE.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.IDLE.configure(this, 1, 8, "RO", 1, 1'h1, 1, 0, 0);
    this.IDLE.add_def_property("spec_access", "r");
    this.IDLE.add_def_property("spec_sw_default", "0x0");
    this.IDLE.add_def_property("sw_default_mask", "0x0");
    this.IDLE.add_def_property("reset_mask", "0x1");
    this.GRP0_BUSY = new("GRP0_BUSY");
    this.GRP0_BUSY.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.GRP0_BUSY.configure(this, 1, 9, "RO", 1, 1'h0, 1, 0, 0);
    this.GRP0_BUSY.add_def_property("spec_access", "r");
    this.GRP0_BUSY.add_def_property("spec_sw_default", "0x0");
    this.GRP0_BUSY.add_def_property("sw_default_mask", "0x0");
    this.GRP0_BUSY.add_def_property("reset_mask", "0x1");
    this.GRP1_BUSY = new("GRP1_BUSY");
    this.GRP1_BUSY.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.GRP1_BUSY.configure(this, 1, 10, "RO", 1, 1'h0, 1, 0, 0);
    this.GRP1_BUSY.add_def_property("spec_access", "r");
    this.GRP1_BUSY.add_def_property("spec_sw_default", "0x0");
    this.GRP1_BUSY.add_def_property("sw_default_mask", "0x0");
    this.GRP1_BUSY.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "FREE_SLOT"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "IDLE"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "GRP0_BUSY"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "GRP1_BUSY"}, 10, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_STATUS

// STATUS_GRP0_READ_STALL
class reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP0_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl COUNT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP0_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.COUNT = new("COUNT");
    this.COUNT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.COUNT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.COUNT.add_def_property("spec_access", "r");
    this.COUNT.add_def_property("spec_sw_default", "0x0");
    this.COUNT.add_def_property("sw_default_mask", "0x0");
    this.COUNT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "COUNT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP0_READ_STALL

// STATUS_GRP0_WRITE_STALL
class reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl COUNT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.COUNT = new("COUNT");
    this.COUNT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.COUNT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.COUNT.add_def_property("spec_access", "r");
    this.COUNT.add_def_property("spec_sw_default", "0x0");
    this.COUNT.add_def_property("sw_default_mask", "0x0");
    this.COUNT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "COUNT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL

// STATUS_GRP1_READ_STALL
class reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP1_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl COUNT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP1_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.COUNT = new("COUNT");
    this.COUNT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.COUNT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.COUNT.add_def_property("spec_access", "r");
    this.COUNT.add_def_property("spec_sw_default", "0x0");
    this.COUNT.add_def_property("sw_default_mask", "0x0");
    this.COUNT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "COUNT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP1_READ_STALL

// STATUS_GRP1_WRITE_STALL
class reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl COUNT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.COUNT = new("COUNT");
    this.COUNT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.COUNT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.COUNT.add_def_property("spec_access", "r");
    this.COUNT.add_def_property("spec_sw_default", "0x0");
    this.COUNT.add_def_property("sw_default_mask", "0x0");
    this.COUNT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "COUNT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL

// Block NVDLA_BDMA
class block_addrmap_NVDLA_NVDLA_BDMA extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_ADDR_LOW CFG_SRC_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_ADDR_HIGH CFG_SRC_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_ADDR_LOW CFG_DST_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_ADDR_HIGH CFG_DST_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LINE CFG_LINE;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_CMD CFG_CMD;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LINE_REPEAT CFG_LINE_REPEAT;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_LINE CFG_SRC_LINE;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_LINE CFG_DST_LINE;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SURF_REPEAT CFG_SURF_REPEAT;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_SRC_SURF CFG_SRC_SURF;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_DST_SURF CFG_DST_SURF;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_OP CFG_OP;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LAUNCH0 CFG_LAUNCH0;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_LAUNCH1 CFG_LAUNCH1;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_CFG_STATUS CFG_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_STATUS STATUS;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP0_READ_STALL STATUS_GRP0_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL STATUS_GRP0_WRITE_STALL;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP1_READ_STALL STATUS_GRP1_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL STATUS_GRP1_WRITE_STALL;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_BDMA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.CFG_SRC_ADDR_LOW = new("CFG_SRC_ADDR_LOW");
    this.CFG_SRC_ADDR_LOW.configure(this, null, "");
    this.CFG_SRC_ADDR_LOW.set_rdl_tag("CFG_SRC_ADDR_LOW_");
    this.CFG_SRC_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.CFG_SRC_ADDR_LOW.build();
    this.default_map.add_reg(this.CFG_SRC_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h0, "RW", 0);
    this.CFG_SRC_ADDR_HIGH = new("CFG_SRC_ADDR_HIGH");
    this.CFG_SRC_ADDR_HIGH.configure(this, null, "");
    this.CFG_SRC_ADDR_HIGH.set_rdl_tag("CFG_SRC_ADDR_HIGH_");
    this.CFG_SRC_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.CFG_SRC_ADDR_HIGH.build();
    this.default_map.add_reg(this.CFG_SRC_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.CFG_DST_ADDR_LOW = new("CFG_DST_ADDR_LOW");
    this.CFG_DST_ADDR_LOW.configure(this, null, "");
    this.CFG_DST_ADDR_LOW.set_rdl_tag("CFG_DST_ADDR_LOW_");
    this.CFG_DST_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.CFG_DST_ADDR_LOW.build();
    this.default_map.add_reg(this.CFG_DST_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.CFG_DST_ADDR_HIGH = new("CFG_DST_ADDR_HIGH");
    this.CFG_DST_ADDR_HIGH.configure(this, null, "");
    this.CFG_DST_ADDR_HIGH.set_rdl_tag("CFG_DST_ADDR_HIGH_");
    this.CFG_DST_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.CFG_DST_ADDR_HIGH.build();
    this.default_map.add_reg(this.CFG_DST_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.CFG_LINE = new("CFG_LINE");
    this.CFG_LINE.configure(this, null, "");
    this.CFG_LINE.set_rdl_tag("CFG_LINE_");
    this.CFG_LINE.set_reg_test_info(0, 0, 2);
    this.CFG_LINE.build();
    this.default_map.add_reg(this.CFG_LINE, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.CFG_CMD = new("CFG_CMD");
    this.CFG_CMD.configure(this, null, "");
    this.CFG_CMD.set_rdl_tag("CFG_CMD_");
    this.CFG_CMD.set_reg_test_info(0, 0, 2);
    this.CFG_CMD.build();
    this.default_map.add_reg(this.CFG_CMD, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.CFG_LINE_REPEAT = new("CFG_LINE_REPEAT");
    this.CFG_LINE_REPEAT.configure(this, null, "");
    this.CFG_LINE_REPEAT.set_rdl_tag("CFG_LINE_REPEAT_");
    this.CFG_LINE_REPEAT.set_reg_test_info(0, 0, 2);
    this.CFG_LINE_REPEAT.build();
    this.default_map.add_reg(this.CFG_LINE_REPEAT, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.CFG_SRC_LINE = new("CFG_SRC_LINE");
    this.CFG_SRC_LINE.configure(this, null, "");
    this.CFG_SRC_LINE.set_rdl_tag("CFG_SRC_LINE_");
    this.CFG_SRC_LINE.set_reg_test_info(0, 0, 2);
    this.CFG_SRC_LINE.build();
    this.default_map.add_reg(this.CFG_SRC_LINE, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.CFG_DST_LINE = new("CFG_DST_LINE");
    this.CFG_DST_LINE.configure(this, null, "");
    this.CFG_DST_LINE.set_rdl_tag("CFG_DST_LINE_");
    this.CFG_DST_LINE.set_reg_test_info(0, 0, 2);
    this.CFG_DST_LINE.build();
    this.default_map.add_reg(this.CFG_DST_LINE, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.CFG_SURF_REPEAT = new("CFG_SURF_REPEAT");
    this.CFG_SURF_REPEAT.configure(this, null, "");
    this.CFG_SURF_REPEAT.set_rdl_tag("CFG_SURF_REPEAT_");
    this.CFG_SURF_REPEAT.set_reg_test_info(0, 0, 2);
    this.CFG_SURF_REPEAT.build();
    this.default_map.add_reg(this.CFG_SURF_REPEAT, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.CFG_SRC_SURF = new("CFG_SRC_SURF");
    this.CFG_SRC_SURF.configure(this, null, "");
    this.CFG_SRC_SURF.set_rdl_tag("CFG_SRC_SURF_");
    this.CFG_SRC_SURF.set_reg_test_info(0, 0, 2);
    this.CFG_SRC_SURF.build();
    this.default_map.add_reg(this.CFG_SRC_SURF, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.CFG_DST_SURF = new("CFG_DST_SURF");
    this.CFG_DST_SURF.configure(this, null, "");
    this.CFG_DST_SURF.set_rdl_tag("CFG_DST_SURF_");
    this.CFG_DST_SURF.set_reg_test_info(0, 0, 2);
    this.CFG_DST_SURF.build();
    this.default_map.add_reg(this.CFG_DST_SURF, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.CFG_OP = new("CFG_OP");
    this.CFG_OP.configure(this, null, "");
    this.CFG_OP.set_rdl_tag("CFG_OP_");
    this.CFG_OP.set_reg_test_info(0, 0, 2);
    this.CFG_OP.build();
    this.default_map.add_reg(this.CFG_OP, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.CFG_LAUNCH0 = new("CFG_LAUNCH0");
    this.CFG_LAUNCH0.configure(this, null, "");
    this.CFG_LAUNCH0.set_rdl_tag("CFG_LAUNCH0_");
    this.CFG_LAUNCH0.set_reg_test_info(0, 0, 2);
    this.CFG_LAUNCH0.build();
    this.default_map.add_reg(this.CFG_LAUNCH0, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.CFG_LAUNCH1 = new("CFG_LAUNCH1");
    this.CFG_LAUNCH1.configure(this, null, "");
    this.CFG_LAUNCH1.set_rdl_tag("CFG_LAUNCH1_");
    this.CFG_LAUNCH1.set_reg_test_info(0, 0, 2);
    this.CFG_LAUNCH1.build();
    this.default_map.add_reg(this.CFG_LAUNCH1, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.CFG_STATUS = new("CFG_STATUS");
    this.CFG_STATUS.configure(this, null, "");
    this.CFG_STATUS.set_rdl_tag("CFG_STATUS_");
    this.CFG_STATUS.set_reg_test_info(0, 0, 2);
    this.CFG_STATUS.build();
    this.default_map.add_reg(this.CFG_STATUS, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.STATUS = new("STATUS");
    this.STATUS.configure(this, null, "");
    this.STATUS.set_rdl_tag("STATUS_");
    this.STATUS.set_reg_test_info(0, 0, 32);
    this.STATUS.build();
    this.default_map.add_reg(this.STATUS, `UVM_REG_ADDR_WIDTH'h40, "RO", 0);
    this.STATUS_GRP0_READ_STALL = new("STATUS_GRP0_READ_STALL");
    this.STATUS_GRP0_READ_STALL.configure(this, null, "");
    this.STATUS_GRP0_READ_STALL.set_rdl_tag("STATUS_GRP0_READ_STALL_");
    this.STATUS_GRP0_READ_STALL.set_reg_test_info(0, 0, 32);
    this.STATUS_GRP0_READ_STALL.build();
    this.default_map.add_reg(this.STATUS_GRP0_READ_STALL, `UVM_REG_ADDR_WIDTH'h44, "RO", 0);
    this.STATUS_GRP0_WRITE_STALL = new("STATUS_GRP0_WRITE_STALL");
    this.STATUS_GRP0_WRITE_STALL.configure(this, null, "");
    this.STATUS_GRP0_WRITE_STALL.set_rdl_tag("STATUS_GRP0_WRITE_STALL_");
    this.STATUS_GRP0_WRITE_STALL.set_reg_test_info(0, 0, 32);
    this.STATUS_GRP0_WRITE_STALL.build();
    this.default_map.add_reg(this.STATUS_GRP0_WRITE_STALL, `UVM_REG_ADDR_WIDTH'h48, "RO", 0);
    this.STATUS_GRP1_READ_STALL = new("STATUS_GRP1_READ_STALL");
    this.STATUS_GRP1_READ_STALL.configure(this, null, "");
    this.STATUS_GRP1_READ_STALL.set_rdl_tag("STATUS_GRP1_READ_STALL_");
    this.STATUS_GRP1_READ_STALL.set_reg_test_info(0, 0, 32);
    this.STATUS_GRP1_READ_STALL.build();
    this.default_map.add_reg(this.STATUS_GRP1_READ_STALL, `UVM_REG_ADDR_WIDTH'h4c, "RO", 0);
    this.STATUS_GRP1_WRITE_STALL = new("STATUS_GRP1_WRITE_STALL");
    this.STATUS_GRP1_WRITE_STALL.configure(this, null, "");
    this.STATUS_GRP1_WRITE_STALL.set_rdl_tag("STATUS_GRP1_WRITE_STALL_");
    this.STATUS_GRP1_WRITE_STALL.set_reg_test_info(0, 0, 32);
    this.STATUS_GRP1_WRITE_STALL.build();
    this.default_map.add_reg(this.STATUS_GRP1_WRITE_STALL, `UVM_REG_ADDR_WIDTH'h50, "RO", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_BDMA)
endclass : block_addrmap_NVDLA_NVDLA_BDMA

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_RBK_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_RBK_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_S_POINTER

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_RBK_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_OP_ENABLE

// D_MISC_CFG
class reg_addrmap_NVDLA_NVDLA_RBK_D_MISC_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RUBIK_MODE;
  rand uvm_reg_field_rdl IN_PRECISION;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_MISC_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RUBIK_MODE = new("RUBIK_MODE");
    this.RUBIK_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RUBIK_MODE.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 0);
    this.RUBIK_MODE.add_def_property("spec_access", "rw");
    this.RUBIK_MODE.add_def_property("spec_sw_default", "0x0");
    this.RUBIK_MODE.add_def_property("sw_default_mask", "0x0");
    this.RUBIK_MODE.add_def_property("reset_mask", "0x3");
    this.IN_PRECISION = new("IN_PRECISION");
    this.IN_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.IN_PRECISION.configure(this, 2, 8, "RW", 0, 2'h1, 1, 1, 0);
    this.IN_PRECISION.add_def_property("spec_access", "rw");
    this.IN_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.IN_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.IN_PRECISION.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RUBIK_MODE"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "IN_PRECISION"}, 8, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_MISC_CFG

// D_DAIN_RAM_TYPE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_RAM_TYPE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_RAM_TYPE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_RAM_TYPE = new("DATAIN_RAM_TYPE");
    this.DATAIN_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DATAIN_RAM_TYPE.add_def_property("spec_access", "rw");
    this.DATAIN_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_RAM_TYPE

// D_DATAIN_SIZE_0
class reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_WIDTH;
  rand uvm_reg_field_rdl DATAIN_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_WIDTH = new("DATAIN_WIDTH");
    this.DATAIN_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_WIDTH.add_def_property("spec_access", "rw");
    this.DATAIN_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_WIDTH.add_def_property("reset_mask", "0x1fff");
    this.DATAIN_HEIGHT = new("DATAIN_HEIGHT");
    this.DATAIN_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_HEIGHT.configure(this, 13, 16, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_HEIGHT.add_def_property("spec_access", "rw");
    this.DATAIN_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_WIDTH"}, 0, 13);
    add_hdl_path_slice({rdl_reg_name, "DATAIN_HEIGHT"}, 16, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_0

// D_DATAIN_SIZE_1
class reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_CHANNEL = new("DATAIN_CHANNEL");
    this.DATAIN_CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.DATAIN_CHANNEL.add_def_property("spec_access", "rw");
    this.DATAIN_CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_1

// D_DAIN_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAIN_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAIN_ADDR_HIGH = new("DAIN_ADDR_HIGH");
    this.DAIN_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAIN_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DAIN_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.DAIN_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.DAIN_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.DAIN_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAIN_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_HIGH

// D_DAIN_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAIN_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAIN_ADDR_LOW = new("DAIN_ADDR_LOW");
    this.DAIN_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAIN_ADDR_LOW.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAIN_ADDR_LOW.add_def_property("spec_access", "rw");
    this.DAIN_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.DAIN_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.DAIN_ADDR_LOW.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAIN_ADDR_LOW"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_LOW

// D_DAIN_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAIN_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAIN_LINE_STRIDE = new("DAIN_LINE_STRIDE");
    this.DAIN_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAIN_LINE_STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAIN_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.DAIN_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DAIN_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DAIN_LINE_STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAIN_LINE_STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_LINE_STRIDE

// D_DAIN_SURF_STRIDE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_SURF_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAIN_SURF_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_SURF_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAIN_SURF_STRIDE = new("DAIN_SURF_STRIDE");
    this.DAIN_SURF_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAIN_SURF_STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAIN_SURF_STRIDE.add_def_property("spec_access", "rw");
    this.DAIN_SURF_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DAIN_SURF_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DAIN_SURF_STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAIN_SURF_STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_SURF_STRIDE

// D_DAIN_PLANAR_STRIDE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_PLANAR_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAIN_PLANAR_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_PLANAR_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAIN_PLANAR_STRIDE = new("DAIN_PLANAR_STRIDE");
    this.DAIN_PLANAR_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAIN_PLANAR_STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAIN_PLANAR_STRIDE.add_def_property("spec_access", "rw");
    this.DAIN_PLANAR_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DAIN_PLANAR_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DAIN_PLANAR_STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAIN_PLANAR_STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_PLANAR_STRIDE

// D_DAOUT_RAM_TYPE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_RAM_TYPE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAOUT_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_RAM_TYPE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAOUT_RAM_TYPE = new("DATAOUT_RAM_TYPE");
    this.DATAOUT_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAOUT_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DATAOUT_RAM_TYPE.add_def_property("spec_access", "rw");
    this.DATAOUT_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.DATAOUT_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.DATAOUT_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAOUT_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_RAM_TYPE

// D_DATAOUT_SIZE_1
class reg_addrmap_NVDLA_NVDLA_RBK_D_DATAOUT_SIZE_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAOUT_CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DATAOUT_SIZE_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAOUT_CHANNEL = new("DATAOUT_CHANNEL");
    this.DATAOUT_CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAOUT_CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.DATAOUT_CHANNEL.add_def_property("spec_access", "rw");
    this.DATAOUT_CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.DATAOUT_CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.DATAOUT_CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAOUT_CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DATAOUT_SIZE_1

// D_DAOUT_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAOUT_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAOUT_ADDR_HIGH = new("DAOUT_ADDR_HIGH");
    this.DAOUT_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAOUT_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DAOUT_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.DAOUT_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.DAOUT_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.DAOUT_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAOUT_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_HIGH

// D_DAOUT_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAOUT_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAOUT_ADDR_LOW = new("DAOUT_ADDR_LOW");
    this.DAOUT_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAOUT_ADDR_LOW.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAOUT_ADDR_LOW.add_def_property("spec_access", "rw");
    this.DAOUT_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.DAOUT_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.DAOUT_ADDR_LOW.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAOUT_ADDR_LOW"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_LOW

// D_DAOUT_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAOUT_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAOUT_LINE_STRIDE = new("DAOUT_LINE_STRIDE");
    this.DAOUT_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAOUT_LINE_STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAOUT_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.DAOUT_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DAOUT_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DAOUT_LINE_STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAOUT_LINE_STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_LINE_STRIDE

// D_CONTRACT_STRIDE_0
class reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CONTRACT_STRIDE_0;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CONTRACT_STRIDE_0 = new("CONTRACT_STRIDE_0");
    this.CONTRACT_STRIDE_0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONTRACT_STRIDE_0.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.CONTRACT_STRIDE_0.add_def_property("spec_access", "rw");
    this.CONTRACT_STRIDE_0.add_def_property("spec_sw_default", "0x0");
    this.CONTRACT_STRIDE_0.add_def_property("sw_default_mask", "0x0");
    this.CONTRACT_STRIDE_0.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CONTRACT_STRIDE_0"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_0

// D_CONTRACT_STRIDE_1
class reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CONTRACT_STRIDE_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CONTRACT_STRIDE_1 = new("CONTRACT_STRIDE_1");
    this.CONTRACT_STRIDE_1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONTRACT_STRIDE_1.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.CONTRACT_STRIDE_1.add_def_property("spec_access", "rw");
    this.CONTRACT_STRIDE_1.add_def_property("spec_sw_default", "0x0");
    this.CONTRACT_STRIDE_1.add_def_property("sw_default_mask", "0x0");
    this.CONTRACT_STRIDE_1.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CONTRACT_STRIDE_1"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_1

// D_DAOUT_SURF_STRIDE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_SURF_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAOUT_SURF_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_SURF_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAOUT_SURF_STRIDE = new("DAOUT_SURF_STRIDE");
    this.DAOUT_SURF_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAOUT_SURF_STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAOUT_SURF_STRIDE.add_def_property("spec_access", "rw");
    this.DAOUT_SURF_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DAOUT_SURF_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DAOUT_SURF_STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAOUT_SURF_STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_SURF_STRIDE

// D_DAOUT_PLANAR_STRIDE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAOUT_PLANAR_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAOUT_PLANAR_STRIDE = new("DAOUT_PLANAR_STRIDE");
    this.DAOUT_PLANAR_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAOUT_PLANAR_STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAOUT_PLANAR_STRIDE.add_def_property("spec_access", "rw");
    this.DAOUT_PLANAR_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DAOUT_PLANAR_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DAOUT_PLANAR_STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAOUT_PLANAR_STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE

// D_DECONV_STRIDE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DECONV_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DECONV_X_STRIDE;
  rand uvm_reg_field_rdl DECONV_Y_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DECONV_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DECONV_X_STRIDE = new("DECONV_X_STRIDE");
    this.DECONV_X_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DECONV_X_STRIDE.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.DECONV_X_STRIDE.add_def_property("spec_access", "rw");
    this.DECONV_X_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DECONV_X_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DECONV_X_STRIDE.add_def_property("reset_mask", "0x1f");
    this.DECONV_Y_STRIDE = new("DECONV_Y_STRIDE");
    this.DECONV_Y_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DECONV_Y_STRIDE.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.DECONV_Y_STRIDE.add_def_property("spec_access", "rw");
    this.DECONV_Y_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DECONV_Y_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DECONV_Y_STRIDE.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DECONV_X_STRIDE"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "DECONV_Y_STRIDE"}, 16, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DECONV_STRIDE

// D_PERF_ENABLE
class reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_EN = new("PERF_EN");
    this.PERF_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PERF_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.PERF_EN.add_def_property("spec_access", "rw");
    this.PERF_EN.add_def_property("spec_sw_default", "0x0");
    this.PERF_EN.add_def_property("sw_default_mask", "0x0");
    this.PERF_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_ENABLE

// D_PERF_READ_STALL
class reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RD_STALL_CNT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RD_STALL_CNT = new("RD_STALL_CNT");
    this.RD_STALL_CNT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.RD_STALL_CNT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.RD_STALL_CNT.add_def_property("spec_access", "r");
    this.RD_STALL_CNT.add_def_property("spec_sw_default", "0x0");
    this.RD_STALL_CNT.add_def_property("sw_default_mask", "0x0");
    this.RD_STALL_CNT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RD_STALL_CNT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_READ_STALL

// D_PERF_WRITE_STALL
class reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_WRITE_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WR_STALL_CNT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_WRITE_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WR_STALL_CNT = new("WR_STALL_CNT");
    this.WR_STALL_CNT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.WR_STALL_CNT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.WR_STALL_CNT.add_def_property("spec_access", "r");
    this.WR_STALL_CNT.add_def_property("spec_sw_default", "0x0");
    this.WR_STALL_CNT.add_def_property("sw_default_mask", "0x0");
    this.WR_STALL_CNT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WR_STALL_CNT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_WRITE_STALL

// Block NVDLA_RBK
class block_addrmap_NVDLA_NVDLA_RBK extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_RBK_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_RBK_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_MISC_CFG D_MISC_CFG;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_RAM_TYPE D_DAIN_RAM_TYPE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_0 D_DATAIN_SIZE_0;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_1 D_DATAIN_SIZE_1;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_HIGH D_DAIN_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_LOW D_DAIN_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_LINE_STRIDE D_DAIN_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_SURF_STRIDE D_DAIN_SURF_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_PLANAR_STRIDE D_DAIN_PLANAR_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_RAM_TYPE D_DAOUT_RAM_TYPE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DATAOUT_SIZE_1 D_DATAOUT_SIZE_1;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_HIGH D_DAOUT_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_LOW D_DAOUT_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_LINE_STRIDE D_DAOUT_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_0 D_CONTRACT_STRIDE_0;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_1 D_CONTRACT_STRIDE_1;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_SURF_STRIDE D_DAOUT_SURF_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE D_DAOUT_PLANAR_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DECONV_STRIDE D_DECONV_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_ENABLE D_PERF_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_READ_STALL D_PERF_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_WRITE_STALL D_PERF_WRITE_STALL;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_RBK");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.D_MISC_CFG = new("D_MISC_CFG");
    this.D_MISC_CFG.configure(this, null, "");
    this.D_MISC_CFG.set_rdl_tag("D_MISC_CFG_");
    this.D_MISC_CFG.set_reg_test_info(0, 0, 2);
    this.D_MISC_CFG.build();
    this.default_map.add_reg(this.D_MISC_CFG, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.D_DAIN_RAM_TYPE = new("D_DAIN_RAM_TYPE");
    this.D_DAIN_RAM_TYPE.configure(this, null, "");
    this.D_DAIN_RAM_TYPE.set_rdl_tag("D_DAIN_RAM_TYPE_");
    this.D_DAIN_RAM_TYPE.set_reg_test_info(0, 0, 2);
    this.D_DAIN_RAM_TYPE.build();
    this.default_map.add_reg(this.D_DAIN_RAM_TYPE, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.D_DATAIN_SIZE_0 = new("D_DATAIN_SIZE_0");
    this.D_DATAIN_SIZE_0.configure(this, null, "");
    this.D_DATAIN_SIZE_0.set_rdl_tag("D_DATAIN_SIZE_0_");
    this.D_DATAIN_SIZE_0.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_SIZE_0.build();
    this.default_map.add_reg(this.D_DATAIN_SIZE_0, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.D_DATAIN_SIZE_1 = new("D_DATAIN_SIZE_1");
    this.D_DATAIN_SIZE_1.configure(this, null, "");
    this.D_DATAIN_SIZE_1.set_rdl_tag("D_DATAIN_SIZE_1_");
    this.D_DATAIN_SIZE_1.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_SIZE_1.build();
    this.default_map.add_reg(this.D_DATAIN_SIZE_1, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.D_DAIN_ADDR_HIGH = new("D_DAIN_ADDR_HIGH");
    this.D_DAIN_ADDR_HIGH.configure(this, null, "");
    this.D_DAIN_ADDR_HIGH.set_rdl_tag("D_DAIN_ADDR_HIGH_");
    this.D_DAIN_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_DAIN_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_DAIN_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.D_DAIN_ADDR_LOW = new("D_DAIN_ADDR_LOW");
    this.D_DAIN_ADDR_LOW.configure(this, null, "");
    this.D_DAIN_ADDR_LOW.set_rdl_tag("D_DAIN_ADDR_LOW_");
    this.D_DAIN_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_DAIN_ADDR_LOW.build();
    this.default_map.add_reg(this.D_DAIN_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.D_DAIN_LINE_STRIDE = new("D_DAIN_LINE_STRIDE");
    this.D_DAIN_LINE_STRIDE.configure(this, null, "");
    this.D_DAIN_LINE_STRIDE.set_rdl_tag("D_DAIN_LINE_STRIDE_");
    this.D_DAIN_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DAIN_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_DAIN_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.D_DAIN_SURF_STRIDE = new("D_DAIN_SURF_STRIDE");
    this.D_DAIN_SURF_STRIDE.configure(this, null, "");
    this.D_DAIN_SURF_STRIDE.set_rdl_tag("D_DAIN_SURF_STRIDE_");
    this.D_DAIN_SURF_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DAIN_SURF_STRIDE.build();
    this.default_map.add_reg(this.D_DAIN_SURF_STRIDE, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.D_DAIN_PLANAR_STRIDE = new("D_DAIN_PLANAR_STRIDE");
    this.D_DAIN_PLANAR_STRIDE.configure(this, null, "");
    this.D_DAIN_PLANAR_STRIDE.set_rdl_tag("D_DAIN_PLANAR_STRIDE_");
    this.D_DAIN_PLANAR_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DAIN_PLANAR_STRIDE.build();
    this.default_map.add_reg(this.D_DAIN_PLANAR_STRIDE, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.D_DAOUT_RAM_TYPE = new("D_DAOUT_RAM_TYPE");
    this.D_DAOUT_RAM_TYPE.configure(this, null, "");
    this.D_DAOUT_RAM_TYPE.set_rdl_tag("D_DAOUT_RAM_TYPE_");
    this.D_DAOUT_RAM_TYPE.set_reg_test_info(0, 0, 2);
    this.D_DAOUT_RAM_TYPE.build();
    this.default_map.add_reg(this.D_DAOUT_RAM_TYPE, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.D_DATAOUT_SIZE_1 = new("D_DATAOUT_SIZE_1");
    this.D_DATAOUT_SIZE_1.configure(this, null, "");
    this.D_DATAOUT_SIZE_1.set_rdl_tag("D_DATAOUT_SIZE_1_");
    this.D_DATAOUT_SIZE_1.set_reg_test_info(0, 0, 2);
    this.D_DATAOUT_SIZE_1.build();
    this.default_map.add_reg(this.D_DATAOUT_SIZE_1, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.D_DAOUT_ADDR_HIGH = new("D_DAOUT_ADDR_HIGH");
    this.D_DAOUT_ADDR_HIGH.configure(this, null, "");
    this.D_DAOUT_ADDR_HIGH.set_rdl_tag("D_DAOUT_ADDR_HIGH_");
    this.D_DAOUT_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_DAOUT_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_DAOUT_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.D_DAOUT_ADDR_LOW = new("D_DAOUT_ADDR_LOW");
    this.D_DAOUT_ADDR_LOW.configure(this, null, "");
    this.D_DAOUT_ADDR_LOW.set_rdl_tag("D_DAOUT_ADDR_LOW_");
    this.D_DAOUT_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_DAOUT_ADDR_LOW.build();
    this.default_map.add_reg(this.D_DAOUT_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.D_DAOUT_LINE_STRIDE = new("D_DAOUT_LINE_STRIDE");
    this.D_DAOUT_LINE_STRIDE.configure(this, null, "");
    this.D_DAOUT_LINE_STRIDE.set_rdl_tag("D_DAOUT_LINE_STRIDE_");
    this.D_DAOUT_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DAOUT_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_DAOUT_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.D_CONTRACT_STRIDE_0 = new("D_CONTRACT_STRIDE_0");
    this.D_CONTRACT_STRIDE_0.configure(this, null, "");
    this.D_CONTRACT_STRIDE_0.set_rdl_tag("D_CONTRACT_STRIDE_0_");
    this.D_CONTRACT_STRIDE_0.set_reg_test_info(0, 0, 2);
    this.D_CONTRACT_STRIDE_0.build();
    this.default_map.add_reg(this.D_CONTRACT_STRIDE_0, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.D_CONTRACT_STRIDE_1 = new("D_CONTRACT_STRIDE_1");
    this.D_CONTRACT_STRIDE_1.configure(this, null, "");
    this.D_CONTRACT_STRIDE_1.set_rdl_tag("D_CONTRACT_STRIDE_1_");
    this.D_CONTRACT_STRIDE_1.set_reg_test_info(0, 0, 2);
    this.D_CONTRACT_STRIDE_1.build();
    this.default_map.add_reg(this.D_CONTRACT_STRIDE_1, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.D_DAOUT_SURF_STRIDE = new("D_DAOUT_SURF_STRIDE");
    this.D_DAOUT_SURF_STRIDE.configure(this, null, "");
    this.D_DAOUT_SURF_STRIDE.set_rdl_tag("D_DAOUT_SURF_STRIDE_");
    this.D_DAOUT_SURF_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DAOUT_SURF_STRIDE.build();
    this.default_map.add_reg(this.D_DAOUT_SURF_STRIDE, `UVM_REG_ADDR_WIDTH'h4c, "RW", 0);
    this.D_DAOUT_PLANAR_STRIDE = new("D_DAOUT_PLANAR_STRIDE");
    this.D_DAOUT_PLANAR_STRIDE.configure(this, null, "");
    this.D_DAOUT_PLANAR_STRIDE.set_rdl_tag("D_DAOUT_PLANAR_STRIDE_");
    this.D_DAOUT_PLANAR_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DAOUT_PLANAR_STRIDE.build();
    this.default_map.add_reg(this.D_DAOUT_PLANAR_STRIDE, `UVM_REG_ADDR_WIDTH'h50, "RW", 0);
    this.D_DECONV_STRIDE = new("D_DECONV_STRIDE");
    this.D_DECONV_STRIDE.configure(this, null, "");
    this.D_DECONV_STRIDE.set_rdl_tag("D_DECONV_STRIDE_");
    this.D_DECONV_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DECONV_STRIDE.build();
    this.default_map.add_reg(this.D_DECONV_STRIDE, `UVM_REG_ADDR_WIDTH'h54, "RW", 0);
    this.D_PERF_ENABLE = new("D_PERF_ENABLE");
    this.D_PERF_ENABLE.configure(this, null, "");
    this.D_PERF_ENABLE.set_rdl_tag("D_PERF_ENABLE_");
    this.D_PERF_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_PERF_ENABLE.build();
    this.default_map.add_reg(this.D_PERF_ENABLE, `UVM_REG_ADDR_WIDTH'h58, "RW", 0);
    this.D_PERF_READ_STALL = new("D_PERF_READ_STALL");
    this.D_PERF_READ_STALL.configure(this, null, "");
    this.D_PERF_READ_STALL.set_rdl_tag("D_PERF_READ_STALL_");
    this.D_PERF_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_READ_STALL, `UVM_REG_ADDR_WIDTH'h5c, "RO", 0);
    this.D_PERF_WRITE_STALL = new("D_PERF_WRITE_STALL");
    this.D_PERF_WRITE_STALL.configure(this, null, "");
    this.D_PERF_WRITE_STALL.set_rdl_tag("D_PERF_WRITE_STALL_");
    this.D_PERF_WRITE_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_WRITE_STALL.build();
    this.default_map.add_reg(this.D_PERF_WRITE_STALL, `UVM_REG_ADDR_WIDTH'h60, "RO", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_RBK)
endclass : block_addrmap_NVDLA_NVDLA_RBK

// Base block
class block_addrmap_NVDLA extends uvm_reg_block_rdl;
  rand block_addrmap_NVDLA_NVDLA_CFGROM NVDLA_CFGROM;
  rand block_addrmap_NVDLA_NVDLA_GLB NVDLA_GLB;
  rand block_addrmap_NVDLA_NVDLA_MCIF NVDLA_MCIF;
  rand block_addrmap_NVDLA_NVDLA_CDMA NVDLA_CDMA;
  rand block_addrmap_NVDLA_NVDLA_CSC NVDLA_CSC;
  rand block_addrmap_NVDLA_NVDLA_CMAC_A NVDLA_CMAC_A;
  rand block_addrmap_NVDLA_NVDLA_CMAC_B NVDLA_CMAC_B;
  rand block_addrmap_NVDLA_NVDLA_CACC NVDLA_CACC;
  rand block_addrmap_NVDLA_NVDLA_SDP_RDMA NVDLA_SDP_RDMA;
  rand block_addrmap_NVDLA_NVDLA_SDP NVDLA_SDP;
  rand block_addrmap_NVDLA_NVDLA_PDP_RDMA NVDLA_PDP_RDMA;
  rand block_addrmap_NVDLA_NVDLA_PDP NVDLA_PDP;
  rand block_addrmap_NVDLA_NVDLA_CDP_RDMA NVDLA_CDP_RDMA;
  rand block_addrmap_NVDLA_NVDLA_CDP NVDLA_CDP;
  rand block_addrmap_NVDLA_NVDLA_GEC NVDLA_GEC;
  rand block_addrmap_NVDLA_NVDLA_CVIF NVDLA_CVIF;
  rand block_addrmap_NVDLA_NVDLA_BDMA NVDLA_BDMA;
  rand block_addrmap_NVDLA_NVDLA_RBK NVDLA_RBK;
  
  function new(string name = "block_addrmap_NVDLA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", `UVM_REG_ADDR_WIDTH'h0, 4, UVM_LITTLE_ENDIAN, 1);
    this.set_rdl_address_map(1);
    this.set_rdl_address_map_hdl_path({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.NVDLA_CFGROM = block_addrmap_NVDLA_NVDLA_CFGROM::type_id::create("NVDLA_CFGROM",, get_full_name());
    this.NVDLA_CFGROM.configure(this, "");
    this.NVDLA_CFGROM.set_rdl_tag("NVDLA_CFGROM_");
    this.NVDLA_CFGROM.build();
    this.default_map.add_submap(this.NVDLA_CFGROM.default_map, `UVM_REG_ADDR_WIDTH'h0);
    this.NVDLA_GLB = block_addrmap_NVDLA_NVDLA_GLB::type_id::create("NVDLA_GLB",, get_full_name());
    this.NVDLA_GLB.configure(this, "");
    this.NVDLA_GLB.set_rdl_tag("NVDLA_GLB_");
    this.NVDLA_GLB.build();
    this.default_map.add_submap(this.NVDLA_GLB.default_map, `UVM_REG_ADDR_WIDTH'h1000);
    this.NVDLA_MCIF = block_addrmap_NVDLA_NVDLA_MCIF::type_id::create("NVDLA_MCIF",, get_full_name());
    this.NVDLA_MCIF.configure(this, "");
    this.NVDLA_MCIF.set_rdl_tag("NVDLA_MCIF_");
    this.NVDLA_MCIF.build();
    this.default_map.add_submap(this.NVDLA_MCIF.default_map, `UVM_REG_ADDR_WIDTH'h2000);
    this.NVDLA_CDMA = block_addrmap_NVDLA_NVDLA_CDMA::type_id::create("NVDLA_CDMA",, get_full_name());
    this.NVDLA_CDMA.configure(this, "");
    this.NVDLA_CDMA.set_rdl_tag("NVDLA_CDMA_");
    this.NVDLA_CDMA.build();
    this.default_map.add_submap(this.NVDLA_CDMA.default_map, `UVM_REG_ADDR_WIDTH'h3000);
    this.NVDLA_CSC = block_addrmap_NVDLA_NVDLA_CSC::type_id::create("NVDLA_CSC",, get_full_name());
    this.NVDLA_CSC.configure(this, "");
    this.NVDLA_CSC.set_rdl_tag("NVDLA_CSC_");
    this.NVDLA_CSC.build();
    this.default_map.add_submap(this.NVDLA_CSC.default_map, `UVM_REG_ADDR_WIDTH'h4000);
    this.NVDLA_CMAC_A = block_addrmap_NVDLA_NVDLA_CMAC_A::type_id::create("NVDLA_CMAC_A",, get_full_name());
    this.NVDLA_CMAC_A.configure(this, "");
    this.NVDLA_CMAC_A.set_rdl_tag("NVDLA_CMAC_A_");
    this.NVDLA_CMAC_A.build();
    this.default_map.add_submap(this.NVDLA_CMAC_A.default_map, `UVM_REG_ADDR_WIDTH'h5000);
    this.NVDLA_CMAC_B = block_addrmap_NVDLA_NVDLA_CMAC_B::type_id::create("NVDLA_CMAC_B",, get_full_name());
    this.NVDLA_CMAC_B.configure(this, "");
    this.NVDLA_CMAC_B.set_rdl_tag("NVDLA_CMAC_B_");
    this.NVDLA_CMAC_B.build();
    this.default_map.add_submap(this.NVDLA_CMAC_B.default_map, `UVM_REG_ADDR_WIDTH'h6000);
    this.NVDLA_CACC = block_addrmap_NVDLA_NVDLA_CACC::type_id::create("NVDLA_CACC",, get_full_name());
    this.NVDLA_CACC.configure(this, "");
    this.NVDLA_CACC.set_rdl_tag("NVDLA_CACC_");
    this.NVDLA_CACC.build();
    this.default_map.add_submap(this.NVDLA_CACC.default_map, `UVM_REG_ADDR_WIDTH'h7000);
    this.NVDLA_SDP_RDMA = block_addrmap_NVDLA_NVDLA_SDP_RDMA::type_id::create("NVDLA_SDP_RDMA",, get_full_name());
    this.NVDLA_SDP_RDMA.configure(this, "");
    this.NVDLA_SDP_RDMA.set_rdl_tag("NVDLA_SDP_RDMA_");
    this.NVDLA_SDP_RDMA.build();
    this.default_map.add_submap(this.NVDLA_SDP_RDMA.default_map, `UVM_REG_ADDR_WIDTH'h8000);
    this.NVDLA_SDP = block_addrmap_NVDLA_NVDLA_SDP::type_id::create("NVDLA_SDP",, get_full_name());
    this.NVDLA_SDP.configure(this, "");
    this.NVDLA_SDP.set_rdl_tag("NVDLA_SDP_");
    this.NVDLA_SDP.build();
    this.default_map.add_submap(this.NVDLA_SDP.default_map, `UVM_REG_ADDR_WIDTH'h9000);
    this.NVDLA_PDP_RDMA = block_addrmap_NVDLA_NVDLA_PDP_RDMA::type_id::create("NVDLA_PDP_RDMA",, get_full_name());
    this.NVDLA_PDP_RDMA.configure(this, "");
    this.NVDLA_PDP_RDMA.set_rdl_tag("NVDLA_PDP_RDMA_");
    this.NVDLA_PDP_RDMA.build();
    this.default_map.add_submap(this.NVDLA_PDP_RDMA.default_map, `UVM_REG_ADDR_WIDTH'ha000);
    this.NVDLA_PDP = block_addrmap_NVDLA_NVDLA_PDP::type_id::create("NVDLA_PDP",, get_full_name());
    this.NVDLA_PDP.configure(this, "");
    this.NVDLA_PDP.set_rdl_tag("NVDLA_PDP_");
    this.NVDLA_PDP.build();
    this.default_map.add_submap(this.NVDLA_PDP.default_map, `UVM_REG_ADDR_WIDTH'hb000);
    this.NVDLA_CDP_RDMA = block_addrmap_NVDLA_NVDLA_CDP_RDMA::type_id::create("NVDLA_CDP_RDMA",, get_full_name());
    this.NVDLA_CDP_RDMA.configure(this, "");
    this.NVDLA_CDP_RDMA.set_rdl_tag("NVDLA_CDP_RDMA_");
    this.NVDLA_CDP_RDMA.build();
    this.default_map.add_submap(this.NVDLA_CDP_RDMA.default_map, `UVM_REG_ADDR_WIDTH'hc000);
    this.NVDLA_CDP = block_addrmap_NVDLA_NVDLA_CDP::type_id::create("NVDLA_CDP",, get_full_name());
    this.NVDLA_CDP.configure(this, "");
    this.NVDLA_CDP.set_rdl_tag("NVDLA_CDP_");
    this.NVDLA_CDP.build();
    this.default_map.add_submap(this.NVDLA_CDP.default_map, `UVM_REG_ADDR_WIDTH'hd000);
    this.NVDLA_GEC = block_addrmap_NVDLA_NVDLA_GEC::type_id::create("NVDLA_GEC",, get_full_name());
    this.NVDLA_GEC.configure(this, "");
    this.NVDLA_GEC.set_rdl_tag("NVDLA_GEC_");
    this.NVDLA_GEC.build();
    this.default_map.add_submap(this.NVDLA_GEC.default_map, `UVM_REG_ADDR_WIDTH'he000);
    this.NVDLA_CVIF = block_addrmap_NVDLA_NVDLA_CVIF::type_id::create("NVDLA_CVIF",, get_full_name());
    this.NVDLA_CVIF.configure(this, "");
    this.NVDLA_CVIF.set_rdl_tag("NVDLA_CVIF_");
    this.NVDLA_CVIF.build();
    this.default_map.add_submap(this.NVDLA_CVIF.default_map, `UVM_REG_ADDR_WIDTH'hf000);
    this.NVDLA_BDMA = block_addrmap_NVDLA_NVDLA_BDMA::type_id::create("NVDLA_BDMA",, get_full_name());
    this.NVDLA_BDMA.configure(this, "");
    this.NVDLA_BDMA.set_rdl_tag("NVDLA_BDMA_");
    this.NVDLA_BDMA.build();
    this.default_map.add_submap(this.NVDLA_BDMA.default_map, `UVM_REG_ADDR_WIDTH'h10000);
    this.NVDLA_RBK = block_addrmap_NVDLA_NVDLA_RBK::type_id::create("NVDLA_RBK",, get_full_name());
    this.NVDLA_RBK.configure(this, "");
    this.NVDLA_RBK.set_rdl_tag("NVDLA_RBK_");
    this.NVDLA_RBK.build();
    this.default_map.add_submap(this.NVDLA_RBK.default_map, `UVM_REG_ADDR_WIDTH'h11000);
    set_hdl_path_root({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.add_callbacks();
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA)
endclass : block_addrmap_NVDLA
