//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_PDP.rdl
//   Parms: opendla.parms
//   Date: Sat Feb 01 17:43:28 CET 2020
//

#include "ordt_pio_common.hpp"
#include "ordt_pio.hpp"

// ------------------ ordt_addr_elem methods ------------------

ordt_addr_elem::ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : m_startaddress(_m_startaddress),
    m_endaddress(_m_endaddress) {
}

bool  ordt_addr_elem::containsAddress(const uint64_t &addr) {
  return ((addr >= m_startaddress) && (addr <= m_endaddress));
}

bool  ordt_addr_elem::isBelowAddress(const uint64_t &addr) {
  return (addr > m_endaddress);
}

bool  ordt_addr_elem::isAboveAddress(const uint64_t &addr) {
  return (addr < m_startaddress);
}

bool  ordt_addr_elem::hasStartAddress(const uint64_t &addr) {
  return (addr == m_startaddress);
}

void  ordt_addr_elem::update_child_ptrs() {
}

// ------------------ ordt_regset methods ------------------

ordt_addr_elem*  ordt_regset::findAddrElem(const uint64_t &addr) {
  int lo = 0;
  int hi = m_children.size()-1;
  int mid = 0;
  while (lo <= hi) {
     mid = (lo + hi) / 2;
     if (m_children[mid]->containsAddress(addr)) {
        //outElem = m_children[mid];
        return m_children[mid];
     }
     else if (m_children[mid]->isAboveAddress(addr))
        hi = mid - 1;
     else
        lo = mid + 1;
  }
  return nullptr;
}

ordt_regset::ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

int  ordt_regset::write(const uint64_t &addr, const ordt_data &wdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->write(addr, wdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in regset\n";
  #endif
     return 8;
}

int  ordt_regset::read(const uint64_t &addr, ordt_data &rdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->read(addr, rdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in regset\n";
  #endif
     rdata.clear();
     return 8;
}

// ------------------ ordt_reg methods ------------------

ordt_reg::ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

ordt_reg::ordt_reg(const ordt_reg &_old)
  : ordt_addr_elem(_old),
    m_mutex() {
}

void  ordt_reg::write(const ordt_data &wdata) {
}

int  ordt_reg::write(const uint64_t &addr, const ordt_data &wdata) {
     return 0;
}

void  ordt_reg::read(ordt_data &rdata) {
}

int  ordt_reg::read(const uint64_t &addr, ordt_data &rdata) {
     return 0;
}

// ------------------ ordt_rg_NVDLA_PDP_S_STATUS methods ------------------

ordt_rg_NVDLA_PDP_S_STATUS::ordt_rg_NVDLA_PDP_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_PDP_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_PDP_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_S_POINTER methods ------------------

ordt_rg_NVDLA_PDP_S_POINTER::ordt_rg_NVDLA_PDP_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_PDP_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_PDP_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_PDP_D_OP_ENABLE::ordt_rg_NVDLA_PDP_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH methods ------------------

ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH::ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CUBE_IN_WIDTH(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CUBE_IN_WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CUBE_IN_WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT methods ------------------

ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT::ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CUBE_IN_HEIGHT(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CUBE_IN_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CUBE_IN_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL methods ------------------

ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL::ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CUBE_IN_CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CUBE_IN_CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CUBE_IN_CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH methods ------------------

ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH::ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CUBE_OUT_WIDTH(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CUBE_OUT_WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CUBE_OUT_WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT methods ------------------

ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT::ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CUBE_OUT_HEIGHT(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CUBE_OUT_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CUBE_OUT_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL methods ------------------

ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL::ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CUBE_OUT_CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CUBE_OUT_CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CUBE_OUT_CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG::ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    POOLING_METHOD(0, 2, 0x0, r_std, w_std),
    FLYING_MODE(4, 1, 0x0, r_std, w_std),
    SPLIT_NUM(8, 8, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  POOLING_METHOD.write(wdata);
  FLYING_MODE.write(wdata);
  SPLIT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  POOLING_METHOD.read(rdata);
  FLYING_MODE.read(rdata);
  SPLIT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO methods ------------------

ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO::ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NAN_TO_ZERO(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NAN_TO_ZERO.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NAN_TO_ZERO.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN methods ------------------

ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN::ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PARTIAL_WIDTH_IN_FIRST(0, 10, 0x0, r_std, w_std),
    PARTIAL_WIDTH_IN_LAST(10, 10, 0x0, r_std, w_std),
    PARTIAL_WIDTH_IN_MID(20, 10, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PARTIAL_WIDTH_IN_FIRST.write(wdata);
  PARTIAL_WIDTH_IN_LAST.write(wdata);
  PARTIAL_WIDTH_IN_MID.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PARTIAL_WIDTH_IN_FIRST.read(rdata);
  PARTIAL_WIDTH_IN_LAST.read(rdata);
  PARTIAL_WIDTH_IN_MID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT methods ------------------

ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT::ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PARTIAL_WIDTH_OUT_FIRST(0, 10, 0x0, r_std, w_std),
    PARTIAL_WIDTH_OUT_LAST(10, 10, 0x0, r_std, w_std),
    PARTIAL_WIDTH_OUT_MID(20, 10, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PARTIAL_WIDTH_OUT_FIRST.write(wdata);
  PARTIAL_WIDTH_OUT_LAST.write(wdata);
  PARTIAL_WIDTH_OUT_MID.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PARTIAL_WIDTH_OUT_FIRST.read(rdata);
  PARTIAL_WIDTH_OUT_LAST.read(rdata);
  PARTIAL_WIDTH_OUT_MID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG::ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    KERNEL_WIDTH(0, 4, 0x0, r_std, w_std),
    KERNEL_HEIGHT(8, 4, 0x0, r_std, w_std),
    KERNEL_STRIDE_WIDTH(16, 4, 0x0, r_std, w_std),
    KERNEL_STRIDE_HEIGHT(20, 4, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  KERNEL_WIDTH.write(wdata);
  KERNEL_HEIGHT.write(wdata);
  KERNEL_STRIDE_WIDTH.write(wdata);
  KERNEL_STRIDE_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  KERNEL_WIDTH.read(rdata);
  KERNEL_HEIGHT.read(rdata);
  KERNEL_STRIDE_WIDTH.read(rdata);
  KERNEL_STRIDE_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH methods ------------------

ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH::ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RECIP_KERNEL_WIDTH(0, 17, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RECIP_KERNEL_WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RECIP_KERNEL_WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT methods ------------------

ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT::ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RECIP_KERNEL_HEIGHT(0, 17, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RECIP_KERNEL_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RECIP_KERNEL_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_LEFT(0, 3, 0x0, r_std, w_std),
    PAD_TOP(4, 3, 0x0, r_std, w_std),
    PAD_RIGHT(8, 3, 0x0, r_std, w_std),
    PAD_BOTTOM(12, 3, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_LEFT.write(wdata);
  PAD_TOP.write(wdata);
  PAD_RIGHT.write(wdata);
  PAD_BOTTOM.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_LEFT.read(rdata);
  PAD_TOP.read(rdata);
  PAD_RIGHT.read(rdata);
  PAD_BOTTOM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE_1X(0, 19, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE_1X.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE_1X.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE_2X(0, 19, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE_2X.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE_2X.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE_3X(0, 19, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE_3X.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE_3X.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE_4X(0, 19, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE_4X.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE_4X.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE_5X(0, 19, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE_5X.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE_5X.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE_6X(0, 19, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE_6X.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE_6X.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE_7X(0, 19, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE_7X.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE_7X.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW::ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH::ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE::ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE::ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW::ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH::ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE::ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE::ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DST_RAM_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_DST_RAM_CFG::ordt_rg_NVDLA_PDP_D_DST_RAM_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DST_RAM_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DST_RAM_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_RAM_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_RAM_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DST_RAM_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DST_RAM_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_RAM_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_RAM_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DATA_FORMAT methods ------------------

ordt_rg_NVDLA_PDP_D_DATA_FORMAT::ordt_rg_NVDLA_PDP_D_DATA_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    INPUT_DATA(0, 2, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DATA_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DATA_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  INPUT_DATA.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DATA_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DATA_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  INPUT_DATA.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM methods ------------------

ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM::ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    INF_INPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  INF_INPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  INF_INPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM methods ------------------

ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM::ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NAN_INPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NAN_INPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NAN_INPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM methods ------------------

ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM::ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NAN_OUTPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NAN_OUTPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NAN_OUTPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_PERF_ENABLE methods ------------------

ordt_rg_NVDLA_PDP_D_PERF_ENABLE::ordt_rg_NVDLA_PDP_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DMA_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_PERF_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_PERF_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PERF_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PERF_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DMA_EN.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_PERF_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_PERF_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PERF_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PERF_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DMA_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL methods ------------------

ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL::ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_WRITE_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_WRITE_STALL.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_WRITE_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_CYA methods ------------------

ordt_rg_NVDLA_PDP_D_CYA::ordt_rg_NVDLA_PDP_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CYA(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_CYA::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_CYA at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_CYA\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_CYA::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CYA.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_CYA::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_CYA at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_CYA\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_CYA::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CYA.read(rdata);
}

// ------------------ ordt_rset_NVDLA_PDP methods ------------------

ordt_rset_NVDLA_PDP::ordt_rset_NVDLA_PDP(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    D_OP_ENABLE(_m_startaddress + 0x8, _m_startaddress + 0xb),
    D_DATA_CUBE_IN_WIDTH(_m_startaddress + 0xc, _m_startaddress + 0xf),
    D_DATA_CUBE_IN_HEIGHT(_m_startaddress + 0x10, _m_startaddress + 0x13),
    D_DATA_CUBE_IN_CHANNEL(_m_startaddress + 0x14, _m_startaddress + 0x17),
    D_DATA_CUBE_OUT_WIDTH(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    D_DATA_CUBE_OUT_HEIGHT(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    D_DATA_CUBE_OUT_CHANNEL(_m_startaddress + 0x20, _m_startaddress + 0x23),
    D_OPERATION_MODE_CFG(_m_startaddress + 0x24, _m_startaddress + 0x27),
    D_NAN_FLUSH_TO_ZERO(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    D_PARTIAL_WIDTH_IN(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    D_PARTIAL_WIDTH_OUT(_m_startaddress + 0x30, _m_startaddress + 0x33),
    D_POOLING_KERNEL_CFG(_m_startaddress + 0x34, _m_startaddress + 0x37),
    D_RECIP_KERNEL_WIDTH(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    D_RECIP_KERNEL_HEIGHT(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    D_POOLING_PADDING_CFG(_m_startaddress + 0x40, _m_startaddress + 0x43),
    D_POOLING_PADDING_VALUE_1_CFG(_m_startaddress + 0x44, _m_startaddress + 0x47),
    D_POOLING_PADDING_VALUE_2_CFG(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    D_POOLING_PADDING_VALUE_3_CFG(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    D_POOLING_PADDING_VALUE_4_CFG(_m_startaddress + 0x50, _m_startaddress + 0x53),
    D_POOLING_PADDING_VALUE_5_CFG(_m_startaddress + 0x54, _m_startaddress + 0x57),
    D_POOLING_PADDING_VALUE_6_CFG(_m_startaddress + 0x58, _m_startaddress + 0x5b),
    D_POOLING_PADDING_VALUE_7_CFG(_m_startaddress + 0x5c, _m_startaddress + 0x5f),
    D_SRC_BASE_ADDR_LOW(_m_startaddress + 0x60, _m_startaddress + 0x63),
    D_SRC_BASE_ADDR_HIGH(_m_startaddress + 0x64, _m_startaddress + 0x67),
    D_SRC_LINE_STRIDE(_m_startaddress + 0x68, _m_startaddress + 0x6b),
    D_SRC_SURFACE_STRIDE(_m_startaddress + 0x6c, _m_startaddress + 0x6f),
    D_DST_BASE_ADDR_LOW(_m_startaddress + 0x70, _m_startaddress + 0x73),
    D_DST_BASE_ADDR_HIGH(_m_startaddress + 0x74, _m_startaddress + 0x77),
    D_DST_LINE_STRIDE(_m_startaddress + 0x78, _m_startaddress + 0x7b),
    D_DST_SURFACE_STRIDE(_m_startaddress + 0x7c, _m_startaddress + 0x7f),
    D_DST_RAM_CFG(_m_startaddress + 0x80, _m_startaddress + 0x83),
    D_DATA_FORMAT(_m_startaddress + 0x84, _m_startaddress + 0x87),
    D_INF_INPUT_NUM(_m_startaddress + 0x88, _m_startaddress + 0x8b),
    D_NAN_INPUT_NUM(_m_startaddress + 0x8c, _m_startaddress + 0x8f),
    D_NAN_OUTPUT_NUM(_m_startaddress + 0x90, _m_startaddress + 0x93),
    D_PERF_ENABLE(_m_startaddress + 0x94, _m_startaddress + 0x97),
    D_PERF_WRITE_STALL(_m_startaddress + 0x98, _m_startaddress + 0x9b),
    D_CYA(_m_startaddress + 0x9c, _m_startaddress + 0x9f) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_IN_WIDTH);
  m_children.push_back(&D_DATA_CUBE_IN_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_IN_CHANNEL);
  m_children.push_back(&D_DATA_CUBE_OUT_WIDTH);
  m_children.push_back(&D_DATA_CUBE_OUT_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_OUT_CHANNEL);
  m_children.push_back(&D_OPERATION_MODE_CFG);
  m_children.push_back(&D_NAN_FLUSH_TO_ZERO);
  m_children.push_back(&D_PARTIAL_WIDTH_IN);
  m_children.push_back(&D_PARTIAL_WIDTH_OUT);
  m_children.push_back(&D_POOLING_KERNEL_CFG);
  m_children.push_back(&D_RECIP_KERNEL_WIDTH);
  m_children.push_back(&D_RECIP_KERNEL_HEIGHT);
  m_children.push_back(&D_POOLING_PADDING_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_1_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_2_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_3_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_4_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_5_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_6_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_7_CFG);
  m_children.push_back(&D_SRC_BASE_ADDR_LOW);
  m_children.push_back(&D_SRC_BASE_ADDR_HIGH);
  m_children.push_back(&D_SRC_LINE_STRIDE);
  m_children.push_back(&D_SRC_SURFACE_STRIDE);
  m_children.push_back(&D_DST_BASE_ADDR_LOW);
  m_children.push_back(&D_DST_BASE_ADDR_HIGH);
  m_children.push_back(&D_DST_LINE_STRIDE);
  m_children.push_back(&D_DST_SURFACE_STRIDE);
  m_children.push_back(&D_DST_RAM_CFG);
  m_children.push_back(&D_DATA_FORMAT);
  m_children.push_back(&D_INF_INPUT_NUM);
  m_children.push_back(&D_NAN_INPUT_NUM);
  m_children.push_back(&D_NAN_OUTPUT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_WRITE_STALL);
  m_children.push_back(&D_CYA);
}

void  ordt_rset_NVDLA_PDP::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_IN_WIDTH);
  m_children.push_back(&D_DATA_CUBE_IN_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_IN_CHANNEL);
  m_children.push_back(&D_DATA_CUBE_OUT_WIDTH);
  m_children.push_back(&D_DATA_CUBE_OUT_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_OUT_CHANNEL);
  m_children.push_back(&D_OPERATION_MODE_CFG);
  m_children.push_back(&D_NAN_FLUSH_TO_ZERO);
  m_children.push_back(&D_PARTIAL_WIDTH_IN);
  m_children.push_back(&D_PARTIAL_WIDTH_OUT);
  m_children.push_back(&D_POOLING_KERNEL_CFG);
  m_children.push_back(&D_RECIP_KERNEL_WIDTH);
  m_children.push_back(&D_RECIP_KERNEL_HEIGHT);
  m_children.push_back(&D_POOLING_PADDING_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_1_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_2_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_3_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_4_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_5_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_6_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_7_CFG);
  m_children.push_back(&D_SRC_BASE_ADDR_LOW);
  m_children.push_back(&D_SRC_BASE_ADDR_HIGH);
  m_children.push_back(&D_SRC_LINE_STRIDE);
  m_children.push_back(&D_SRC_SURFACE_STRIDE);
  m_children.push_back(&D_DST_BASE_ADDR_LOW);
  m_children.push_back(&D_DST_BASE_ADDR_HIGH);
  m_children.push_back(&D_DST_LINE_STRIDE);
  m_children.push_back(&D_DST_SURFACE_STRIDE);
  m_children.push_back(&D_DST_RAM_CFG);
  m_children.push_back(&D_DATA_FORMAT);
  m_children.push_back(&D_INF_INPUT_NUM);
  m_children.push_back(&D_NAN_INPUT_NUM);
  m_children.push_back(&D_NAN_OUTPUT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_WRITE_STALL);
  m_children.push_back(&D_CYA);
}

// ------------------ ordt_root methods ------------------

ordt_root::ordt_root()
  : ordt_root(0x0, 0xb09f) {
}

ordt_root::ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    NVDLA_PDP(_m_startaddress + 0xb000, _m_startaddress + 0xb0ff) {
  m_children.push_back(&NVDLA_PDP);
}

void  ordt_root::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&NVDLA_PDP);
}

