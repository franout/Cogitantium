//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_BDMA.rdl
//   Parms: opendla.parms
//   Date: Sat Feb 01 17:43:36 CET 2020
//

#include "ordt_pio_common.hpp"
#include "ordt_pio.hpp"

// ------------------ ordt_addr_elem methods ------------------

ordt_addr_elem::ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : m_startaddress(_m_startaddress),
    m_endaddress(_m_endaddress) {
}

bool  ordt_addr_elem::containsAddress(const uint64_t &addr) {
  return ((addr >= m_startaddress) && (addr <= m_endaddress));
}

bool  ordt_addr_elem::isBelowAddress(const uint64_t &addr) {
  return (addr > m_endaddress);
}

bool  ordt_addr_elem::isAboveAddress(const uint64_t &addr) {
  return (addr < m_startaddress);
}

bool  ordt_addr_elem::hasStartAddress(const uint64_t &addr) {
  return (addr == m_startaddress);
}

void  ordt_addr_elem::update_child_ptrs() {
}

// ------------------ ordt_regset methods ------------------

ordt_addr_elem*  ordt_regset::findAddrElem(const uint64_t &addr) {
  int lo = 0;
  int hi = m_children.size()-1;
  int mid = 0;
  while (lo <= hi) {
     mid = (lo + hi) / 2;
     if (m_children[mid]->containsAddress(addr)) {
        //outElem = m_children[mid];
        return m_children[mid];
     }
     else if (m_children[mid]->isAboveAddress(addr))
        hi = mid - 1;
     else
        lo = mid + 1;
  }
  return nullptr;
}

ordt_regset::ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

int  ordt_regset::write(const uint64_t &addr, const ordt_data &wdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->write(addr, wdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in regset\n";
  #endif
     return 8;
}

int  ordt_regset::read(const uint64_t &addr, ordt_data &rdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->read(addr, rdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in regset\n";
  #endif
     rdata.clear();
     return 8;
}

// ------------------ ordt_reg methods ------------------

ordt_reg::ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

ordt_reg::ordt_reg(const ordt_reg &_old)
  : ordt_addr_elem(_old),
    m_mutex() {
}

void  ordt_reg::write(const ordt_data &wdata) {
}

int  ordt_reg::write(const uint64_t &addr, const ordt_data &wdata) {
     return 0;
}

void  ordt_reg::read(ordt_data &rdata) {
}

int  ordt_reg::read(const uint64_t &addr, ordt_data &rdata) {
     return 0;
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW methods ------------------

ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW::ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    V32(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  V32.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  V32.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH::ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    V8(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  V8.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  V8.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW methods ------------------

ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW::ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    V32(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  V32.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  V32.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH::ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    V8(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  V8.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  V8.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_LINE methods ------------------

ordt_rg_NVDLA_BDMA_CFG_LINE::ordt_rg_NVDLA_BDMA_CFG_LINE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SIZE(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_LINE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_LINE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LINE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LINE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SIZE.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_LINE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_LINE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LINE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LINE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SIZE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_CMD methods ------------------

ordt_rg_NVDLA_BDMA_CFG_CMD::ordt_rg_NVDLA_BDMA_CFG_CMD(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_RAM_TYPE(0, 1, 0x0, r_std, w_std),
    DST_RAM_TYPE(1, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_CMD::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_CMD at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_CMD\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_CMD::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_RAM_TYPE.write(wdata);
  DST_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_CMD::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_CMD at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_CMD\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_CMD::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_RAM_TYPE.read(rdata);
  DST_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT methods ------------------

ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT::ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NUMBER(0, 24, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NUMBER.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NUMBER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_SRC_LINE methods ------------------

ordt_rg_NVDLA_BDMA_CFG_SRC_LINE::ordt_rg_NVDLA_BDMA_CFG_SRC_LINE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_LINE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_SRC_LINE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_LINE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_LINE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_LINE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_SRC_LINE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_LINE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_LINE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_DST_LINE methods ------------------

ordt_rg_NVDLA_BDMA_CFG_DST_LINE::ordt_rg_NVDLA_BDMA_CFG_DST_LINE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_LINE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_DST_LINE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_LINE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_LINE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_LINE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_DST_LINE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_LINE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_LINE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT methods ------------------

ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT::ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NUMBER(0, 24, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NUMBER.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NUMBER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_SRC_SURF methods ------------------

ordt_rg_NVDLA_BDMA_CFG_SRC_SURF::ordt_rg_NVDLA_BDMA_CFG_SRC_SURF(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_SURF::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_SRC_SURF at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_SURF\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_SURF::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_SURF::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_SRC_SURF at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_SURF\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_SURF::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_DST_SURF methods ------------------

ordt_rg_NVDLA_BDMA_CFG_DST_SURF::ordt_rg_NVDLA_BDMA_CFG_DST_SURF(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_SURF::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_DST_SURF at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_SURF\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_SURF::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_SURF::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_DST_SURF at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_SURF\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_SURF::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_OP methods ------------------

ordt_rg_NVDLA_BDMA_CFG_OP::ordt_rg_NVDLA_BDMA_CFG_OP(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_OP::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_OP at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_OP\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_OP::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EN.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_OP::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_OP at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_OP\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_OP::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_LAUNCH0 methods ------------------

ordt_rg_NVDLA_BDMA_CFG_LAUNCH0::ordt_rg_NVDLA_BDMA_CFG_LAUNCH0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    GRP0_LAUNCH(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_LAUNCH0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LAUNCH0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  GRP0_LAUNCH.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_LAUNCH0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LAUNCH0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  GRP0_LAUNCH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_LAUNCH1 methods ------------------

ordt_rg_NVDLA_BDMA_CFG_LAUNCH1::ordt_rg_NVDLA_BDMA_CFG_LAUNCH1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    GRP1_LAUNCH(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_LAUNCH1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LAUNCH1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  GRP1_LAUNCH.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_LAUNCH1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LAUNCH1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  GRP1_LAUNCH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_STATUS methods ------------------

ordt_rg_NVDLA_BDMA_CFG_STATUS::ordt_rg_NVDLA_BDMA_CFG_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STALL_COUNT_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STALL_COUNT_EN.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STALL_COUNT_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_STATUS methods ------------------

ordt_rg_NVDLA_BDMA_STATUS::ordt_rg_NVDLA_BDMA_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    FREE_SLOT(0, 8, 0x14, r_std, w_none),
    IDLE(8, 1, 0x1, r_std, w_none),
    GRP0_BUSY(9, 1, 0x0, r_std, w_none),
    GRP1_BUSY(10, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_BDMA_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  FREE_SLOT.write(wdata);
  IDLE.write(wdata);
  GRP0_BUSY.write(wdata);
  GRP1_BUSY.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  FREE_SLOT.read(rdata);
  IDLE.read(rdata);
  GRP0_BUSY.read(rdata);
  GRP1_BUSY.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL methods ------------------

ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL::ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    COUNT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  COUNT.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  COUNT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL methods ------------------

ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL::ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    COUNT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  COUNT.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  COUNT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL methods ------------------

ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL::ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    COUNT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  COUNT.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  COUNT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL methods ------------------

ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL::ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    COUNT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  COUNT.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  COUNT.read(rdata);
}

// ------------------ ordt_rset_NVDLA_BDMA methods ------------------

ordt_rset_NVDLA_BDMA::ordt_rset_NVDLA_BDMA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    CFG_SRC_ADDR_LOW(_m_startaddress + 0x0, _m_startaddress + 0x3),
    CFG_SRC_ADDR_HIGH(_m_startaddress + 0x4, _m_startaddress + 0x7),
    CFG_DST_ADDR_LOW(_m_startaddress + 0x8, _m_startaddress + 0xb),
    CFG_DST_ADDR_HIGH(_m_startaddress + 0xc, _m_startaddress + 0xf),
    CFG_LINE(_m_startaddress + 0x10, _m_startaddress + 0x13),
    CFG_CMD(_m_startaddress + 0x14, _m_startaddress + 0x17),
    CFG_LINE_REPEAT(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    CFG_SRC_LINE(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    CFG_DST_LINE(_m_startaddress + 0x20, _m_startaddress + 0x23),
    CFG_SURF_REPEAT(_m_startaddress + 0x24, _m_startaddress + 0x27),
    CFG_SRC_SURF(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    CFG_DST_SURF(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    CFG_OP(_m_startaddress + 0x30, _m_startaddress + 0x33),
    CFG_LAUNCH0(_m_startaddress + 0x34, _m_startaddress + 0x37),
    CFG_LAUNCH1(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    CFG_STATUS(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    STATUS(_m_startaddress + 0x40, _m_startaddress + 0x43),
    STATUS_GRP0_READ_STALL(_m_startaddress + 0x44, _m_startaddress + 0x47),
    STATUS_GRP0_WRITE_STALL(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    STATUS_GRP1_READ_STALL(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    STATUS_GRP1_WRITE_STALL(_m_startaddress + 0x50, _m_startaddress + 0x53) {
  m_children.push_back(&CFG_SRC_ADDR_LOW);
  m_children.push_back(&CFG_SRC_ADDR_HIGH);
  m_children.push_back(&CFG_DST_ADDR_LOW);
  m_children.push_back(&CFG_DST_ADDR_HIGH);
  m_children.push_back(&CFG_LINE);
  m_children.push_back(&CFG_CMD);
  m_children.push_back(&CFG_LINE_REPEAT);
  m_children.push_back(&CFG_SRC_LINE);
  m_children.push_back(&CFG_DST_LINE);
  m_children.push_back(&CFG_SURF_REPEAT);
  m_children.push_back(&CFG_SRC_SURF);
  m_children.push_back(&CFG_DST_SURF);
  m_children.push_back(&CFG_OP);
  m_children.push_back(&CFG_LAUNCH0);
  m_children.push_back(&CFG_LAUNCH1);
  m_children.push_back(&CFG_STATUS);
  m_children.push_back(&STATUS);
  m_children.push_back(&STATUS_GRP0_READ_STALL);
  m_children.push_back(&STATUS_GRP0_WRITE_STALL);
  m_children.push_back(&STATUS_GRP1_READ_STALL);
  m_children.push_back(&STATUS_GRP1_WRITE_STALL);
}

void  ordt_rset_NVDLA_BDMA::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&CFG_SRC_ADDR_LOW);
  m_children.push_back(&CFG_SRC_ADDR_HIGH);
  m_children.push_back(&CFG_DST_ADDR_LOW);
  m_children.push_back(&CFG_DST_ADDR_HIGH);
  m_children.push_back(&CFG_LINE);
  m_children.push_back(&CFG_CMD);
  m_children.push_back(&CFG_LINE_REPEAT);
  m_children.push_back(&CFG_SRC_LINE);
  m_children.push_back(&CFG_DST_LINE);
  m_children.push_back(&CFG_SURF_REPEAT);
  m_children.push_back(&CFG_SRC_SURF);
  m_children.push_back(&CFG_DST_SURF);
  m_children.push_back(&CFG_OP);
  m_children.push_back(&CFG_LAUNCH0);
  m_children.push_back(&CFG_LAUNCH1);
  m_children.push_back(&CFG_STATUS);
  m_children.push_back(&STATUS);
  m_children.push_back(&STATUS_GRP0_READ_STALL);
  m_children.push_back(&STATUS_GRP0_WRITE_STALL);
  m_children.push_back(&STATUS_GRP1_READ_STALL);
  m_children.push_back(&STATUS_GRP1_WRITE_STALL);
}

// ------------------ ordt_root methods ------------------

ordt_root::ordt_root()
  : ordt_root(0x0, 0x10053) {
}

ordt_root::ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    NVDLA_BDMA(_m_startaddress + 0x10000, _m_startaddress + 0x1007f) {
  m_children.push_back(&NVDLA_BDMA);
}

void  ordt_root::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&NVDLA_BDMA);
}

