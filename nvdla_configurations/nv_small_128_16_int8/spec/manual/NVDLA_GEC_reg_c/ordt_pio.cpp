//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_GEC.rdl
//   Parms: opendla.parms
//   Date: Tue Feb 04 11:44:41 CET 2020
//

#include "ordt_pio_common.hpp"
#include "ordt_pio.hpp"

// ------------------ ordt_addr_elem methods ------------------

ordt_addr_elem::ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : m_startaddress(_m_startaddress),
    m_endaddress(_m_endaddress) {
}

bool  ordt_addr_elem::containsAddress(const uint64_t &addr) {
  return ((addr >= m_startaddress) && (addr <= m_endaddress));
}

bool  ordt_addr_elem::isBelowAddress(const uint64_t &addr) {
  return (addr > m_endaddress);
}

bool  ordt_addr_elem::isAboveAddress(const uint64_t &addr) {
  return (addr < m_startaddress);
}

bool  ordt_addr_elem::hasStartAddress(const uint64_t &addr) {
  return (addr == m_startaddress);
}

void  ordt_addr_elem::update_child_ptrs() {
}

// ------------------ ordt_regset methods ------------------

ordt_addr_elem*  ordt_regset::findAddrElem(const uint64_t &addr) {
  int lo = 0;
  int hi = m_children.size()-1;
  int mid = 0;
  while (lo <= hi) {
     mid = (lo + hi) / 2;
     if (m_children[mid]->containsAddress(addr)) {
        //outElem = m_children[mid];
        return m_children[mid];
     }
     else if (m_children[mid]->isAboveAddress(addr))
        hi = mid - 1;
     else
        lo = mid + 1;
  }
  return nullptr;
}

ordt_regset::ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

int  ordt_regset::write(const uint64_t &addr, const ordt_data &wdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->write(addr, wdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in regset\n";
  #endif
     return 8;
}

int  ordt_regset::read(const uint64_t &addr, ordt_data &rdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->read(addr, rdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in regset\n";
  #endif
     rdata.clear();
     return 8;
}

// ------------------ ordt_reg methods ------------------

ordt_reg::ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

ordt_reg::ordt_reg(const ordt_reg &_old)
  : ordt_addr_elem(_old),
    m_mutex() {
}

void  ordt_reg::write(const ordt_data &wdata) {
}

int  ordt_reg::write(const uint64_t &addr, const ordt_data &wdata) {
     return 0;
}

void  ordt_reg::read(ordt_data &rdata) {
}

int  ordt_reg::read(const uint64_t &addr, ordt_data &rdata) {
     return 0;
}

// ------------------ ordt_rg_NVDLA_GEC_FEATURE methods ------------------

ordt_rg_NVDLA_GEC_FEATURE::ordt_rg_NVDLA_GEC_FEATURE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NUM_ERR_SLICES(0, 6, 0x3, r_std, w_none),
    NUM_ERR(16, 16, 0x43, r_std, w_none) {
}

int  ordt_rg_NVDLA_GEC_FEATURE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_FEATURE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_FEATURE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_FEATURE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NUM_ERR_SLICES.write(wdata);
  NUM_ERR.write(wdata);
}

int  ordt_rg_NVDLA_GEC_FEATURE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_FEATURE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_FEATURE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_FEATURE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NUM_ERR_SLICES.read(rdata);
  NUM_ERR.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_SWRESET methods ------------------

ordt_rg_NVDLA_GEC_SWRESET::ordt_rg_NVDLA_GEC_SWRESET(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SWRST(0, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_SWRESET::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_SWRESET at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_SWRESET\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_SWRESET::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SWRST.write(wdata);
}

int  ordt_rg_NVDLA_GEC_SWRESET::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_SWRESET at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_SWRESET\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_SWRESET::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SWRST.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_MISSIONERR_TYPE methods ------------------

ordt_rg_NVDLA_GEC_MISSIONERR_TYPE::ordt_rg_NVDLA_GEC_MISSIONERR_TYPE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CODE(0, 6, 0x5, r_std, w_none) {
}

int  ordt_rg_NVDLA_GEC_MISSIONERR_TYPE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_MISSIONERR_TYPE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_MISSIONERR_TYPE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_MISSIONERR_TYPE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CODE.write(wdata);
}

int  ordt_rg_NVDLA_GEC_MISSIONERR_TYPE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_MISSIONERR_TYPE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_MISSIONERR_TYPE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_MISSIONERR_TYPE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CODE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE methods ------------------

ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE::ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    VALUE(0, 9, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  VALUE.write(wdata);
}

int  ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_MISSIONERR_INDEX methods ------------------

ordt_rg_NVDLA_GEC_MISSIONERR_INDEX::ordt_rg_NVDLA_GEC_MISSIONERR_INDEX(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    IDX(0, 7, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_MISSIONERR_INDEX::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_MISSIONERR_INDEX at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_MISSIONERR_INDEX\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_MISSIONERR_INDEX::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  IDX.write(wdata);
}

int  ordt_rg_NVDLA_GEC_MISSIONERR_INDEX::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_MISSIONERR_INDEX at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_MISSIONERR_INDEX\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_MISSIONERR_INDEX::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  IDX.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD methods ------------------

ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD::ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    COUNT(0, 8, 0xff, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  COUNT.write(wdata);
}

int  ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  COUNT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK methods ------------------

ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK::ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    VALUE(0, 8, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  VALUE.write(wdata);
}

int  ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE::ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x1, r_std, w_std),
    ERR1(1, 1, 0x1, r_std, w_std),
    ERR2(2, 1, 0x1, r_std, w_std),
    ERR3(3, 1, 0x1, r_std, w_std),
    ERR4(4, 1, 0x1, r_std, w_std),
    ERR5(5, 1, 0x1, r_std, w_std),
    ERR6(6, 1, 0x1, r_std, w_std),
    ERR7(7, 1, 0x1, r_std, w_std),
    ERR8(8, 1, 0x1, r_std, w_std),
    ERR9(9, 1, 0x1, r_std, w_std),
    ERR10(10, 1, 0x1, r_std, w_std),
    ERR11(11, 1, 0x1, r_std, w_std),
    ERR12(12, 1, 0x1, r_std, w_std),
    ERR13(13, 1, 0x1, r_std, w_std),
    ERR14(14, 1, 0x1, r_std, w_std),
    ERR15(15, 1, 0x1, r_std, w_std),
    ERR16(16, 1, 0x1, r_std, w_std),
    ERR17(17, 1, 0x1, r_std, w_std),
    ERR18(18, 1, 0x1, r_std, w_std),
    ERR19(19, 1, 0x1, r_std, w_std),
    ERR20(20, 1, 0x1, r_std, w_std),
    ERR21(21, 1, 0x1, r_std, w_std),
    ERR22(22, 1, 0x1, r_std, w_std),
    ERR23(23, 1, 0x1, r_std, w_std),
    ERR24(24, 1, 0x1, r_std, w_std),
    ERR25(25, 1, 0x1, r_std, w_std),
    ERR26(26, 1, 0x1, r_std, w_std),
    ERR27(27, 1, 0x1, r_std, w_std),
    ERR28(28, 1, 0x1, r_std, w_std),
    ERR29(29, 1, 0x1, r_std, w_std),
    ERR30(30, 1, 0x1, r_std, w_std),
    ERR31(31, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR9.write(wdata);
  ERR10.write(wdata);
  ERR11.write(wdata);
  ERR12.write(wdata);
  ERR13.write(wdata);
  ERR14.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR9.read(rdata);
  ERR10.read(rdata);
  ERR11.read(rdata);
  ERR12.read(rdata);
  ERR13.read(rdata);
  ERR14.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE::ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x0, r_none, w_std),
    ERR1(1, 1, 0x0, r_none, w_std),
    ERR2(2, 1, 0x0, r_none, w_std),
    ERR3(3, 1, 0x0, r_none, w_std),
    ERR4(4, 1, 0x0, r_none, w_std),
    ERR5(5, 1, 0x0, r_none, w_std),
    ERR6(6, 1, 0x0, r_none, w_std),
    ERR7(7, 1, 0x0, r_none, w_std),
    ERR8(8, 1, 0x0, r_none, w_std),
    ERR9(9, 1, 0x0, r_none, w_std),
    ERR10(10, 1, 0x0, r_none, w_std),
    ERR11(11, 1, 0x0, r_none, w_std),
    ERR12(12, 1, 0x0, r_none, w_std),
    ERR13(13, 1, 0x0, r_none, w_std),
    ERR14(14, 1, 0x0, r_none, w_std),
    ERR15(15, 1, 0x0, r_none, w_std),
    ERR16(16, 1, 0x0, r_none, w_std),
    ERR17(17, 1, 0x0, r_none, w_std),
    ERR18(18, 1, 0x0, r_none, w_std),
    ERR19(19, 1, 0x0, r_none, w_std),
    ERR20(20, 1, 0x0, r_none, w_std),
    ERR21(21, 1, 0x0, r_none, w_std),
    ERR22(22, 1, 0x0, r_none, w_std),
    ERR23(23, 1, 0x0, r_none, w_std),
    ERR24(24, 1, 0x0, r_none, w_std),
    ERR25(25, 1, 0x0, r_none, w_std),
    ERR26(26, 1, 0x0, r_none, w_std),
    ERR27(27, 1, 0x0, r_none, w_std),
    ERR28(28, 1, 0x0, r_none, w_std),
    ERR29(29, 1, 0x0, r_none, w_std),
    ERR30(30, 1, 0x0, r_none, w_std),
    ERR31(31, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR9.write(wdata);
  ERR10.write(wdata);
  ERR11.write(wdata);
  ERR12.write(wdata);
  ERR13.write(wdata);
  ERR14.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR9.read(rdata);
  ERR10.read(rdata);
  ERR11.read(rdata);
  ERR12.read(rdata);
  ERR13.read(rdata);
  ERR14.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS::ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x0, r_std, w_std),
    ERR1(1, 1, 0x0, r_std, w_std),
    ERR2(2, 1, 0x0, r_std, w_std),
    ERR3(3, 1, 0x0, r_std, w_std),
    ERR4(4, 1, 0x0, r_std, w_std),
    ERR5(5, 1, 0x0, r_std, w_std),
    ERR6(6, 1, 0x0, r_std, w_std),
    ERR7(7, 1, 0x0, r_std, w_std),
    ERR8(8, 1, 0x0, r_std, w_std),
    ERR9(9, 1, 0x0, r_std, w_std),
    ERR10(10, 1, 0x0, r_std, w_std),
    ERR11(11, 1, 0x0, r_std, w_std),
    ERR12(12, 1, 0x0, r_std, w_std),
    ERR13(13, 1, 0x0, r_std, w_std),
    ERR14(14, 1, 0x0, r_std, w_std),
    ERR15(15, 1, 0x0, r_std, w_std),
    ERR16(16, 1, 0x0, r_std, w_std),
    ERR17(17, 1, 0x0, r_std, w_std),
    ERR18(18, 1, 0x0, r_std, w_std),
    ERR19(19, 1, 0x0, r_std, w_std),
    ERR20(20, 1, 0x0, r_std, w_std),
    ERR21(21, 1, 0x0, r_std, w_std),
    ERR22(22, 1, 0x0, r_std, w_std),
    ERR23(23, 1, 0x0, r_std, w_std),
    ERR24(24, 1, 0x0, r_std, w_std),
    ERR25(25, 1, 0x0, r_std, w_std),
    ERR26(26, 1, 0x0, r_std, w_std),
    ERR27(27, 1, 0x0, r_std, w_std),
    ERR28(28, 1, 0x0, r_std, w_std),
    ERR29(29, 1, 0x0, r_std, w_std),
    ERR30(30, 1, 0x0, r_std, w_std),
    ERR31(31, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR9.write(wdata);
  ERR10.write(wdata);
  ERR11.write(wdata);
  ERR12.write(wdata);
  ERR13.write(wdata);
  ERR14.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR9.read(rdata);
  ERR10.read(rdata);
  ERR11.read(rdata);
  ERR12.read(rdata);
  ERR13.read(rdata);
  ERR14.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT::ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x0, r_std, w_std),
    ERR1(1, 1, 0x0, r_std, w_std),
    ERR2(2, 1, 0x0, r_std, w_std),
    ERR3(3, 1, 0x0, r_std, w_std),
    ERR4(4, 1, 0x0, r_std, w_std),
    ERR5(5, 1, 0x0, r_std, w_std),
    ERR6(6, 1, 0x0, r_std, w_std),
    ERR7(7, 1, 0x0, r_std, w_std),
    ERR8(8, 1, 0x0, r_std, w_std),
    ERR15(15, 1, 0x0, r_std, w_std),
    ERR16(16, 1, 0x0, r_std, w_std),
    ERR17(17, 1, 0x0, r_std, w_std),
    ERR18(18, 1, 0x0, r_std, w_std),
    ERR19(19, 1, 0x0, r_std, w_std),
    ERR20(20, 1, 0x0, r_std, w_std),
    ERR21(21, 1, 0x0, r_std, w_std),
    ERR22(22, 1, 0x0, r_std, w_std),
    ERR23(23, 1, 0x0, r_std, w_std),
    ERR24(24, 1, 0x0, r_std, w_std),
    ERR25(25, 1, 0x0, r_std, w_std),
    ERR26(26, 1, 0x0, r_std, w_std),
    ERR27(27, 1, 0x0, r_std, w_std),
    ERR28(28, 1, 0x0, r_std, w_std),
    ERR29(29, 1, 0x0, r_std, w_std),
    ERR30(30, 1, 0x0, r_std, w_std),
    ERR31(31, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE::ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x1, r_std, w_std),
    ERR1(1, 1, 0x1, r_std, w_std),
    ERR2(2, 1, 0x1, r_std, w_std),
    ERR3(3, 1, 0x1, r_std, w_std),
    ERR4(4, 1, 0x1, r_std, w_std),
    ERR5(5, 1, 0x1, r_std, w_std),
    ERR6(6, 1, 0x1, r_std, w_std),
    ERR7(7, 1, 0x1, r_std, w_std),
    ERR8(8, 1, 0x1, r_std, w_std),
    ERR9(9, 1, 0x1, r_std, w_std),
    ERR10(10, 1, 0x1, r_std, w_std),
    ERR11(11, 1, 0x1, r_std, w_std),
    ERR12(12, 1, 0x1, r_std, w_std),
    ERR13(13, 1, 0x1, r_std, w_std),
    ERR14(14, 1, 0x1, r_std, w_std),
    ERR15(15, 1, 0x1, r_std, w_std),
    ERR16(16, 1, 0x1, r_std, w_std),
    ERR17(17, 1, 0x1, r_std, w_std),
    ERR18(18, 1, 0x1, r_std, w_std),
    ERR19(19, 1, 0x1, r_std, w_std),
    ERR20(20, 1, 0x1, r_std, w_std),
    ERR21(21, 1, 0x1, r_std, w_std),
    ERR22(22, 1, 0x1, r_std, w_std),
    ERR23(23, 1, 0x1, r_std, w_std),
    ERR24(24, 1, 0x1, r_std, w_std),
    ERR25(25, 1, 0x1, r_std, w_std),
    ERR26(26, 1, 0x1, r_std, w_std),
    ERR27(27, 1, 0x1, r_std, w_std),
    ERR28(28, 1, 0x1, r_std, w_std),
    ERR29(29, 1, 0x1, r_std, w_std),
    ERR30(30, 1, 0x1, r_std, w_std),
    ERR31(31, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR9.write(wdata);
  ERR10.write(wdata);
  ERR11.write(wdata);
  ERR12.write(wdata);
  ERR13.write(wdata);
  ERR14.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR9.read(rdata);
  ERR10.read(rdata);
  ERR11.read(rdata);
  ERR12.read(rdata);
  ERR13.read(rdata);
  ERR14.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE::ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x0, r_none, w_std),
    ERR1(1, 1, 0x0, r_none, w_std),
    ERR2(2, 1, 0x0, r_none, w_std),
    ERR3(3, 1, 0x0, r_none, w_std),
    ERR4(4, 1, 0x0, r_none, w_std),
    ERR5(5, 1, 0x0, r_none, w_std),
    ERR6(6, 1, 0x0, r_none, w_std),
    ERR7(7, 1, 0x0, r_none, w_std),
    ERR8(8, 1, 0x0, r_none, w_std),
    ERR9(9, 1, 0x0, r_none, w_std),
    ERR10(10, 1, 0x0, r_none, w_std),
    ERR11(11, 1, 0x0, r_none, w_std),
    ERR12(12, 1, 0x0, r_none, w_std),
    ERR13(13, 1, 0x0, r_none, w_std),
    ERR14(14, 1, 0x0, r_none, w_std),
    ERR15(15, 1, 0x0, r_none, w_std),
    ERR16(16, 1, 0x0, r_none, w_std),
    ERR17(17, 1, 0x0, r_none, w_std),
    ERR18(18, 1, 0x0, r_none, w_std),
    ERR19(19, 1, 0x0, r_none, w_std),
    ERR20(20, 1, 0x0, r_none, w_std),
    ERR21(21, 1, 0x0, r_none, w_std),
    ERR22(22, 1, 0x0, r_none, w_std),
    ERR23(23, 1, 0x0, r_none, w_std),
    ERR24(24, 1, 0x0, r_none, w_std),
    ERR25(25, 1, 0x0, r_none, w_std),
    ERR26(26, 1, 0x0, r_none, w_std),
    ERR27(27, 1, 0x0, r_none, w_std),
    ERR28(28, 1, 0x0, r_none, w_std),
    ERR29(29, 1, 0x0, r_none, w_std),
    ERR30(30, 1, 0x0, r_none, w_std),
    ERR31(31, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR9.write(wdata);
  ERR10.write(wdata);
  ERR11.write(wdata);
  ERR12.write(wdata);
  ERR13.write(wdata);
  ERR14.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR9.read(rdata);
  ERR10.read(rdata);
  ERR11.read(rdata);
  ERR12.read(rdata);
  ERR13.read(rdata);
  ERR14.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS::ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x0, r_std, w_std),
    ERR1(1, 1, 0x0, r_std, w_std),
    ERR2(2, 1, 0x0, r_std, w_std),
    ERR3(3, 1, 0x0, r_std, w_std),
    ERR4(4, 1, 0x0, r_std, w_std),
    ERR5(5, 1, 0x0, r_std, w_std),
    ERR6(6, 1, 0x0, r_std, w_std),
    ERR7(7, 1, 0x0, r_std, w_std),
    ERR8(8, 1, 0x0, r_std, w_std),
    ERR9(9, 1, 0x0, r_std, w_std),
    ERR10(10, 1, 0x0, r_std, w_std),
    ERR11(11, 1, 0x0, r_std, w_std),
    ERR12(12, 1, 0x0, r_std, w_std),
    ERR13(13, 1, 0x0, r_std, w_std),
    ERR14(14, 1, 0x0, r_std, w_std),
    ERR15(15, 1, 0x0, r_std, w_std),
    ERR16(16, 1, 0x0, r_std, w_std),
    ERR17(17, 1, 0x0, r_std, w_std),
    ERR18(18, 1, 0x0, r_std, w_std),
    ERR19(19, 1, 0x0, r_std, w_std),
    ERR20(20, 1, 0x0, r_std, w_std),
    ERR21(21, 1, 0x0, r_std, w_std),
    ERR22(22, 1, 0x0, r_std, w_std),
    ERR23(23, 1, 0x0, r_std, w_std),
    ERR24(24, 1, 0x0, r_std, w_std),
    ERR25(25, 1, 0x0, r_std, w_std),
    ERR26(26, 1, 0x0, r_std, w_std),
    ERR27(27, 1, 0x0, r_std, w_std),
    ERR28(28, 1, 0x0, r_std, w_std),
    ERR29(29, 1, 0x0, r_std, w_std),
    ERR30(30, 1, 0x0, r_std, w_std),
    ERR31(31, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR9.write(wdata);
  ERR10.write(wdata);
  ERR11.write(wdata);
  ERR12.write(wdata);
  ERR13.write(wdata);
  ERR14.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR9.read(rdata);
  ERR10.read(rdata);
  ERR11.read(rdata);
  ERR12.read(rdata);
  ERR13.read(rdata);
  ERR14.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD::ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x0, r_none, w_std),
    ERR1(1, 1, 0x0, r_none, w_std),
    ERR2(2, 1, 0x0, r_none, w_std),
    ERR3(3, 1, 0x0, r_none, w_std),
    ERR4(4, 1, 0x0, r_none, w_std),
    ERR5(5, 1, 0x0, r_none, w_std),
    ERR6(6, 1, 0x0, r_none, w_std),
    ERR7(7, 1, 0x0, r_none, w_std),
    ERR8(8, 1, 0x0, r_none, w_std),
    ERR9(9, 1, 0x0, r_none, w_std),
    ERR10(10, 1, 0x0, r_none, w_std),
    ERR11(11, 1, 0x0, r_none, w_std),
    ERR12(12, 1, 0x0, r_none, w_std),
    ERR13(13, 1, 0x0, r_none, w_std),
    ERR14(14, 1, 0x0, r_none, w_std),
    ERR15(15, 1, 0x0, r_none, w_std),
    ERR16(16, 1, 0x0, r_none, w_std),
    ERR17(17, 1, 0x0, r_none, w_std),
    ERR18(18, 1, 0x0, r_none, w_std),
    ERR19(19, 1, 0x0, r_none, w_std),
    ERR20(20, 1, 0x0, r_none, w_std),
    ERR21(21, 1, 0x0, r_none, w_std),
    ERR22(22, 1, 0x0, r_none, w_std),
    ERR23(23, 1, 0x0, r_none, w_std),
    ERR24(24, 1, 0x0, r_none, w_std),
    ERR25(25, 1, 0x0, r_none, w_std),
    ERR26(26, 1, 0x0, r_none, w_std),
    ERR27(27, 1, 0x0, r_none, w_std),
    ERR28(28, 1, 0x0, r_none, w_std),
    ERR29(29, 1, 0x0, r_none, w_std),
    ERR30(30, 1, 0x0, r_none, w_std),
    ERR31(31, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR9.write(wdata);
  ERR10.write(wdata);
  ERR11.write(wdata);
  ERR12.write(wdata);
  ERR13.write(wdata);
  ERR14.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR9.read(rdata);
  ERR10.read(rdata);
  ERR11.read(rdata);
  ERR12.read(rdata);
  ERR13.read(rdata);
  ERR14.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE::ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x1, r_std, w_std),
    ERR33(1, 1, 0x1, r_std, w_std),
    ERR34(2, 1, 0x1, r_std, w_std),
    ERR35(3, 1, 0x1, r_std, w_std),
    ERR36(4, 1, 0x1, r_std, w_std),
    ERR37(5, 1, 0x1, r_std, w_std),
    ERR38(6, 1, 0x1, r_std, w_std),
    ERR39(7, 1, 0x1, r_std, w_std),
    ERR40(8, 1, 0x1, r_std, w_std),
    ERR41(9, 1, 0x1, r_std, w_std),
    ERR42(10, 1, 0x1, r_std, w_std),
    ERR43(11, 1, 0x1, r_std, w_std),
    ERR44(12, 1, 0x1, r_std, w_std),
    ERR45(13, 1, 0x1, r_std, w_std),
    ERR46(14, 1, 0x1, r_std, w_std),
    ERR47(15, 1, 0x1, r_std, w_std),
    ERR48(16, 1, 0x1, r_std, w_std),
    ERR49(17, 1, 0x1, r_std, w_std),
    ERR50(18, 1, 0x1, r_std, w_std),
    ERR51(19, 1, 0x1, r_std, w_std),
    ERR52(20, 1, 0x1, r_std, w_std),
    ERR53(21, 1, 0x1, r_std, w_std),
    ERR54(22, 1, 0x1, r_std, w_std),
    ERR55(23, 1, 0x1, r_std, w_std),
    ERR56(24, 1, 0x1, r_std, w_std),
    ERR57(25, 1, 0x1, r_std, w_std),
    ERR58(26, 1, 0x1, r_std, w_std),
    ERR59(27, 1, 0x1, r_std, w_std),
    ERR60(28, 1, 0x1, r_std, w_std),
    ERR61(29, 1, 0x1, r_std, w_std),
    ERR62(30, 1, 0x1, r_std, w_std),
    ERR63(31, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE::ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x0, r_none, w_std),
    ERR33(1, 1, 0x0, r_none, w_std),
    ERR34(2, 1, 0x0, r_none, w_std),
    ERR35(3, 1, 0x0, r_none, w_std),
    ERR36(4, 1, 0x0, r_none, w_std),
    ERR37(5, 1, 0x0, r_none, w_std),
    ERR38(6, 1, 0x0, r_none, w_std),
    ERR39(7, 1, 0x0, r_none, w_std),
    ERR40(8, 1, 0x0, r_none, w_std),
    ERR41(9, 1, 0x0, r_none, w_std),
    ERR42(10, 1, 0x0, r_none, w_std),
    ERR43(11, 1, 0x0, r_none, w_std),
    ERR44(12, 1, 0x0, r_none, w_std),
    ERR45(13, 1, 0x0, r_none, w_std),
    ERR46(14, 1, 0x0, r_none, w_std),
    ERR47(15, 1, 0x0, r_none, w_std),
    ERR48(16, 1, 0x0, r_none, w_std),
    ERR49(17, 1, 0x0, r_none, w_std),
    ERR50(18, 1, 0x0, r_none, w_std),
    ERR51(19, 1, 0x0, r_none, w_std),
    ERR52(20, 1, 0x0, r_none, w_std),
    ERR53(21, 1, 0x0, r_none, w_std),
    ERR54(22, 1, 0x0, r_none, w_std),
    ERR55(23, 1, 0x0, r_none, w_std),
    ERR56(24, 1, 0x0, r_none, w_std),
    ERR57(25, 1, 0x0, r_none, w_std),
    ERR58(26, 1, 0x0, r_none, w_std),
    ERR59(27, 1, 0x0, r_none, w_std),
    ERR60(28, 1, 0x0, r_none, w_std),
    ERR61(29, 1, 0x0, r_none, w_std),
    ERR62(30, 1, 0x0, r_none, w_std),
    ERR63(31, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS::ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x0, r_std, w_std),
    ERR33(1, 1, 0x0, r_std, w_std),
    ERR34(2, 1, 0x0, r_std, w_std),
    ERR35(3, 1, 0x0, r_std, w_std),
    ERR36(4, 1, 0x0, r_std, w_std),
    ERR37(5, 1, 0x0, r_std, w_std),
    ERR38(6, 1, 0x0, r_std, w_std),
    ERR39(7, 1, 0x0, r_std, w_std),
    ERR40(8, 1, 0x0, r_std, w_std),
    ERR41(9, 1, 0x0, r_std, w_std),
    ERR42(10, 1, 0x0, r_std, w_std),
    ERR43(11, 1, 0x0, r_std, w_std),
    ERR44(12, 1, 0x0, r_std, w_std),
    ERR45(13, 1, 0x0, r_std, w_std),
    ERR46(14, 1, 0x0, r_std, w_std),
    ERR47(15, 1, 0x0, r_std, w_std),
    ERR48(16, 1, 0x0, r_std, w_std),
    ERR49(17, 1, 0x0, r_std, w_std),
    ERR50(18, 1, 0x0, r_std, w_std),
    ERR51(19, 1, 0x0, r_std, w_std),
    ERR52(20, 1, 0x0, r_std, w_std),
    ERR53(21, 1, 0x0, r_std, w_std),
    ERR54(22, 1, 0x0, r_std, w_std),
    ERR55(23, 1, 0x0, r_std, w_std),
    ERR56(24, 1, 0x0, r_std, w_std),
    ERR57(25, 1, 0x0, r_std, w_std),
    ERR58(26, 1, 0x0, r_std, w_std),
    ERR59(27, 1, 0x0, r_std, w_std),
    ERR60(28, 1, 0x0, r_std, w_std),
    ERR61(29, 1, 0x0, r_std, w_std),
    ERR62(30, 1, 0x0, r_std, w_std),
    ERR63(31, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT::ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x0, r_std, w_std),
    ERR33(1, 1, 0x0, r_std, w_std),
    ERR34(2, 1, 0x0, r_std, w_std),
    ERR35(3, 1, 0x0, r_std, w_std),
    ERR36(4, 1, 0x0, r_std, w_std),
    ERR37(5, 1, 0x0, r_std, w_std),
    ERR38(6, 1, 0x0, r_std, w_std),
    ERR39(7, 1, 0x0, r_std, w_std),
    ERR40(8, 1, 0x0, r_std, w_std),
    ERR41(9, 1, 0x0, r_std, w_std),
    ERR42(10, 1, 0x0, r_std, w_std),
    ERR43(11, 1, 0x0, r_std, w_std),
    ERR44(12, 1, 0x0, r_std, w_std),
    ERR45(13, 1, 0x0, r_std, w_std),
    ERR46(14, 1, 0x0, r_std, w_std),
    ERR47(15, 1, 0x0, r_std, w_std),
    ERR48(16, 1, 0x0, r_std, w_std),
    ERR49(17, 1, 0x0, r_std, w_std),
    ERR50(18, 1, 0x0, r_std, w_std),
    ERR51(19, 1, 0x0, r_std, w_std),
    ERR52(20, 1, 0x0, r_std, w_std),
    ERR53(21, 1, 0x0, r_std, w_std),
    ERR54(22, 1, 0x0, r_std, w_std),
    ERR55(23, 1, 0x0, r_std, w_std),
    ERR56(24, 1, 0x0, r_std, w_std),
    ERR57(25, 1, 0x0, r_std, w_std),
    ERR58(26, 1, 0x0, r_std, w_std),
    ERR59(27, 1, 0x0, r_std, w_std),
    ERR60(28, 1, 0x0, r_std, w_std),
    ERR61(29, 1, 0x0, r_std, w_std),
    ERR62(30, 1, 0x0, r_std, w_std),
    ERR63(31, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE::ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x1, r_std, w_std),
    ERR33(1, 1, 0x1, r_std, w_std),
    ERR34(2, 1, 0x1, r_std, w_std),
    ERR35(3, 1, 0x1, r_std, w_std),
    ERR36(4, 1, 0x1, r_std, w_std),
    ERR37(5, 1, 0x1, r_std, w_std),
    ERR38(6, 1, 0x1, r_std, w_std),
    ERR39(7, 1, 0x1, r_std, w_std),
    ERR40(8, 1, 0x1, r_std, w_std),
    ERR41(9, 1, 0x1, r_std, w_std),
    ERR42(10, 1, 0x1, r_std, w_std),
    ERR43(11, 1, 0x1, r_std, w_std),
    ERR44(12, 1, 0x1, r_std, w_std),
    ERR45(13, 1, 0x1, r_std, w_std),
    ERR46(14, 1, 0x1, r_std, w_std),
    ERR47(15, 1, 0x1, r_std, w_std),
    ERR48(16, 1, 0x1, r_std, w_std),
    ERR49(17, 1, 0x1, r_std, w_std),
    ERR50(18, 1, 0x1, r_std, w_std),
    ERR51(19, 1, 0x1, r_std, w_std),
    ERR52(20, 1, 0x1, r_std, w_std),
    ERR53(21, 1, 0x1, r_std, w_std),
    ERR54(22, 1, 0x1, r_std, w_std),
    ERR55(23, 1, 0x1, r_std, w_std),
    ERR56(24, 1, 0x1, r_std, w_std),
    ERR57(25, 1, 0x1, r_std, w_std),
    ERR58(26, 1, 0x1, r_std, w_std),
    ERR59(27, 1, 0x1, r_std, w_std),
    ERR60(28, 1, 0x1, r_std, w_std),
    ERR61(29, 1, 0x1, r_std, w_std),
    ERR62(30, 1, 0x1, r_std, w_std),
    ERR63(31, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE::ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x0, r_none, w_std),
    ERR33(1, 1, 0x0, r_none, w_std),
    ERR34(2, 1, 0x0, r_none, w_std),
    ERR35(3, 1, 0x0, r_none, w_std),
    ERR36(4, 1, 0x0, r_none, w_std),
    ERR37(5, 1, 0x0, r_none, w_std),
    ERR38(6, 1, 0x0, r_none, w_std),
    ERR39(7, 1, 0x0, r_none, w_std),
    ERR40(8, 1, 0x0, r_none, w_std),
    ERR41(9, 1, 0x0, r_none, w_std),
    ERR42(10, 1, 0x0, r_none, w_std),
    ERR43(11, 1, 0x0, r_none, w_std),
    ERR44(12, 1, 0x0, r_none, w_std),
    ERR45(13, 1, 0x0, r_none, w_std),
    ERR46(14, 1, 0x0, r_none, w_std),
    ERR47(15, 1, 0x0, r_none, w_std),
    ERR48(16, 1, 0x0, r_none, w_std),
    ERR49(17, 1, 0x0, r_none, w_std),
    ERR50(18, 1, 0x0, r_none, w_std),
    ERR51(19, 1, 0x0, r_none, w_std),
    ERR52(20, 1, 0x0, r_none, w_std),
    ERR53(21, 1, 0x0, r_none, w_std),
    ERR54(22, 1, 0x0, r_none, w_std),
    ERR55(23, 1, 0x0, r_none, w_std),
    ERR56(24, 1, 0x0, r_none, w_std),
    ERR57(25, 1, 0x0, r_none, w_std),
    ERR58(26, 1, 0x0, r_none, w_std),
    ERR59(27, 1, 0x0, r_none, w_std),
    ERR60(28, 1, 0x0, r_none, w_std),
    ERR61(29, 1, 0x0, r_none, w_std),
    ERR62(30, 1, 0x0, r_none, w_std),
    ERR63(31, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS::ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x0, r_std, w_std),
    ERR33(1, 1, 0x0, r_std, w_std),
    ERR34(2, 1, 0x0, r_std, w_std),
    ERR35(3, 1, 0x0, r_std, w_std),
    ERR36(4, 1, 0x0, r_std, w_std),
    ERR37(5, 1, 0x0, r_std, w_std),
    ERR38(6, 1, 0x0, r_std, w_std),
    ERR39(7, 1, 0x0, r_std, w_std),
    ERR40(8, 1, 0x0, r_std, w_std),
    ERR41(9, 1, 0x0, r_std, w_std),
    ERR42(10, 1, 0x0, r_std, w_std),
    ERR43(11, 1, 0x0, r_std, w_std),
    ERR44(12, 1, 0x0, r_std, w_std),
    ERR45(13, 1, 0x0, r_std, w_std),
    ERR46(14, 1, 0x0, r_std, w_std),
    ERR47(15, 1, 0x0, r_std, w_std),
    ERR48(16, 1, 0x0, r_std, w_std),
    ERR49(17, 1, 0x0, r_std, w_std),
    ERR50(18, 1, 0x0, r_std, w_std),
    ERR51(19, 1, 0x0, r_std, w_std),
    ERR52(20, 1, 0x0, r_std, w_std),
    ERR53(21, 1, 0x0, r_std, w_std),
    ERR54(22, 1, 0x0, r_std, w_std),
    ERR55(23, 1, 0x0, r_std, w_std),
    ERR56(24, 1, 0x0, r_std, w_std),
    ERR57(25, 1, 0x0, r_std, w_std),
    ERR58(26, 1, 0x0, r_std, w_std),
    ERR59(27, 1, 0x0, r_std, w_std),
    ERR60(28, 1, 0x0, r_std, w_std),
    ERR61(29, 1, 0x0, r_std, w_std),
    ERR62(30, 1, 0x0, r_std, w_std),
    ERR63(31, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD::ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x0, r_none, w_std),
    ERR33(1, 1, 0x0, r_none, w_std),
    ERR34(2, 1, 0x0, r_none, w_std),
    ERR35(3, 1, 0x0, r_none, w_std),
    ERR36(4, 1, 0x0, r_none, w_std),
    ERR37(5, 1, 0x0, r_none, w_std),
    ERR38(6, 1, 0x0, r_none, w_std),
    ERR39(7, 1, 0x0, r_none, w_std),
    ERR40(8, 1, 0x0, r_none, w_std),
    ERR41(9, 1, 0x0, r_none, w_std),
    ERR42(10, 1, 0x0, r_none, w_std),
    ERR43(11, 1, 0x0, r_none, w_std),
    ERR44(12, 1, 0x0, r_none, w_std),
    ERR45(13, 1, 0x0, r_none, w_std),
    ERR46(14, 1, 0x0, r_none, w_std),
    ERR47(15, 1, 0x0, r_none, w_std),
    ERR48(16, 1, 0x0, r_none, w_std),
    ERR49(17, 1, 0x0, r_none, w_std),
    ERR50(18, 1, 0x0, r_none, w_std),
    ERR51(19, 1, 0x0, r_none, w_std),
    ERR52(20, 1, 0x0, r_none, w_std),
    ERR53(21, 1, 0x0, r_none, w_std),
    ERR54(22, 1, 0x0, r_none, w_std),
    ERR55(23, 1, 0x0, r_none, w_std),
    ERR56(24, 1, 0x0, r_none, w_std),
    ERR57(25, 1, 0x0, r_none, w_std),
    ERR58(26, 1, 0x0, r_none, w_std),
    ERR59(27, 1, 0x0, r_none, w_std),
    ERR60(28, 1, 0x0, r_none, w_std),
    ERR61(29, 1, 0x0, r_none, w_std),
    ERR62(30, 1, 0x0, r_none, w_std),
    ERR63(31, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS::ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR63(31, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE::ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x1, r_std, w_std),
    ERR65(1, 1, 0x1, r_std, w_std),
    ERR66(2, 1, 0x1, r_std, w_std),
    ERR67(3, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
  ERR66.write(wdata);
  ERR67.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
  ERR66.read(rdata);
  ERR67.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE::ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x0, r_none, w_std),
    ERR65(1, 1, 0x0, r_none, w_std),
    ERR66(2, 1, 0x0, r_none, w_std),
    ERR67(3, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
  ERR66.write(wdata);
  ERR67.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
  ERR66.read(rdata);
  ERR67.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS::ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x0, r_std, w_std),
    ERR65(1, 1, 0x0, r_std, w_std),
    ERR66(2, 1, 0x0, r_std, w_std),
    ERR67(3, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
  ERR66.write(wdata);
  ERR67.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
  ERR66.read(rdata);
  ERR67.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT::ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x0, r_std, w_std),
    ERR65(1, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE::ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x1, r_std, w_std),
    ERR65(1, 1, 0x1, r_std, w_std),
    ERR66(2, 1, 0x1, r_std, w_std),
    ERR67(3, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
  ERR66.write(wdata);
  ERR67.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
  ERR66.read(rdata);
  ERR67.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE::ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x0, r_none, w_std),
    ERR65(1, 1, 0x0, r_none, w_std),
    ERR66(2, 1, 0x0, r_none, w_std),
    ERR67(3, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
  ERR66.write(wdata);
  ERR67.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
  ERR66.read(rdata);
  ERR67.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS::ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x0, r_std, w_std),
    ERR65(1, 1, 0x0, r_std, w_std),
    ERR66(2, 1, 0x0, r_std, w_std),
    ERR67(3, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
  ERR66.write(wdata);
  ERR67.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
  ERR66.read(rdata);
  ERR67.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD::ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x0, r_none, w_std),
    ERR65(1, 1, 0x0, r_none, w_std),
    ERR66(2, 1, 0x0, r_none, w_std),
    ERR67(3, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
  ERR66.write(wdata);
  ERR67.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
  ERR66.read(rdata);
  ERR67.read(rdata);
}

// ------------------ ordt_rset_NVDLA_GEC methods ------------------

ordt_rset_NVDLA_GEC::ordt_rset_NVDLA_GEC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    FEATURE(_m_startaddress + 0x0, _m_startaddress + 0x3),
    SWRESET(_m_startaddress + 0x4, _m_startaddress + 0x7),
    MISSIONERR_TYPE(_m_startaddress + 0x8, _m_startaddress + 0xb),
    CURRENT_COUNTER_VALUE(_m_startaddress + 0xc, _m_startaddress + 0xf),
    MISSIONERR_INDEX(_m_startaddress + 0x14, _m_startaddress + 0x17),
    CORRECTABLE_THRESHOLD(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    MISSIONERR_INJECT_UNLOCK(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    ERRSLICE0_MISSIONERR_ENABLE(_m_startaddress + 0x30, _m_startaddress + 0x33),
    ERRSLICE0_MISSIONERR_FORCE(_m_startaddress + 0x34, _m_startaddress + 0x37),
    ERRSLICE0_MISSIONERR_STATUS(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    ERRSLICE0_MISSIONERR_INJECT(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    ERRSLICE0_LATENTERR_ENABLE(_m_startaddress + 0x40, _m_startaddress + 0x43),
    ERRSLICE0_LATENTERR_FORCE(_m_startaddress + 0x44, _m_startaddress + 0x47),
    ERRSLICE0_LATENTERR_STATUS(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    ERRSLICE0_COUNTER_RELOAD(_m_startaddress + 0x50, _m_startaddress + 0x53),
    ERRSLICE1_MISSIONERR_ENABLE(_m_startaddress + 0x60, _m_startaddress + 0x63),
    ERRSLICE1_MISSIONERR_FORCE(_m_startaddress + 0x64, _m_startaddress + 0x67),
    ERRSLICE1_MISSIONERR_STATUS(_m_startaddress + 0x68, _m_startaddress + 0x6b),
    ERRSLICE1_MISSIONERR_INJECT(_m_startaddress + 0x6c, _m_startaddress + 0x6f),
    ERRSLICE1_LATENTERR_ENABLE(_m_startaddress + 0x70, _m_startaddress + 0x73),
    ERRSLICE1_LATENTERR_FORCE(_m_startaddress + 0x74, _m_startaddress + 0x77),
    ERRSLICE1_LATENTERR_STATUS(_m_startaddress + 0x78, _m_startaddress + 0x7b),
    ERRSLICE1_COUNTER_RELOAD(_m_startaddress + 0x80, _m_startaddress + 0x83),
    ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS(_m_startaddress + 0x84, _m_startaddress + 0x87),
    ERRSLICE2_MISSIONERR_ENABLE(_m_startaddress + 0x90, _m_startaddress + 0x93),
    ERRSLICE2_MISSIONERR_FORCE(_m_startaddress + 0x94, _m_startaddress + 0x97),
    ERRSLICE2_MISSIONERR_STATUS(_m_startaddress + 0x98, _m_startaddress + 0x9b),
    ERRSLICE2_MISSIONERR_INJECT(_m_startaddress + 0x9c, _m_startaddress + 0x9f),
    ERRSLICE2_LATENTERR_ENABLE(_m_startaddress + 0xa0, _m_startaddress + 0xa3),
    ERRSLICE2_LATENTERR_FORCE(_m_startaddress + 0xa4, _m_startaddress + 0xa7),
    ERRSLICE2_LATENTERR_STATUS(_m_startaddress + 0xa8, _m_startaddress + 0xab),
    ERRSLICE2_COUNTER_RELOAD(_m_startaddress + 0xb0, _m_startaddress + 0xb3) {
  m_children.push_back(&FEATURE);
  m_children.push_back(&SWRESET);
  m_children.push_back(&MISSIONERR_TYPE);
  m_children.push_back(&CURRENT_COUNTER_VALUE);
  m_children.push_back(&MISSIONERR_INDEX);
  m_children.push_back(&CORRECTABLE_THRESHOLD);
  m_children.push_back(&MISSIONERR_INJECT_UNLOCK);
  m_children.push_back(&ERRSLICE0_MISSIONERR_ENABLE);
  m_children.push_back(&ERRSLICE0_MISSIONERR_FORCE);
  m_children.push_back(&ERRSLICE0_MISSIONERR_STATUS);
  m_children.push_back(&ERRSLICE0_MISSIONERR_INJECT);
  m_children.push_back(&ERRSLICE0_LATENTERR_ENABLE);
  m_children.push_back(&ERRSLICE0_LATENTERR_FORCE);
  m_children.push_back(&ERRSLICE0_LATENTERR_STATUS);
  m_children.push_back(&ERRSLICE0_COUNTER_RELOAD);
  m_children.push_back(&ERRSLICE1_MISSIONERR_ENABLE);
  m_children.push_back(&ERRSLICE1_MISSIONERR_FORCE);
  m_children.push_back(&ERRSLICE1_MISSIONERR_STATUS);
  m_children.push_back(&ERRSLICE1_MISSIONERR_INJECT);
  m_children.push_back(&ERRSLICE1_LATENTERR_ENABLE);
  m_children.push_back(&ERRSLICE1_LATENTERR_FORCE);
  m_children.push_back(&ERRSLICE1_LATENTERR_STATUS);
  m_children.push_back(&ERRSLICE1_COUNTER_RELOAD);
  m_children.push_back(&ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS);
  m_children.push_back(&ERRSLICE2_MISSIONERR_ENABLE);
  m_children.push_back(&ERRSLICE2_MISSIONERR_FORCE);
  m_children.push_back(&ERRSLICE2_MISSIONERR_STATUS);
  m_children.push_back(&ERRSLICE2_MISSIONERR_INJECT);
  m_children.push_back(&ERRSLICE2_LATENTERR_ENABLE);
  m_children.push_back(&ERRSLICE2_LATENTERR_FORCE);
  m_children.push_back(&ERRSLICE2_LATENTERR_STATUS);
  m_children.push_back(&ERRSLICE2_COUNTER_RELOAD);
}

void  ordt_rset_NVDLA_GEC::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&FEATURE);
  m_children.push_back(&SWRESET);
  m_children.push_back(&MISSIONERR_TYPE);
  m_children.push_back(&CURRENT_COUNTER_VALUE);
  m_children.push_back(&MISSIONERR_INDEX);
  m_children.push_back(&CORRECTABLE_THRESHOLD);
  m_children.push_back(&MISSIONERR_INJECT_UNLOCK);
  m_children.push_back(&ERRSLICE0_MISSIONERR_ENABLE);
  m_children.push_back(&ERRSLICE0_MISSIONERR_FORCE);
  m_children.push_back(&ERRSLICE0_MISSIONERR_STATUS);
  m_children.push_back(&ERRSLICE0_MISSIONERR_INJECT);
  m_children.push_back(&ERRSLICE0_LATENTERR_ENABLE);
  m_children.push_back(&ERRSLICE0_LATENTERR_FORCE);
  m_children.push_back(&ERRSLICE0_LATENTERR_STATUS);
  m_children.push_back(&ERRSLICE0_COUNTER_RELOAD);
  m_children.push_back(&ERRSLICE1_MISSIONERR_ENABLE);
  m_children.push_back(&ERRSLICE1_MISSIONERR_FORCE);
  m_children.push_back(&ERRSLICE1_MISSIONERR_STATUS);
  m_children.push_back(&ERRSLICE1_MISSIONERR_INJECT);
  m_children.push_back(&ERRSLICE1_LATENTERR_ENABLE);
  m_children.push_back(&ERRSLICE1_LATENTERR_FORCE);
  m_children.push_back(&ERRSLICE1_LATENTERR_STATUS);
  m_children.push_back(&ERRSLICE1_COUNTER_RELOAD);
  m_children.push_back(&ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS);
  m_children.push_back(&ERRSLICE2_MISSIONERR_ENABLE);
  m_children.push_back(&ERRSLICE2_MISSIONERR_FORCE);
  m_children.push_back(&ERRSLICE2_MISSIONERR_STATUS);
  m_children.push_back(&ERRSLICE2_MISSIONERR_INJECT);
  m_children.push_back(&ERRSLICE2_LATENTERR_ENABLE);
  m_children.push_back(&ERRSLICE2_LATENTERR_FORCE);
  m_children.push_back(&ERRSLICE2_LATENTERR_STATUS);
  m_children.push_back(&ERRSLICE2_COUNTER_RELOAD);
}

// ------------------ ordt_root methods ------------------

ordt_root::ordt_root()
  : ordt_root(0x0, 0xe0b3) {
}

ordt_root::ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    NVDLA_GEC(_m_startaddress + 0xe000, _m_startaddress + 0xe0ff) {
  m_children.push_back(&NVDLA_GEC);
}

void  ordt_root::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&NVDLA_GEC);
}

