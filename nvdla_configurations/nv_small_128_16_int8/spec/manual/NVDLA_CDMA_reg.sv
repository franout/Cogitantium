//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_CDMA.rdl
//   Parms: opendla.parms
//   Date: Tue Feb 04 11:44:29 CET 2020
//

import uvm_pkg::*;
import ordt_uvm_reg_pkg::*;

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_CDMA_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_CDMA_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_S_POINTER

// S_ARBITER
class reg_addrmap_NVDLA_NVDLA_CDMA_S_ARBITER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ARB_WEIGHT;
  rand uvm_reg_field_rdl ARB_WMB;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_S_ARBITER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ARB_WEIGHT = new("ARB_WEIGHT");
    this.ARB_WEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ARB_WEIGHT.configure(this, 4, 0, "RW", 0, 4'hf, 1, 1, 0);
    this.ARB_WEIGHT.add_def_property("spec_access", "rw");
    this.ARB_WEIGHT.add_def_property("spec_sw_default", "0x0");
    this.ARB_WEIGHT.add_def_property("sw_default_mask", "0x0");
    this.ARB_WEIGHT.add_def_property("reset_mask", "0xf");
    this.ARB_WMB = new("ARB_WMB");
    this.ARB_WMB.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ARB_WMB.configure(this, 4, 16, "RW", 0, 4'h3, 1, 1, 0);
    this.ARB_WMB.add_def_property("spec_access", "rw");
    this.ARB_WMB.add_def_property("spec_sw_default", "0x0");
    this.ARB_WMB.add_def_property("sw_default_mask", "0x0");
    this.ARB_WMB.add_def_property("reset_mask", "0xf");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ARB_WEIGHT"}, 0, 4);
    add_hdl_path_slice({rdl_reg_name, "ARB_WMB"}, 16, 4);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_S_ARBITER

// S_CBUF_FLUSH_STATUS
class reg_addrmap_NVDLA_NVDLA_CDMA_S_CBUF_FLUSH_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl FLUSH_DONE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_S_CBUF_FLUSH_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.FLUSH_DONE = new("FLUSH_DONE");
    this.FLUSH_DONE.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.FLUSH_DONE.configure(this, 1, 0, "RO", 1, 1'h0, 1, 0, 1);
    this.FLUSH_DONE.add_def_property("spec_access", "r");
    this.FLUSH_DONE.add_def_property("spec_sw_default", "0x0");
    this.FLUSH_DONE.add_def_property("sw_default_mask", "0x0");
    this.FLUSH_DONE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "FLUSH_DONE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_S_CBUF_FLUSH_STATUS

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_OP_ENABLE

// D_MISC_CFG
class reg_addrmap_NVDLA_NVDLA_CDMA_D_MISC_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CONV_MODE;
  rand uvm_reg_field_rdl IN_PRECISION;
  rand uvm_reg_field_rdl PROC_PRECISION;
  rand uvm_reg_field_rdl DATA_REUSE;
  rand uvm_reg_field_rdl WEIGHT_REUSE;
  rand uvm_reg_field_rdl SKIP_DATA_RLS;
  rand uvm_reg_field_rdl SKIP_WEIGHT_RLS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_MISC_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CONV_MODE = new("CONV_MODE");
    this.CONV_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONV_MODE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.CONV_MODE.add_def_property("spec_access", "rw");
    this.CONV_MODE.add_def_property("spec_sw_default", "0x0");
    this.CONV_MODE.add_def_property("sw_default_mask", "0x0");
    this.CONV_MODE.add_def_property("reset_mask", "0x1");
    this.IN_PRECISION = new("IN_PRECISION");
    this.IN_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.IN_PRECISION.configure(this, 2, 8, "RW", 0, 2'h1, 1, 1, 0);
    this.IN_PRECISION.add_def_property("spec_access", "rw");
    this.IN_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.IN_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.IN_PRECISION.add_def_property("reset_mask", "0x3");
    this.PROC_PRECISION = new("PROC_PRECISION");
    this.PROC_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PROC_PRECISION.configure(this, 2, 12, "RW", 0, 2'h1, 1, 1, 0);
    this.PROC_PRECISION.add_def_property("spec_access", "rw");
    this.PROC_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.PROC_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.PROC_PRECISION.add_def_property("reset_mask", "0x3");
    this.DATA_REUSE = new("DATA_REUSE");
    this.DATA_REUSE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATA_REUSE.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.DATA_REUSE.add_def_property("spec_access", "rw");
    this.DATA_REUSE.add_def_property("spec_sw_default", "0x0");
    this.DATA_REUSE.add_def_property("sw_default_mask", "0x0");
    this.DATA_REUSE.add_def_property("reset_mask", "0x1");
    this.WEIGHT_REUSE = new("WEIGHT_REUSE");
    this.WEIGHT_REUSE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_REUSE.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.WEIGHT_REUSE.add_def_property("spec_access", "rw");
    this.WEIGHT_REUSE.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_REUSE.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_REUSE.add_def_property("reset_mask", "0x1");
    this.SKIP_DATA_RLS = new("SKIP_DATA_RLS");
    this.SKIP_DATA_RLS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SKIP_DATA_RLS.configure(this, 1, 24, "RW", 0, 1'h0, 1, 1, 0);
    this.SKIP_DATA_RLS.add_def_property("spec_access", "rw");
    this.SKIP_DATA_RLS.add_def_property("spec_sw_default", "0x0");
    this.SKIP_DATA_RLS.add_def_property("sw_default_mask", "0x0");
    this.SKIP_DATA_RLS.add_def_property("reset_mask", "0x1");
    this.SKIP_WEIGHT_RLS = new("SKIP_WEIGHT_RLS");
    this.SKIP_WEIGHT_RLS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SKIP_WEIGHT_RLS.configure(this, 1, 28, "RW", 0, 1'h0, 1, 1, 0);
    this.SKIP_WEIGHT_RLS.add_def_property("spec_access", "rw");
    this.SKIP_WEIGHT_RLS.add_def_property("spec_sw_default", "0x0");
    this.SKIP_WEIGHT_RLS.add_def_property("sw_default_mask", "0x0");
    this.SKIP_WEIGHT_RLS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CONV_MODE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "IN_PRECISION"}, 8, 2);
    add_hdl_path_slice({rdl_reg_name, "PROC_PRECISION"}, 12, 2);
    add_hdl_path_slice({rdl_reg_name, "DATA_REUSE"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_REUSE"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "SKIP_DATA_RLS"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "SKIP_WEIGHT_RLS"}, 28, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_MISC_CFG

// D_DATAIN_FORMAT
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_FORMAT;
  rand uvm_reg_field_rdl PIXEL_FORMAT;
  rand uvm_reg_field_rdl PIXEL_MAPPING;
  rand uvm_reg_field_rdl PIXEL_SIGN_OVERRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_FORMAT = new("DATAIN_FORMAT");
    this.DATAIN_FORMAT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_FORMAT.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.DATAIN_FORMAT.add_def_property("spec_access", "rw");
    this.DATAIN_FORMAT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_FORMAT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_FORMAT.add_def_property("reset_mask", "0x1");
    this.PIXEL_FORMAT = new("PIXEL_FORMAT");
    this.PIXEL_FORMAT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PIXEL_FORMAT.configure(this, 6, 8, "RW", 0, 6'hc, 1, 1, 0);
    this.PIXEL_FORMAT.add_def_property("spec_access", "rw");
    this.PIXEL_FORMAT.add_def_property("spec_sw_default", "0x0");
    this.PIXEL_FORMAT.add_def_property("sw_default_mask", "0x0");
    this.PIXEL_FORMAT.add_def_property("reset_mask", "0x3f");
    this.PIXEL_MAPPING = new("PIXEL_MAPPING");
    this.PIXEL_MAPPING.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PIXEL_MAPPING.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.PIXEL_MAPPING.add_def_property("spec_access", "rw");
    this.PIXEL_MAPPING.add_def_property("spec_sw_default", "0x0");
    this.PIXEL_MAPPING.add_def_property("sw_default_mask", "0x0");
    this.PIXEL_MAPPING.add_def_property("reset_mask", "0x1");
    this.PIXEL_SIGN_OVERRIDE = new("PIXEL_SIGN_OVERRIDE");
    this.PIXEL_SIGN_OVERRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PIXEL_SIGN_OVERRIDE.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.PIXEL_SIGN_OVERRIDE.add_def_property("spec_access", "rw");
    this.PIXEL_SIGN_OVERRIDE.add_def_property("spec_sw_default", "0x0");
    this.PIXEL_SIGN_OVERRIDE.add_def_property("sw_default_mask", "0x0");
    this.PIXEL_SIGN_OVERRIDE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_FORMAT"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "PIXEL_FORMAT"}, 8, 6);
    add_hdl_path_slice({rdl_reg_name, "PIXEL_MAPPING"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "PIXEL_SIGN_OVERRIDE"}, 20, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_FORMAT

// D_DATAIN_SIZE_0
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_WIDTH;
  rand uvm_reg_field_rdl DATAIN_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_WIDTH = new("DATAIN_WIDTH");
    this.DATAIN_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_WIDTH.add_def_property("spec_access", "rw");
    this.DATAIN_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_WIDTH.add_def_property("reset_mask", "0x1fff");
    this.DATAIN_HEIGHT = new("DATAIN_HEIGHT");
    this.DATAIN_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_HEIGHT.configure(this, 13, 16, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_HEIGHT.add_def_property("spec_access", "rw");
    this.DATAIN_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_WIDTH"}, 0, 13);
    add_hdl_path_slice({rdl_reg_name, "DATAIN_HEIGHT"}, 16, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_0

// D_DATAIN_SIZE_1
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_CHANNEL = new("DATAIN_CHANNEL");
    this.DATAIN_CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.DATAIN_CHANNEL.add_def_property("spec_access", "rw");
    this.DATAIN_CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_1

// D_DATAIN_SIZE_EXT_0
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_WIDTH_EXT;
  rand uvm_reg_field_rdl DATAIN_HEIGHT_EXT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_WIDTH_EXT = new("DATAIN_WIDTH_EXT");
    this.DATAIN_WIDTH_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_WIDTH_EXT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_WIDTH_EXT.add_def_property("spec_access", "rw");
    this.DATAIN_WIDTH_EXT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_WIDTH_EXT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_WIDTH_EXT.add_def_property("reset_mask", "0x1fff");
    this.DATAIN_HEIGHT_EXT = new("DATAIN_HEIGHT_EXT");
    this.DATAIN_HEIGHT_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_HEIGHT_EXT.configure(this, 13, 16, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_HEIGHT_EXT.add_def_property("spec_access", "rw");
    this.DATAIN_HEIGHT_EXT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_HEIGHT_EXT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_HEIGHT_EXT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_WIDTH_EXT"}, 0, 13);
    add_hdl_path_slice({rdl_reg_name, "DATAIN_HEIGHT_EXT"}, 16, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0

// D_PIXEL_OFFSET
class reg_addrmap_NVDLA_NVDLA_CDMA_D_PIXEL_OFFSET extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PIXEL_X_OFFSET;
  rand uvm_reg_field_rdl PIXEL_Y_OFFSET;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_PIXEL_OFFSET");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PIXEL_X_OFFSET = new("PIXEL_X_OFFSET");
    this.PIXEL_X_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PIXEL_X_OFFSET.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.PIXEL_X_OFFSET.add_def_property("spec_access", "rw");
    this.PIXEL_X_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.PIXEL_X_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.PIXEL_X_OFFSET.add_def_property("reset_mask", "0x1f");
    this.PIXEL_Y_OFFSET = new("PIXEL_Y_OFFSET");
    this.PIXEL_Y_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PIXEL_Y_OFFSET.configure(this, 3, 16, "RW", 0, 3'h0, 1, 1, 0);
    this.PIXEL_Y_OFFSET.add_def_property("spec_access", "rw");
    this.PIXEL_Y_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.PIXEL_Y_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.PIXEL_Y_OFFSET.add_def_property("reset_mask", "0x7");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PIXEL_X_OFFSET"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "PIXEL_Y_OFFSET"}, 16, 3);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_PIXEL_OFFSET

// D_DAIN_RAM_TYPE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_RAM_TYPE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_RAM_TYPE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_RAM_TYPE = new("DATAIN_RAM_TYPE");
    this.DATAIN_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DATAIN_RAM_TYPE.add_def_property("spec_access", "rw");
    this.DATAIN_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_RAM_TYPE

// D_DAIN_ADDR_HIGH_0
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_ADDR_HIGH_0;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_ADDR_HIGH_0 = new("DATAIN_ADDR_HIGH_0");
    this.DATAIN_ADDR_HIGH_0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_ADDR_HIGH_0.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DATAIN_ADDR_HIGH_0.add_def_property("spec_access", "rw");
    this.DATAIN_ADDR_HIGH_0.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_ADDR_HIGH_0.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_ADDR_HIGH_0.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_ADDR_HIGH_0"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0

// D_DAIN_ADDR_LOW_0
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_ADDR_LOW_0;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_ADDR_LOW_0 = new("DATAIN_ADDR_LOW_0");
    this.DATAIN_ADDR_LOW_0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_ADDR_LOW_0.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DATAIN_ADDR_LOW_0.add_def_property("spec_access", "rw");
    this.DATAIN_ADDR_LOW_0.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_ADDR_LOW_0.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_ADDR_LOW_0.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_ADDR_LOW_0"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_0

// D_DAIN_ADDR_HIGH_1
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_ADDR_HIGH_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_ADDR_HIGH_1 = new("DATAIN_ADDR_HIGH_1");
    this.DATAIN_ADDR_HIGH_1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_ADDR_HIGH_1.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DATAIN_ADDR_HIGH_1.add_def_property("spec_access", "rw");
    this.DATAIN_ADDR_HIGH_1.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_ADDR_HIGH_1.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_ADDR_HIGH_1.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_ADDR_HIGH_1"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1

// D_DAIN_ADDR_LOW_1
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_ADDR_LOW_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_ADDR_LOW_1 = new("DATAIN_ADDR_LOW_1");
    this.DATAIN_ADDR_LOW_1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_ADDR_LOW_1.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DATAIN_ADDR_LOW_1.add_def_property("spec_access", "rw");
    this.DATAIN_ADDR_LOW_1.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_ADDR_LOW_1.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_ADDR_LOW_1.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_ADDR_LOW_1"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_1

// D_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LINE_STRIDE = new("LINE_STRIDE");
    this.LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LINE_STRIDE.add_def_property("spec_access", "rw");
    this.LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_STRIDE

// D_LINE_UV_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_UV_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl UV_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_UV_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.UV_LINE_STRIDE = new("UV_LINE_STRIDE");
    this.UV_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.UV_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.UV_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.UV_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.UV_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.UV_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "UV_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_UV_STRIDE

// D_SURF_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_SURF_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SURF_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_SURF_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SURF_STRIDE = new("SURF_STRIDE");
    this.SURF_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SURF_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SURF_STRIDE.add_def_property("spec_access", "rw");
    this.SURF_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.SURF_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.SURF_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SURF_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_SURF_STRIDE

// D_DAIN_MAP
class reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_MAP extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LINE_PACKED;
  rand uvm_reg_field_rdl SURF_PACKED;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_MAP");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LINE_PACKED = new("LINE_PACKED");
    this.LINE_PACKED.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LINE_PACKED.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.LINE_PACKED.add_def_property("spec_access", "rw");
    this.LINE_PACKED.add_def_property("spec_sw_default", "0x0");
    this.LINE_PACKED.add_def_property("sw_default_mask", "0x0");
    this.LINE_PACKED.add_def_property("reset_mask", "0x1");
    this.SURF_PACKED = new("SURF_PACKED");
    this.SURF_PACKED.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SURF_PACKED.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.SURF_PACKED.add_def_property("spec_access", "rw");
    this.SURF_PACKED.add_def_property("spec_sw_default", "0x0");
    this.SURF_PACKED.add_def_property("sw_default_mask", "0x0");
    this.SURF_PACKED.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LINE_PACKED"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "SURF_PACKED"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_MAP

// D_RESERVED_X_CFG
class reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_X_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RSV_PER_LINE;
  rand uvm_reg_field_rdl RSV_PER_UV_LINE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_X_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RSV_PER_LINE = new("RSV_PER_LINE");
    this.RSV_PER_LINE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RSV_PER_LINE.configure(this, 10, 0, "RW", 0, 10'h0, 1, 1, 0);
    this.RSV_PER_LINE.add_def_property("spec_access", "rw");
    this.RSV_PER_LINE.add_def_property("spec_sw_default", "0x0");
    this.RSV_PER_LINE.add_def_property("sw_default_mask", "0x0");
    this.RSV_PER_LINE.add_def_property("reset_mask", "0x3ff");
    this.RSV_PER_UV_LINE = new("RSV_PER_UV_LINE");
    this.RSV_PER_UV_LINE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RSV_PER_UV_LINE.configure(this, 10, 16, "RW", 0, 10'h0, 1, 1, 0);
    this.RSV_PER_UV_LINE.add_def_property("spec_access", "rw");
    this.RSV_PER_UV_LINE.add_def_property("spec_sw_default", "0x0");
    this.RSV_PER_UV_LINE.add_def_property("sw_default_mask", "0x0");
    this.RSV_PER_UV_LINE.add_def_property("reset_mask", "0x3ff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RSV_PER_LINE"}, 0, 10);
    add_hdl_path_slice({rdl_reg_name, "RSV_PER_UV_LINE"}, 16, 10);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_X_CFG

// D_RESERVED_Y_CFG
class reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_Y_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RSV_HEIGHT;
  rand uvm_reg_field_rdl RSV_Y_INDEX;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_Y_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RSV_HEIGHT = new("RSV_HEIGHT");
    this.RSV_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RSV_HEIGHT.configure(this, 3, 0, "RW", 0, 3'h0, 1, 1, 0);
    this.RSV_HEIGHT.add_def_property("spec_access", "rw");
    this.RSV_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.RSV_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.RSV_HEIGHT.add_def_property("reset_mask", "0x7");
    this.RSV_Y_INDEX = new("RSV_Y_INDEX");
    this.RSV_Y_INDEX.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RSV_Y_INDEX.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.RSV_Y_INDEX.add_def_property("spec_access", "rw");
    this.RSV_Y_INDEX.add_def_property("spec_sw_default", "0x0");
    this.RSV_Y_INDEX.add_def_property("sw_default_mask", "0x0");
    this.RSV_Y_INDEX.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RSV_HEIGHT"}, 0, 3);
    add_hdl_path_slice({rdl_reg_name, "RSV_Y_INDEX"}, 16, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_Y_CFG

// D_BATCH_NUMBER
class reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_NUMBER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BATCHES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_NUMBER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BATCHES = new("BATCHES");
    this.BATCHES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BATCHES.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 1);
    this.BATCHES.add_def_property("spec_access", "rw");
    this.BATCHES.add_def_property("spec_sw_default", "0x0");
    this.BATCHES.add_def_property("sw_default_mask", "0x0");
    this.BATCHES.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BATCHES"}, 0, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_NUMBER

// D_BATCH_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BATCH_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BATCH_STRIDE = new("BATCH_STRIDE");
    this.BATCH_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BATCH_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BATCH_STRIDE.add_def_property("spec_access", "rw");
    this.BATCH_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.BATCH_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.BATCH_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BATCH_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_STRIDE

// D_ENTRY_PER_SLICE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_ENTRY_PER_SLICE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ENTRIES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_ENTRY_PER_SLICE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ENTRIES = new("ENTRIES");
    this.ENTRIES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ENTRIES.configure(this, 14, 0, "RW", 0, 14'h0, 1, 1, 1);
    this.ENTRIES.add_def_property("spec_access", "rw");
    this.ENTRIES.add_def_property("spec_sw_default", "0x0");
    this.ENTRIES.add_def_property("sw_default_mask", "0x0");
    this.ENTRIES.add_def_property("reset_mask", "0x3fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ENTRIES"}, 0, 14);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_ENTRY_PER_SLICE

// D_FETCH_GRAIN
class reg_addrmap_NVDLA_NVDLA_CDMA_D_FETCH_GRAIN extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl GRAINS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_FETCH_GRAIN");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.GRAINS = new("GRAINS");
    this.GRAINS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.GRAINS.configure(this, 12, 0, "RW", 0, 12'h0, 1, 1, 1);
    this.GRAINS.add_def_property("spec_access", "rw");
    this.GRAINS.add_def_property("spec_sw_default", "0x0");
    this.GRAINS.add_def_property("sw_default_mask", "0x0");
    this.GRAINS.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "GRAINS"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_FETCH_GRAIN

// D_WEIGHT_FORMAT
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_FORMAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_FORMAT = new("WEIGHT_FORMAT");
    this.WEIGHT_FORMAT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_FORMAT.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.WEIGHT_FORMAT.add_def_property("spec_access", "rw");
    this.WEIGHT_FORMAT.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_FORMAT.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_FORMAT.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_FORMAT"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_FORMAT

// D_WEIGHT_SIZE_0
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BYTE_PER_KERNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BYTE_PER_KERNEL = new("BYTE_PER_KERNEL");
    this.BYTE_PER_KERNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BYTE_PER_KERNEL.configure(this, 18, 0, "RW", 0, 18'h0, 1, 1, 1);
    this.BYTE_PER_KERNEL.add_def_property("spec_access", "rw");
    this.BYTE_PER_KERNEL.add_def_property("spec_sw_default", "0x0");
    this.BYTE_PER_KERNEL.add_def_property("sw_default_mask", "0x0");
    this.BYTE_PER_KERNEL.add_def_property("reset_mask", "0x3ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BYTE_PER_KERNEL"}, 0, 18);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_0

// D_WEIGHT_SIZE_1
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_KERNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_KERNEL = new("WEIGHT_KERNEL");
    this.WEIGHT_KERNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_KERNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.WEIGHT_KERNEL.add_def_property("spec_access", "rw");
    this.WEIGHT_KERNEL.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_KERNEL.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_KERNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_KERNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_1

// D_WEIGHT_RAM_TYPE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_RAM_TYPE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_RAM_TYPE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_RAM_TYPE = new("WEIGHT_RAM_TYPE");
    this.WEIGHT_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.WEIGHT_RAM_TYPE.add_def_property("spec_access", "rw");
    this.WEIGHT_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_RAM_TYPE

// D_WEIGHT_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_ADDR_HIGH = new("WEIGHT_ADDR_HIGH");
    this.WEIGHT_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WEIGHT_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.WEIGHT_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH

// D_WEIGHT_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_ADDR_LOW = new("WEIGHT_ADDR_LOW");
    this.WEIGHT_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WEIGHT_ADDR_LOW.add_def_property("spec_access", "rw");
    this.WEIGHT_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_LOW

// D_WEIGHT_BYTES
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_BYTES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_BYTES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_BYTES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_BYTES = new("WEIGHT_BYTES");
    this.WEIGHT_BYTES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_BYTES.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WEIGHT_BYTES.add_def_property("spec_access", "rw");
    this.WEIGHT_BYTES.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_BYTES.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_BYTES.add_def_property("reset_mask", "0x1ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_BYTES"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_BYTES

// D_WGS_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WGS_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WGS_ADDR_HIGH = new("WGS_ADDR_HIGH");
    this.WGS_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WGS_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WGS_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.WGS_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.WGS_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.WGS_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WGS_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_HIGH

// D_WGS_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WGS_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WGS_ADDR_LOW = new("WGS_ADDR_LOW");
    this.WGS_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WGS_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WGS_ADDR_LOW.add_def_property("spec_access", "rw");
    this.WGS_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.WGS_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.WGS_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WGS_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_LOW

// D_WMB_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WMB_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WMB_ADDR_HIGH = new("WMB_ADDR_HIGH");
    this.WMB_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WMB_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WMB_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.WMB_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.WMB_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.WMB_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WMB_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_HIGH

// D_WMB_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WMB_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WMB_ADDR_LOW = new("WMB_ADDR_LOW");
    this.WMB_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WMB_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WMB_ADDR_LOW.add_def_property("spec_access", "rw");
    this.WMB_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.WMB_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.WMB_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WMB_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_LOW

// D_WMB_BYTES
class reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_BYTES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WMB_BYTES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_BYTES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WMB_BYTES = new("WMB_BYTES");
    this.WMB_BYTES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WMB_BYTES.configure(this, 28, 0, "RW", 0, 28'h0, 1, 1, 1);
    this.WMB_BYTES.add_def_property("spec_access", "rw");
    this.WMB_BYTES.add_def_property("spec_sw_default", "0x0");
    this.WMB_BYTES.add_def_property("sw_default_mask", "0x0");
    this.WMB_BYTES.add_def_property("reset_mask", "0x1fffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WMB_BYTES"}, 0, 28);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_BYTES

// D_MEAN_FORMAT
class reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl MEAN_FORMAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.MEAN_FORMAT = new("MEAN_FORMAT");
    this.MEAN_FORMAT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.MEAN_FORMAT.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.MEAN_FORMAT.add_def_property("spec_access", "rw");
    this.MEAN_FORMAT.add_def_property("spec_sw_default", "0x0");
    this.MEAN_FORMAT.add_def_property("sw_default_mask", "0x0");
    this.MEAN_FORMAT.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "MEAN_FORMAT"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_FORMAT

// D_MEAN_GLOBAL_0
class reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl MEAN_RY;
  rand uvm_reg_field_rdl MEAN_GU;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.MEAN_RY = new("MEAN_RY");
    this.MEAN_RY.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.MEAN_RY.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 0);
    this.MEAN_RY.add_def_property("spec_access", "rw");
    this.MEAN_RY.add_def_property("spec_sw_default", "0x0");
    this.MEAN_RY.add_def_property("sw_default_mask", "0x0");
    this.MEAN_RY.add_def_property("reset_mask", "0xffff");
    this.MEAN_GU = new("MEAN_GU");
    this.MEAN_GU.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.MEAN_GU.configure(this, 16, 16, "RW", 0, 16'h0, 1, 1, 0);
    this.MEAN_GU.add_def_property("spec_access", "rw");
    this.MEAN_GU.add_def_property("spec_sw_default", "0x0");
    this.MEAN_GU.add_def_property("sw_default_mask", "0x0");
    this.MEAN_GU.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "MEAN_RY"}, 0, 16);
    add_hdl_path_slice({rdl_reg_name, "MEAN_GU"}, 16, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_0

// D_MEAN_GLOBAL_1
class reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl MEAN_BV;
  rand uvm_reg_field_rdl MEAN_AX;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.MEAN_BV = new("MEAN_BV");
    this.MEAN_BV.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.MEAN_BV.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 0);
    this.MEAN_BV.add_def_property("spec_access", "rw");
    this.MEAN_BV.add_def_property("spec_sw_default", "0x0");
    this.MEAN_BV.add_def_property("sw_default_mask", "0x0");
    this.MEAN_BV.add_def_property("reset_mask", "0xffff");
    this.MEAN_AX = new("MEAN_AX");
    this.MEAN_AX.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.MEAN_AX.configure(this, 16, 16, "RW", 0, 16'h0, 1, 1, 0);
    this.MEAN_AX.add_def_property("spec_access", "rw");
    this.MEAN_AX.add_def_property("spec_sw_default", "0x0");
    this.MEAN_AX.add_def_property("sw_default_mask", "0x0");
    this.MEAN_AX.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "MEAN_BV"}, 0, 16);
    add_hdl_path_slice({rdl_reg_name, "MEAN_AX"}, 16, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_1

// D_CVT_CFG
class reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CVT_EN;
  rand uvm_reg_field_rdl CVT_TRUNCATE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CVT_EN = new("CVT_EN");
    this.CVT_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CVT_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.CVT_EN.add_def_property("spec_access", "rw");
    this.CVT_EN.add_def_property("spec_sw_default", "0x0");
    this.CVT_EN.add_def_property("sw_default_mask", "0x0");
    this.CVT_EN.add_def_property("reset_mask", "0x1");
    this.CVT_TRUNCATE = new("CVT_TRUNCATE");
    this.CVT_TRUNCATE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CVT_TRUNCATE.configure(this, 6, 4, "RW", 0, 6'h0, 1, 1, 0);
    this.CVT_TRUNCATE.add_def_property("spec_access", "rw");
    this.CVT_TRUNCATE.add_def_property("spec_sw_default", "0x0");
    this.CVT_TRUNCATE.add_def_property("sw_default_mask", "0x0");
    this.CVT_TRUNCATE.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CVT_EN"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CVT_TRUNCATE"}, 4, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_CFG

// D_CVT_OFFSET
class reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_OFFSET extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CVT_OFFSET;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_OFFSET");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CVT_OFFSET = new("CVT_OFFSET");
    this.CVT_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CVT_OFFSET.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.CVT_OFFSET.add_def_property("spec_access", "rw");
    this.CVT_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.CVT_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.CVT_OFFSET.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CVT_OFFSET"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_OFFSET

// D_CVT_SCALE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CVT_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CVT_SCALE = new("CVT_SCALE");
    this.CVT_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CVT_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.CVT_SCALE.add_def_property("spec_access", "rw");
    this.CVT_SCALE.add_def_property("spec_sw_default", "0x0");
    this.CVT_SCALE.add_def_property("sw_default_mask", "0x0");
    this.CVT_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CVT_SCALE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_SCALE

// D_CONV_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_CONV_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CONV_X_STRIDE;
  rand uvm_reg_field_rdl CONV_Y_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_CONV_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CONV_X_STRIDE = new("CONV_X_STRIDE");
    this.CONV_X_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONV_X_STRIDE.configure(this, 3, 0, "RW", 0, 3'h0, 1, 1, 0);
    this.CONV_X_STRIDE.add_def_property("spec_access", "rw");
    this.CONV_X_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.CONV_X_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.CONV_X_STRIDE.add_def_property("reset_mask", "0x7");
    this.CONV_Y_STRIDE = new("CONV_Y_STRIDE");
    this.CONV_Y_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONV_Y_STRIDE.configure(this, 3, 16, "RW", 0, 3'h0, 1, 1, 0);
    this.CONV_Y_STRIDE.add_def_property("spec_access", "rw");
    this.CONV_Y_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.CONV_Y_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.CONV_Y_STRIDE.add_def_property("reset_mask", "0x7");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CONV_X_STRIDE"}, 0, 3);
    add_hdl_path_slice({rdl_reg_name, "CONV_Y_STRIDE"}, 16, 3);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_CONV_STRIDE

// D_ZERO_PADDING
class reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_LEFT;
  rand uvm_reg_field_rdl PAD_RIGHT;
  rand uvm_reg_field_rdl PAD_TOP;
  rand uvm_reg_field_rdl PAD_BOTTOM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_LEFT = new("PAD_LEFT");
    this.PAD_LEFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_LEFT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.PAD_LEFT.add_def_property("spec_access", "rw");
    this.PAD_LEFT.add_def_property("spec_sw_default", "0x0");
    this.PAD_LEFT.add_def_property("sw_default_mask", "0x0");
    this.PAD_LEFT.add_def_property("reset_mask", "0x1f");
    this.PAD_RIGHT = new("PAD_RIGHT");
    this.PAD_RIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_RIGHT.configure(this, 6, 8, "RW", 0, 6'h0, 1, 1, 0);
    this.PAD_RIGHT.add_def_property("spec_access", "rw");
    this.PAD_RIGHT.add_def_property("spec_sw_default", "0x0");
    this.PAD_RIGHT.add_def_property("sw_default_mask", "0x0");
    this.PAD_RIGHT.add_def_property("reset_mask", "0x3f");
    this.PAD_TOP = new("PAD_TOP");
    this.PAD_TOP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_TOP.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.PAD_TOP.add_def_property("spec_access", "rw");
    this.PAD_TOP.add_def_property("spec_sw_default", "0x0");
    this.PAD_TOP.add_def_property("sw_default_mask", "0x0");
    this.PAD_TOP.add_def_property("reset_mask", "0x1f");
    this.PAD_BOTTOM = new("PAD_BOTTOM");
    this.PAD_BOTTOM.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_BOTTOM.configure(this, 6, 24, "RW", 0, 6'h0, 1, 1, 0);
    this.PAD_BOTTOM.add_def_property("spec_access", "rw");
    this.PAD_BOTTOM.add_def_property("spec_sw_default", "0x0");
    this.PAD_BOTTOM.add_def_property("sw_default_mask", "0x0");
    this.PAD_BOTTOM.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_LEFT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "PAD_RIGHT"}, 8, 6);
    add_hdl_path_slice({rdl_reg_name, "PAD_TOP"}, 16, 5);
    add_hdl_path_slice({rdl_reg_name, "PAD_BOTTOM"}, 24, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING

// D_ZERO_PADDING_VALUE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE = new("PAD_VALUE");
    this.PAD_VALUE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.PAD_VALUE.add_def_property("spec_access", "rw");
    this.PAD_VALUE.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING_VALUE

// D_BANK
class reg_addrmap_NVDLA_NVDLA_CDMA_D_BANK extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATA_BANK;
  rand uvm_reg_field_rdl WEIGHT_BANK;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_BANK");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATA_BANK = new("DATA_BANK");
    this.DATA_BANK.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATA_BANK.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.DATA_BANK.add_def_property("spec_access", "rw");
    this.DATA_BANK.add_def_property("spec_sw_default", "0x0");
    this.DATA_BANK.add_def_property("sw_default_mask", "0x0");
    this.DATA_BANK.add_def_property("reset_mask", "0x1f");
    this.WEIGHT_BANK = new("WEIGHT_BANK");
    this.WEIGHT_BANK.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_BANK.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.WEIGHT_BANK.add_def_property("spec_access", "rw");
    this.WEIGHT_BANK.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_BANK.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_BANK.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATA_BANK"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_BANK"}, 16, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_BANK

// D_NAN_FLUSH_TO_ZERO
class reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_TO_ZERO;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_TO_ZERO = new("NAN_TO_ZERO");
    this.NAN_TO_ZERO.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NAN_TO_ZERO.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.NAN_TO_ZERO.add_def_property("spec_access", "rw");
    this.NAN_TO_ZERO.add_def_property("spec_sw_default", "0x0");
    this.NAN_TO_ZERO.add_def_property("sw_default_mask", "0x0");
    this.NAN_TO_ZERO.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_TO_ZERO"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO

// D_NAN_INPUT_DATA_NUM
class reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_DATA_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_DATA_NUM = new("NAN_DATA_NUM");
    this.NAN_DATA_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.NAN_DATA_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.NAN_DATA_NUM.add_def_property("spec_access", "r");
    this.NAN_DATA_NUM.add_def_property("spec_sw_default", "0x0");
    this.NAN_DATA_NUM.add_def_property("sw_default_mask", "0x0");
    this.NAN_DATA_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_DATA_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM

// D_NAN_INPUT_WEIGHT_NUM
class reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_WEIGHT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_WEIGHT_NUM = new("NAN_WEIGHT_NUM");
    this.NAN_WEIGHT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.NAN_WEIGHT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.NAN_WEIGHT_NUM.add_def_property("spec_access", "r");
    this.NAN_WEIGHT_NUM.add_def_property("spec_sw_default", "0x0");
    this.NAN_WEIGHT_NUM.add_def_property("sw_default_mask", "0x0");
    this.NAN_WEIGHT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_WEIGHT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM

// D_INF_INPUT_DATA_NUM
class reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_DATA_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl INF_DATA_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_DATA_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.INF_DATA_NUM = new("INF_DATA_NUM");
    this.INF_DATA_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.INF_DATA_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.INF_DATA_NUM.add_def_property("spec_access", "r");
    this.INF_DATA_NUM.add_def_property("spec_sw_default", "0x0");
    this.INF_DATA_NUM.add_def_property("sw_default_mask", "0x0");
    this.INF_DATA_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "INF_DATA_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_DATA_NUM

// D_INF_INPUT_WEIGHT_NUM
class reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl INF_WEIGHT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.INF_WEIGHT_NUM = new("INF_WEIGHT_NUM");
    this.INF_WEIGHT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.INF_WEIGHT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.INF_WEIGHT_NUM.add_def_property("spec_access", "r");
    this.INF_WEIGHT_NUM.add_def_property("spec_sw_default", "0x0");
    this.INF_WEIGHT_NUM.add_def_property("sw_default_mask", "0x0");
    this.INF_WEIGHT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "INF_WEIGHT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM

// D_PERF_ENABLE
class reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DMA_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DMA_EN = new("DMA_EN");
    this.DMA_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DMA_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DMA_EN.add_def_property("spec_access", "rw");
    this.DMA_EN.add_def_property("spec_sw_default", "0x0");
    this.DMA_EN.add_def_property("sw_default_mask", "0x0");
    this.DMA_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DMA_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_ENABLE

// D_PERF_DAT_READ_STALL
class reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAT_RD_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAT_RD_STALL = new("DAT_RD_STALL");
    this.DAT_RD_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.DAT_RD_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.DAT_RD_STALL.add_def_property("spec_access", "r");
    this.DAT_RD_STALL.add_def_property("spec_sw_default", "0x0");
    this.DAT_RD_STALL.add_def_property("sw_default_mask", "0x0");
    this.DAT_RD_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAT_RD_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_STALL

// D_PERF_WT_READ_STALL
class reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WT_RD_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WT_RD_STALL = new("WT_RD_STALL");
    this.WT_RD_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.WT_RD_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.WT_RD_STALL.add_def_property("spec_access", "r");
    this.WT_RD_STALL.add_def_property("spec_sw_default", "0x0");
    this.WT_RD_STALL.add_def_property("sw_default_mask", "0x0");
    this.WT_RD_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WT_RD_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_STALL

// D_PERF_DAT_READ_LATENCY
class reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAT_RD_LATENCY;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAT_RD_LATENCY = new("DAT_RD_LATENCY");
    this.DAT_RD_LATENCY.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.DAT_RD_LATENCY.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.DAT_RD_LATENCY.add_def_property("spec_access", "r");
    this.DAT_RD_LATENCY.add_def_property("spec_sw_default", "0x0");
    this.DAT_RD_LATENCY.add_def_property("sw_default_mask", "0x0");
    this.DAT_RD_LATENCY.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAT_RD_LATENCY"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY

// D_PERF_WT_READ_LATENCY
class reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_LATENCY extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WT_RD_LATENCY;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_LATENCY");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WT_RD_LATENCY = new("WT_RD_LATENCY");
    this.WT_RD_LATENCY.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.WT_RD_LATENCY.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.WT_RD_LATENCY.add_def_property("spec_access", "r");
    this.WT_RD_LATENCY.add_def_property("spec_sw_default", "0x0");
    this.WT_RD_LATENCY.add_def_property("sw_default_mask", "0x0");
    this.WT_RD_LATENCY.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WT_RD_LATENCY"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_LATENCY

// D_CYA
class reg_addrmap_NVDLA_NVDLA_CDMA_D_CYA extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CYA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDMA_D_CYA");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CYA = new("CYA");
    this.CYA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CYA.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.CYA.add_def_property("spec_access", "rw");
    this.CYA.add_def_property("spec_sw_default", "0x0");
    this.CYA.add_def_property("sw_default_mask", "0x0");
    this.CYA.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CYA"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDMA_D_CYA

// Block NVDLA_CDMA
class block_addrmap_NVDLA_NVDLA_CDMA extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_S_ARBITER S_ARBITER;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_S_CBUF_FLUSH_STATUS S_CBUF_FLUSH_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_MISC_CFG D_MISC_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_FORMAT D_DATAIN_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_0 D_DATAIN_SIZE_0;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_1 D_DATAIN_SIZE_1;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0 D_DATAIN_SIZE_EXT_0;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_PIXEL_OFFSET D_PIXEL_OFFSET;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_RAM_TYPE D_DAIN_RAM_TYPE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0 D_DAIN_ADDR_HIGH_0;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_0 D_DAIN_ADDR_LOW_0;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1 D_DAIN_ADDR_HIGH_1;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_ADDR_LOW_1 D_DAIN_ADDR_LOW_1;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_STRIDE D_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_LINE_UV_STRIDE D_LINE_UV_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_SURF_STRIDE D_SURF_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_DAIN_MAP D_DAIN_MAP;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_X_CFG D_RESERVED_X_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_RESERVED_Y_CFG D_RESERVED_Y_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_NUMBER D_BATCH_NUMBER;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_BATCH_STRIDE D_BATCH_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_ENTRY_PER_SLICE D_ENTRY_PER_SLICE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_FETCH_GRAIN D_FETCH_GRAIN;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_FORMAT D_WEIGHT_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_0 D_WEIGHT_SIZE_0;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_SIZE_1 D_WEIGHT_SIZE_1;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_RAM_TYPE D_WEIGHT_RAM_TYPE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH D_WEIGHT_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_ADDR_LOW D_WEIGHT_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WEIGHT_BYTES D_WEIGHT_BYTES;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_HIGH D_WGS_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WGS_ADDR_LOW D_WGS_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_HIGH D_WMB_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_ADDR_LOW D_WMB_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_WMB_BYTES D_WMB_BYTES;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_FORMAT D_MEAN_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_0 D_MEAN_GLOBAL_0;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_MEAN_GLOBAL_1 D_MEAN_GLOBAL_1;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_CFG D_CVT_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_OFFSET D_CVT_OFFSET;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_CVT_SCALE D_CVT_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_CONV_STRIDE D_CONV_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING D_ZERO_PADDING;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_ZERO_PADDING_VALUE D_ZERO_PADDING_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_BANK D_BANK;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO D_NAN_FLUSH_TO_ZERO;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM D_NAN_INPUT_DATA_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM D_NAN_INPUT_WEIGHT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_DATA_NUM D_INF_INPUT_DATA_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM D_INF_INPUT_WEIGHT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_ENABLE D_PERF_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_STALL D_PERF_DAT_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_STALL D_PERF_WT_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY D_PERF_DAT_READ_LATENCY;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_PERF_WT_READ_LATENCY D_PERF_WT_READ_LATENCY;
  rand reg_addrmap_NVDLA_NVDLA_CDMA_D_CYA D_CYA;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_CDMA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.S_ARBITER = new("S_ARBITER");
    this.S_ARBITER.configure(this, null, "");
    this.S_ARBITER.set_rdl_tag("S_ARBITER_");
    this.S_ARBITER.set_reg_test_info(0, 0, 2);
    this.S_ARBITER.build();
    this.default_map.add_reg(this.S_ARBITER, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.S_CBUF_FLUSH_STATUS = new("S_CBUF_FLUSH_STATUS");
    this.S_CBUF_FLUSH_STATUS.configure(this, null, "");
    this.S_CBUF_FLUSH_STATUS.set_rdl_tag("S_CBUF_FLUSH_STATUS_");
    this.S_CBUF_FLUSH_STATUS.set_reg_test_info(0, 0, 32);
    this.S_CBUF_FLUSH_STATUS.build();
    this.default_map.add_reg(this.S_CBUF_FLUSH_STATUS, `UVM_REG_ADDR_WIDTH'hc, "RO", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.D_MISC_CFG = new("D_MISC_CFG");
    this.D_MISC_CFG.configure(this, null, "");
    this.D_MISC_CFG.set_rdl_tag("D_MISC_CFG_");
    this.D_MISC_CFG.set_reg_test_info(0, 0, 2);
    this.D_MISC_CFG.build();
    this.default_map.add_reg(this.D_MISC_CFG, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.D_DATAIN_FORMAT = new("D_DATAIN_FORMAT");
    this.D_DATAIN_FORMAT.configure(this, null, "");
    this.D_DATAIN_FORMAT.set_rdl_tag("D_DATAIN_FORMAT_");
    this.D_DATAIN_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_FORMAT.build();
    this.default_map.add_reg(this.D_DATAIN_FORMAT, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.D_DATAIN_SIZE_0 = new("D_DATAIN_SIZE_0");
    this.D_DATAIN_SIZE_0.configure(this, null, "");
    this.D_DATAIN_SIZE_0.set_rdl_tag("D_DATAIN_SIZE_0_");
    this.D_DATAIN_SIZE_0.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_SIZE_0.build();
    this.default_map.add_reg(this.D_DATAIN_SIZE_0, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.D_DATAIN_SIZE_1 = new("D_DATAIN_SIZE_1");
    this.D_DATAIN_SIZE_1.configure(this, null, "");
    this.D_DATAIN_SIZE_1.set_rdl_tag("D_DATAIN_SIZE_1_");
    this.D_DATAIN_SIZE_1.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_SIZE_1.build();
    this.default_map.add_reg(this.D_DATAIN_SIZE_1, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.D_DATAIN_SIZE_EXT_0 = new("D_DATAIN_SIZE_EXT_0");
    this.D_DATAIN_SIZE_EXT_0.configure(this, null, "");
    this.D_DATAIN_SIZE_EXT_0.set_rdl_tag("D_DATAIN_SIZE_EXT_0_");
    this.D_DATAIN_SIZE_EXT_0.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_SIZE_EXT_0.build();
    this.default_map.add_reg(this.D_DATAIN_SIZE_EXT_0, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.D_PIXEL_OFFSET = new("D_PIXEL_OFFSET");
    this.D_PIXEL_OFFSET.configure(this, null, "");
    this.D_PIXEL_OFFSET.set_rdl_tag("D_PIXEL_OFFSET_");
    this.D_PIXEL_OFFSET.set_reg_test_info(0, 0, 2);
    this.D_PIXEL_OFFSET.build();
    this.default_map.add_reg(this.D_PIXEL_OFFSET, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.D_DAIN_RAM_TYPE = new("D_DAIN_RAM_TYPE");
    this.D_DAIN_RAM_TYPE.configure(this, null, "");
    this.D_DAIN_RAM_TYPE.set_rdl_tag("D_DAIN_RAM_TYPE_");
    this.D_DAIN_RAM_TYPE.set_reg_test_info(0, 0, 2);
    this.D_DAIN_RAM_TYPE.build();
    this.default_map.add_reg(this.D_DAIN_RAM_TYPE, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.D_DAIN_ADDR_HIGH_0 = new("D_DAIN_ADDR_HIGH_0");
    this.D_DAIN_ADDR_HIGH_0.configure(this, null, "");
    this.D_DAIN_ADDR_HIGH_0.set_rdl_tag("D_DAIN_ADDR_HIGH_0_");
    this.D_DAIN_ADDR_HIGH_0.set_reg_test_info(0, 0, 2);
    this.D_DAIN_ADDR_HIGH_0.build();
    this.default_map.add_reg(this.D_DAIN_ADDR_HIGH_0, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.D_DAIN_ADDR_LOW_0 = new("D_DAIN_ADDR_LOW_0");
    this.D_DAIN_ADDR_LOW_0.configure(this, null, "");
    this.D_DAIN_ADDR_LOW_0.set_rdl_tag("D_DAIN_ADDR_LOW_0_");
    this.D_DAIN_ADDR_LOW_0.set_reg_test_info(0, 0, 2);
    this.D_DAIN_ADDR_LOW_0.build();
    this.default_map.add_reg(this.D_DAIN_ADDR_LOW_0, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.D_DAIN_ADDR_HIGH_1 = new("D_DAIN_ADDR_HIGH_1");
    this.D_DAIN_ADDR_HIGH_1.configure(this, null, "");
    this.D_DAIN_ADDR_HIGH_1.set_rdl_tag("D_DAIN_ADDR_HIGH_1_");
    this.D_DAIN_ADDR_HIGH_1.set_reg_test_info(0, 0, 2);
    this.D_DAIN_ADDR_HIGH_1.build();
    this.default_map.add_reg(this.D_DAIN_ADDR_HIGH_1, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.D_DAIN_ADDR_LOW_1 = new("D_DAIN_ADDR_LOW_1");
    this.D_DAIN_ADDR_LOW_1.configure(this, null, "");
    this.D_DAIN_ADDR_LOW_1.set_rdl_tag("D_DAIN_ADDR_LOW_1_");
    this.D_DAIN_ADDR_LOW_1.set_reg_test_info(0, 0, 2);
    this.D_DAIN_ADDR_LOW_1.build();
    this.default_map.add_reg(this.D_DAIN_ADDR_LOW_1, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.D_LINE_STRIDE = new("D_LINE_STRIDE");
    this.D_LINE_STRIDE.configure(this, null, "");
    this.D_LINE_STRIDE.set_rdl_tag("D_LINE_STRIDE_");
    this.D_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.D_LINE_UV_STRIDE = new("D_LINE_UV_STRIDE");
    this.D_LINE_UV_STRIDE.configure(this, null, "");
    this.D_LINE_UV_STRIDE.set_rdl_tag("D_LINE_UV_STRIDE_");
    this.D_LINE_UV_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_LINE_UV_STRIDE.build();
    this.default_map.add_reg(this.D_LINE_UV_STRIDE, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.D_SURF_STRIDE = new("D_SURF_STRIDE");
    this.D_SURF_STRIDE.configure(this, null, "");
    this.D_SURF_STRIDE.set_rdl_tag("D_SURF_STRIDE_");
    this.D_SURF_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_SURF_STRIDE.build();
    this.default_map.add_reg(this.D_SURF_STRIDE, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.D_DAIN_MAP = new("D_DAIN_MAP");
    this.D_DAIN_MAP.configure(this, null, "");
    this.D_DAIN_MAP.set_rdl_tag("D_DAIN_MAP_");
    this.D_DAIN_MAP.set_reg_test_info(0, 0, 2);
    this.D_DAIN_MAP.build();
    this.default_map.add_reg(this.D_DAIN_MAP, `UVM_REG_ADDR_WIDTH'h4c, "RW", 0);
    this.D_RESERVED_X_CFG = new("D_RESERVED_X_CFG");
    this.D_RESERVED_X_CFG.configure(this, null, "");
    this.D_RESERVED_X_CFG.set_rdl_tag("D_RESERVED_X_CFG_");
    this.D_RESERVED_X_CFG.set_reg_test_info(0, 0, 2);
    this.D_RESERVED_X_CFG.build();
    this.default_map.add_reg(this.D_RESERVED_X_CFG, `UVM_REG_ADDR_WIDTH'h50, "RW", 0);
    this.D_RESERVED_Y_CFG = new("D_RESERVED_Y_CFG");
    this.D_RESERVED_Y_CFG.configure(this, null, "");
    this.D_RESERVED_Y_CFG.set_rdl_tag("D_RESERVED_Y_CFG_");
    this.D_RESERVED_Y_CFG.set_reg_test_info(0, 0, 2);
    this.D_RESERVED_Y_CFG.build();
    this.default_map.add_reg(this.D_RESERVED_Y_CFG, `UVM_REG_ADDR_WIDTH'h54, "RW", 0);
    this.D_BATCH_NUMBER = new("D_BATCH_NUMBER");
    this.D_BATCH_NUMBER.configure(this, null, "");
    this.D_BATCH_NUMBER.set_rdl_tag("D_BATCH_NUMBER_");
    this.D_BATCH_NUMBER.set_reg_test_info(0, 0, 2);
    this.D_BATCH_NUMBER.build();
    this.default_map.add_reg(this.D_BATCH_NUMBER, `UVM_REG_ADDR_WIDTH'h58, "RW", 0);
    this.D_BATCH_STRIDE = new("D_BATCH_STRIDE");
    this.D_BATCH_STRIDE.configure(this, null, "");
    this.D_BATCH_STRIDE.set_rdl_tag("D_BATCH_STRIDE_");
    this.D_BATCH_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_BATCH_STRIDE.build();
    this.default_map.add_reg(this.D_BATCH_STRIDE, `UVM_REG_ADDR_WIDTH'h5c, "RW", 0);
    this.D_ENTRY_PER_SLICE = new("D_ENTRY_PER_SLICE");
    this.D_ENTRY_PER_SLICE.configure(this, null, "");
    this.D_ENTRY_PER_SLICE.set_rdl_tag("D_ENTRY_PER_SLICE_");
    this.D_ENTRY_PER_SLICE.set_reg_test_info(0, 0, 2);
    this.D_ENTRY_PER_SLICE.build();
    this.default_map.add_reg(this.D_ENTRY_PER_SLICE, `UVM_REG_ADDR_WIDTH'h60, "RW", 0);
    this.D_FETCH_GRAIN = new("D_FETCH_GRAIN");
    this.D_FETCH_GRAIN.configure(this, null, "");
    this.D_FETCH_GRAIN.set_rdl_tag("D_FETCH_GRAIN_");
    this.D_FETCH_GRAIN.set_reg_test_info(0, 0, 2);
    this.D_FETCH_GRAIN.build();
    this.default_map.add_reg(this.D_FETCH_GRAIN, `UVM_REG_ADDR_WIDTH'h64, "RW", 0);
    this.D_WEIGHT_FORMAT = new("D_WEIGHT_FORMAT");
    this.D_WEIGHT_FORMAT.configure(this, null, "");
    this.D_WEIGHT_FORMAT.set_rdl_tag("D_WEIGHT_FORMAT_");
    this.D_WEIGHT_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_FORMAT.build();
    this.default_map.add_reg(this.D_WEIGHT_FORMAT, `UVM_REG_ADDR_WIDTH'h68, "RW", 0);
    this.D_WEIGHT_SIZE_0 = new("D_WEIGHT_SIZE_0");
    this.D_WEIGHT_SIZE_0.configure(this, null, "");
    this.D_WEIGHT_SIZE_0.set_rdl_tag("D_WEIGHT_SIZE_0_");
    this.D_WEIGHT_SIZE_0.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_SIZE_0.build();
    this.default_map.add_reg(this.D_WEIGHT_SIZE_0, `UVM_REG_ADDR_WIDTH'h6c, "RW", 0);
    this.D_WEIGHT_SIZE_1 = new("D_WEIGHT_SIZE_1");
    this.D_WEIGHT_SIZE_1.configure(this, null, "");
    this.D_WEIGHT_SIZE_1.set_rdl_tag("D_WEIGHT_SIZE_1_");
    this.D_WEIGHT_SIZE_1.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_SIZE_1.build();
    this.default_map.add_reg(this.D_WEIGHT_SIZE_1, `UVM_REG_ADDR_WIDTH'h70, "RW", 0);
    this.D_WEIGHT_RAM_TYPE = new("D_WEIGHT_RAM_TYPE");
    this.D_WEIGHT_RAM_TYPE.configure(this, null, "");
    this.D_WEIGHT_RAM_TYPE.set_rdl_tag("D_WEIGHT_RAM_TYPE_");
    this.D_WEIGHT_RAM_TYPE.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_RAM_TYPE.build();
    this.default_map.add_reg(this.D_WEIGHT_RAM_TYPE, `UVM_REG_ADDR_WIDTH'h74, "RW", 0);
    this.D_WEIGHT_ADDR_HIGH = new("D_WEIGHT_ADDR_HIGH");
    this.D_WEIGHT_ADDR_HIGH.configure(this, null, "");
    this.D_WEIGHT_ADDR_HIGH.set_rdl_tag("D_WEIGHT_ADDR_HIGH_");
    this.D_WEIGHT_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_WEIGHT_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h78, "RW", 0);
    this.D_WEIGHT_ADDR_LOW = new("D_WEIGHT_ADDR_LOW");
    this.D_WEIGHT_ADDR_LOW.configure(this, null, "");
    this.D_WEIGHT_ADDR_LOW.set_rdl_tag("D_WEIGHT_ADDR_LOW_");
    this.D_WEIGHT_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_ADDR_LOW.build();
    this.default_map.add_reg(this.D_WEIGHT_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h7c, "RW", 0);
    this.D_WEIGHT_BYTES = new("D_WEIGHT_BYTES");
    this.D_WEIGHT_BYTES.configure(this, null, "");
    this.D_WEIGHT_BYTES.set_rdl_tag("D_WEIGHT_BYTES_");
    this.D_WEIGHT_BYTES.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_BYTES.build();
    this.default_map.add_reg(this.D_WEIGHT_BYTES, `UVM_REG_ADDR_WIDTH'h80, "RW", 0);
    this.D_WGS_ADDR_HIGH = new("D_WGS_ADDR_HIGH");
    this.D_WGS_ADDR_HIGH.configure(this, null, "");
    this.D_WGS_ADDR_HIGH.set_rdl_tag("D_WGS_ADDR_HIGH_");
    this.D_WGS_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_WGS_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_WGS_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h84, "RW", 0);
    this.D_WGS_ADDR_LOW = new("D_WGS_ADDR_LOW");
    this.D_WGS_ADDR_LOW.configure(this, null, "");
    this.D_WGS_ADDR_LOW.set_rdl_tag("D_WGS_ADDR_LOW_");
    this.D_WGS_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_WGS_ADDR_LOW.build();
    this.default_map.add_reg(this.D_WGS_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h88, "RW", 0);
    this.D_WMB_ADDR_HIGH = new("D_WMB_ADDR_HIGH");
    this.D_WMB_ADDR_HIGH.configure(this, null, "");
    this.D_WMB_ADDR_HIGH.set_rdl_tag("D_WMB_ADDR_HIGH_");
    this.D_WMB_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_WMB_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_WMB_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h8c, "RW", 0);
    this.D_WMB_ADDR_LOW = new("D_WMB_ADDR_LOW");
    this.D_WMB_ADDR_LOW.configure(this, null, "");
    this.D_WMB_ADDR_LOW.set_rdl_tag("D_WMB_ADDR_LOW_");
    this.D_WMB_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_WMB_ADDR_LOW.build();
    this.default_map.add_reg(this.D_WMB_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h90, "RW", 0);
    this.D_WMB_BYTES = new("D_WMB_BYTES");
    this.D_WMB_BYTES.configure(this, null, "");
    this.D_WMB_BYTES.set_rdl_tag("D_WMB_BYTES_");
    this.D_WMB_BYTES.set_reg_test_info(0, 0, 2);
    this.D_WMB_BYTES.build();
    this.default_map.add_reg(this.D_WMB_BYTES, `UVM_REG_ADDR_WIDTH'h94, "RW", 0);
    this.D_MEAN_FORMAT = new("D_MEAN_FORMAT");
    this.D_MEAN_FORMAT.configure(this, null, "");
    this.D_MEAN_FORMAT.set_rdl_tag("D_MEAN_FORMAT_");
    this.D_MEAN_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_MEAN_FORMAT.build();
    this.default_map.add_reg(this.D_MEAN_FORMAT, `UVM_REG_ADDR_WIDTH'h98, "RW", 0);
    this.D_MEAN_GLOBAL_0 = new("D_MEAN_GLOBAL_0");
    this.D_MEAN_GLOBAL_0.configure(this, null, "");
    this.D_MEAN_GLOBAL_0.set_rdl_tag("D_MEAN_GLOBAL_0_");
    this.D_MEAN_GLOBAL_0.set_reg_test_info(0, 0, 2);
    this.D_MEAN_GLOBAL_0.build();
    this.default_map.add_reg(this.D_MEAN_GLOBAL_0, `UVM_REG_ADDR_WIDTH'h9c, "RW", 0);
    this.D_MEAN_GLOBAL_1 = new("D_MEAN_GLOBAL_1");
    this.D_MEAN_GLOBAL_1.configure(this, null, "");
    this.D_MEAN_GLOBAL_1.set_rdl_tag("D_MEAN_GLOBAL_1_");
    this.D_MEAN_GLOBAL_1.set_reg_test_info(0, 0, 2);
    this.D_MEAN_GLOBAL_1.build();
    this.default_map.add_reg(this.D_MEAN_GLOBAL_1, `UVM_REG_ADDR_WIDTH'ha0, "RW", 0);
    this.D_CVT_CFG = new("D_CVT_CFG");
    this.D_CVT_CFG.configure(this, null, "");
    this.D_CVT_CFG.set_rdl_tag("D_CVT_CFG_");
    this.D_CVT_CFG.set_reg_test_info(0, 0, 2);
    this.D_CVT_CFG.build();
    this.default_map.add_reg(this.D_CVT_CFG, `UVM_REG_ADDR_WIDTH'ha4, "RW", 0);
    this.D_CVT_OFFSET = new("D_CVT_OFFSET");
    this.D_CVT_OFFSET.configure(this, null, "");
    this.D_CVT_OFFSET.set_rdl_tag("D_CVT_OFFSET_");
    this.D_CVT_OFFSET.set_reg_test_info(0, 0, 2);
    this.D_CVT_OFFSET.build();
    this.default_map.add_reg(this.D_CVT_OFFSET, `UVM_REG_ADDR_WIDTH'ha8, "RW", 0);
    this.D_CVT_SCALE = new("D_CVT_SCALE");
    this.D_CVT_SCALE.configure(this, null, "");
    this.D_CVT_SCALE.set_rdl_tag("D_CVT_SCALE_");
    this.D_CVT_SCALE.set_reg_test_info(0, 0, 2);
    this.D_CVT_SCALE.build();
    this.default_map.add_reg(this.D_CVT_SCALE, `UVM_REG_ADDR_WIDTH'hac, "RW", 0);
    this.D_CONV_STRIDE = new("D_CONV_STRIDE");
    this.D_CONV_STRIDE.configure(this, null, "");
    this.D_CONV_STRIDE.set_rdl_tag("D_CONV_STRIDE_");
    this.D_CONV_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_CONV_STRIDE.build();
    this.default_map.add_reg(this.D_CONV_STRIDE, `UVM_REG_ADDR_WIDTH'hb0, "RW", 0);
    this.D_ZERO_PADDING = new("D_ZERO_PADDING");
    this.D_ZERO_PADDING.configure(this, null, "");
    this.D_ZERO_PADDING.set_rdl_tag("D_ZERO_PADDING_");
    this.D_ZERO_PADDING.set_reg_test_info(0, 0, 2);
    this.D_ZERO_PADDING.build();
    this.default_map.add_reg(this.D_ZERO_PADDING, `UVM_REG_ADDR_WIDTH'hb4, "RW", 0);
    this.D_ZERO_PADDING_VALUE = new("D_ZERO_PADDING_VALUE");
    this.D_ZERO_PADDING_VALUE.configure(this, null, "");
    this.D_ZERO_PADDING_VALUE.set_rdl_tag("D_ZERO_PADDING_VALUE_");
    this.D_ZERO_PADDING_VALUE.set_reg_test_info(0, 0, 2);
    this.D_ZERO_PADDING_VALUE.build();
    this.default_map.add_reg(this.D_ZERO_PADDING_VALUE, `UVM_REG_ADDR_WIDTH'hb8, "RW", 0);
    this.D_BANK = new("D_BANK");
    this.D_BANK.configure(this, null, "");
    this.D_BANK.set_rdl_tag("D_BANK_");
    this.D_BANK.set_reg_test_info(0, 0, 2);
    this.D_BANK.build();
    this.default_map.add_reg(this.D_BANK, `UVM_REG_ADDR_WIDTH'hbc, "RW", 0);
    this.D_NAN_FLUSH_TO_ZERO = new("D_NAN_FLUSH_TO_ZERO");
    this.D_NAN_FLUSH_TO_ZERO.configure(this, null, "");
    this.D_NAN_FLUSH_TO_ZERO.set_rdl_tag("D_NAN_FLUSH_TO_ZERO_");
    this.D_NAN_FLUSH_TO_ZERO.set_reg_test_info(0, 0, 2);
    this.D_NAN_FLUSH_TO_ZERO.build();
    this.default_map.add_reg(this.D_NAN_FLUSH_TO_ZERO, `UVM_REG_ADDR_WIDTH'hc0, "RW", 0);
    this.D_NAN_INPUT_DATA_NUM = new("D_NAN_INPUT_DATA_NUM");
    this.D_NAN_INPUT_DATA_NUM.configure(this, null, "");
    this.D_NAN_INPUT_DATA_NUM.set_rdl_tag("D_NAN_INPUT_DATA_NUM_");
    this.D_NAN_INPUT_DATA_NUM.set_reg_test_info(0, 0, 32);
    this.D_NAN_INPUT_DATA_NUM.build();
    this.default_map.add_reg(this.D_NAN_INPUT_DATA_NUM, `UVM_REG_ADDR_WIDTH'hc4, "RO", 0);
    this.D_NAN_INPUT_WEIGHT_NUM = new("D_NAN_INPUT_WEIGHT_NUM");
    this.D_NAN_INPUT_WEIGHT_NUM.configure(this, null, "");
    this.D_NAN_INPUT_WEIGHT_NUM.set_rdl_tag("D_NAN_INPUT_WEIGHT_NUM_");
    this.D_NAN_INPUT_WEIGHT_NUM.set_reg_test_info(0, 0, 32);
    this.D_NAN_INPUT_WEIGHT_NUM.build();
    this.default_map.add_reg(this.D_NAN_INPUT_WEIGHT_NUM, `UVM_REG_ADDR_WIDTH'hc8, "RO", 0);
    this.D_INF_INPUT_DATA_NUM = new("D_INF_INPUT_DATA_NUM");
    this.D_INF_INPUT_DATA_NUM.configure(this, null, "");
    this.D_INF_INPUT_DATA_NUM.set_rdl_tag("D_INF_INPUT_DATA_NUM_");
    this.D_INF_INPUT_DATA_NUM.set_reg_test_info(0, 0, 32);
    this.D_INF_INPUT_DATA_NUM.build();
    this.default_map.add_reg(this.D_INF_INPUT_DATA_NUM, `UVM_REG_ADDR_WIDTH'hcc, "RO", 0);
    this.D_INF_INPUT_WEIGHT_NUM = new("D_INF_INPUT_WEIGHT_NUM");
    this.D_INF_INPUT_WEIGHT_NUM.configure(this, null, "");
    this.D_INF_INPUT_WEIGHT_NUM.set_rdl_tag("D_INF_INPUT_WEIGHT_NUM_");
    this.D_INF_INPUT_WEIGHT_NUM.set_reg_test_info(0, 0, 32);
    this.D_INF_INPUT_WEIGHT_NUM.build();
    this.default_map.add_reg(this.D_INF_INPUT_WEIGHT_NUM, `UVM_REG_ADDR_WIDTH'hd0, "RO", 0);
    this.D_PERF_ENABLE = new("D_PERF_ENABLE");
    this.D_PERF_ENABLE.configure(this, null, "");
    this.D_PERF_ENABLE.set_rdl_tag("D_PERF_ENABLE_");
    this.D_PERF_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_PERF_ENABLE.build();
    this.default_map.add_reg(this.D_PERF_ENABLE, `UVM_REG_ADDR_WIDTH'hd4, "RW", 0);
    this.D_PERF_DAT_READ_STALL = new("D_PERF_DAT_READ_STALL");
    this.D_PERF_DAT_READ_STALL.configure(this, null, "");
    this.D_PERF_DAT_READ_STALL.set_rdl_tag("D_PERF_DAT_READ_STALL_");
    this.D_PERF_DAT_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_DAT_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_DAT_READ_STALL, `UVM_REG_ADDR_WIDTH'hd8, "RO", 0);
    this.D_PERF_WT_READ_STALL = new("D_PERF_WT_READ_STALL");
    this.D_PERF_WT_READ_STALL.configure(this, null, "");
    this.D_PERF_WT_READ_STALL.set_rdl_tag("D_PERF_WT_READ_STALL_");
    this.D_PERF_WT_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_WT_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_WT_READ_STALL, `UVM_REG_ADDR_WIDTH'hdc, "RO", 0);
    this.D_PERF_DAT_READ_LATENCY = new("D_PERF_DAT_READ_LATENCY");
    this.D_PERF_DAT_READ_LATENCY.configure(this, null, "");
    this.D_PERF_DAT_READ_LATENCY.set_rdl_tag("D_PERF_DAT_READ_LATENCY_");
    this.D_PERF_DAT_READ_LATENCY.set_reg_test_info(0, 0, 32);
    this.D_PERF_DAT_READ_LATENCY.build();
    this.default_map.add_reg(this.D_PERF_DAT_READ_LATENCY, `UVM_REG_ADDR_WIDTH'he0, "RO", 0);
    this.D_PERF_WT_READ_LATENCY = new("D_PERF_WT_READ_LATENCY");
    this.D_PERF_WT_READ_LATENCY.configure(this, null, "");
    this.D_PERF_WT_READ_LATENCY.set_rdl_tag("D_PERF_WT_READ_LATENCY_");
    this.D_PERF_WT_READ_LATENCY.set_reg_test_info(0, 0, 32);
    this.D_PERF_WT_READ_LATENCY.build();
    this.default_map.add_reg(this.D_PERF_WT_READ_LATENCY, `UVM_REG_ADDR_WIDTH'he4, "RO", 0);
    this.D_CYA = new("D_CYA");
    this.D_CYA.configure(this, null, "");
    this.D_CYA.set_rdl_tag("D_CYA_");
    this.D_CYA.set_reg_test_info(0, 0, 2);
    this.D_CYA.build();
    this.default_map.add_reg(this.D_CYA, `UVM_REG_ADDR_WIDTH'he8, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_CDMA)
endclass : block_addrmap_NVDLA_NVDLA_CDMA

// Base block
class block_addrmap_NVDLA extends uvm_reg_block_rdl;
  rand block_addrmap_NVDLA_NVDLA_CDMA NVDLA_CDMA;
  
  function new(string name = "block_addrmap_NVDLA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", `UVM_REG_ADDR_WIDTH'h0, 4, UVM_LITTLE_ENDIAN, 1);
    this.set_rdl_address_map(1);
    this.set_rdl_address_map_hdl_path({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.NVDLA_CDMA = block_addrmap_NVDLA_NVDLA_CDMA::type_id::create("NVDLA_CDMA",, get_full_name());
    this.NVDLA_CDMA.configure(this, "");
    this.NVDLA_CDMA.set_rdl_tag("NVDLA_CDMA_");
    this.NVDLA_CDMA.build();
    this.default_map.add_submap(this.NVDLA_CDMA.default_map, `UVM_REG_ADDR_WIDTH'h3000);
    set_hdl_path_root({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.add_callbacks();
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA)
endclass : block_addrmap_NVDLA
