//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_PDP.rdl
//   Parms: opendla.parms
//   Date: Tue Feb 18 10:18:59 CET 2020
//

import uvm_pkg::*;
import ordt_uvm_reg_pkg::*;

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_PDP_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_PDP_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_S_POINTER

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_PDP_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_OP_ENABLE

// D_DATA_CUBE_IN_WIDTH
class reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CUBE_IN_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CUBE_IN_WIDTH = new("CUBE_IN_WIDTH");
    this.CUBE_IN_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CUBE_IN_WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CUBE_IN_WIDTH.add_def_property("spec_access", "rw");
    this.CUBE_IN_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.CUBE_IN_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.CUBE_IN_WIDTH.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CUBE_IN_WIDTH"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH

// D_DATA_CUBE_IN_HEIGHT
class reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CUBE_IN_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CUBE_IN_HEIGHT = new("CUBE_IN_HEIGHT");
    this.CUBE_IN_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CUBE_IN_HEIGHT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CUBE_IN_HEIGHT.add_def_property("spec_access", "rw");
    this.CUBE_IN_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.CUBE_IN_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.CUBE_IN_HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CUBE_IN_HEIGHT"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT

// D_DATA_CUBE_IN_CHANNEL
class reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CUBE_IN_CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CUBE_IN_CHANNEL = new("CUBE_IN_CHANNEL");
    this.CUBE_IN_CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CUBE_IN_CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CUBE_IN_CHANNEL.add_def_property("spec_access", "rw");
    this.CUBE_IN_CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.CUBE_IN_CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.CUBE_IN_CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CUBE_IN_CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL

// D_DATA_CUBE_OUT_WIDTH
class reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CUBE_OUT_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CUBE_OUT_WIDTH = new("CUBE_OUT_WIDTH");
    this.CUBE_OUT_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CUBE_OUT_WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CUBE_OUT_WIDTH.add_def_property("spec_access", "rw");
    this.CUBE_OUT_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.CUBE_OUT_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.CUBE_OUT_WIDTH.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CUBE_OUT_WIDTH"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH

// D_DATA_CUBE_OUT_HEIGHT
class reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CUBE_OUT_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CUBE_OUT_HEIGHT = new("CUBE_OUT_HEIGHT");
    this.CUBE_OUT_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CUBE_OUT_HEIGHT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CUBE_OUT_HEIGHT.add_def_property("spec_access", "rw");
    this.CUBE_OUT_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.CUBE_OUT_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.CUBE_OUT_HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CUBE_OUT_HEIGHT"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT

// D_DATA_CUBE_OUT_CHANNEL
class reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CUBE_OUT_CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CUBE_OUT_CHANNEL = new("CUBE_OUT_CHANNEL");
    this.CUBE_OUT_CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CUBE_OUT_CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CUBE_OUT_CHANNEL.add_def_property("spec_access", "rw");
    this.CUBE_OUT_CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.CUBE_OUT_CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.CUBE_OUT_CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CUBE_OUT_CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL

// D_OPERATION_MODE_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_OPERATION_MODE_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl POOLING_METHOD;
  rand uvm_reg_field_rdl FLYING_MODE;
  rand uvm_reg_field_rdl SPLIT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_OPERATION_MODE_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.POOLING_METHOD = new("POOLING_METHOD");
    this.POOLING_METHOD.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.POOLING_METHOD.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 0);
    this.POOLING_METHOD.add_def_property("spec_access", "rw");
    this.POOLING_METHOD.add_def_property("spec_sw_default", "0x0");
    this.POOLING_METHOD.add_def_property("sw_default_mask", "0x0");
    this.POOLING_METHOD.add_def_property("reset_mask", "0x3");
    this.FLYING_MODE = new("FLYING_MODE");
    this.FLYING_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.FLYING_MODE.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.FLYING_MODE.add_def_property("spec_access", "rw");
    this.FLYING_MODE.add_def_property("spec_sw_default", "0x0");
    this.FLYING_MODE.add_def_property("sw_default_mask", "0x0");
    this.FLYING_MODE.add_def_property("reset_mask", "0x1");
    this.SPLIT_NUM = new("SPLIT_NUM");
    this.SPLIT_NUM.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SPLIT_NUM.configure(this, 8, 8, "RW", 0, 8'h0, 1, 1, 0);
    this.SPLIT_NUM.add_def_property("spec_access", "rw");
    this.SPLIT_NUM.add_def_property("spec_sw_default", "0x0");
    this.SPLIT_NUM.add_def_property("sw_default_mask", "0x0");
    this.SPLIT_NUM.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "POOLING_METHOD"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "FLYING_MODE"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "SPLIT_NUM"}, 8, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_OPERATION_MODE_CFG

// D_NAN_FLUSH_TO_ZERO
class reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_TO_ZERO;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_TO_ZERO = new("NAN_TO_ZERO");
    this.NAN_TO_ZERO.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NAN_TO_ZERO.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.NAN_TO_ZERO.add_def_property("spec_access", "rw");
    this.NAN_TO_ZERO.add_def_property("spec_sw_default", "0x0");
    this.NAN_TO_ZERO.add_def_property("sw_default_mask", "0x0");
    this.NAN_TO_ZERO.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_TO_ZERO"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO

// D_PARTIAL_WIDTH_IN
class reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_IN extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PARTIAL_WIDTH_IN_FIRST;
  rand uvm_reg_field_rdl PARTIAL_WIDTH_IN_LAST;
  rand uvm_reg_field_rdl PARTIAL_WIDTH_IN_MID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_IN");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PARTIAL_WIDTH_IN_FIRST = new("PARTIAL_WIDTH_IN_FIRST");
    this.PARTIAL_WIDTH_IN_FIRST.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PARTIAL_WIDTH_IN_FIRST.configure(this, 10, 0, "RW", 0, 10'h0, 1, 1, 0);
    this.PARTIAL_WIDTH_IN_FIRST.add_def_property("spec_access", "rw");
    this.PARTIAL_WIDTH_IN_FIRST.add_def_property("spec_sw_default", "0x0");
    this.PARTIAL_WIDTH_IN_FIRST.add_def_property("sw_default_mask", "0x0");
    this.PARTIAL_WIDTH_IN_FIRST.add_def_property("reset_mask", "0x3ff");
    this.PARTIAL_WIDTH_IN_LAST = new("PARTIAL_WIDTH_IN_LAST");
    this.PARTIAL_WIDTH_IN_LAST.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PARTIAL_WIDTH_IN_LAST.configure(this, 10, 10, "RW", 0, 10'h0, 1, 1, 0);
    this.PARTIAL_WIDTH_IN_LAST.add_def_property("spec_access", "rw");
    this.PARTIAL_WIDTH_IN_LAST.add_def_property("spec_sw_default", "0x0");
    this.PARTIAL_WIDTH_IN_LAST.add_def_property("sw_default_mask", "0x0");
    this.PARTIAL_WIDTH_IN_LAST.add_def_property("reset_mask", "0x3ff");
    this.PARTIAL_WIDTH_IN_MID = new("PARTIAL_WIDTH_IN_MID");
    this.PARTIAL_WIDTH_IN_MID.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PARTIAL_WIDTH_IN_MID.configure(this, 10, 20, "RW", 0, 10'h0, 1, 1, 0);
    this.PARTIAL_WIDTH_IN_MID.add_def_property("spec_access", "rw");
    this.PARTIAL_WIDTH_IN_MID.add_def_property("spec_sw_default", "0x0");
    this.PARTIAL_WIDTH_IN_MID.add_def_property("sw_default_mask", "0x0");
    this.PARTIAL_WIDTH_IN_MID.add_def_property("reset_mask", "0x3ff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PARTIAL_WIDTH_IN_FIRST"}, 0, 10);
    add_hdl_path_slice({rdl_reg_name, "PARTIAL_WIDTH_IN_LAST"}, 10, 10);
    add_hdl_path_slice({rdl_reg_name, "PARTIAL_WIDTH_IN_MID"}, 20, 10);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_IN

// D_PARTIAL_WIDTH_OUT
class reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_OUT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PARTIAL_WIDTH_OUT_FIRST;
  rand uvm_reg_field_rdl PARTIAL_WIDTH_OUT_LAST;
  rand uvm_reg_field_rdl PARTIAL_WIDTH_OUT_MID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_OUT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PARTIAL_WIDTH_OUT_FIRST = new("PARTIAL_WIDTH_OUT_FIRST");
    this.PARTIAL_WIDTH_OUT_FIRST.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PARTIAL_WIDTH_OUT_FIRST.configure(this, 10, 0, "RW", 0, 10'h0, 1, 1, 0);
    this.PARTIAL_WIDTH_OUT_FIRST.add_def_property("spec_access", "rw");
    this.PARTIAL_WIDTH_OUT_FIRST.add_def_property("spec_sw_default", "0x0");
    this.PARTIAL_WIDTH_OUT_FIRST.add_def_property("sw_default_mask", "0x0");
    this.PARTIAL_WIDTH_OUT_FIRST.add_def_property("reset_mask", "0x3ff");
    this.PARTIAL_WIDTH_OUT_LAST = new("PARTIAL_WIDTH_OUT_LAST");
    this.PARTIAL_WIDTH_OUT_LAST.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PARTIAL_WIDTH_OUT_LAST.configure(this, 10, 10, "RW", 0, 10'h0, 1, 1, 0);
    this.PARTIAL_WIDTH_OUT_LAST.add_def_property("spec_access", "rw");
    this.PARTIAL_WIDTH_OUT_LAST.add_def_property("spec_sw_default", "0x0");
    this.PARTIAL_WIDTH_OUT_LAST.add_def_property("sw_default_mask", "0x0");
    this.PARTIAL_WIDTH_OUT_LAST.add_def_property("reset_mask", "0x3ff");
    this.PARTIAL_WIDTH_OUT_MID = new("PARTIAL_WIDTH_OUT_MID");
    this.PARTIAL_WIDTH_OUT_MID.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PARTIAL_WIDTH_OUT_MID.configure(this, 10, 20, "RW", 0, 10'h0, 1, 1, 0);
    this.PARTIAL_WIDTH_OUT_MID.add_def_property("spec_access", "rw");
    this.PARTIAL_WIDTH_OUT_MID.add_def_property("spec_sw_default", "0x0");
    this.PARTIAL_WIDTH_OUT_MID.add_def_property("sw_default_mask", "0x0");
    this.PARTIAL_WIDTH_OUT_MID.add_def_property("reset_mask", "0x3ff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PARTIAL_WIDTH_OUT_FIRST"}, 0, 10);
    add_hdl_path_slice({rdl_reg_name, "PARTIAL_WIDTH_OUT_LAST"}, 10, 10);
    add_hdl_path_slice({rdl_reg_name, "PARTIAL_WIDTH_OUT_MID"}, 20, 10);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_OUT

// D_POOLING_KERNEL_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_KERNEL_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl KERNEL_WIDTH;
  rand uvm_reg_field_rdl KERNEL_HEIGHT;
  rand uvm_reg_field_rdl KERNEL_STRIDE_WIDTH;
  rand uvm_reg_field_rdl KERNEL_STRIDE_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_KERNEL_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.KERNEL_WIDTH = new("KERNEL_WIDTH");
    this.KERNEL_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.KERNEL_WIDTH.configure(this, 4, 0, "RW", 0, 4'h0, 1, 1, 0);
    this.KERNEL_WIDTH.add_def_property("spec_access", "rw");
    this.KERNEL_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.KERNEL_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.KERNEL_WIDTH.add_def_property("reset_mask", "0xf");
    this.KERNEL_HEIGHT = new("KERNEL_HEIGHT");
    this.KERNEL_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.KERNEL_HEIGHT.configure(this, 4, 8, "RW", 0, 4'h0, 1, 1, 0);
    this.KERNEL_HEIGHT.add_def_property("spec_access", "rw");
    this.KERNEL_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.KERNEL_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.KERNEL_HEIGHT.add_def_property("reset_mask", "0xf");
    this.KERNEL_STRIDE_WIDTH = new("KERNEL_STRIDE_WIDTH");
    this.KERNEL_STRIDE_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.KERNEL_STRIDE_WIDTH.configure(this, 4, 16, "RW", 0, 4'h0, 1, 1, 0);
    this.KERNEL_STRIDE_WIDTH.add_def_property("spec_access", "rw");
    this.KERNEL_STRIDE_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.KERNEL_STRIDE_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.KERNEL_STRIDE_WIDTH.add_def_property("reset_mask", "0xf");
    this.KERNEL_STRIDE_HEIGHT = new("KERNEL_STRIDE_HEIGHT");
    this.KERNEL_STRIDE_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.KERNEL_STRIDE_HEIGHT.configure(this, 4, 20, "RW", 0, 4'h0, 1, 1, 0);
    this.KERNEL_STRIDE_HEIGHT.add_def_property("spec_access", "rw");
    this.KERNEL_STRIDE_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.KERNEL_STRIDE_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.KERNEL_STRIDE_HEIGHT.add_def_property("reset_mask", "0xf");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "KERNEL_WIDTH"}, 0, 4);
    add_hdl_path_slice({rdl_reg_name, "KERNEL_HEIGHT"}, 8, 4);
    add_hdl_path_slice({rdl_reg_name, "KERNEL_STRIDE_WIDTH"}, 16, 4);
    add_hdl_path_slice({rdl_reg_name, "KERNEL_STRIDE_HEIGHT"}, 20, 4);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_KERNEL_CFG

// D_RECIP_KERNEL_WIDTH
class reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RECIP_KERNEL_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RECIP_KERNEL_WIDTH = new("RECIP_KERNEL_WIDTH");
    this.RECIP_KERNEL_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RECIP_KERNEL_WIDTH.configure(this, 17, 0, "RW", 0, 17'h0, 1, 1, 1);
    this.RECIP_KERNEL_WIDTH.add_def_property("spec_access", "rw");
    this.RECIP_KERNEL_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.RECIP_KERNEL_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.RECIP_KERNEL_WIDTH.add_def_property("reset_mask", "0x1ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RECIP_KERNEL_WIDTH"}, 0, 17);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_WIDTH

// D_RECIP_KERNEL_HEIGHT
class reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RECIP_KERNEL_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RECIP_KERNEL_HEIGHT = new("RECIP_KERNEL_HEIGHT");
    this.RECIP_KERNEL_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RECIP_KERNEL_HEIGHT.configure(this, 17, 0, "RW", 0, 17'h0, 1, 1, 1);
    this.RECIP_KERNEL_HEIGHT.add_def_property("spec_access", "rw");
    this.RECIP_KERNEL_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.RECIP_KERNEL_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.RECIP_KERNEL_HEIGHT.add_def_property("reset_mask", "0x1ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RECIP_KERNEL_HEIGHT"}, 0, 17);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT

// D_POOLING_PADDING_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_LEFT;
  rand uvm_reg_field_rdl PAD_TOP;
  rand uvm_reg_field_rdl PAD_RIGHT;
  rand uvm_reg_field_rdl PAD_BOTTOM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_LEFT = new("PAD_LEFT");
    this.PAD_LEFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_LEFT.configure(this, 3, 0, "RW", 0, 3'h0, 1, 1, 0);
    this.PAD_LEFT.add_def_property("spec_access", "rw");
    this.PAD_LEFT.add_def_property("spec_sw_default", "0x0");
    this.PAD_LEFT.add_def_property("sw_default_mask", "0x0");
    this.PAD_LEFT.add_def_property("reset_mask", "0x7");
    this.PAD_TOP = new("PAD_TOP");
    this.PAD_TOP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_TOP.configure(this, 3, 4, "RW", 0, 3'h0, 1, 1, 0);
    this.PAD_TOP.add_def_property("spec_access", "rw");
    this.PAD_TOP.add_def_property("spec_sw_default", "0x0");
    this.PAD_TOP.add_def_property("sw_default_mask", "0x0");
    this.PAD_TOP.add_def_property("reset_mask", "0x7");
    this.PAD_RIGHT = new("PAD_RIGHT");
    this.PAD_RIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_RIGHT.configure(this, 3, 8, "RW", 0, 3'h0, 1, 1, 0);
    this.PAD_RIGHT.add_def_property("spec_access", "rw");
    this.PAD_RIGHT.add_def_property("spec_sw_default", "0x0");
    this.PAD_RIGHT.add_def_property("sw_default_mask", "0x0");
    this.PAD_RIGHT.add_def_property("reset_mask", "0x7");
    this.PAD_BOTTOM = new("PAD_BOTTOM");
    this.PAD_BOTTOM.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_BOTTOM.configure(this, 3, 12, "RW", 0, 3'h0, 1, 1, 0);
    this.PAD_BOTTOM.add_def_property("spec_access", "rw");
    this.PAD_BOTTOM.add_def_property("spec_sw_default", "0x0");
    this.PAD_BOTTOM.add_def_property("sw_default_mask", "0x0");
    this.PAD_BOTTOM.add_def_property("reset_mask", "0x7");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_LEFT"}, 0, 3);
    add_hdl_path_slice({rdl_reg_name, "PAD_TOP"}, 4, 3);
    add_hdl_path_slice({rdl_reg_name, "PAD_RIGHT"}, 8, 3);
    add_hdl_path_slice({rdl_reg_name, "PAD_BOTTOM"}, 12, 3);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_CFG

// D_POOLING_PADDING_VALUE_1_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE_1X;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE_1X = new("PAD_VALUE_1X");
    this.PAD_VALUE_1X.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE_1X.configure(this, 19, 0, "RW", 0, 19'h0, 1, 1, 1);
    this.PAD_VALUE_1X.add_def_property("spec_access", "rw");
    this.PAD_VALUE_1X.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE_1X.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE_1X.add_def_property("reset_mask", "0x7ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE_1X"}, 0, 19);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG

// D_POOLING_PADDING_VALUE_2_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE_2X;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE_2X = new("PAD_VALUE_2X");
    this.PAD_VALUE_2X.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE_2X.configure(this, 19, 0, "RW", 0, 19'h0, 1, 1, 1);
    this.PAD_VALUE_2X.add_def_property("spec_access", "rw");
    this.PAD_VALUE_2X.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE_2X.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE_2X.add_def_property("reset_mask", "0x7ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE_2X"}, 0, 19);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG

// D_POOLING_PADDING_VALUE_3_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE_3X;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE_3X = new("PAD_VALUE_3X");
    this.PAD_VALUE_3X.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE_3X.configure(this, 19, 0, "RW", 0, 19'h0, 1, 1, 1);
    this.PAD_VALUE_3X.add_def_property("spec_access", "rw");
    this.PAD_VALUE_3X.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE_3X.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE_3X.add_def_property("reset_mask", "0x7ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE_3X"}, 0, 19);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG

// D_POOLING_PADDING_VALUE_4_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE_4X;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE_4X = new("PAD_VALUE_4X");
    this.PAD_VALUE_4X.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE_4X.configure(this, 19, 0, "RW", 0, 19'h0, 1, 1, 1);
    this.PAD_VALUE_4X.add_def_property("spec_access", "rw");
    this.PAD_VALUE_4X.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE_4X.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE_4X.add_def_property("reset_mask", "0x7ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE_4X"}, 0, 19);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG

// D_POOLING_PADDING_VALUE_5_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE_5X;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE_5X = new("PAD_VALUE_5X");
    this.PAD_VALUE_5X.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE_5X.configure(this, 19, 0, "RW", 0, 19'h0, 1, 1, 1);
    this.PAD_VALUE_5X.add_def_property("spec_access", "rw");
    this.PAD_VALUE_5X.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE_5X.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE_5X.add_def_property("reset_mask", "0x7ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE_5X"}, 0, 19);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG

// D_POOLING_PADDING_VALUE_6_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE_6X;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE_6X = new("PAD_VALUE_6X");
    this.PAD_VALUE_6X.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE_6X.configure(this, 19, 0, "RW", 0, 19'h0, 1, 1, 1);
    this.PAD_VALUE_6X.add_def_property("spec_access", "rw");
    this.PAD_VALUE_6X.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE_6X.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE_6X.add_def_property("reset_mask", "0x7ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE_6X"}, 0, 19);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG

// D_POOLING_PADDING_VALUE_7_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE_7X;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE_7X = new("PAD_VALUE_7X");
    this.PAD_VALUE_7X.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE_7X.configure(this, 19, 0, "RW", 0, 19'h0, 1, 1, 1);
    this.PAD_VALUE_7X.add_def_property("spec_access", "rw");
    this.PAD_VALUE_7X.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE_7X.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE_7X.add_def_property("reset_mask", "0x7ffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE_7X"}, 0, 19);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG

// D_SRC_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_BASE_ADDR_LOW = new("SRC_BASE_ADDR_LOW");
    this.SRC_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.SRC_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.SRC_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.SRC_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_LOW

// D_SRC_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_BASE_ADDR_HIGH = new("SRC_BASE_ADDR_HIGH");
    this.SRC_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.SRC_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.SRC_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.SRC_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH

// D_SRC_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_LINE_STRIDE = new("SRC_LINE_STRIDE");
    this.SRC_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.SRC_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.SRC_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.SRC_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_LINE_STRIDE

// D_SRC_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_SURFACE_STRIDE = new("SRC_SURFACE_STRIDE");
    this.SRC_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.SRC_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.SRC_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.SRC_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_SURFACE_STRIDE

// D_DST_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_BASE_ADDR_LOW = new("DST_BASE_ADDR_LOW");
    this.DST_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.DST_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.DST_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.DST_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_LOW

// D_DST_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_BASE_ADDR_HIGH = new("DST_BASE_ADDR_HIGH");
    this.DST_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.DST_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.DST_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.DST_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_HIGH

// D_DST_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_PDP_D_DST_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DST_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_LINE_STRIDE = new("DST_LINE_STRIDE");
    this.DST_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.DST_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DST_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DST_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DST_LINE_STRIDE

// D_DST_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_PDP_D_DST_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DST_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_SURFACE_STRIDE = new("DST_SURFACE_STRIDE");
    this.DST_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.DST_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DST_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DST_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DST_SURFACE_STRIDE

// D_DST_RAM_CFG
class reg_addrmap_NVDLA_NVDLA_PDP_D_DST_RAM_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DST_RAM_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_RAM_TYPE = new("DST_RAM_TYPE");
    this.DST_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DST_RAM_TYPE.add_def_property("spec_access", "rw");
    this.DST_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.DST_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.DST_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DST_RAM_CFG

// D_DATA_FORMAT
class reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl INPUT_DATA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.INPUT_DATA = new("INPUT_DATA");
    this.INPUT_DATA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.INPUT_DATA.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 1);
    this.INPUT_DATA.add_def_property("spec_access", "rw");
    this.INPUT_DATA.add_def_property("spec_sw_default", "0x0");
    this.INPUT_DATA.add_def_property("sw_default_mask", "0x0");
    this.INPUT_DATA.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "INPUT_DATA"}, 0, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_FORMAT

// D_INF_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_PDP_D_INF_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl INF_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_INF_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.INF_INPUT_NUM = new("INF_INPUT_NUM");
    this.INF_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.INF_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.INF_INPUT_NUM.add_def_property("spec_access", "r");
    this.INF_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.INF_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.INF_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "INF_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_INF_INPUT_NUM

// D_NAN_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_INPUT_NUM = new("NAN_INPUT_NUM");
    this.NAN_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.NAN_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.NAN_INPUT_NUM.add_def_property("spec_access", "r");
    this.NAN_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.NAN_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.NAN_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_INPUT_NUM

// D_NAN_OUTPUT_NUM
class reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_OUTPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_OUTPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_OUTPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_OUTPUT_NUM = new("NAN_OUTPUT_NUM");
    this.NAN_OUTPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.NAN_OUTPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.NAN_OUTPUT_NUM.add_def_property("spec_access", "r");
    this.NAN_OUTPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.NAN_OUTPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.NAN_OUTPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_OUTPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_OUTPUT_NUM

// D_PERF_ENABLE
class reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DMA_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DMA_EN = new("DMA_EN");
    this.DMA_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DMA_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DMA_EN.add_def_property("spec_access", "rw");
    this.DMA_EN.add_def_property("spec_sw_default", "0x0");
    this.DMA_EN.add_def_property("sw_default_mask", "0x0");
    this.DMA_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DMA_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_ENABLE

// D_PERF_WRITE_STALL
class reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_WRITE_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_WRITE_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_WRITE_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_WRITE_STALL = new("PERF_WRITE_STALL");
    this.PERF_WRITE_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_WRITE_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_WRITE_STALL.add_def_property("spec_access", "r");
    this.PERF_WRITE_STALL.add_def_property("spec_sw_default", "0x0");
    this.PERF_WRITE_STALL.add_def_property("sw_default_mask", "0x0");
    this.PERF_WRITE_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_WRITE_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_WRITE_STALL

// D_CYA
class reg_addrmap_NVDLA_NVDLA_PDP_D_CYA extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CYA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_PDP_D_CYA");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CYA = new("CYA");
    this.CYA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CYA.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.CYA.add_def_property("spec_access", "rw");
    this.CYA.add_def_property("spec_sw_default", "0x0");
    this.CYA.add_def_property("sw_default_mask", "0x0");
    this.CYA.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CYA"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_PDP_D_CYA

// Block NVDLA_PDP
class block_addrmap_NVDLA_NVDLA_PDP extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_PDP_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_PDP_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH D_DATA_CUBE_IN_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT D_DATA_CUBE_IN_HEIGHT;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL D_DATA_CUBE_IN_CHANNEL;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH D_DATA_CUBE_OUT_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT D_DATA_CUBE_OUT_HEIGHT;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL D_DATA_CUBE_OUT_CHANNEL;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_OPERATION_MODE_CFG D_OPERATION_MODE_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO D_NAN_FLUSH_TO_ZERO;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_IN D_PARTIAL_WIDTH_IN;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_PARTIAL_WIDTH_OUT D_PARTIAL_WIDTH_OUT;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_KERNEL_CFG D_POOLING_KERNEL_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_WIDTH D_RECIP_KERNEL_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT D_RECIP_KERNEL_HEIGHT;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_CFG D_POOLING_PADDING_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG D_POOLING_PADDING_VALUE_1_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG D_POOLING_PADDING_VALUE_2_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG D_POOLING_PADDING_VALUE_3_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG D_POOLING_PADDING_VALUE_4_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG D_POOLING_PADDING_VALUE_5_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG D_POOLING_PADDING_VALUE_6_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG D_POOLING_PADDING_VALUE_7_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_LOW D_SRC_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH D_SRC_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_LINE_STRIDE D_SRC_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_SRC_SURFACE_STRIDE D_SRC_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_LOW D_DST_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DST_BASE_ADDR_HIGH D_DST_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DST_LINE_STRIDE D_DST_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DST_SURFACE_STRIDE D_DST_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DST_RAM_CFG D_DST_RAM_CFG;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_DATA_FORMAT D_DATA_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_INF_INPUT_NUM D_INF_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_INPUT_NUM D_NAN_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_NAN_OUTPUT_NUM D_NAN_OUTPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_ENABLE D_PERF_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_PERF_WRITE_STALL D_PERF_WRITE_STALL;
  rand reg_addrmap_NVDLA_NVDLA_PDP_D_CYA D_CYA;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_PDP");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.D_DATA_CUBE_IN_WIDTH = new("D_DATA_CUBE_IN_WIDTH");
    this.D_DATA_CUBE_IN_WIDTH.configure(this, null, "");
    this.D_DATA_CUBE_IN_WIDTH.set_rdl_tag("D_DATA_CUBE_IN_WIDTH_");
    this.D_DATA_CUBE_IN_WIDTH.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_IN_WIDTH.build();
    this.default_map.add_reg(this.D_DATA_CUBE_IN_WIDTH, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.D_DATA_CUBE_IN_HEIGHT = new("D_DATA_CUBE_IN_HEIGHT");
    this.D_DATA_CUBE_IN_HEIGHT.configure(this, null, "");
    this.D_DATA_CUBE_IN_HEIGHT.set_rdl_tag("D_DATA_CUBE_IN_HEIGHT_");
    this.D_DATA_CUBE_IN_HEIGHT.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_IN_HEIGHT.build();
    this.default_map.add_reg(this.D_DATA_CUBE_IN_HEIGHT, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.D_DATA_CUBE_IN_CHANNEL = new("D_DATA_CUBE_IN_CHANNEL");
    this.D_DATA_CUBE_IN_CHANNEL.configure(this, null, "");
    this.D_DATA_CUBE_IN_CHANNEL.set_rdl_tag("D_DATA_CUBE_IN_CHANNEL_");
    this.D_DATA_CUBE_IN_CHANNEL.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_IN_CHANNEL.build();
    this.default_map.add_reg(this.D_DATA_CUBE_IN_CHANNEL, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.D_DATA_CUBE_OUT_WIDTH = new("D_DATA_CUBE_OUT_WIDTH");
    this.D_DATA_CUBE_OUT_WIDTH.configure(this, null, "");
    this.D_DATA_CUBE_OUT_WIDTH.set_rdl_tag("D_DATA_CUBE_OUT_WIDTH_");
    this.D_DATA_CUBE_OUT_WIDTH.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_OUT_WIDTH.build();
    this.default_map.add_reg(this.D_DATA_CUBE_OUT_WIDTH, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.D_DATA_CUBE_OUT_HEIGHT = new("D_DATA_CUBE_OUT_HEIGHT");
    this.D_DATA_CUBE_OUT_HEIGHT.configure(this, null, "");
    this.D_DATA_CUBE_OUT_HEIGHT.set_rdl_tag("D_DATA_CUBE_OUT_HEIGHT_");
    this.D_DATA_CUBE_OUT_HEIGHT.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_OUT_HEIGHT.build();
    this.default_map.add_reg(this.D_DATA_CUBE_OUT_HEIGHT, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.D_DATA_CUBE_OUT_CHANNEL = new("D_DATA_CUBE_OUT_CHANNEL");
    this.D_DATA_CUBE_OUT_CHANNEL.configure(this, null, "");
    this.D_DATA_CUBE_OUT_CHANNEL.set_rdl_tag("D_DATA_CUBE_OUT_CHANNEL_");
    this.D_DATA_CUBE_OUT_CHANNEL.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_OUT_CHANNEL.build();
    this.default_map.add_reg(this.D_DATA_CUBE_OUT_CHANNEL, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.D_OPERATION_MODE_CFG = new("D_OPERATION_MODE_CFG");
    this.D_OPERATION_MODE_CFG.configure(this, null, "");
    this.D_OPERATION_MODE_CFG.set_rdl_tag("D_OPERATION_MODE_CFG_");
    this.D_OPERATION_MODE_CFG.set_reg_test_info(0, 0, 2);
    this.D_OPERATION_MODE_CFG.build();
    this.default_map.add_reg(this.D_OPERATION_MODE_CFG, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.D_NAN_FLUSH_TO_ZERO = new("D_NAN_FLUSH_TO_ZERO");
    this.D_NAN_FLUSH_TO_ZERO.configure(this, null, "");
    this.D_NAN_FLUSH_TO_ZERO.set_rdl_tag("D_NAN_FLUSH_TO_ZERO_");
    this.D_NAN_FLUSH_TO_ZERO.set_reg_test_info(0, 0, 2);
    this.D_NAN_FLUSH_TO_ZERO.build();
    this.default_map.add_reg(this.D_NAN_FLUSH_TO_ZERO, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.D_PARTIAL_WIDTH_IN = new("D_PARTIAL_WIDTH_IN");
    this.D_PARTIAL_WIDTH_IN.configure(this, null, "");
    this.D_PARTIAL_WIDTH_IN.set_rdl_tag("D_PARTIAL_WIDTH_IN_");
    this.D_PARTIAL_WIDTH_IN.set_reg_test_info(0, 0, 2);
    this.D_PARTIAL_WIDTH_IN.build();
    this.default_map.add_reg(this.D_PARTIAL_WIDTH_IN, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.D_PARTIAL_WIDTH_OUT = new("D_PARTIAL_WIDTH_OUT");
    this.D_PARTIAL_WIDTH_OUT.configure(this, null, "");
    this.D_PARTIAL_WIDTH_OUT.set_rdl_tag("D_PARTIAL_WIDTH_OUT_");
    this.D_PARTIAL_WIDTH_OUT.set_reg_test_info(0, 0, 2);
    this.D_PARTIAL_WIDTH_OUT.build();
    this.default_map.add_reg(this.D_PARTIAL_WIDTH_OUT, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.D_POOLING_KERNEL_CFG = new("D_POOLING_KERNEL_CFG");
    this.D_POOLING_KERNEL_CFG.configure(this, null, "");
    this.D_POOLING_KERNEL_CFG.set_rdl_tag("D_POOLING_KERNEL_CFG_");
    this.D_POOLING_KERNEL_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_KERNEL_CFG.build();
    this.default_map.add_reg(this.D_POOLING_KERNEL_CFG, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.D_RECIP_KERNEL_WIDTH = new("D_RECIP_KERNEL_WIDTH");
    this.D_RECIP_KERNEL_WIDTH.configure(this, null, "");
    this.D_RECIP_KERNEL_WIDTH.set_rdl_tag("D_RECIP_KERNEL_WIDTH_");
    this.D_RECIP_KERNEL_WIDTH.set_reg_test_info(0, 0, 2);
    this.D_RECIP_KERNEL_WIDTH.build();
    this.default_map.add_reg(this.D_RECIP_KERNEL_WIDTH, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.D_RECIP_KERNEL_HEIGHT = new("D_RECIP_KERNEL_HEIGHT");
    this.D_RECIP_KERNEL_HEIGHT.configure(this, null, "");
    this.D_RECIP_KERNEL_HEIGHT.set_rdl_tag("D_RECIP_KERNEL_HEIGHT_");
    this.D_RECIP_KERNEL_HEIGHT.set_reg_test_info(0, 0, 2);
    this.D_RECIP_KERNEL_HEIGHT.build();
    this.default_map.add_reg(this.D_RECIP_KERNEL_HEIGHT, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.D_POOLING_PADDING_CFG = new("D_POOLING_PADDING_CFG");
    this.D_POOLING_PADDING_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_CFG.set_rdl_tag("D_POOLING_PADDING_CFG_");
    this.D_POOLING_PADDING_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_CFG, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.D_POOLING_PADDING_VALUE_1_CFG = new("D_POOLING_PADDING_VALUE_1_CFG");
    this.D_POOLING_PADDING_VALUE_1_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_VALUE_1_CFG.set_rdl_tag("D_POOLING_PADDING_VALUE_1_CFG_");
    this.D_POOLING_PADDING_VALUE_1_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_VALUE_1_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_VALUE_1_CFG, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.D_POOLING_PADDING_VALUE_2_CFG = new("D_POOLING_PADDING_VALUE_2_CFG");
    this.D_POOLING_PADDING_VALUE_2_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_VALUE_2_CFG.set_rdl_tag("D_POOLING_PADDING_VALUE_2_CFG_");
    this.D_POOLING_PADDING_VALUE_2_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_VALUE_2_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_VALUE_2_CFG, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.D_POOLING_PADDING_VALUE_3_CFG = new("D_POOLING_PADDING_VALUE_3_CFG");
    this.D_POOLING_PADDING_VALUE_3_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_VALUE_3_CFG.set_rdl_tag("D_POOLING_PADDING_VALUE_3_CFG_");
    this.D_POOLING_PADDING_VALUE_3_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_VALUE_3_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_VALUE_3_CFG, `UVM_REG_ADDR_WIDTH'h4c, "RW", 0);
    this.D_POOLING_PADDING_VALUE_4_CFG = new("D_POOLING_PADDING_VALUE_4_CFG");
    this.D_POOLING_PADDING_VALUE_4_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_VALUE_4_CFG.set_rdl_tag("D_POOLING_PADDING_VALUE_4_CFG_");
    this.D_POOLING_PADDING_VALUE_4_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_VALUE_4_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_VALUE_4_CFG, `UVM_REG_ADDR_WIDTH'h50, "RW", 0);
    this.D_POOLING_PADDING_VALUE_5_CFG = new("D_POOLING_PADDING_VALUE_5_CFG");
    this.D_POOLING_PADDING_VALUE_5_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_VALUE_5_CFG.set_rdl_tag("D_POOLING_PADDING_VALUE_5_CFG_");
    this.D_POOLING_PADDING_VALUE_5_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_VALUE_5_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_VALUE_5_CFG, `UVM_REG_ADDR_WIDTH'h54, "RW", 0);
    this.D_POOLING_PADDING_VALUE_6_CFG = new("D_POOLING_PADDING_VALUE_6_CFG");
    this.D_POOLING_PADDING_VALUE_6_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_VALUE_6_CFG.set_rdl_tag("D_POOLING_PADDING_VALUE_6_CFG_");
    this.D_POOLING_PADDING_VALUE_6_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_VALUE_6_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_VALUE_6_CFG, `UVM_REG_ADDR_WIDTH'h58, "RW", 0);
    this.D_POOLING_PADDING_VALUE_7_CFG = new("D_POOLING_PADDING_VALUE_7_CFG");
    this.D_POOLING_PADDING_VALUE_7_CFG.configure(this, null, "");
    this.D_POOLING_PADDING_VALUE_7_CFG.set_rdl_tag("D_POOLING_PADDING_VALUE_7_CFG_");
    this.D_POOLING_PADDING_VALUE_7_CFG.set_reg_test_info(0, 0, 2);
    this.D_POOLING_PADDING_VALUE_7_CFG.build();
    this.default_map.add_reg(this.D_POOLING_PADDING_VALUE_7_CFG, `UVM_REG_ADDR_WIDTH'h5c, "RW", 0);
    this.D_SRC_BASE_ADDR_LOW = new("D_SRC_BASE_ADDR_LOW");
    this.D_SRC_BASE_ADDR_LOW.configure(this, null, "");
    this.D_SRC_BASE_ADDR_LOW.set_rdl_tag("D_SRC_BASE_ADDR_LOW_");
    this.D_SRC_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_SRC_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_SRC_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h60, "RW", 0);
    this.D_SRC_BASE_ADDR_HIGH = new("D_SRC_BASE_ADDR_HIGH");
    this.D_SRC_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_SRC_BASE_ADDR_HIGH.set_rdl_tag("D_SRC_BASE_ADDR_HIGH_");
    this.D_SRC_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_SRC_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_SRC_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h64, "RW", 0);
    this.D_SRC_LINE_STRIDE = new("D_SRC_LINE_STRIDE");
    this.D_SRC_LINE_STRIDE.configure(this, null, "");
    this.D_SRC_LINE_STRIDE.set_rdl_tag("D_SRC_LINE_STRIDE_");
    this.D_SRC_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_SRC_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_SRC_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h68, "RW", 0);
    this.D_SRC_SURFACE_STRIDE = new("D_SRC_SURFACE_STRIDE");
    this.D_SRC_SURFACE_STRIDE.configure(this, null, "");
    this.D_SRC_SURFACE_STRIDE.set_rdl_tag("D_SRC_SURFACE_STRIDE_");
    this.D_SRC_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_SRC_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_SRC_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h6c, "RW", 0);
    this.D_DST_BASE_ADDR_LOW = new("D_DST_BASE_ADDR_LOW");
    this.D_DST_BASE_ADDR_LOW.configure(this, null, "");
    this.D_DST_BASE_ADDR_LOW.set_rdl_tag("D_DST_BASE_ADDR_LOW_");
    this.D_DST_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_DST_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_DST_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h70, "RW", 0);
    this.D_DST_BASE_ADDR_HIGH = new("D_DST_BASE_ADDR_HIGH");
    this.D_DST_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_DST_BASE_ADDR_HIGH.set_rdl_tag("D_DST_BASE_ADDR_HIGH_");
    this.D_DST_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_DST_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_DST_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h74, "RW", 0);
    this.D_DST_LINE_STRIDE = new("D_DST_LINE_STRIDE");
    this.D_DST_LINE_STRIDE.configure(this, null, "");
    this.D_DST_LINE_STRIDE.set_rdl_tag("D_DST_LINE_STRIDE_");
    this.D_DST_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DST_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_DST_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h78, "RW", 0);
    this.D_DST_SURFACE_STRIDE = new("D_DST_SURFACE_STRIDE");
    this.D_DST_SURFACE_STRIDE.configure(this, null, "");
    this.D_DST_SURFACE_STRIDE.set_rdl_tag("D_DST_SURFACE_STRIDE_");
    this.D_DST_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DST_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_DST_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h7c, "RW", 0);
    this.D_DST_RAM_CFG = new("D_DST_RAM_CFG");
    this.D_DST_RAM_CFG.configure(this, null, "");
    this.D_DST_RAM_CFG.set_rdl_tag("D_DST_RAM_CFG_");
    this.D_DST_RAM_CFG.set_reg_test_info(0, 0, 2);
    this.D_DST_RAM_CFG.build();
    this.default_map.add_reg(this.D_DST_RAM_CFG, `UVM_REG_ADDR_WIDTH'h80, "RW", 0);
    this.D_DATA_FORMAT = new("D_DATA_FORMAT");
    this.D_DATA_FORMAT.configure(this, null, "");
    this.D_DATA_FORMAT.set_rdl_tag("D_DATA_FORMAT_");
    this.D_DATA_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_DATA_FORMAT.build();
    this.default_map.add_reg(this.D_DATA_FORMAT, `UVM_REG_ADDR_WIDTH'h84, "RW", 0);
    this.D_INF_INPUT_NUM = new("D_INF_INPUT_NUM");
    this.D_INF_INPUT_NUM.configure(this, null, "");
    this.D_INF_INPUT_NUM.set_rdl_tag("D_INF_INPUT_NUM_");
    this.D_INF_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_INF_INPUT_NUM.build();
    this.default_map.add_reg(this.D_INF_INPUT_NUM, `UVM_REG_ADDR_WIDTH'h88, "RO", 0);
    this.D_NAN_INPUT_NUM = new("D_NAN_INPUT_NUM");
    this.D_NAN_INPUT_NUM.configure(this, null, "");
    this.D_NAN_INPUT_NUM.set_rdl_tag("D_NAN_INPUT_NUM_");
    this.D_NAN_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_NAN_INPUT_NUM.build();
    this.default_map.add_reg(this.D_NAN_INPUT_NUM, `UVM_REG_ADDR_WIDTH'h8c, "RO", 0);
    this.D_NAN_OUTPUT_NUM = new("D_NAN_OUTPUT_NUM");
    this.D_NAN_OUTPUT_NUM.configure(this, null, "");
    this.D_NAN_OUTPUT_NUM.set_rdl_tag("D_NAN_OUTPUT_NUM_");
    this.D_NAN_OUTPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_NAN_OUTPUT_NUM.build();
    this.default_map.add_reg(this.D_NAN_OUTPUT_NUM, `UVM_REG_ADDR_WIDTH'h90, "RO", 0);
    this.D_PERF_ENABLE = new("D_PERF_ENABLE");
    this.D_PERF_ENABLE.configure(this, null, "");
    this.D_PERF_ENABLE.set_rdl_tag("D_PERF_ENABLE_");
    this.D_PERF_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_PERF_ENABLE.build();
    this.default_map.add_reg(this.D_PERF_ENABLE, `UVM_REG_ADDR_WIDTH'h94, "RW", 0);
    this.D_PERF_WRITE_STALL = new("D_PERF_WRITE_STALL");
    this.D_PERF_WRITE_STALL.configure(this, null, "");
    this.D_PERF_WRITE_STALL.set_rdl_tag("D_PERF_WRITE_STALL_");
    this.D_PERF_WRITE_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_WRITE_STALL.build();
    this.default_map.add_reg(this.D_PERF_WRITE_STALL, `UVM_REG_ADDR_WIDTH'h98, "RO", 0);
    this.D_CYA = new("D_CYA");
    this.D_CYA.configure(this, null, "");
    this.D_CYA.set_rdl_tag("D_CYA_");
    this.D_CYA.set_reg_test_info(0, 0, 2);
    this.D_CYA.build();
    this.default_map.add_reg(this.D_CYA, `UVM_REG_ADDR_WIDTH'h9c, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_PDP)
endclass : block_addrmap_NVDLA_NVDLA_PDP

// Base block
class block_addrmap_NVDLA extends uvm_reg_block_rdl;
  rand block_addrmap_NVDLA_NVDLA_PDP NVDLA_PDP;
  
  function new(string name = "block_addrmap_NVDLA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", `UVM_REG_ADDR_WIDTH'h0, 4, UVM_LITTLE_ENDIAN, 1);
    this.set_rdl_address_map(1);
    this.set_rdl_address_map_hdl_path({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.NVDLA_PDP = block_addrmap_NVDLA_NVDLA_PDP::type_id::create("NVDLA_PDP",, get_full_name());
    this.NVDLA_PDP.configure(this, "");
    this.NVDLA_PDP.set_rdl_tag("NVDLA_PDP_");
    this.NVDLA_PDP.build();
    this.default_map.add_submap(this.NVDLA_PDP.default_map, `UVM_REG_ADDR_WIDTH'hb000);
    set_hdl_path_root({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.add_callbacks();
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA)
endclass : block_addrmap_NVDLA
