//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_CFGROM.rdl
//   Parms: opendla.parms
//   Date: Tue Feb 18 10:18:47 CET 2020
//

import uvm_pkg::*;
import ordt_uvm_reg_pkg::*;

// CFGROM_HW_VERSION
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_HW_VERSION extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl HW_VERSION;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_HW_VERSION");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.HW_VERSION = new("HW_VERSION");
    this.HW_VERSION.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.HW_VERSION.configure(this, 32, 0, "RO", 0, 32'h10001, 1, 0, 1);
    this.HW_VERSION.add_def_property("spec_access", "rw");
    this.HW_VERSION.add_def_property("spec_sw_default", "0x0");
    this.HW_VERSION.add_def_property("sw_default_mask", "0x0");
    this.HW_VERSION.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "HW_VERSION"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_HW_VERSION

// CFGROM_GLB_DESC
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_GLB_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl GLB_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_GLB_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.GLB_DESC = new("GLB_DESC");
    this.GLB_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.GLB_DESC.configure(this, 32, 0, "RO", 0, 32'h1, 1, 0, 1);
    this.GLB_DESC.add_def_property("spec_access", "rw");
    this.GLB_DESC.add_def_property("spec_sw_default", "0x0");
    this.GLB_DESC.add_def_property("sw_default_mask", "0x0");
    this.GLB_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "GLB_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_GLB_DESC

// CFGROM_CIF_DESC
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CIF_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CIF_DESC = new("CIF_DESC");
    this.CIF_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CIF_DESC.configure(this, 32, 0, "RO", 0, 32'h180002, 1, 0, 1);
    this.CIF_DESC.add_def_property("spec_access", "rw");
    this.CIF_DESC.add_def_property("spec_sw_default", "0x0");
    this.CIF_DESC.add_def_property("sw_default_mask", "0x0");
    this.CIF_DESC.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CIF_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_DESC

// CFGROM_CIF_CAP_INCOMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CIF_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CIF_CAP_INCOMPAT = new("CIF_CAP_INCOMPAT");
    this.CIF_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CIF_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CIF_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CIF_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CIF_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CIF_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CIF_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT

// CFGROM_CIF_CAP_COMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CIF_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CIF_CAP_COMPAT = new("CIF_CAP_COMPAT");
    this.CIF_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CIF_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CIF_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CIF_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CIF_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CIF_CAP_COMPAT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CIF_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT

// CFGROM_CIF_BASE_WIDTH
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CIF_BASE_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CIF_BASE_WIDTH = new("CIF_BASE_WIDTH");
    this.CIF_BASE_WIDTH.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CIF_BASE_WIDTH.configure(this, 8, 0, "RO", 0, 8'h8, 1, 0, 1);
    this.CIF_BASE_WIDTH.add_def_property("spec_access", "rw");
    this.CIF_BASE_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.CIF_BASE_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.CIF_BASE_WIDTH.add_def_property("reset_mask", "0xf");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CIF_BASE_WIDTH"}, 0, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH

// CFGROM_CIF_BASE_LATENCY
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CIF_BASE_LATENCY;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CIF_BASE_LATENCY = new("CIF_BASE_LATENCY");
    this.CIF_BASE_LATENCY.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CIF_BASE_LATENCY.configure(this, 32, 0, "RO", 0, 32'h32, 1, 0, 1);
    this.CIF_BASE_LATENCY.add_def_property("spec_access", "rw");
    this.CIF_BASE_LATENCY.add_def_property("spec_sw_default", "0x0");
    this.CIF_BASE_LATENCY.add_def_property("sw_default_mask", "0x0");
    this.CIF_BASE_LATENCY.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CIF_BASE_LATENCY"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY

// CFGROM_CIF_BASE_BURST_LENGTH_MAX
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BASE_BURST_LENGTH_MAX;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BASE_BURST_LENGTH_MAX = new("BASE_BURST_LENGTH_MAX");
    this.BASE_BURST_LENGTH_MAX.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.BASE_BURST_LENGTH_MAX.configure(this, 27, 5, "RO", 0, 27'h4, 1, 0, 1);
    this.BASE_BURST_LENGTH_MAX.add_def_property("spec_access", "rw");
    this.BASE_BURST_LENGTH_MAX.add_def_property("spec_sw_default", "0x0");
    this.BASE_BURST_LENGTH_MAX.add_def_property("sw_default_mask", "0x0");
    this.BASE_BURST_LENGTH_MAX.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BASE_BURST_LENGTH_MAX"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX

// CFGROM_CIF_BASE_MEM_ADDR_WIDTH
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CIF_BASE_MEM_ADDR_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CIF_BASE_MEM_ADDR_WIDTH = new("CIF_BASE_MEM_ADDR_WIDTH");
    this.CIF_BASE_MEM_ADDR_WIDTH.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CIF_BASE_MEM_ADDR_WIDTH.configure(this, 27, 5, "RO", 0, 27'h20, 1, 0, 1);
    this.CIF_BASE_MEM_ADDR_WIDTH.add_def_property("spec_access", "rw");
    this.CIF_BASE_MEM_ADDR_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.CIF_BASE_MEM_ADDR_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.CIF_BASE_MEM_ADDR_WIDTH.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CIF_BASE_MEM_ADDR_WIDTH"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH

// CFGROM_CDMA_DESC
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_DESC = new("CDMA_DESC");
    this.CDMA_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDMA_DESC.configure(this, 32, 0, "RO", 0, 32'h340003, 1, 0, 1);
    this.CDMA_DESC.add_def_property("spec_access", "rw");
    this.CDMA_DESC.add_def_property("spec_sw_default", "0x0");
    this.CDMA_DESC.add_def_property("sw_default_mask", "0x0");
    this.CDMA_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_DESC

// CFGROM_CDMA_CAP_INCOMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_CAP_INCOMPAT = new("CDMA_CAP_INCOMPAT");
    this.CDMA_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDMA_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CDMA_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CDMA_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CDMA_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CDMA_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT

// CFGROM_CDMA_CAP_COMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_CAP_COMPAT = new("CDMA_CAP_COMPAT");
    this.CDMA_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDMA_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h10, 1, 0, 1);
    this.CDMA_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CDMA_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CDMA_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CDMA_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT

// CFGROM_CDMA_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_FEATURE_TYPES = new("CDMA_BASE_FEATURE_TYPES");
    this.CDMA_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDMA_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CDMA_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.CDMA_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES

// CFGROM_CDMA_BASE_WEIGHT_TYPES
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_WEIGHT_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_WEIGHT_TYPES = new("CDMA_BASE_WEIGHT_TYPES");
    this.CDMA_BASE_WEIGHT_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDMA_BASE_WEIGHT_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CDMA_BASE_WEIGHT_TYPES.add_def_property("spec_access", "rwt");
    this.CDMA_BASE_WEIGHT_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_WEIGHT_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_WEIGHT_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_WEIGHT_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES

// CFGROM_CDMA_BASE_ATOMIC_C
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_ATOMIC_C;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_ATOMIC_C = new("CDMA_BASE_ATOMIC_C");
    this.CDMA_BASE_ATOMIC_C.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDMA_BASE_ATOMIC_C.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CDMA_BASE_ATOMIC_C.add_def_property("spec_access", "rwt");
    this.CDMA_BASE_ATOMIC_C.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_ATOMIC_C.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_ATOMIC_C.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_ATOMIC_C"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C

// CFGROM_CDMA_BASE_ATOMIC_K
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_ATOMIC_K;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_ATOMIC_K = new("CDMA_BASE_ATOMIC_K");
    this.CDMA_BASE_ATOMIC_K.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDMA_BASE_ATOMIC_K.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CDMA_BASE_ATOMIC_K.add_def_property("spec_access", "rw");
    this.CDMA_BASE_ATOMIC_K.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_ATOMIC_K.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_ATOMIC_K.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_ATOMIC_K"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K

// CFGROM_CDMA_BASE_ATOMIC_M
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_ATOMIC_M;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_ATOMIC_M = new("CDMA_BASE_ATOMIC_M");
    this.CDMA_BASE_ATOMIC_M.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDMA_BASE_ATOMIC_M.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.CDMA_BASE_ATOMIC_M.add_def_property("spec_access", "r");
    this.CDMA_BASE_ATOMIC_M.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_ATOMIC_M.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_ATOMIC_M.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_ATOMIC_M"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M

// CFGROM_CDMA_BASE_CBUF_BANK_NUM
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_CBUF_BANK_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_CBUF_BANK_NUM = new("CDMA_BASE_CBUF_BANK_NUM");
    this.CDMA_BASE_CBUF_BANK_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDMA_BASE_CBUF_BANK_NUM.configure(this, 32, 0, "RO", 1, 32'h20, 1, 0, 1);
    this.CDMA_BASE_CBUF_BANK_NUM.add_def_property("spec_access", "r");
    this.CDMA_BASE_CBUF_BANK_NUM.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_CBUF_BANK_NUM.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_CBUF_BANK_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_CBUF_BANK_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM

// CFGROM_CDMA_BASE_CBUF_BANK_WIDTH
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_CBUF_BANK_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_CBUF_BANK_WIDTH = new("CDMA_BASE_CBUF_BANK_WIDTH");
    this.CDMA_BASE_CBUF_BANK_WIDTH.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDMA_BASE_CBUF_BANK_WIDTH.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.CDMA_BASE_CBUF_BANK_WIDTH.add_def_property("spec_access", "r");
    this.CDMA_BASE_CBUF_BANK_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_CBUF_BANK_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_CBUF_BANK_WIDTH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_CBUF_BANK_WIDTH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH

// CFGROM_CDMA_BASE_CBUF_BANK_DEPTH
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_BASE_CBUF_BANK_DEPTH;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_BASE_CBUF_BANK_DEPTH = new("CDMA_BASE_CBUF_BANK_DEPTH");
    this.CDMA_BASE_CBUF_BANK_DEPTH.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDMA_BASE_CBUF_BANK_DEPTH.configure(this, 32, 0, "RO", 1, 32'h200, 1, 0, 1);
    this.CDMA_BASE_CBUF_BANK_DEPTH.add_def_property("spec_access", "r");
    this.CDMA_BASE_CBUF_BANK_DEPTH.add_def_property("spec_sw_default", "0x0");
    this.CDMA_BASE_CBUF_BANK_DEPTH.add_def_property("sw_default_mask", "0x0");
    this.CDMA_BASE_CBUF_BANK_DEPTH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_BASE_CBUF_BANK_DEPTH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH

// CFGROM_CDMA_MULTI_BATCH_MAX
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_MULTI_BATCH_MAX;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_MULTI_BATCH_MAX = new("CDMA_MULTI_BATCH_MAX");
    this.CDMA_MULTI_BATCH_MAX.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDMA_MULTI_BATCH_MAX.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.CDMA_MULTI_BATCH_MAX.add_def_property("spec_access", "r");
    this.CDMA_MULTI_BATCH_MAX.add_def_property("spec_sw_default", "0x0");
    this.CDMA_MULTI_BATCH_MAX.add_def_property("sw_default_mask", "0x0");
    this.CDMA_MULTI_BATCH_MAX.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_MULTI_BATCH_MAX"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX

// CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_IMAGE_IN_FORMATS_PACKED;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_IMAGE_IN_FORMATS_PACKED = new("CDMA_IMAGE_IN_FORMATS_PACKED");
    this.CDMA_IMAGE_IN_FORMATS_PACKED.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDMA_IMAGE_IN_FORMATS_PACKED.configure(this, 32, 0, "RO", 1, 32'hcfff001, 1, 0, 1);
    this.CDMA_IMAGE_IN_FORMATS_PACKED.add_def_property("spec_access", "r");
    this.CDMA_IMAGE_IN_FORMATS_PACKED.add_def_property("spec_sw_default", "0x0");
    this.CDMA_IMAGE_IN_FORMATS_PACKED.add_def_property("sw_default_mask", "0x0");
    this.CDMA_IMAGE_IN_FORMATS_PACKED.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_IMAGE_IN_FORMATS_PACKED"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED

// CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDMA_IMAGE_IN_FORMATS_SEMI;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDMA_IMAGE_IN_FORMATS_SEMI = new("CDMA_IMAGE_IN_FORMATS_SEMI");
    this.CDMA_IMAGE_IN_FORMATS_SEMI.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDMA_IMAGE_IN_FORMATS_SEMI.configure(this, 32, 0, "RO", 1, 32'h3, 1, 0, 1);
    this.CDMA_IMAGE_IN_FORMATS_SEMI.add_def_property("spec_access", "r");
    this.CDMA_IMAGE_IN_FORMATS_SEMI.add_def_property("spec_sw_default", "0x0");
    this.CDMA_IMAGE_IN_FORMATS_SEMI.add_def_property("sw_default_mask", "0x0");
    this.CDMA_IMAGE_IN_FORMATS_SEMI.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDMA_IMAGE_IN_FORMATS_SEMI"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI

// CFGROM_CBUF_DESC
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CBUF_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CBUF_DESC = new("CBUF_DESC");
    this.CBUF_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CBUF_DESC.configure(this, 32, 0, "RO", 0, 32'h180004, 1, 0, 1);
    this.CBUF_DESC.add_def_property("spec_access", "rw");
    this.CBUF_DESC.add_def_property("spec_sw_default", "0x0");
    this.CBUF_DESC.add_def_property("sw_default_mask", "0x0");
    this.CBUF_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CBUF_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_DESC

// CFGROM_CBUF_CAP_INCOMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CBUF_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CBUF_CAP_INCOMPAT = new("CBUF_CAP_INCOMPAT");
    this.CBUF_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CBUF_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CBUF_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CBUF_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CBUF_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CBUF_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CBUF_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT

// CFGROM_CBUF_CAP_COMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CBUF_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CBUF_CAP_COMPAT = new("CBUF_CAP_COMPAT");
    this.CBUF_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CBUF_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CBUF_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CBUF_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CBUF_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CBUF_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CBUF_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT

// CFGROM_CBUF_BASE_CBUF_BANK_NUM
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CBUF_BASE_CBUF_BANK_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CBUF_BASE_CBUF_BANK_NUM = new("CBUF_BASE_CBUF_BANK_NUM");
    this.CBUF_BASE_CBUF_BANK_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CBUF_BASE_CBUF_BANK_NUM.configure(this, 32, 0, "RO", 1, 32'h20, 1, 0, 1);
    this.CBUF_BASE_CBUF_BANK_NUM.add_def_property("spec_access", "r");
    this.CBUF_BASE_CBUF_BANK_NUM.add_def_property("spec_sw_default", "0x0");
    this.CBUF_BASE_CBUF_BANK_NUM.add_def_property("sw_default_mask", "0x0");
    this.CBUF_BASE_CBUF_BANK_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CBUF_BASE_CBUF_BANK_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM

// CFGROM_CBUF_BASE_CBUF_BANK_WIDTH
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CBUF_BASE_CBUF_BANK_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CBUF_BASE_CBUF_BANK_WIDTH = new("CBUF_BASE_CBUF_BANK_WIDTH");
    this.CBUF_BASE_CBUF_BANK_WIDTH.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CBUF_BASE_CBUF_BANK_WIDTH.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.CBUF_BASE_CBUF_BANK_WIDTH.add_def_property("spec_access", "r");
    this.CBUF_BASE_CBUF_BANK_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.CBUF_BASE_CBUF_BANK_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.CBUF_BASE_CBUF_BANK_WIDTH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CBUF_BASE_CBUF_BANK_WIDTH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH

// CFGROM_CBUF_BASE_CBUF_BANK_DEPTH
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CBUF_BASE_CBUF_BANK_DEPTH;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CBUF_BASE_CBUF_BANK_DEPTH = new("CBUF_BASE_CBUF_BANK_DEPTH");
    this.CBUF_BASE_CBUF_BANK_DEPTH.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CBUF_BASE_CBUF_BANK_DEPTH.configure(this, 32, 0, "RO", 1, 32'h200, 1, 0, 1);
    this.CBUF_BASE_CBUF_BANK_DEPTH.add_def_property("spec_access", "r");
    this.CBUF_BASE_CBUF_BANK_DEPTH.add_def_property("spec_sw_default", "0x0");
    this.CBUF_BASE_CBUF_BANK_DEPTH.add_def_property("sw_default_mask", "0x0");
    this.CBUF_BASE_CBUF_BANK_DEPTH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CBUF_BASE_CBUF_BANK_DEPTH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH

// CFGROM_CBUF_BASE_CDMA_ID
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CBUF_BASE_CDMA_ID;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CBUF_BASE_CDMA_ID = new("CBUF_BASE_CDMA_ID");
    this.CBUF_BASE_CDMA_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CBUF_BASE_CDMA_ID.configure(this, 32, 0, "RO", 1, 32'h3, 1, 0, 1);
    this.CBUF_BASE_CDMA_ID.add_def_property("spec_access", "r");
    this.CBUF_BASE_CDMA_ID.add_def_property("spec_sw_default", "0x0");
    this.CBUF_BASE_CDMA_ID.add_def_property("sw_default_mask", "0x0");
    this.CBUF_BASE_CDMA_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CBUF_BASE_CDMA_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID

// CFGROM_CSC_DESC
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_DESC = new("CSC_DESC");
    this.CSC_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CSC_DESC.configure(this, 32, 0, "RO", 0, 32'h300005, 1, 0, 1);
    this.CSC_DESC.add_def_property("spec_access", "rw");
    this.CSC_DESC.add_def_property("spec_sw_default", "0x0");
    this.CSC_DESC.add_def_property("sw_default_mask", "0x0");
    this.CSC_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_DESC

// CFGROM_CSC_CAP_INCOMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_CAP_INCOMPAT = new("CSC_CAP_INCOMPAT");
    this.CSC_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CSC_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CSC_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CSC_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CSC_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CSC_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT

// CFGROM_CSC_CAP_COMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_CAP_COMPAT = new("CSC_CAP_COMPAT");
    this.CSC_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CSC_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h10, 1, 0, 1);
    this.CSC_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CSC_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CSC_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CSC_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT

// CFGROM_CSC_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_FEATURE_TYPES = new("CSC_BASE_FEATURE_TYPES");
    this.CSC_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CSC_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CSC_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.CSC_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES

// CFGROM_CSC_BASE_WEIGHT_TYPES
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_WEIGHT_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_WEIGHT_TYPES = new("CSC_BASE_WEIGHT_TYPES");
    this.CSC_BASE_WEIGHT_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CSC_BASE_WEIGHT_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CSC_BASE_WEIGHT_TYPES.add_def_property("spec_access", "rwt");
    this.CSC_BASE_WEIGHT_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_WEIGHT_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_WEIGHT_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_WEIGHT_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES

// CFGROM_CSC_BASE_ATOMIC_C
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_ATOMIC_C;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_ATOMIC_C = new("CSC_BASE_ATOMIC_C");
    this.CSC_BASE_ATOMIC_C.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CSC_BASE_ATOMIC_C.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CSC_BASE_ATOMIC_C.add_def_property("spec_access", "rwt");
    this.CSC_BASE_ATOMIC_C.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_ATOMIC_C.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_ATOMIC_C.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_ATOMIC_C"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C

// CFGROM_CSC_BASE_ATOMIC_K
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_ATOMIC_K;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_ATOMIC_K = new("CSC_BASE_ATOMIC_K");
    this.CSC_BASE_ATOMIC_K.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CSC_BASE_ATOMIC_K.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CSC_BASE_ATOMIC_K.add_def_property("spec_access", "rw");
    this.CSC_BASE_ATOMIC_K.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_ATOMIC_K.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_ATOMIC_K.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_ATOMIC_K"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K

// CFGROM_CSC_BASE_ATOMIC_M
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_ATOMIC_M;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_ATOMIC_M = new("CSC_BASE_ATOMIC_M");
    this.CSC_BASE_ATOMIC_M.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CSC_BASE_ATOMIC_M.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.CSC_BASE_ATOMIC_M.add_def_property("spec_access", "r");
    this.CSC_BASE_ATOMIC_M.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_ATOMIC_M.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_ATOMIC_M.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_ATOMIC_M"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M

// CFGROM_CSC_BASE_CBUF_BANK_NUM
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_CBUF_BANK_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_CBUF_BANK_NUM = new("CSC_BASE_CBUF_BANK_NUM");
    this.CSC_BASE_CBUF_BANK_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CSC_BASE_CBUF_BANK_NUM.configure(this, 32, 0, "RO", 1, 32'h20, 1, 0, 1);
    this.CSC_BASE_CBUF_BANK_NUM.add_def_property("spec_access", "r");
    this.CSC_BASE_CBUF_BANK_NUM.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_CBUF_BANK_NUM.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_CBUF_BANK_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_CBUF_BANK_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM

// CFGROM_CSC_BASE_CBUF_BANK_WIDTH
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_CBUF_BANK_WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_CBUF_BANK_WIDTH = new("CSC_BASE_CBUF_BANK_WIDTH");
    this.CSC_BASE_CBUF_BANK_WIDTH.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CSC_BASE_CBUF_BANK_WIDTH.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.CSC_BASE_CBUF_BANK_WIDTH.add_def_property("spec_access", "r");
    this.CSC_BASE_CBUF_BANK_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_CBUF_BANK_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_CBUF_BANK_WIDTH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_CBUF_BANK_WIDTH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH

// CFGROM_CSC_BASE_CBUF_BANK_DEPTH
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_CBUF_BANK_DEPTH;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_CBUF_BANK_DEPTH = new("CSC_BASE_CBUF_BANK_DEPTH");
    this.CSC_BASE_CBUF_BANK_DEPTH.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CSC_BASE_CBUF_BANK_DEPTH.configure(this, 32, 0, "RO", 1, 32'h200, 1, 0, 1);
    this.CSC_BASE_CBUF_BANK_DEPTH.add_def_property("spec_access", "r");
    this.CSC_BASE_CBUF_BANK_DEPTH.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_CBUF_BANK_DEPTH.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_CBUF_BANK_DEPTH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_CBUF_BANK_DEPTH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH

// CFGROM_CSC_BASE_CDMA_ID
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_BASE_CDMA_ID;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_BASE_CDMA_ID = new("CSC_BASE_CDMA_ID");
    this.CSC_BASE_CDMA_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CSC_BASE_CDMA_ID.configure(this, 32, 0, "RO", 1, 32'h3, 1, 0, 1);
    this.CSC_BASE_CDMA_ID.add_def_property("spec_access", "r");
    this.CSC_BASE_CDMA_ID.add_def_property("spec_sw_default", "0x0");
    this.CSC_BASE_CDMA_ID.add_def_property("sw_default_mask", "0x0");
    this.CSC_BASE_CDMA_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_BASE_CDMA_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID

// CFGROM_CSC_MULTI_BATCH_MAX
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CSC_MULTI_BATCH_MAX;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CSC_MULTI_BATCH_MAX = new("CSC_MULTI_BATCH_MAX");
    this.CSC_MULTI_BATCH_MAX.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CSC_MULTI_BATCH_MAX.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.CSC_MULTI_BATCH_MAX.add_def_property("spec_access", "r");
    this.CSC_MULTI_BATCH_MAX.add_def_property("spec_sw_default", "0x0");
    this.CSC_MULTI_BATCH_MAX.add_def_property("sw_default_mask", "0x0");
    this.CSC_MULTI_BATCH_MAX.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CSC_MULTI_BATCH_MAX"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX

// CFGROM_CMAC_A_DESC
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_DESC = new("CMAC_A_DESC");
    this.CMAC_A_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_A_DESC.configure(this, 32, 0, "RO", 0, 32'h1c0006, 1, 0, 1);
    this.CMAC_A_DESC.add_def_property("spec_access", "rw");
    this.CMAC_A_DESC.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_DESC.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_DESC

// CFGROM_CMAC_A_CAP_INCOMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_CAP_INCOMPAT = new("CMAC_A_CAP_INCOMPAT");
    this.CMAC_A_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_A_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CMAC_A_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CMAC_A_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT

// CFGROM_CMAC_A_CAP_COMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_CAP_COMPAT = new("CMAC_A_CAP_COMPAT");
    this.CMAC_A_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_A_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h10, 1, 0, 1);
    this.CMAC_A_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CMAC_A_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT

// CFGROM_CMAC_A_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_BASE_FEATURE_TYPES = new("CMAC_A_BASE_FEATURE_TYPES");
    this.CMAC_A_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_A_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CMAC_A_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.CMAC_A_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES

// CFGROM_CMAC_A_BASE_WEIGHT_TYPES
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_BASE_WEIGHT_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_BASE_WEIGHT_TYPES = new("CMAC_A_BASE_WEIGHT_TYPES");
    this.CMAC_A_BASE_WEIGHT_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_A_BASE_WEIGHT_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CMAC_A_BASE_WEIGHT_TYPES.add_def_property("spec_access", "rwt");
    this.CMAC_A_BASE_WEIGHT_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_BASE_WEIGHT_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_BASE_WEIGHT_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_BASE_WEIGHT_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES

// CFGROM_CMAC_A_BASE_ATOMIC_C
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_BASE_ATOMIC_C;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_BASE_ATOMIC_C = new("CMAC_A_BASE_ATOMIC_C");
    this.CMAC_A_BASE_ATOMIC_C.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_A_BASE_ATOMIC_C.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CMAC_A_BASE_ATOMIC_C.add_def_property("spec_access", "rwt");
    this.CMAC_A_BASE_ATOMIC_C.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_BASE_ATOMIC_C.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_BASE_ATOMIC_C.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_BASE_ATOMIC_C"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C

// CFGROM_CMAC_A_BASE_ATOMIC_K
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_BASE_ATOMIC_K;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_BASE_ATOMIC_K = new("CMAC_A_BASE_ATOMIC_K");
    this.CMAC_A_BASE_ATOMIC_K.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_A_BASE_ATOMIC_K.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CMAC_A_BASE_ATOMIC_K.add_def_property("spec_access", "rw");
    this.CMAC_A_BASE_ATOMIC_K.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_BASE_ATOMIC_K.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_BASE_ATOMIC_K.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_BASE_ATOMIC_K"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K

// CFGROM_CMAC_A_BASE_CDMA_ID
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_A_BASE_CDMA_ID;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_A_BASE_CDMA_ID = new("CMAC_A_BASE_CDMA_ID");
    this.CMAC_A_BASE_CDMA_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CMAC_A_BASE_CDMA_ID.configure(this, 32, 0, "RO", 1, 32'h3, 1, 0, 1);
    this.CMAC_A_BASE_CDMA_ID.add_def_property("spec_access", "r");
    this.CMAC_A_BASE_CDMA_ID.add_def_property("spec_sw_default", "0x0");
    this.CMAC_A_BASE_CDMA_ID.add_def_property("sw_default_mask", "0x0");
    this.CMAC_A_BASE_CDMA_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_A_BASE_CDMA_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID

// CFGROM_CMAC_B_DESC
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_DESC = new("CMAC_B_DESC");
    this.CMAC_B_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_B_DESC.configure(this, 32, 0, "RO", 0, 32'h1c0006, 1, 0, 1);
    this.CMAC_B_DESC.add_def_property("spec_access", "rw");
    this.CMAC_B_DESC.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_DESC.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_DESC

// CFGROM_CMAC_B_CAP_INCOMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_CAP_INCOMPAT = new("CMAC_B_CAP_INCOMPAT");
    this.CMAC_B_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_B_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CMAC_B_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CMAC_B_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT

// CFGROM_CMAC_B_CAP_COMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_CAP_COMPAT = new("CMAC_B_CAP_COMPAT");
    this.CMAC_B_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_B_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h10, 1, 0, 1);
    this.CMAC_B_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CMAC_B_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT

// CFGROM_CMAC_B_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_BASE_FEATURE_TYPES = new("CMAC_B_BASE_FEATURE_TYPES");
    this.CMAC_B_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_B_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CMAC_B_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.CMAC_B_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES

// CFGROM_CMAC_B_BASE_WEIGHT_TYPES
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_BASE_WEIGHT_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_BASE_WEIGHT_TYPES = new("CMAC_B_BASE_WEIGHT_TYPES");
    this.CMAC_B_BASE_WEIGHT_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_B_BASE_WEIGHT_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CMAC_B_BASE_WEIGHT_TYPES.add_def_property("spec_access", "rwt");
    this.CMAC_B_BASE_WEIGHT_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_BASE_WEIGHT_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_BASE_WEIGHT_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_BASE_WEIGHT_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES

// CFGROM_CMAC_B_BASE_ATOMIC_C
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_BASE_ATOMIC_C;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_BASE_ATOMIC_C = new("CMAC_B_BASE_ATOMIC_C");
    this.CMAC_B_BASE_ATOMIC_C.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_B_BASE_ATOMIC_C.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CMAC_B_BASE_ATOMIC_C.add_def_property("spec_access", "rwt");
    this.CMAC_B_BASE_ATOMIC_C.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_BASE_ATOMIC_C.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_BASE_ATOMIC_C.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_BASE_ATOMIC_C"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C

// CFGROM_CMAC_B_BASE_ATOMIC_K
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_BASE_ATOMIC_K;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_BASE_ATOMIC_K = new("CMAC_B_BASE_ATOMIC_K");
    this.CMAC_B_BASE_ATOMIC_K.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CMAC_B_BASE_ATOMIC_K.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CMAC_B_BASE_ATOMIC_K.add_def_property("spec_access", "rw");
    this.CMAC_B_BASE_ATOMIC_K.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_BASE_ATOMIC_K.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_BASE_ATOMIC_K.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_BASE_ATOMIC_K"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K

// CFGROM_CMAC_B_BASE_CDMA_ID
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CMAC_B_BASE_CDMA_ID;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CMAC_B_BASE_CDMA_ID = new("CMAC_B_BASE_CDMA_ID");
    this.CMAC_B_BASE_CDMA_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CMAC_B_BASE_CDMA_ID.configure(this, 32, 0, "RO", 1, 32'h3, 1, 0, 1);
    this.CMAC_B_BASE_CDMA_ID.add_def_property("spec_access", "r");
    this.CMAC_B_BASE_CDMA_ID.add_def_property("spec_sw_default", "0x0");
    this.CMAC_B_BASE_CDMA_ID.add_def_property("sw_default_mask", "0x0");
    this.CMAC_B_BASE_CDMA_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CMAC_B_BASE_CDMA_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID

// CFGROM_CACC_DESC
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_DESC = new("CACC_DESC");
    this.CACC_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CACC_DESC.configure(this, 32, 0, "RO", 0, 32'h200007, 1, 0, 1);
    this.CACC_DESC.add_def_property("spec_access", "rw");
    this.CACC_DESC.add_def_property("spec_sw_default", "0x0");
    this.CACC_DESC.add_def_property("sw_default_mask", "0x0");
    this.CACC_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_DESC

// CFGROM_CACC_CAP_INCOMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_CAP_INCOMPAT = new("CACC_CAP_INCOMPAT");
    this.CACC_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CACC_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CACC_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CACC_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CACC_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CACC_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT

// CFGROM_CACC_CAP_COMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_CAP_COMPAT = new("CACC_CAP_COMPAT");
    this.CACC_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CACC_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CACC_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CACC_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CACC_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CACC_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT

// CFGROM_CACC_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_BASE_FEATURE_TYPES = new("CACC_BASE_FEATURE_TYPES");
    this.CACC_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CACC_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CACC_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.CACC_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CACC_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CACC_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES

// CFGROM_CACC_BASE_WEIGHT_TYPES
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_BASE_WEIGHT_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_BASE_WEIGHT_TYPES = new("CACC_BASE_WEIGHT_TYPES");
    this.CACC_BASE_WEIGHT_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CACC_BASE_WEIGHT_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CACC_BASE_WEIGHT_TYPES.add_def_property("spec_access", "rwt");
    this.CACC_BASE_WEIGHT_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CACC_BASE_WEIGHT_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CACC_BASE_WEIGHT_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_BASE_WEIGHT_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES

// CFGROM_CACC_BASE_ATOMIC_C
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_BASE_ATOMIC_C;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_BASE_ATOMIC_C = new("CACC_BASE_ATOMIC_C");
    this.CACC_BASE_ATOMIC_C.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CACC_BASE_ATOMIC_C.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CACC_BASE_ATOMIC_C.add_def_property("spec_access", "rwt");
    this.CACC_BASE_ATOMIC_C.add_def_property("spec_sw_default", "0x0");
    this.CACC_BASE_ATOMIC_C.add_def_property("sw_default_mask", "0x0");
    this.CACC_BASE_ATOMIC_C.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_BASE_ATOMIC_C"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C

// CFGROM_CACC_BASE_ATOMIC_K
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_BASE_ATOMIC_K;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_BASE_ATOMIC_K = new("CACC_BASE_ATOMIC_K");
    this.CACC_BASE_ATOMIC_K.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CACC_BASE_ATOMIC_K.configure(this, 32, 0, "RO", 0, 32'h8, 1, 0, 1);
    this.CACC_BASE_ATOMIC_K.add_def_property("spec_access", "rw");
    this.CACC_BASE_ATOMIC_K.add_def_property("spec_sw_default", "0x0");
    this.CACC_BASE_ATOMIC_K.add_def_property("sw_default_mask", "0x0");
    this.CACC_BASE_ATOMIC_K.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_BASE_ATOMIC_K"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K

// CFGROM_CACC_BASE_CDMA_ID
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_BASE_CDMA_ID;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_BASE_CDMA_ID = new("CACC_BASE_CDMA_ID");
    this.CACC_BASE_CDMA_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CACC_BASE_CDMA_ID.configure(this, 32, 0, "RO", 1, 32'h3, 1, 0, 1);
    this.CACC_BASE_CDMA_ID.add_def_property("spec_access", "r");
    this.CACC_BASE_CDMA_ID.add_def_property("spec_sw_default", "0x0");
    this.CACC_BASE_CDMA_ID.add_def_property("sw_default_mask", "0x0");
    this.CACC_BASE_CDMA_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_BASE_CDMA_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID

// CFGROM_CACC_MULTI_BATCH_MAX
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CACC_MULTI_BATCH_MAX;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CACC_MULTI_BATCH_MAX = new("CACC_MULTI_BATCH_MAX");
    this.CACC_MULTI_BATCH_MAX.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CACC_MULTI_BATCH_MAX.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.CACC_MULTI_BATCH_MAX.add_def_property("spec_access", "r");
    this.CACC_MULTI_BATCH_MAX.add_def_property("spec_sw_default", "0x0");
    this.CACC_MULTI_BATCH_MAX.add_def_property("sw_default_mask", "0x0");
    this.CACC_MULTI_BATCH_MAX.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CACC_MULTI_BATCH_MAX"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX

// CFGROM_SDP_RDMA_DESC
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_RDMA_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_RDMA_DESC = new("SDP_RDMA_DESC");
    this.SDP_RDMA_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_RDMA_DESC.configure(this, 32, 0, "RO", 0, 32'he0008, 1, 0, 1);
    this.SDP_RDMA_DESC.add_def_property("spec_access", "rw");
    this.SDP_RDMA_DESC.add_def_property("spec_sw_default", "0x0");
    this.SDP_RDMA_DESC.add_def_property("sw_default_mask", "0x0");
    this.SDP_RDMA_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_RDMA_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC

// CFGROM_SDP_RDMA_CAP_INCOMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_RDMA_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_RDMA_CAP_INCOMPAT = new("SDP_RDMA_CAP_INCOMPAT");
    this.SDP_RDMA_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_RDMA_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.SDP_RDMA_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.SDP_RDMA_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.SDP_RDMA_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.SDP_RDMA_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_RDMA_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT

// CFGROM_SDP_RDMA_CAP_COMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_RDMA_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_RDMA_CAP_COMPAT = new("SDP_RDMA_CAP_COMPAT");
    this.SDP_RDMA_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_RDMA_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.SDP_RDMA_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.SDP_RDMA_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.SDP_RDMA_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.SDP_RDMA_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_RDMA_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT

// CFGROM_SDP_RDMA_BASE_ATOMIC_M
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_RDMA_BASE_ATOMIC_M;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_RDMA_BASE_ATOMIC_M = new("SDP_RDMA_BASE_ATOMIC_M");
    this.SDP_RDMA_BASE_ATOMIC_M.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.SDP_RDMA_BASE_ATOMIC_M.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.SDP_RDMA_BASE_ATOMIC_M.add_def_property("spec_access", "r");
    this.SDP_RDMA_BASE_ATOMIC_M.add_def_property("spec_sw_default", "0x0");
    this.SDP_RDMA_BASE_ATOMIC_M.add_def_property("sw_default_mask", "0x0");
    this.SDP_RDMA_BASE_ATOMIC_M.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_RDMA_BASE_ATOMIC_M"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M

// CFGROM_SDP_RDMA_BASE_SDP_ID
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_RDMA_BASE_SDP_ID;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_RDMA_BASE_SDP_ID = new("SDP_RDMA_BASE_SDP_ID");
    this.SDP_RDMA_BASE_SDP_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.SDP_RDMA_BASE_SDP_ID.configure(this, 32, 0, "RO", 1, 32'h9, 1, 0, 1);
    this.SDP_RDMA_BASE_SDP_ID.add_def_property("spec_access", "r");
    this.SDP_RDMA_BASE_SDP_ID.add_def_property("spec_sw_default", "0x0");
    this.SDP_RDMA_BASE_SDP_ID.add_def_property("sw_default_mask", "0x0");
    this.SDP_RDMA_BASE_SDP_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_RDMA_BASE_SDP_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID

// CFGROM_SDP_DESC
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_DESC = new("SDP_DESC");
    this.SDP_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_DESC.configure(this, 32, 0, "RO", 0, 32'h200009, 1, 0, 1);
    this.SDP_DESC.add_def_property("spec_access", "rw");
    this.SDP_DESC.add_def_property("spec_sw_default", "0x0");
    this.SDP_DESC.add_def_property("sw_default_mask", "0x0");
    this.SDP_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_DESC

// CFGROM_SDP_CAP_INCOMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_CAP_INCOMPAT = new("SDP_CAP_INCOMPAT");
    this.SDP_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.SDP_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.SDP_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.SDP_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.SDP_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT

// CFGROM_SDP_CAP_COMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_CAP_COMPAT = new("SDP_CAP_COMPAT");
    this.SDP_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h18, 1, 0, 1);
    this.SDP_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.SDP_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.SDP_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.SDP_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT

// CFGROM_SDP_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_BASE_FEATURE_TYPES = new("SDP_BASE_FEATURE_TYPES");
    this.SDP_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.SDP_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.SDP_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.SDP_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.SDP_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES

// CFGROM_SDP_BASE_WEIGHT_TYPES
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_BASE_WEIGHT_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_BASE_WEIGHT_TYPES = new("SDP_BASE_WEIGHT_TYPES");
    this.SDP_BASE_WEIGHT_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.SDP_BASE_WEIGHT_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.SDP_BASE_WEIGHT_TYPES.add_def_property("spec_access", "rwt");
    this.SDP_BASE_WEIGHT_TYPES.add_def_property("spec_sw_default", "0x0");
    this.SDP_BASE_WEIGHT_TYPES.add_def_property("sw_default_mask", "0x0");
    this.SDP_BASE_WEIGHT_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_BASE_WEIGHT_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES

// CFGROM_SDP_BASE_CDMA_ID
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_BASE_CDMA_ID;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_BASE_CDMA_ID = new("SDP_BASE_CDMA_ID");
    this.SDP_BASE_CDMA_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.SDP_BASE_CDMA_ID.configure(this, 32, 0, "RO", 1, 32'h3, 1, 0, 1);
    this.SDP_BASE_CDMA_ID.add_def_property("spec_access", "r");
    this.SDP_BASE_CDMA_ID.add_def_property("spec_sw_default", "0x0");
    this.SDP_BASE_CDMA_ID.add_def_property("sw_default_mask", "0x0");
    this.SDP_BASE_CDMA_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_BASE_CDMA_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID

// CFGROM_SDP_MULTI_BATCH_MAX
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_MULTI_BATCH_MAX;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_MULTI_BATCH_MAX = new("SDP_MULTI_BATCH_MAX");
    this.SDP_MULTI_BATCH_MAX.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.SDP_MULTI_BATCH_MAX.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.SDP_MULTI_BATCH_MAX.add_def_property("spec_access", "r");
    this.SDP_MULTI_BATCH_MAX.add_def_property("spec_sw_default", "0x0");
    this.SDP_MULTI_BATCH_MAX.add_def_property("sw_default_mask", "0x0");
    this.SDP_MULTI_BATCH_MAX.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_MULTI_BATCH_MAX"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX

// CFGROM_SDP_BS_THROUGHPUT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_BS_THROUGHPUT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_BS_THROUGHPUT = new("SDP_BS_THROUGHPUT");
    this.SDP_BS_THROUGHPUT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.SDP_BS_THROUGHPUT.configure(this, 32, 0, "RO", 1, 32'h1, 1, 0, 1);
    this.SDP_BS_THROUGHPUT.add_def_property("spec_access", "r");
    this.SDP_BS_THROUGHPUT.add_def_property("spec_sw_default", "0x0");
    this.SDP_BS_THROUGHPUT.add_def_property("sw_default_mask", "0x0");
    this.SDP_BS_THROUGHPUT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_BS_THROUGHPUT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT

// CFGROM_SDP_BN_THROUGHPUT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_BN_THROUGHPUT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_BN_THROUGHPUT = new("SDP_BN_THROUGHPUT");
    this.SDP_BN_THROUGHPUT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.SDP_BN_THROUGHPUT.configure(this, 32, 0, "RO", 1, 32'h1, 1, 0, 1);
    this.SDP_BN_THROUGHPUT.add_def_property("spec_access", "r");
    this.SDP_BN_THROUGHPUT.add_def_property("spec_sw_default", "0x0");
    this.SDP_BN_THROUGHPUT.add_def_property("sw_default_mask", "0x0");
    this.SDP_BN_THROUGHPUT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_BN_THROUGHPUT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT

// CFGROM_SDP_EW_THROUGHPUT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_EW_THROUGHPUT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_EW_THROUGHPUT = new("SDP_EW_THROUGHPUT");
    this.SDP_EW_THROUGHPUT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.SDP_EW_THROUGHPUT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.SDP_EW_THROUGHPUT.add_def_property("spec_access", "r");
    this.SDP_EW_THROUGHPUT.add_def_property("spec_sw_default", "0x0");
    this.SDP_EW_THROUGHPUT.add_def_property("sw_default_mask", "0x0");
    this.SDP_EW_THROUGHPUT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_EW_THROUGHPUT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT

// CFGROM_PDP_RDMA_DESC
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_RDMA_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_RDMA_DESC = new("PDP_RDMA_DESC");
    this.PDP_RDMA_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.PDP_RDMA_DESC.configure(this, 32, 0, "RO", 0, 32'he000a, 1, 0, 1);
    this.PDP_RDMA_DESC.add_def_property("spec_access", "rw");
    this.PDP_RDMA_DESC.add_def_property("spec_sw_default", "0x0");
    this.PDP_RDMA_DESC.add_def_property("sw_default_mask", "0x0");
    this.PDP_RDMA_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_RDMA_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC

// CFGROM_PDP_RDMA_CAP_INCOMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_RDMA_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_RDMA_CAP_INCOMPAT = new("PDP_RDMA_CAP_INCOMPAT");
    this.PDP_RDMA_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.PDP_RDMA_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.PDP_RDMA_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.PDP_RDMA_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.PDP_RDMA_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.PDP_RDMA_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_RDMA_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT

// CFGROM_PDP_RDMA_CAP_COMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_RDMA_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_RDMA_CAP_COMPAT = new("PDP_RDMA_CAP_COMPAT");
    this.PDP_RDMA_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.PDP_RDMA_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.PDP_RDMA_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.PDP_RDMA_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.PDP_RDMA_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.PDP_RDMA_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_RDMA_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT

// CFGROM_PDP_RDMA_BASE_ATOMIC_M
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_RDMA_BASE_ATOMIC_M;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_RDMA_BASE_ATOMIC_M = new("PDP_RDMA_BASE_ATOMIC_M");
    this.PDP_RDMA_BASE_ATOMIC_M.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PDP_RDMA_BASE_ATOMIC_M.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.PDP_RDMA_BASE_ATOMIC_M.add_def_property("spec_access", "r");
    this.PDP_RDMA_BASE_ATOMIC_M.add_def_property("spec_sw_default", "0x0");
    this.PDP_RDMA_BASE_ATOMIC_M.add_def_property("sw_default_mask", "0x0");
    this.PDP_RDMA_BASE_ATOMIC_M.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_RDMA_BASE_ATOMIC_M"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M

// CFGROM_PDP_RDMA_BASE_PDP_ID
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_RDMA_BASE_PDP_ID;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_RDMA_BASE_PDP_ID = new("PDP_RDMA_BASE_PDP_ID");
    this.PDP_RDMA_BASE_PDP_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PDP_RDMA_BASE_PDP_ID.configure(this, 32, 0, "RO", 1, 32'hb, 1, 0, 1);
    this.PDP_RDMA_BASE_PDP_ID.add_def_property("spec_access", "r");
    this.PDP_RDMA_BASE_PDP_ID.add_def_property("spec_sw_default", "0x0");
    this.PDP_RDMA_BASE_PDP_ID.add_def_property("sw_default_mask", "0x0");
    this.PDP_RDMA_BASE_PDP_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_RDMA_BASE_PDP_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID

// CFGROM_PDP_DESC
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_DESC = new("PDP_DESC");
    this.PDP_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.PDP_DESC.configure(this, 32, 0, "RO", 0, 32'h10000b, 1, 0, 1);
    this.PDP_DESC.add_def_property("spec_access", "rw");
    this.PDP_DESC.add_def_property("spec_sw_default", "0x0");
    this.PDP_DESC.add_def_property("sw_default_mask", "0x0");
    this.PDP_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_DESC

// CFGROM_PDP_CAP_INCOMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_CAP_INCOMPAT = new("PDP_CAP_INCOMPAT");
    this.PDP_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.PDP_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.PDP_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.PDP_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.PDP_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.PDP_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT

// CFGROM_PDP_CAP_COMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_CAP_COMPAT = new("PDP_CAP_COMPAT");
    this.PDP_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.PDP_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.PDP_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.PDP_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.PDP_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.PDP_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT

// CFGROM_PDP_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_BASE_FEATURE_TYPES = new("PDP_BASE_FEATURE_TYPES");
    this.PDP_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.PDP_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.PDP_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.PDP_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.PDP_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.PDP_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES

// CFGROM_PDP_BASE_THROUGHPUT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PDP_BASE_THROUGHPUT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PDP_BASE_THROUGHPUT = new("PDP_BASE_THROUGHPUT");
    this.PDP_BASE_THROUGHPUT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PDP_BASE_THROUGHPUT.configure(this, 32, 0, "RO", 1, 32'h1, 1, 0, 1);
    this.PDP_BASE_THROUGHPUT.add_def_property("spec_access", "r");
    this.PDP_BASE_THROUGHPUT.add_def_property("spec_sw_default", "0x0");
    this.PDP_BASE_THROUGHPUT.add_def_property("sw_default_mask", "0x0");
    this.PDP_BASE_THROUGHPUT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PDP_BASE_THROUGHPUT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT

// CFGROM_CDP_RDMA_DESC
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_RDMA_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_RDMA_DESC = new("CDP_RDMA_DESC");
    this.CDP_RDMA_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDP_RDMA_DESC.configure(this, 32, 0, "RO", 0, 32'he000c, 1, 0, 1);
    this.CDP_RDMA_DESC.add_def_property("spec_access", "rw");
    this.CDP_RDMA_DESC.add_def_property("spec_sw_default", "0x0");
    this.CDP_RDMA_DESC.add_def_property("sw_default_mask", "0x0");
    this.CDP_RDMA_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_RDMA_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC

// CFGROM_CDP_RDMA_CAP_INCOMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_RDMA_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_RDMA_CAP_INCOMPAT = new("CDP_RDMA_CAP_INCOMPAT");
    this.CDP_RDMA_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDP_RDMA_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CDP_RDMA_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CDP_RDMA_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CDP_RDMA_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CDP_RDMA_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_RDMA_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT

// CFGROM_CDP_RDMA_CAP_COMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_RDMA_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_RDMA_CAP_COMPAT = new("CDP_RDMA_CAP_COMPAT");
    this.CDP_RDMA_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDP_RDMA_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CDP_RDMA_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CDP_RDMA_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CDP_RDMA_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CDP_RDMA_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_RDMA_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT

// CFGROM_CDP_RDMA_BASE_ATOMIC_M
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_RDMA_BASE_ATOMIC_M;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_RDMA_BASE_ATOMIC_M = new("CDP_RDMA_BASE_ATOMIC_M");
    this.CDP_RDMA_BASE_ATOMIC_M.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDP_RDMA_BASE_ATOMIC_M.configure(this, 32, 0, "RO", 1, 32'h8, 1, 0, 1);
    this.CDP_RDMA_BASE_ATOMIC_M.add_def_property("spec_access", "r");
    this.CDP_RDMA_BASE_ATOMIC_M.add_def_property("spec_sw_default", "0x0");
    this.CDP_RDMA_BASE_ATOMIC_M.add_def_property("sw_default_mask", "0x0");
    this.CDP_RDMA_BASE_ATOMIC_M.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_RDMA_BASE_ATOMIC_M"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M

// CFGROM_CDP_RDMA_BASE_CDP_ID
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_RDMA_BASE_CDP_ID;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_RDMA_BASE_CDP_ID = new("CDP_RDMA_BASE_CDP_ID");
    this.CDP_RDMA_BASE_CDP_ID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDP_RDMA_BASE_CDP_ID.configure(this, 32, 0, "RO", 1, 32'hd, 1, 0, 1);
    this.CDP_RDMA_BASE_CDP_ID.add_def_property("spec_access", "r");
    this.CDP_RDMA_BASE_CDP_ID.add_def_property("spec_sw_default", "0x0");
    this.CDP_RDMA_BASE_CDP_ID.add_def_property("sw_default_mask", "0x0");
    this.CDP_RDMA_BASE_CDP_ID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_RDMA_BASE_CDP_ID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID

// CFGROM_CDP_DESC
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_DESC extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_DESC;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_DESC");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_DESC = new("CDP_DESC");
    this.CDP_DESC.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDP_DESC.configure(this, 32, 0, "RO", 0, 32'h10000d, 1, 0, 1);
    this.CDP_DESC.add_def_property("spec_access", "rw");
    this.CDP_DESC.add_def_property("spec_sw_default", "0x0");
    this.CDP_DESC.add_def_property("sw_default_mask", "0x0");
    this.CDP_DESC.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_DESC"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_DESC

// CFGROM_CDP_CAP_INCOMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_CAP_INCOMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_CAP_INCOMPAT = new("CDP_CAP_INCOMPAT");
    this.CDP_CAP_INCOMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDP_CAP_INCOMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CDP_CAP_INCOMPAT.add_def_property("spec_access", "rw");
    this.CDP_CAP_INCOMPAT.add_def_property("spec_sw_default", "0x0");
    this.CDP_CAP_INCOMPAT.add_def_property("sw_default_mask", "0x0");
    this.CDP_CAP_INCOMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_CAP_INCOMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT

// CFGROM_CDP_CAP_COMPAT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_CAP_COMPAT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_CAP_COMPAT = new("CDP_CAP_COMPAT");
    this.CDP_CAP_COMPAT.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDP_CAP_COMPAT.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.CDP_CAP_COMPAT.add_def_property("spec_access", "rw");
    this.CDP_CAP_COMPAT.add_def_property("spec_sw_default", "0x0");
    this.CDP_CAP_COMPAT.add_def_property("sw_default_mask", "0x0");
    this.CDP_CAP_COMPAT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_CAP_COMPAT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT

// CFGROM_CDP_BASE_FEATURE_TYPES
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_BASE_FEATURE_TYPES;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_BASE_FEATURE_TYPES = new("CDP_BASE_FEATURE_TYPES");
    this.CDP_BASE_FEATURE_TYPES.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.CDP_BASE_FEATURE_TYPES.configure(this, 12, 0, "RO", 0, 12'h10, 1, 0, 1);
    this.CDP_BASE_FEATURE_TYPES.add_def_property("spec_access", "rw");
    this.CDP_BASE_FEATURE_TYPES.add_def_property("spec_sw_default", "0x0");
    this.CDP_BASE_FEATURE_TYPES.add_def_property("sw_default_mask", "0x0");
    this.CDP_BASE_FEATURE_TYPES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_BASE_FEATURE_TYPES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES

// CFGROM_CDP_BASE_THROUGHPUT
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CDP_BASE_THROUGHPUT;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CDP_BASE_THROUGHPUT = new("CDP_BASE_THROUGHPUT");
    this.CDP_BASE_THROUGHPUT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CDP_BASE_THROUGHPUT.configure(this, 32, 0, "RO", 1, 32'h1, 1, 0, 1);
    this.CDP_BASE_THROUGHPUT.add_def_property("spec_access", "r");
    this.CDP_BASE_THROUGHPUT.add_def_property("spec_sw_default", "0x0");
    this.CDP_BASE_THROUGHPUT.add_def_property("sw_default_mask", "0x0");
    this.CDP_BASE_THROUGHPUT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CDP_BASE_THROUGHPUT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT

// CFGROM_END_OF_LIST
class reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_END_OF_LIST extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl END_OF_LIST;
  
  function new(string name = "reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_END_OF_LIST");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.END_OF_LIST = new("END_OF_LIST");
    this.END_OF_LIST.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.END_OF_LIST.configure(this, 32, 0, "RO", 0, 32'h0, 1, 0, 1);
    this.END_OF_LIST.add_def_property("spec_access", "rw");
    this.END_OF_LIST.add_def_property("spec_sw_default", "0x0");
    this.END_OF_LIST.add_def_property("sw_default_mask", "0x0");
    this.END_OF_LIST.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "END_OF_LIST"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_END_OF_LIST

// Block NVDLA_CFGROM
class block_addrmap_NVDLA_CFGROM_NVDLA_CFGROM extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_HW_VERSION CFGROM_HW_VERSION;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_GLB_DESC CFGROM_GLB_DESC;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_DESC CFGROM_CIF_DESC;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT CFGROM_CIF_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT CFGROM_CIF_CAP_COMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH CFGROM_CIF_BASE_WIDTH;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY CFGROM_CIF_BASE_LATENCY;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX CFGROM_CIF_BASE_BURST_LENGTH_MAX;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH CFGROM_CIF_BASE_MEM_ADDR_WIDTH;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_DESC CFGROM_CDMA_DESC;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT CFGROM_CDMA_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT CFGROM_CDMA_CAP_COMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES CFGROM_CDMA_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES CFGROM_CDMA_BASE_WEIGHT_TYPES;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C CFGROM_CDMA_BASE_ATOMIC_C;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K CFGROM_CDMA_BASE_ATOMIC_K;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M CFGROM_CDMA_BASE_ATOMIC_M;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM CFGROM_CDMA_BASE_CBUF_BANK_NUM;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH CFGROM_CDMA_BASE_CBUF_BANK_WIDTH;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH CFGROM_CDMA_BASE_CBUF_BANK_DEPTH;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX CFGROM_CDMA_MULTI_BATCH_MAX;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_DESC CFGROM_CBUF_DESC;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT CFGROM_CBUF_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT CFGROM_CBUF_CAP_COMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM CFGROM_CBUF_BASE_CBUF_BANK_NUM;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH CFGROM_CBUF_BASE_CBUF_BANK_WIDTH;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH CFGROM_CBUF_BASE_CBUF_BANK_DEPTH;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID CFGROM_CBUF_BASE_CDMA_ID;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_DESC CFGROM_CSC_DESC;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT CFGROM_CSC_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT CFGROM_CSC_CAP_COMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES CFGROM_CSC_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES CFGROM_CSC_BASE_WEIGHT_TYPES;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C CFGROM_CSC_BASE_ATOMIC_C;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K CFGROM_CSC_BASE_ATOMIC_K;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M CFGROM_CSC_BASE_ATOMIC_M;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM CFGROM_CSC_BASE_CBUF_BANK_NUM;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH CFGROM_CSC_BASE_CBUF_BANK_WIDTH;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH CFGROM_CSC_BASE_CBUF_BANK_DEPTH;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID CFGROM_CSC_BASE_CDMA_ID;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX CFGROM_CSC_MULTI_BATCH_MAX;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_DESC CFGROM_CMAC_A_DESC;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT CFGROM_CMAC_A_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT CFGROM_CMAC_A_CAP_COMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES CFGROM_CMAC_A_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES CFGROM_CMAC_A_BASE_WEIGHT_TYPES;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C CFGROM_CMAC_A_BASE_ATOMIC_C;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K CFGROM_CMAC_A_BASE_ATOMIC_K;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID CFGROM_CMAC_A_BASE_CDMA_ID;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_DESC CFGROM_CMAC_B_DESC;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT CFGROM_CMAC_B_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT CFGROM_CMAC_B_CAP_COMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES CFGROM_CMAC_B_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES CFGROM_CMAC_B_BASE_WEIGHT_TYPES;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C CFGROM_CMAC_B_BASE_ATOMIC_C;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K CFGROM_CMAC_B_BASE_ATOMIC_K;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID CFGROM_CMAC_B_BASE_CDMA_ID;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_DESC CFGROM_CACC_DESC;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT CFGROM_CACC_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT CFGROM_CACC_CAP_COMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES CFGROM_CACC_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES CFGROM_CACC_BASE_WEIGHT_TYPES;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C CFGROM_CACC_BASE_ATOMIC_C;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K CFGROM_CACC_BASE_ATOMIC_K;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID CFGROM_CACC_BASE_CDMA_ID;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX CFGROM_CACC_MULTI_BATCH_MAX;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC CFGROM_SDP_RDMA_DESC;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT CFGROM_SDP_RDMA_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT CFGROM_SDP_RDMA_CAP_COMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M CFGROM_SDP_RDMA_BASE_ATOMIC_M;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID CFGROM_SDP_RDMA_BASE_SDP_ID;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_DESC CFGROM_SDP_DESC;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT CFGROM_SDP_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT CFGROM_SDP_CAP_COMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES CFGROM_SDP_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES CFGROM_SDP_BASE_WEIGHT_TYPES;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID CFGROM_SDP_BASE_CDMA_ID;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX CFGROM_SDP_MULTI_BATCH_MAX;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT CFGROM_SDP_BS_THROUGHPUT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT CFGROM_SDP_BN_THROUGHPUT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT CFGROM_SDP_EW_THROUGHPUT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC CFGROM_PDP_RDMA_DESC;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT CFGROM_PDP_RDMA_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT CFGROM_PDP_RDMA_CAP_COMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M CFGROM_PDP_RDMA_BASE_ATOMIC_M;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID CFGROM_PDP_RDMA_BASE_PDP_ID;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_DESC CFGROM_PDP_DESC;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT CFGROM_PDP_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT CFGROM_PDP_CAP_COMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES CFGROM_PDP_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT CFGROM_PDP_BASE_THROUGHPUT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC CFGROM_CDP_RDMA_DESC;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT CFGROM_CDP_RDMA_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT CFGROM_CDP_RDMA_CAP_COMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M CFGROM_CDP_RDMA_BASE_ATOMIC_M;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID CFGROM_CDP_RDMA_BASE_CDP_ID;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_DESC CFGROM_CDP_DESC;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT CFGROM_CDP_CAP_INCOMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT CFGROM_CDP_CAP_COMPAT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES CFGROM_CDP_BASE_FEATURE_TYPES;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT CFGROM_CDP_BASE_THROUGHPUT;
  rand reg_addrmap_NVDLA_CFGROM_NVDLA_CFGROM_CFGROM_END_OF_LIST CFGROM_END_OF_LIST;
  
  function new(string name = "block_addrmap_NVDLA_CFGROM_NVDLA_CFGROM");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.CFGROM_HW_VERSION = new("CFGROM_HW_VERSION");
    this.CFGROM_HW_VERSION.configure(this, null, "");
    this.CFGROM_HW_VERSION.set_rdl_tag("CFGROM_HW_VERSION_");
    this.CFGROM_HW_VERSION.set_reg_test_info(0, 0, 0);
    this.CFGROM_HW_VERSION.build();
    this.default_map.add_reg(this.CFGROM_HW_VERSION, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.CFGROM_GLB_DESC = new("CFGROM_GLB_DESC");
    this.CFGROM_GLB_DESC.configure(this, null, "");
    this.CFGROM_GLB_DESC.set_rdl_tag("CFGROM_GLB_DESC_");
    this.CFGROM_GLB_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_GLB_DESC.build();
    this.default_map.add_reg(this.CFGROM_GLB_DESC, `UVM_REG_ADDR_WIDTH'h4, "RO", 0);
    this.CFGROM_CIF_DESC = new("CFGROM_CIF_DESC");
    this.CFGROM_CIF_DESC.configure(this, null, "");
    this.CFGROM_CIF_DESC.set_rdl_tag("CFGROM_CIF_DESC_");
    this.CFGROM_CIF_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CIF_DESC.build();
    this.default_map.add_reg(this.CFGROM_CIF_DESC, `UVM_REG_ADDR_WIDTH'h8, "RO", 0);
    this.CFGROM_CIF_CAP_INCOMPAT = new("CFGROM_CIF_CAP_INCOMPAT");
    this.CFGROM_CIF_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CIF_CAP_INCOMPAT.set_rdl_tag("CFGROM_CIF_CAP_INCOMPAT_");
    this.CFGROM_CIF_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CIF_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CIF_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'hc, "RO", 0);
    this.CFGROM_CIF_CAP_COMPAT = new("CFGROM_CIF_CAP_COMPAT");
    this.CFGROM_CIF_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CIF_CAP_COMPAT.set_rdl_tag("CFGROM_CIF_CAP_COMPAT_");
    this.CFGROM_CIF_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CIF_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CIF_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h10, "RO", 0);
    this.CFGROM_CIF_BASE_WIDTH = new("CFGROM_CIF_BASE_WIDTH");
    this.CFGROM_CIF_BASE_WIDTH.configure(this, null, "");
    this.CFGROM_CIF_BASE_WIDTH.set_rdl_tag("CFGROM_CIF_BASE_WIDTH_");
    this.CFGROM_CIF_BASE_WIDTH.set_reg_test_info(0, 0, 0);
    this.CFGROM_CIF_BASE_WIDTH.build();
    this.default_map.add_reg(this.CFGROM_CIF_BASE_WIDTH, `UVM_REG_ADDR_WIDTH'h14, "RO", 0);
    this.CFGROM_CIF_BASE_LATENCY = new("CFGROM_CIF_BASE_LATENCY");
    this.CFGROM_CIF_BASE_LATENCY.configure(this, null, "");
    this.CFGROM_CIF_BASE_LATENCY.set_rdl_tag("CFGROM_CIF_BASE_LATENCY_");
    this.CFGROM_CIF_BASE_LATENCY.set_reg_test_info(0, 0, 0);
    this.CFGROM_CIF_BASE_LATENCY.build();
    this.default_map.add_reg(this.CFGROM_CIF_BASE_LATENCY, `UVM_REG_ADDR_WIDTH'h18, "RO", 0);
    this.CFGROM_CIF_BASE_BURST_LENGTH_MAX = new("CFGROM_CIF_BASE_BURST_LENGTH_MAX");
    this.CFGROM_CIF_BASE_BURST_LENGTH_MAX.configure(this, null, "");
    this.CFGROM_CIF_BASE_BURST_LENGTH_MAX.set_rdl_tag("CFGROM_CIF_BASE_BURST_LENGTH_MAX_");
    this.CFGROM_CIF_BASE_BURST_LENGTH_MAX.set_reg_test_info(0, 0, 0);
    this.CFGROM_CIF_BASE_BURST_LENGTH_MAX.build();
    this.default_map.add_reg(this.CFGROM_CIF_BASE_BURST_LENGTH_MAX, `UVM_REG_ADDR_WIDTH'h1c, "RO", 0);
    this.CFGROM_CIF_BASE_MEM_ADDR_WIDTH = new("CFGROM_CIF_BASE_MEM_ADDR_WIDTH");
    this.CFGROM_CIF_BASE_MEM_ADDR_WIDTH.configure(this, null, "");
    this.CFGROM_CIF_BASE_MEM_ADDR_WIDTH.set_rdl_tag("CFGROM_CIF_BASE_MEM_ADDR_WIDTH_");
    this.CFGROM_CIF_BASE_MEM_ADDR_WIDTH.set_reg_test_info(0, 0, 0);
    this.CFGROM_CIF_BASE_MEM_ADDR_WIDTH.build();
    this.default_map.add_reg(this.CFGROM_CIF_BASE_MEM_ADDR_WIDTH, `UVM_REG_ADDR_WIDTH'h20, "RO", 0);
    this.CFGROM_CDMA_DESC = new("CFGROM_CDMA_DESC");
    this.CFGROM_CDMA_DESC.configure(this, null, "");
    this.CFGROM_CDMA_DESC.set_rdl_tag("CFGROM_CDMA_DESC_");
    this.CFGROM_CDMA_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDMA_DESC.build();
    this.default_map.add_reg(this.CFGROM_CDMA_DESC, `UVM_REG_ADDR_WIDTH'h24, "RO", 0);
    this.CFGROM_CDMA_CAP_INCOMPAT = new("CFGROM_CDMA_CAP_INCOMPAT");
    this.CFGROM_CDMA_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CDMA_CAP_INCOMPAT.set_rdl_tag("CFGROM_CDMA_CAP_INCOMPAT_");
    this.CFGROM_CDMA_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDMA_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CDMA_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h28, "RO", 0);
    this.CFGROM_CDMA_CAP_COMPAT = new("CFGROM_CDMA_CAP_COMPAT");
    this.CFGROM_CDMA_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CDMA_CAP_COMPAT.set_rdl_tag("CFGROM_CDMA_CAP_COMPAT_");
    this.CFGROM_CDMA_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDMA_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CDMA_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h2c, "RO", 0);
    this.CFGROM_CDMA_BASE_FEATURE_TYPES = new("CFGROM_CDMA_BASE_FEATURE_TYPES");
    this.CFGROM_CDMA_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_CDMA_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_CDMA_BASE_FEATURE_TYPES_");
    this.CFGROM_CDMA_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDMA_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'h30, "RO", 0);
    this.CFGROM_CDMA_BASE_WEIGHT_TYPES = new("CFGROM_CDMA_BASE_WEIGHT_TYPES");
    this.CFGROM_CDMA_BASE_WEIGHT_TYPES.configure(this, null, "");
    this.CFGROM_CDMA_BASE_WEIGHT_TYPES.set_rdl_tag("CFGROM_CDMA_BASE_WEIGHT_TYPES_");
    this.CFGROM_CDMA_BASE_WEIGHT_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDMA_BASE_WEIGHT_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_WEIGHT_TYPES, `UVM_REG_ADDR_WIDTH'h34, "RO", 0);
    this.CFGROM_CDMA_BASE_ATOMIC_C = new("CFGROM_CDMA_BASE_ATOMIC_C");
    this.CFGROM_CDMA_BASE_ATOMIC_C.configure(this, null, "");
    this.CFGROM_CDMA_BASE_ATOMIC_C.set_rdl_tag("CFGROM_CDMA_BASE_ATOMIC_C_");
    this.CFGROM_CDMA_BASE_ATOMIC_C.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDMA_BASE_ATOMIC_C.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_ATOMIC_C, `UVM_REG_ADDR_WIDTH'h38, "RO", 0);
    this.CFGROM_CDMA_BASE_ATOMIC_K = new("CFGROM_CDMA_BASE_ATOMIC_K");
    this.CFGROM_CDMA_BASE_ATOMIC_K.configure(this, null, "");
    this.CFGROM_CDMA_BASE_ATOMIC_K.set_rdl_tag("CFGROM_CDMA_BASE_ATOMIC_K_");
    this.CFGROM_CDMA_BASE_ATOMIC_K.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDMA_BASE_ATOMIC_K.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_ATOMIC_K, `UVM_REG_ADDR_WIDTH'h3c, "RO", 0);
    this.CFGROM_CDMA_BASE_ATOMIC_M = new("CFGROM_CDMA_BASE_ATOMIC_M");
    this.CFGROM_CDMA_BASE_ATOMIC_M.configure(this, null, "");
    this.CFGROM_CDMA_BASE_ATOMIC_M.set_rdl_tag("CFGROM_CDMA_BASE_ATOMIC_M_");
    this.CFGROM_CDMA_BASE_ATOMIC_M.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDMA_BASE_ATOMIC_M.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_ATOMIC_M, `UVM_REG_ADDR_WIDTH'h40, "RO", 0);
    this.CFGROM_CDMA_BASE_CBUF_BANK_NUM = new("CFGROM_CDMA_BASE_CBUF_BANK_NUM");
    this.CFGROM_CDMA_BASE_CBUF_BANK_NUM.configure(this, null, "");
    this.CFGROM_CDMA_BASE_CBUF_BANK_NUM.set_rdl_tag("CFGROM_CDMA_BASE_CBUF_BANK_NUM_");
    this.CFGROM_CDMA_BASE_CBUF_BANK_NUM.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDMA_BASE_CBUF_BANK_NUM.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_CBUF_BANK_NUM, `UVM_REG_ADDR_WIDTH'h44, "RO", 0);
    this.CFGROM_CDMA_BASE_CBUF_BANK_WIDTH = new("CFGROM_CDMA_BASE_CBUF_BANK_WIDTH");
    this.CFGROM_CDMA_BASE_CBUF_BANK_WIDTH.configure(this, null, "");
    this.CFGROM_CDMA_BASE_CBUF_BANK_WIDTH.set_rdl_tag("CFGROM_CDMA_BASE_CBUF_BANK_WIDTH_");
    this.CFGROM_CDMA_BASE_CBUF_BANK_WIDTH.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDMA_BASE_CBUF_BANK_WIDTH.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_CBUF_BANK_WIDTH, `UVM_REG_ADDR_WIDTH'h48, "RO", 0);
    this.CFGROM_CDMA_BASE_CBUF_BANK_DEPTH = new("CFGROM_CDMA_BASE_CBUF_BANK_DEPTH");
    this.CFGROM_CDMA_BASE_CBUF_BANK_DEPTH.configure(this, null, "");
    this.CFGROM_CDMA_BASE_CBUF_BANK_DEPTH.set_rdl_tag("CFGROM_CDMA_BASE_CBUF_BANK_DEPTH_");
    this.CFGROM_CDMA_BASE_CBUF_BANK_DEPTH.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDMA_BASE_CBUF_BANK_DEPTH.build();
    this.default_map.add_reg(this.CFGROM_CDMA_BASE_CBUF_BANK_DEPTH, `UVM_REG_ADDR_WIDTH'h4c, "RO", 0);
    this.CFGROM_CDMA_MULTI_BATCH_MAX = new("CFGROM_CDMA_MULTI_BATCH_MAX");
    this.CFGROM_CDMA_MULTI_BATCH_MAX.configure(this, null, "");
    this.CFGROM_CDMA_MULTI_BATCH_MAX.set_rdl_tag("CFGROM_CDMA_MULTI_BATCH_MAX_");
    this.CFGROM_CDMA_MULTI_BATCH_MAX.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDMA_MULTI_BATCH_MAX.build();
    this.default_map.add_reg(this.CFGROM_CDMA_MULTI_BATCH_MAX, `UVM_REG_ADDR_WIDTH'h50, "RO", 0);
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED = new("CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED");
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED.configure(this, null, "");
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED.set_rdl_tag("CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED_");
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED.build();
    this.default_map.add_reg(this.CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED, `UVM_REG_ADDR_WIDTH'h54, "RO", 0);
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI = new("CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI");
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI.configure(this, null, "");
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI.set_rdl_tag("CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI_");
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI.build();
    this.default_map.add_reg(this.CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI, `UVM_REG_ADDR_WIDTH'h58, "RO", 0);
    this.CFGROM_CBUF_DESC = new("CFGROM_CBUF_DESC");
    this.CFGROM_CBUF_DESC.configure(this, null, "");
    this.CFGROM_CBUF_DESC.set_rdl_tag("CFGROM_CBUF_DESC_");
    this.CFGROM_CBUF_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CBUF_DESC.build();
    this.default_map.add_reg(this.CFGROM_CBUF_DESC, `UVM_REG_ADDR_WIDTH'h5c, "RO", 0);
    this.CFGROM_CBUF_CAP_INCOMPAT = new("CFGROM_CBUF_CAP_INCOMPAT");
    this.CFGROM_CBUF_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CBUF_CAP_INCOMPAT.set_rdl_tag("CFGROM_CBUF_CAP_INCOMPAT_");
    this.CFGROM_CBUF_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CBUF_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CBUF_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h60, "RO", 0);
    this.CFGROM_CBUF_CAP_COMPAT = new("CFGROM_CBUF_CAP_COMPAT");
    this.CFGROM_CBUF_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CBUF_CAP_COMPAT.set_rdl_tag("CFGROM_CBUF_CAP_COMPAT_");
    this.CFGROM_CBUF_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CBUF_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CBUF_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h64, "RO", 0);
    this.CFGROM_CBUF_BASE_CBUF_BANK_NUM = new("CFGROM_CBUF_BASE_CBUF_BANK_NUM");
    this.CFGROM_CBUF_BASE_CBUF_BANK_NUM.configure(this, null, "");
    this.CFGROM_CBUF_BASE_CBUF_BANK_NUM.set_rdl_tag("CFGROM_CBUF_BASE_CBUF_BANK_NUM_");
    this.CFGROM_CBUF_BASE_CBUF_BANK_NUM.set_reg_test_info(0, 0, 32);
    this.CFGROM_CBUF_BASE_CBUF_BANK_NUM.build();
    this.default_map.add_reg(this.CFGROM_CBUF_BASE_CBUF_BANK_NUM, `UVM_REG_ADDR_WIDTH'h68, "RO", 0);
    this.CFGROM_CBUF_BASE_CBUF_BANK_WIDTH = new("CFGROM_CBUF_BASE_CBUF_BANK_WIDTH");
    this.CFGROM_CBUF_BASE_CBUF_BANK_WIDTH.configure(this, null, "");
    this.CFGROM_CBUF_BASE_CBUF_BANK_WIDTH.set_rdl_tag("CFGROM_CBUF_BASE_CBUF_BANK_WIDTH_");
    this.CFGROM_CBUF_BASE_CBUF_BANK_WIDTH.set_reg_test_info(0, 0, 32);
    this.CFGROM_CBUF_BASE_CBUF_BANK_WIDTH.build();
    this.default_map.add_reg(this.CFGROM_CBUF_BASE_CBUF_BANK_WIDTH, `UVM_REG_ADDR_WIDTH'h6c, "RO", 0);
    this.CFGROM_CBUF_BASE_CBUF_BANK_DEPTH = new("CFGROM_CBUF_BASE_CBUF_BANK_DEPTH");
    this.CFGROM_CBUF_BASE_CBUF_BANK_DEPTH.configure(this, null, "");
    this.CFGROM_CBUF_BASE_CBUF_BANK_DEPTH.set_rdl_tag("CFGROM_CBUF_BASE_CBUF_BANK_DEPTH_");
    this.CFGROM_CBUF_BASE_CBUF_BANK_DEPTH.set_reg_test_info(0, 0, 32);
    this.CFGROM_CBUF_BASE_CBUF_BANK_DEPTH.build();
    this.default_map.add_reg(this.CFGROM_CBUF_BASE_CBUF_BANK_DEPTH, `UVM_REG_ADDR_WIDTH'h70, "RO", 0);
    this.CFGROM_CBUF_BASE_CDMA_ID = new("CFGROM_CBUF_BASE_CDMA_ID");
    this.CFGROM_CBUF_BASE_CDMA_ID.configure(this, null, "");
    this.CFGROM_CBUF_BASE_CDMA_ID.set_rdl_tag("CFGROM_CBUF_BASE_CDMA_ID_");
    this.CFGROM_CBUF_BASE_CDMA_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_CBUF_BASE_CDMA_ID.build();
    this.default_map.add_reg(this.CFGROM_CBUF_BASE_CDMA_ID, `UVM_REG_ADDR_WIDTH'h74, "RO", 0);
    this.CFGROM_CSC_DESC = new("CFGROM_CSC_DESC");
    this.CFGROM_CSC_DESC.configure(this, null, "");
    this.CFGROM_CSC_DESC.set_rdl_tag("CFGROM_CSC_DESC_");
    this.CFGROM_CSC_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CSC_DESC.build();
    this.default_map.add_reg(this.CFGROM_CSC_DESC, `UVM_REG_ADDR_WIDTH'h78, "RO", 0);
    this.CFGROM_CSC_CAP_INCOMPAT = new("CFGROM_CSC_CAP_INCOMPAT");
    this.CFGROM_CSC_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CSC_CAP_INCOMPAT.set_rdl_tag("CFGROM_CSC_CAP_INCOMPAT_");
    this.CFGROM_CSC_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CSC_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CSC_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h7c, "RO", 0);
    this.CFGROM_CSC_CAP_COMPAT = new("CFGROM_CSC_CAP_COMPAT");
    this.CFGROM_CSC_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CSC_CAP_COMPAT.set_rdl_tag("CFGROM_CSC_CAP_COMPAT_");
    this.CFGROM_CSC_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CSC_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CSC_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h80, "RO", 0);
    this.CFGROM_CSC_BASE_FEATURE_TYPES = new("CFGROM_CSC_BASE_FEATURE_TYPES");
    this.CFGROM_CSC_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_CSC_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_CSC_BASE_FEATURE_TYPES_");
    this.CFGROM_CSC_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CSC_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'h84, "RO", 0);
    this.CFGROM_CSC_BASE_WEIGHT_TYPES = new("CFGROM_CSC_BASE_WEIGHT_TYPES");
    this.CFGROM_CSC_BASE_WEIGHT_TYPES.configure(this, null, "");
    this.CFGROM_CSC_BASE_WEIGHT_TYPES.set_rdl_tag("CFGROM_CSC_BASE_WEIGHT_TYPES_");
    this.CFGROM_CSC_BASE_WEIGHT_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CSC_BASE_WEIGHT_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_WEIGHT_TYPES, `UVM_REG_ADDR_WIDTH'h88, "RO", 0);
    this.CFGROM_CSC_BASE_ATOMIC_C = new("CFGROM_CSC_BASE_ATOMIC_C");
    this.CFGROM_CSC_BASE_ATOMIC_C.configure(this, null, "");
    this.CFGROM_CSC_BASE_ATOMIC_C.set_rdl_tag("CFGROM_CSC_BASE_ATOMIC_C_");
    this.CFGROM_CSC_BASE_ATOMIC_C.set_reg_test_info(0, 0, 0);
    this.CFGROM_CSC_BASE_ATOMIC_C.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_ATOMIC_C, `UVM_REG_ADDR_WIDTH'h8c, "RO", 0);
    this.CFGROM_CSC_BASE_ATOMIC_K = new("CFGROM_CSC_BASE_ATOMIC_K");
    this.CFGROM_CSC_BASE_ATOMIC_K.configure(this, null, "");
    this.CFGROM_CSC_BASE_ATOMIC_K.set_rdl_tag("CFGROM_CSC_BASE_ATOMIC_K_");
    this.CFGROM_CSC_BASE_ATOMIC_K.set_reg_test_info(0, 0, 0);
    this.CFGROM_CSC_BASE_ATOMIC_K.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_ATOMIC_K, `UVM_REG_ADDR_WIDTH'h90, "RO", 0);
    this.CFGROM_CSC_BASE_ATOMIC_M = new("CFGROM_CSC_BASE_ATOMIC_M");
    this.CFGROM_CSC_BASE_ATOMIC_M.configure(this, null, "");
    this.CFGROM_CSC_BASE_ATOMIC_M.set_rdl_tag("CFGROM_CSC_BASE_ATOMIC_M_");
    this.CFGROM_CSC_BASE_ATOMIC_M.set_reg_test_info(0, 0, 32);
    this.CFGROM_CSC_BASE_ATOMIC_M.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_ATOMIC_M, `UVM_REG_ADDR_WIDTH'h94, "RO", 0);
    this.CFGROM_CSC_BASE_CBUF_BANK_NUM = new("CFGROM_CSC_BASE_CBUF_BANK_NUM");
    this.CFGROM_CSC_BASE_CBUF_BANK_NUM.configure(this, null, "");
    this.CFGROM_CSC_BASE_CBUF_BANK_NUM.set_rdl_tag("CFGROM_CSC_BASE_CBUF_BANK_NUM_");
    this.CFGROM_CSC_BASE_CBUF_BANK_NUM.set_reg_test_info(0, 0, 32);
    this.CFGROM_CSC_BASE_CBUF_BANK_NUM.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_CBUF_BANK_NUM, `UVM_REG_ADDR_WIDTH'h98, "RO", 0);
    this.CFGROM_CSC_BASE_CBUF_BANK_WIDTH = new("CFGROM_CSC_BASE_CBUF_BANK_WIDTH");
    this.CFGROM_CSC_BASE_CBUF_BANK_WIDTH.configure(this, null, "");
    this.CFGROM_CSC_BASE_CBUF_BANK_WIDTH.set_rdl_tag("CFGROM_CSC_BASE_CBUF_BANK_WIDTH_");
    this.CFGROM_CSC_BASE_CBUF_BANK_WIDTH.set_reg_test_info(0, 0, 32);
    this.CFGROM_CSC_BASE_CBUF_BANK_WIDTH.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_CBUF_BANK_WIDTH, `UVM_REG_ADDR_WIDTH'h9c, "RO", 0);
    this.CFGROM_CSC_BASE_CBUF_BANK_DEPTH = new("CFGROM_CSC_BASE_CBUF_BANK_DEPTH");
    this.CFGROM_CSC_BASE_CBUF_BANK_DEPTH.configure(this, null, "");
    this.CFGROM_CSC_BASE_CBUF_BANK_DEPTH.set_rdl_tag("CFGROM_CSC_BASE_CBUF_BANK_DEPTH_");
    this.CFGROM_CSC_BASE_CBUF_BANK_DEPTH.set_reg_test_info(0, 0, 32);
    this.CFGROM_CSC_BASE_CBUF_BANK_DEPTH.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_CBUF_BANK_DEPTH, `UVM_REG_ADDR_WIDTH'ha0, "RO", 0);
    this.CFGROM_CSC_BASE_CDMA_ID = new("CFGROM_CSC_BASE_CDMA_ID");
    this.CFGROM_CSC_BASE_CDMA_ID.configure(this, null, "");
    this.CFGROM_CSC_BASE_CDMA_ID.set_rdl_tag("CFGROM_CSC_BASE_CDMA_ID_");
    this.CFGROM_CSC_BASE_CDMA_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_CSC_BASE_CDMA_ID.build();
    this.default_map.add_reg(this.CFGROM_CSC_BASE_CDMA_ID, `UVM_REG_ADDR_WIDTH'ha4, "RO", 0);
    this.CFGROM_CSC_MULTI_BATCH_MAX = new("CFGROM_CSC_MULTI_BATCH_MAX");
    this.CFGROM_CSC_MULTI_BATCH_MAX.configure(this, null, "");
    this.CFGROM_CSC_MULTI_BATCH_MAX.set_rdl_tag("CFGROM_CSC_MULTI_BATCH_MAX_");
    this.CFGROM_CSC_MULTI_BATCH_MAX.set_reg_test_info(0, 0, 32);
    this.CFGROM_CSC_MULTI_BATCH_MAX.build();
    this.default_map.add_reg(this.CFGROM_CSC_MULTI_BATCH_MAX, `UVM_REG_ADDR_WIDTH'ha8, "RO", 0);
    this.CFGROM_CMAC_A_DESC = new("CFGROM_CMAC_A_DESC");
    this.CFGROM_CMAC_A_DESC.configure(this, null, "");
    this.CFGROM_CMAC_A_DESC.set_rdl_tag("CFGROM_CMAC_A_DESC_");
    this.CFGROM_CMAC_A_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_A_DESC.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_DESC, `UVM_REG_ADDR_WIDTH'hac, "RO", 0);
    this.CFGROM_CMAC_A_CAP_INCOMPAT = new("CFGROM_CMAC_A_CAP_INCOMPAT");
    this.CFGROM_CMAC_A_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CMAC_A_CAP_INCOMPAT.set_rdl_tag("CFGROM_CMAC_A_CAP_INCOMPAT_");
    this.CFGROM_CMAC_A_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_A_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'hb0, "RO", 0);
    this.CFGROM_CMAC_A_CAP_COMPAT = new("CFGROM_CMAC_A_CAP_COMPAT");
    this.CFGROM_CMAC_A_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CMAC_A_CAP_COMPAT.set_rdl_tag("CFGROM_CMAC_A_CAP_COMPAT_");
    this.CFGROM_CMAC_A_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_A_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'hb4, "RO", 0);
    this.CFGROM_CMAC_A_BASE_FEATURE_TYPES = new("CFGROM_CMAC_A_BASE_FEATURE_TYPES");
    this.CFGROM_CMAC_A_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_CMAC_A_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_CMAC_A_BASE_FEATURE_TYPES_");
    this.CFGROM_CMAC_A_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_A_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'hb8, "RO", 0);
    this.CFGROM_CMAC_A_BASE_WEIGHT_TYPES = new("CFGROM_CMAC_A_BASE_WEIGHT_TYPES");
    this.CFGROM_CMAC_A_BASE_WEIGHT_TYPES.configure(this, null, "");
    this.CFGROM_CMAC_A_BASE_WEIGHT_TYPES.set_rdl_tag("CFGROM_CMAC_A_BASE_WEIGHT_TYPES_");
    this.CFGROM_CMAC_A_BASE_WEIGHT_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_A_BASE_WEIGHT_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_BASE_WEIGHT_TYPES, `UVM_REG_ADDR_WIDTH'hbc, "RO", 0);
    this.CFGROM_CMAC_A_BASE_ATOMIC_C = new("CFGROM_CMAC_A_BASE_ATOMIC_C");
    this.CFGROM_CMAC_A_BASE_ATOMIC_C.configure(this, null, "");
    this.CFGROM_CMAC_A_BASE_ATOMIC_C.set_rdl_tag("CFGROM_CMAC_A_BASE_ATOMIC_C_");
    this.CFGROM_CMAC_A_BASE_ATOMIC_C.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_A_BASE_ATOMIC_C.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_BASE_ATOMIC_C, `UVM_REG_ADDR_WIDTH'hc0, "RO", 0);
    this.CFGROM_CMAC_A_BASE_ATOMIC_K = new("CFGROM_CMAC_A_BASE_ATOMIC_K");
    this.CFGROM_CMAC_A_BASE_ATOMIC_K.configure(this, null, "");
    this.CFGROM_CMAC_A_BASE_ATOMIC_K.set_rdl_tag("CFGROM_CMAC_A_BASE_ATOMIC_K_");
    this.CFGROM_CMAC_A_BASE_ATOMIC_K.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_A_BASE_ATOMIC_K.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_BASE_ATOMIC_K, `UVM_REG_ADDR_WIDTH'hc4, "RO", 0);
    this.CFGROM_CMAC_A_BASE_CDMA_ID = new("CFGROM_CMAC_A_BASE_CDMA_ID");
    this.CFGROM_CMAC_A_BASE_CDMA_ID.configure(this, null, "");
    this.CFGROM_CMAC_A_BASE_CDMA_ID.set_rdl_tag("CFGROM_CMAC_A_BASE_CDMA_ID_");
    this.CFGROM_CMAC_A_BASE_CDMA_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_CMAC_A_BASE_CDMA_ID.build();
    this.default_map.add_reg(this.CFGROM_CMAC_A_BASE_CDMA_ID, `UVM_REG_ADDR_WIDTH'hc8, "RO", 0);
    this.CFGROM_CMAC_B_DESC = new("CFGROM_CMAC_B_DESC");
    this.CFGROM_CMAC_B_DESC.configure(this, null, "");
    this.CFGROM_CMAC_B_DESC.set_rdl_tag("CFGROM_CMAC_B_DESC_");
    this.CFGROM_CMAC_B_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_B_DESC.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_DESC, `UVM_REG_ADDR_WIDTH'hcc, "RO", 0);
    this.CFGROM_CMAC_B_CAP_INCOMPAT = new("CFGROM_CMAC_B_CAP_INCOMPAT");
    this.CFGROM_CMAC_B_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CMAC_B_CAP_INCOMPAT.set_rdl_tag("CFGROM_CMAC_B_CAP_INCOMPAT_");
    this.CFGROM_CMAC_B_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_B_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'hd0, "RO", 0);
    this.CFGROM_CMAC_B_CAP_COMPAT = new("CFGROM_CMAC_B_CAP_COMPAT");
    this.CFGROM_CMAC_B_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CMAC_B_CAP_COMPAT.set_rdl_tag("CFGROM_CMAC_B_CAP_COMPAT_");
    this.CFGROM_CMAC_B_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_B_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'hd4, "RO", 0);
    this.CFGROM_CMAC_B_BASE_FEATURE_TYPES = new("CFGROM_CMAC_B_BASE_FEATURE_TYPES");
    this.CFGROM_CMAC_B_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_CMAC_B_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_CMAC_B_BASE_FEATURE_TYPES_");
    this.CFGROM_CMAC_B_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_B_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'hd8, "RO", 0);
    this.CFGROM_CMAC_B_BASE_WEIGHT_TYPES = new("CFGROM_CMAC_B_BASE_WEIGHT_TYPES");
    this.CFGROM_CMAC_B_BASE_WEIGHT_TYPES.configure(this, null, "");
    this.CFGROM_CMAC_B_BASE_WEIGHT_TYPES.set_rdl_tag("CFGROM_CMAC_B_BASE_WEIGHT_TYPES_");
    this.CFGROM_CMAC_B_BASE_WEIGHT_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_B_BASE_WEIGHT_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_BASE_WEIGHT_TYPES, `UVM_REG_ADDR_WIDTH'hdc, "RO", 0);
    this.CFGROM_CMAC_B_BASE_ATOMIC_C = new("CFGROM_CMAC_B_BASE_ATOMIC_C");
    this.CFGROM_CMAC_B_BASE_ATOMIC_C.configure(this, null, "");
    this.CFGROM_CMAC_B_BASE_ATOMIC_C.set_rdl_tag("CFGROM_CMAC_B_BASE_ATOMIC_C_");
    this.CFGROM_CMAC_B_BASE_ATOMIC_C.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_B_BASE_ATOMIC_C.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_BASE_ATOMIC_C, `UVM_REG_ADDR_WIDTH'he0, "RO", 0);
    this.CFGROM_CMAC_B_BASE_ATOMIC_K = new("CFGROM_CMAC_B_BASE_ATOMIC_K");
    this.CFGROM_CMAC_B_BASE_ATOMIC_K.configure(this, null, "");
    this.CFGROM_CMAC_B_BASE_ATOMIC_K.set_rdl_tag("CFGROM_CMAC_B_BASE_ATOMIC_K_");
    this.CFGROM_CMAC_B_BASE_ATOMIC_K.set_reg_test_info(0, 0, 0);
    this.CFGROM_CMAC_B_BASE_ATOMIC_K.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_BASE_ATOMIC_K, `UVM_REG_ADDR_WIDTH'he4, "RO", 0);
    this.CFGROM_CMAC_B_BASE_CDMA_ID = new("CFGROM_CMAC_B_BASE_CDMA_ID");
    this.CFGROM_CMAC_B_BASE_CDMA_ID.configure(this, null, "");
    this.CFGROM_CMAC_B_BASE_CDMA_ID.set_rdl_tag("CFGROM_CMAC_B_BASE_CDMA_ID_");
    this.CFGROM_CMAC_B_BASE_CDMA_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_CMAC_B_BASE_CDMA_ID.build();
    this.default_map.add_reg(this.CFGROM_CMAC_B_BASE_CDMA_ID, `UVM_REG_ADDR_WIDTH'he8, "RO", 0);
    this.CFGROM_CACC_DESC = new("CFGROM_CACC_DESC");
    this.CFGROM_CACC_DESC.configure(this, null, "");
    this.CFGROM_CACC_DESC.set_rdl_tag("CFGROM_CACC_DESC_");
    this.CFGROM_CACC_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CACC_DESC.build();
    this.default_map.add_reg(this.CFGROM_CACC_DESC, `UVM_REG_ADDR_WIDTH'hec, "RO", 0);
    this.CFGROM_CACC_CAP_INCOMPAT = new("CFGROM_CACC_CAP_INCOMPAT");
    this.CFGROM_CACC_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CACC_CAP_INCOMPAT.set_rdl_tag("CFGROM_CACC_CAP_INCOMPAT_");
    this.CFGROM_CACC_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CACC_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CACC_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'hf0, "RO", 0);
    this.CFGROM_CACC_CAP_COMPAT = new("CFGROM_CACC_CAP_COMPAT");
    this.CFGROM_CACC_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CACC_CAP_COMPAT.set_rdl_tag("CFGROM_CACC_CAP_COMPAT_");
    this.CFGROM_CACC_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CACC_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CACC_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'hf4, "RO", 0);
    this.CFGROM_CACC_BASE_FEATURE_TYPES = new("CFGROM_CACC_BASE_FEATURE_TYPES");
    this.CFGROM_CACC_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_CACC_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_CACC_BASE_FEATURE_TYPES_");
    this.CFGROM_CACC_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CACC_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CACC_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'hf8, "RO", 0);
    this.CFGROM_CACC_BASE_WEIGHT_TYPES = new("CFGROM_CACC_BASE_WEIGHT_TYPES");
    this.CFGROM_CACC_BASE_WEIGHT_TYPES.configure(this, null, "");
    this.CFGROM_CACC_BASE_WEIGHT_TYPES.set_rdl_tag("CFGROM_CACC_BASE_WEIGHT_TYPES_");
    this.CFGROM_CACC_BASE_WEIGHT_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CACC_BASE_WEIGHT_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CACC_BASE_WEIGHT_TYPES, `UVM_REG_ADDR_WIDTH'hfc, "RO", 0);
    this.CFGROM_CACC_BASE_ATOMIC_C = new("CFGROM_CACC_BASE_ATOMIC_C");
    this.CFGROM_CACC_BASE_ATOMIC_C.configure(this, null, "");
    this.CFGROM_CACC_BASE_ATOMIC_C.set_rdl_tag("CFGROM_CACC_BASE_ATOMIC_C_");
    this.CFGROM_CACC_BASE_ATOMIC_C.set_reg_test_info(0, 0, 0);
    this.CFGROM_CACC_BASE_ATOMIC_C.build();
    this.default_map.add_reg(this.CFGROM_CACC_BASE_ATOMIC_C, `UVM_REG_ADDR_WIDTH'h100, "RO", 0);
    this.CFGROM_CACC_BASE_ATOMIC_K = new("CFGROM_CACC_BASE_ATOMIC_K");
    this.CFGROM_CACC_BASE_ATOMIC_K.configure(this, null, "");
    this.CFGROM_CACC_BASE_ATOMIC_K.set_rdl_tag("CFGROM_CACC_BASE_ATOMIC_K_");
    this.CFGROM_CACC_BASE_ATOMIC_K.set_reg_test_info(0, 0, 0);
    this.CFGROM_CACC_BASE_ATOMIC_K.build();
    this.default_map.add_reg(this.CFGROM_CACC_BASE_ATOMIC_K, `UVM_REG_ADDR_WIDTH'h104, "RO", 0);
    this.CFGROM_CACC_BASE_CDMA_ID = new("CFGROM_CACC_BASE_CDMA_ID");
    this.CFGROM_CACC_BASE_CDMA_ID.configure(this, null, "");
    this.CFGROM_CACC_BASE_CDMA_ID.set_rdl_tag("CFGROM_CACC_BASE_CDMA_ID_");
    this.CFGROM_CACC_BASE_CDMA_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_CACC_BASE_CDMA_ID.build();
    this.default_map.add_reg(this.CFGROM_CACC_BASE_CDMA_ID, `UVM_REG_ADDR_WIDTH'h108, "RO", 0);
    this.CFGROM_CACC_MULTI_BATCH_MAX = new("CFGROM_CACC_MULTI_BATCH_MAX");
    this.CFGROM_CACC_MULTI_BATCH_MAX.configure(this, null, "");
    this.CFGROM_CACC_MULTI_BATCH_MAX.set_rdl_tag("CFGROM_CACC_MULTI_BATCH_MAX_");
    this.CFGROM_CACC_MULTI_BATCH_MAX.set_reg_test_info(0, 0, 32);
    this.CFGROM_CACC_MULTI_BATCH_MAX.build();
    this.default_map.add_reg(this.CFGROM_CACC_MULTI_BATCH_MAX, `UVM_REG_ADDR_WIDTH'h10c, "RO", 0);
    this.CFGROM_SDP_RDMA_DESC = new("CFGROM_SDP_RDMA_DESC");
    this.CFGROM_SDP_RDMA_DESC.configure(this, null, "");
    this.CFGROM_SDP_RDMA_DESC.set_rdl_tag("CFGROM_SDP_RDMA_DESC_");
    this.CFGROM_SDP_RDMA_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_RDMA_DESC.build();
    this.default_map.add_reg(this.CFGROM_SDP_RDMA_DESC, `UVM_REG_ADDR_WIDTH'h110, "RO", 0);
    this.CFGROM_SDP_RDMA_CAP_INCOMPAT = new("CFGROM_SDP_RDMA_CAP_INCOMPAT");
    this.CFGROM_SDP_RDMA_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_SDP_RDMA_CAP_INCOMPAT.set_rdl_tag("CFGROM_SDP_RDMA_CAP_INCOMPAT_");
    this.CFGROM_SDP_RDMA_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_RDMA_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_SDP_RDMA_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h114, "RO", 0);
    this.CFGROM_SDP_RDMA_CAP_COMPAT = new("CFGROM_SDP_RDMA_CAP_COMPAT");
    this.CFGROM_SDP_RDMA_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_SDP_RDMA_CAP_COMPAT.set_rdl_tag("CFGROM_SDP_RDMA_CAP_COMPAT_");
    this.CFGROM_SDP_RDMA_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_RDMA_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_SDP_RDMA_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h118, "RO", 0);
    this.CFGROM_SDP_RDMA_BASE_ATOMIC_M = new("CFGROM_SDP_RDMA_BASE_ATOMIC_M");
    this.CFGROM_SDP_RDMA_BASE_ATOMIC_M.configure(this, null, "");
    this.CFGROM_SDP_RDMA_BASE_ATOMIC_M.set_rdl_tag("CFGROM_SDP_RDMA_BASE_ATOMIC_M_");
    this.CFGROM_SDP_RDMA_BASE_ATOMIC_M.set_reg_test_info(0, 0, 32);
    this.CFGROM_SDP_RDMA_BASE_ATOMIC_M.build();
    this.default_map.add_reg(this.CFGROM_SDP_RDMA_BASE_ATOMIC_M, `UVM_REG_ADDR_WIDTH'h11c, "RO", 0);
    this.CFGROM_SDP_RDMA_BASE_SDP_ID = new("CFGROM_SDP_RDMA_BASE_SDP_ID");
    this.CFGROM_SDP_RDMA_BASE_SDP_ID.configure(this, null, "");
    this.CFGROM_SDP_RDMA_BASE_SDP_ID.set_rdl_tag("CFGROM_SDP_RDMA_BASE_SDP_ID_");
    this.CFGROM_SDP_RDMA_BASE_SDP_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_SDP_RDMA_BASE_SDP_ID.build();
    this.default_map.add_reg(this.CFGROM_SDP_RDMA_BASE_SDP_ID, `UVM_REG_ADDR_WIDTH'h120, "RO", 0);
    this.CFGROM_SDP_DESC = new("CFGROM_SDP_DESC");
    this.CFGROM_SDP_DESC.configure(this, null, "");
    this.CFGROM_SDP_DESC.set_rdl_tag("CFGROM_SDP_DESC_");
    this.CFGROM_SDP_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_DESC.build();
    this.default_map.add_reg(this.CFGROM_SDP_DESC, `UVM_REG_ADDR_WIDTH'h124, "RO", 0);
    this.CFGROM_SDP_CAP_INCOMPAT = new("CFGROM_SDP_CAP_INCOMPAT");
    this.CFGROM_SDP_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_SDP_CAP_INCOMPAT.set_rdl_tag("CFGROM_SDP_CAP_INCOMPAT_");
    this.CFGROM_SDP_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_SDP_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h128, "RO", 0);
    this.CFGROM_SDP_CAP_COMPAT = new("CFGROM_SDP_CAP_COMPAT");
    this.CFGROM_SDP_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_SDP_CAP_COMPAT.set_rdl_tag("CFGROM_SDP_CAP_COMPAT_");
    this.CFGROM_SDP_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_SDP_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h12c, "RO", 0);
    this.CFGROM_SDP_BASE_FEATURE_TYPES = new("CFGROM_SDP_BASE_FEATURE_TYPES");
    this.CFGROM_SDP_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_SDP_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_SDP_BASE_FEATURE_TYPES_");
    this.CFGROM_SDP_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_SDP_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'h130, "RO", 0);
    this.CFGROM_SDP_BASE_WEIGHT_TYPES = new("CFGROM_SDP_BASE_WEIGHT_TYPES");
    this.CFGROM_SDP_BASE_WEIGHT_TYPES.configure(this, null, "");
    this.CFGROM_SDP_BASE_WEIGHT_TYPES.set_rdl_tag("CFGROM_SDP_BASE_WEIGHT_TYPES_");
    this.CFGROM_SDP_BASE_WEIGHT_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_SDP_BASE_WEIGHT_TYPES.build();
    this.default_map.add_reg(this.CFGROM_SDP_BASE_WEIGHT_TYPES, `UVM_REG_ADDR_WIDTH'h134, "RO", 0);
    this.CFGROM_SDP_BASE_CDMA_ID = new("CFGROM_SDP_BASE_CDMA_ID");
    this.CFGROM_SDP_BASE_CDMA_ID.configure(this, null, "");
    this.CFGROM_SDP_BASE_CDMA_ID.set_rdl_tag("CFGROM_SDP_BASE_CDMA_ID_");
    this.CFGROM_SDP_BASE_CDMA_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_SDP_BASE_CDMA_ID.build();
    this.default_map.add_reg(this.CFGROM_SDP_BASE_CDMA_ID, `UVM_REG_ADDR_WIDTH'h138, "RO", 0);
    this.CFGROM_SDP_MULTI_BATCH_MAX = new("CFGROM_SDP_MULTI_BATCH_MAX");
    this.CFGROM_SDP_MULTI_BATCH_MAX.configure(this, null, "");
    this.CFGROM_SDP_MULTI_BATCH_MAX.set_rdl_tag("CFGROM_SDP_MULTI_BATCH_MAX_");
    this.CFGROM_SDP_MULTI_BATCH_MAX.set_reg_test_info(0, 0, 32);
    this.CFGROM_SDP_MULTI_BATCH_MAX.build();
    this.default_map.add_reg(this.CFGROM_SDP_MULTI_BATCH_MAX, `UVM_REG_ADDR_WIDTH'h13c, "RO", 0);
    this.CFGROM_SDP_BS_THROUGHPUT = new("CFGROM_SDP_BS_THROUGHPUT");
    this.CFGROM_SDP_BS_THROUGHPUT.configure(this, null, "");
    this.CFGROM_SDP_BS_THROUGHPUT.set_rdl_tag("CFGROM_SDP_BS_THROUGHPUT_");
    this.CFGROM_SDP_BS_THROUGHPUT.set_reg_test_info(0, 0, 32);
    this.CFGROM_SDP_BS_THROUGHPUT.build();
    this.default_map.add_reg(this.CFGROM_SDP_BS_THROUGHPUT, `UVM_REG_ADDR_WIDTH'h140, "RO", 0);
    this.CFGROM_SDP_BN_THROUGHPUT = new("CFGROM_SDP_BN_THROUGHPUT");
    this.CFGROM_SDP_BN_THROUGHPUT.configure(this, null, "");
    this.CFGROM_SDP_BN_THROUGHPUT.set_rdl_tag("CFGROM_SDP_BN_THROUGHPUT_");
    this.CFGROM_SDP_BN_THROUGHPUT.set_reg_test_info(0, 0, 32);
    this.CFGROM_SDP_BN_THROUGHPUT.build();
    this.default_map.add_reg(this.CFGROM_SDP_BN_THROUGHPUT, `UVM_REG_ADDR_WIDTH'h144, "RO", 0);
    this.CFGROM_SDP_EW_THROUGHPUT = new("CFGROM_SDP_EW_THROUGHPUT");
    this.CFGROM_SDP_EW_THROUGHPUT.configure(this, null, "");
    this.CFGROM_SDP_EW_THROUGHPUT.set_rdl_tag("CFGROM_SDP_EW_THROUGHPUT_");
    this.CFGROM_SDP_EW_THROUGHPUT.set_reg_test_info(0, 0, 32);
    this.CFGROM_SDP_EW_THROUGHPUT.build();
    this.default_map.add_reg(this.CFGROM_SDP_EW_THROUGHPUT, `UVM_REG_ADDR_WIDTH'h148, "RO", 0);
    this.CFGROM_PDP_RDMA_DESC = new("CFGROM_PDP_RDMA_DESC");
    this.CFGROM_PDP_RDMA_DESC.configure(this, null, "");
    this.CFGROM_PDP_RDMA_DESC.set_rdl_tag("CFGROM_PDP_RDMA_DESC_");
    this.CFGROM_PDP_RDMA_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_PDP_RDMA_DESC.build();
    this.default_map.add_reg(this.CFGROM_PDP_RDMA_DESC, `UVM_REG_ADDR_WIDTH'h14c, "RO", 0);
    this.CFGROM_PDP_RDMA_CAP_INCOMPAT = new("CFGROM_PDP_RDMA_CAP_INCOMPAT");
    this.CFGROM_PDP_RDMA_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_PDP_RDMA_CAP_INCOMPAT.set_rdl_tag("CFGROM_PDP_RDMA_CAP_INCOMPAT_");
    this.CFGROM_PDP_RDMA_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_PDP_RDMA_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_PDP_RDMA_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h150, "RO", 0);
    this.CFGROM_PDP_RDMA_CAP_COMPAT = new("CFGROM_PDP_RDMA_CAP_COMPAT");
    this.CFGROM_PDP_RDMA_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_PDP_RDMA_CAP_COMPAT.set_rdl_tag("CFGROM_PDP_RDMA_CAP_COMPAT_");
    this.CFGROM_PDP_RDMA_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_PDP_RDMA_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_PDP_RDMA_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h154, "RO", 0);
    this.CFGROM_PDP_RDMA_BASE_ATOMIC_M = new("CFGROM_PDP_RDMA_BASE_ATOMIC_M");
    this.CFGROM_PDP_RDMA_BASE_ATOMIC_M.configure(this, null, "");
    this.CFGROM_PDP_RDMA_BASE_ATOMIC_M.set_rdl_tag("CFGROM_PDP_RDMA_BASE_ATOMIC_M_");
    this.CFGROM_PDP_RDMA_BASE_ATOMIC_M.set_reg_test_info(0, 0, 32);
    this.CFGROM_PDP_RDMA_BASE_ATOMIC_M.build();
    this.default_map.add_reg(this.CFGROM_PDP_RDMA_BASE_ATOMIC_M, `UVM_REG_ADDR_WIDTH'h158, "RO", 0);
    this.CFGROM_PDP_RDMA_BASE_PDP_ID = new("CFGROM_PDP_RDMA_BASE_PDP_ID");
    this.CFGROM_PDP_RDMA_BASE_PDP_ID.configure(this, null, "");
    this.CFGROM_PDP_RDMA_BASE_PDP_ID.set_rdl_tag("CFGROM_PDP_RDMA_BASE_PDP_ID_");
    this.CFGROM_PDP_RDMA_BASE_PDP_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_PDP_RDMA_BASE_PDP_ID.build();
    this.default_map.add_reg(this.CFGROM_PDP_RDMA_BASE_PDP_ID, `UVM_REG_ADDR_WIDTH'h15c, "RO", 0);
    this.CFGROM_PDP_DESC = new("CFGROM_PDP_DESC");
    this.CFGROM_PDP_DESC.configure(this, null, "");
    this.CFGROM_PDP_DESC.set_rdl_tag("CFGROM_PDP_DESC_");
    this.CFGROM_PDP_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_PDP_DESC.build();
    this.default_map.add_reg(this.CFGROM_PDP_DESC, `UVM_REG_ADDR_WIDTH'h160, "RO", 0);
    this.CFGROM_PDP_CAP_INCOMPAT = new("CFGROM_PDP_CAP_INCOMPAT");
    this.CFGROM_PDP_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_PDP_CAP_INCOMPAT.set_rdl_tag("CFGROM_PDP_CAP_INCOMPAT_");
    this.CFGROM_PDP_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_PDP_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_PDP_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h164, "RO", 0);
    this.CFGROM_PDP_CAP_COMPAT = new("CFGROM_PDP_CAP_COMPAT");
    this.CFGROM_PDP_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_PDP_CAP_COMPAT.set_rdl_tag("CFGROM_PDP_CAP_COMPAT_");
    this.CFGROM_PDP_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_PDP_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_PDP_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h168, "RO", 0);
    this.CFGROM_PDP_BASE_FEATURE_TYPES = new("CFGROM_PDP_BASE_FEATURE_TYPES");
    this.CFGROM_PDP_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_PDP_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_PDP_BASE_FEATURE_TYPES_");
    this.CFGROM_PDP_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_PDP_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_PDP_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'h16c, "RO", 0);
    this.CFGROM_PDP_BASE_THROUGHPUT = new("CFGROM_PDP_BASE_THROUGHPUT");
    this.CFGROM_PDP_BASE_THROUGHPUT.configure(this, null, "");
    this.CFGROM_PDP_BASE_THROUGHPUT.set_rdl_tag("CFGROM_PDP_BASE_THROUGHPUT_");
    this.CFGROM_PDP_BASE_THROUGHPUT.set_reg_test_info(0, 0, 32);
    this.CFGROM_PDP_BASE_THROUGHPUT.build();
    this.default_map.add_reg(this.CFGROM_PDP_BASE_THROUGHPUT, `UVM_REG_ADDR_WIDTH'h170, "RO", 0);
    this.CFGROM_CDP_RDMA_DESC = new("CFGROM_CDP_RDMA_DESC");
    this.CFGROM_CDP_RDMA_DESC.configure(this, null, "");
    this.CFGROM_CDP_RDMA_DESC.set_rdl_tag("CFGROM_CDP_RDMA_DESC_");
    this.CFGROM_CDP_RDMA_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDP_RDMA_DESC.build();
    this.default_map.add_reg(this.CFGROM_CDP_RDMA_DESC, `UVM_REG_ADDR_WIDTH'h174, "RO", 0);
    this.CFGROM_CDP_RDMA_CAP_INCOMPAT = new("CFGROM_CDP_RDMA_CAP_INCOMPAT");
    this.CFGROM_CDP_RDMA_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CDP_RDMA_CAP_INCOMPAT.set_rdl_tag("CFGROM_CDP_RDMA_CAP_INCOMPAT_");
    this.CFGROM_CDP_RDMA_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDP_RDMA_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CDP_RDMA_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h178, "RO", 0);
    this.CFGROM_CDP_RDMA_CAP_COMPAT = new("CFGROM_CDP_RDMA_CAP_COMPAT");
    this.CFGROM_CDP_RDMA_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CDP_RDMA_CAP_COMPAT.set_rdl_tag("CFGROM_CDP_RDMA_CAP_COMPAT_");
    this.CFGROM_CDP_RDMA_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDP_RDMA_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CDP_RDMA_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h17c, "RO", 0);
    this.CFGROM_CDP_RDMA_BASE_ATOMIC_M = new("CFGROM_CDP_RDMA_BASE_ATOMIC_M");
    this.CFGROM_CDP_RDMA_BASE_ATOMIC_M.configure(this, null, "");
    this.CFGROM_CDP_RDMA_BASE_ATOMIC_M.set_rdl_tag("CFGROM_CDP_RDMA_BASE_ATOMIC_M_");
    this.CFGROM_CDP_RDMA_BASE_ATOMIC_M.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDP_RDMA_BASE_ATOMIC_M.build();
    this.default_map.add_reg(this.CFGROM_CDP_RDMA_BASE_ATOMIC_M, `UVM_REG_ADDR_WIDTH'h180, "RO", 0);
    this.CFGROM_CDP_RDMA_BASE_CDP_ID = new("CFGROM_CDP_RDMA_BASE_CDP_ID");
    this.CFGROM_CDP_RDMA_BASE_CDP_ID.configure(this, null, "");
    this.CFGROM_CDP_RDMA_BASE_CDP_ID.set_rdl_tag("CFGROM_CDP_RDMA_BASE_CDP_ID_");
    this.CFGROM_CDP_RDMA_BASE_CDP_ID.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDP_RDMA_BASE_CDP_ID.build();
    this.default_map.add_reg(this.CFGROM_CDP_RDMA_BASE_CDP_ID, `UVM_REG_ADDR_WIDTH'h184, "RO", 0);
    this.CFGROM_CDP_DESC = new("CFGROM_CDP_DESC");
    this.CFGROM_CDP_DESC.configure(this, null, "");
    this.CFGROM_CDP_DESC.set_rdl_tag("CFGROM_CDP_DESC_");
    this.CFGROM_CDP_DESC.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDP_DESC.build();
    this.default_map.add_reg(this.CFGROM_CDP_DESC, `UVM_REG_ADDR_WIDTH'h188, "RO", 0);
    this.CFGROM_CDP_CAP_INCOMPAT = new("CFGROM_CDP_CAP_INCOMPAT");
    this.CFGROM_CDP_CAP_INCOMPAT.configure(this, null, "");
    this.CFGROM_CDP_CAP_INCOMPAT.set_rdl_tag("CFGROM_CDP_CAP_INCOMPAT_");
    this.CFGROM_CDP_CAP_INCOMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDP_CAP_INCOMPAT.build();
    this.default_map.add_reg(this.CFGROM_CDP_CAP_INCOMPAT, `UVM_REG_ADDR_WIDTH'h18c, "RO", 0);
    this.CFGROM_CDP_CAP_COMPAT = new("CFGROM_CDP_CAP_COMPAT");
    this.CFGROM_CDP_CAP_COMPAT.configure(this, null, "");
    this.CFGROM_CDP_CAP_COMPAT.set_rdl_tag("CFGROM_CDP_CAP_COMPAT_");
    this.CFGROM_CDP_CAP_COMPAT.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDP_CAP_COMPAT.build();
    this.default_map.add_reg(this.CFGROM_CDP_CAP_COMPAT, `UVM_REG_ADDR_WIDTH'h190, "RO", 0);
    this.CFGROM_CDP_BASE_FEATURE_TYPES = new("CFGROM_CDP_BASE_FEATURE_TYPES");
    this.CFGROM_CDP_BASE_FEATURE_TYPES.configure(this, null, "");
    this.CFGROM_CDP_BASE_FEATURE_TYPES.set_rdl_tag("CFGROM_CDP_BASE_FEATURE_TYPES_");
    this.CFGROM_CDP_BASE_FEATURE_TYPES.set_reg_test_info(0, 0, 0);
    this.CFGROM_CDP_BASE_FEATURE_TYPES.build();
    this.default_map.add_reg(this.CFGROM_CDP_BASE_FEATURE_TYPES, `UVM_REG_ADDR_WIDTH'h194, "RO", 0);
    this.CFGROM_CDP_BASE_THROUGHPUT = new("CFGROM_CDP_BASE_THROUGHPUT");
    this.CFGROM_CDP_BASE_THROUGHPUT.configure(this, null, "");
    this.CFGROM_CDP_BASE_THROUGHPUT.set_rdl_tag("CFGROM_CDP_BASE_THROUGHPUT_");
    this.CFGROM_CDP_BASE_THROUGHPUT.set_reg_test_info(0, 0, 32);
    this.CFGROM_CDP_BASE_THROUGHPUT.build();
    this.default_map.add_reg(this.CFGROM_CDP_BASE_THROUGHPUT, `UVM_REG_ADDR_WIDTH'h198, "RO", 0);
    this.CFGROM_END_OF_LIST = new("CFGROM_END_OF_LIST");
    this.CFGROM_END_OF_LIST.configure(this, null, "");
    this.CFGROM_END_OF_LIST.set_rdl_tag("CFGROM_END_OF_LIST_");
    this.CFGROM_END_OF_LIST.set_reg_test_info(0, 0, 0);
    this.CFGROM_END_OF_LIST.build();
    this.default_map.add_reg(this.CFGROM_END_OF_LIST, `UVM_REG_ADDR_WIDTH'h19c, "RO", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_CFGROM_NVDLA_CFGROM)
endclass : block_addrmap_NVDLA_CFGROM_NVDLA_CFGROM

// Base block
class block_addrmap_NVDLA_CFGROM extends uvm_reg_block_rdl;
  rand block_addrmap_NVDLA_CFGROM_NVDLA_CFGROM NVDLA_CFGROM;
  
  function new(string name = "block_addrmap_NVDLA_CFGROM");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", `UVM_REG_ADDR_WIDTH'h0, 4, UVM_LITTLE_ENDIAN, 1);
    this.set_rdl_address_map(1);
    this.set_rdl_address_map_hdl_path({`ADDRMAP_NVDLA_CFGROM_PIO_INSTANCE_PATH, ".pio_logic"});
    this.NVDLA_CFGROM = block_addrmap_NVDLA_CFGROM_NVDLA_CFGROM::type_id::create("NVDLA_CFGROM",, get_full_name());
    this.NVDLA_CFGROM.configure(this, "");
    this.NVDLA_CFGROM.set_rdl_tag("NVDLA_CFGROM_");
    this.NVDLA_CFGROM.build();
    this.default_map.add_submap(this.NVDLA_CFGROM.default_map, `UVM_REG_ADDR_WIDTH'h0);
    set_hdl_path_root({`ADDRMAP_NVDLA_CFGROM_PIO_INSTANCE_PATH, ".pio_logic"});
    this.add_callbacks();
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_CFGROM)
endclass : block_addrmap_NVDLA_CFGROM
