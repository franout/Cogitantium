//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_SDP.rdl
//   Parms: opendla.parms
//   Date: Tue Feb 18 10:18:57 CET 2020
//

import uvm_pkg::*;
import ordt_uvm_reg_pkg::*;

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_SDP_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_SDP_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_POINTER

// S_LUT_ACCESS_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_ADDR;
  rand uvm_reg_field_rdl LUT_TABLE_ID;
  rand uvm_reg_field_rdl LUT_ACCESS_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_ADDR = new("LUT_ADDR");
    this.LUT_ADDR.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_ADDR.configure(this, 10, 0, "RW", 0, 10'h0, 1, 1, 0);
    this.LUT_ADDR.add_def_property("spec_access", "rwt");
    this.LUT_ADDR.add_def_property("spec_sw_default", "0x0");
    this.LUT_ADDR.add_def_property("sw_default_mask", "0x0");
    this.LUT_ADDR.add_def_property("reset_mask", "0x3ff");
    this.LUT_TABLE_ID = new("LUT_TABLE_ID");
    this.LUT_TABLE_ID.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_TABLE_ID.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_TABLE_ID.add_def_property("spec_access", "rw");
    this.LUT_TABLE_ID.add_def_property("spec_sw_default", "0x0");
    this.LUT_TABLE_ID.add_def_property("sw_default_mask", "0x0");
    this.LUT_TABLE_ID.add_def_property("reset_mask", "0x1");
    this.LUT_ACCESS_TYPE = new("LUT_ACCESS_TYPE");
    this.LUT_ACCESS_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_ACCESS_TYPE.configure(this, 1, 17, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_ACCESS_TYPE.add_def_property("spec_access", "rw");
    this.LUT_ACCESS_TYPE.add_def_property("spec_sw_default", "0x0");
    this.LUT_ACCESS_TYPE.add_def_property("sw_default_mask", "0x0");
    this.LUT_ACCESS_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_ADDR"}, 0, 10);
    add_hdl_path_slice({rdl_reg_name, "LUT_TABLE_ID"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_ACCESS_TYPE"}, 17, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_CFG

// S_LUT_ACCESS_DATA
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_DATA extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_DATA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_DATA");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_DATA = new("LUT_DATA");
    this.LUT_DATA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_DATA.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.LUT_DATA.add_def_property("spec_access", "rwto");
    this.LUT_DATA.add_def_property("spec_sw_default", "0x0");
    this.LUT_DATA.add_def_property("sw_default_mask", "0x0");
    this.LUT_DATA.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_DATA"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_DATA

// S_LUT_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_FUNCTION;
  rand uvm_reg_field_rdl LUT_UFLOW_PRIORITY;
  rand uvm_reg_field_rdl LUT_OFLOW_PRIORITY;
  rand uvm_reg_field_rdl LUT_HYBRID_PRIORITY;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_FUNCTION = new("LUT_LE_FUNCTION");
    this.LUT_LE_FUNCTION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_FUNCTION.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_LE_FUNCTION.add_def_property("spec_access", "rw");
    this.LUT_LE_FUNCTION.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_FUNCTION.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_FUNCTION.add_def_property("reset_mask", "0x1");
    this.LUT_UFLOW_PRIORITY = new("LUT_UFLOW_PRIORITY");
    this.LUT_UFLOW_PRIORITY.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_UFLOW_PRIORITY.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_UFLOW_PRIORITY.add_def_property("spec_access", "rw");
    this.LUT_UFLOW_PRIORITY.add_def_property("spec_sw_default", "0x0");
    this.LUT_UFLOW_PRIORITY.add_def_property("sw_default_mask", "0x0");
    this.LUT_UFLOW_PRIORITY.add_def_property("reset_mask", "0x1");
    this.LUT_OFLOW_PRIORITY = new("LUT_OFLOW_PRIORITY");
    this.LUT_OFLOW_PRIORITY.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_OFLOW_PRIORITY.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_OFLOW_PRIORITY.add_def_property("spec_access", "rw");
    this.LUT_OFLOW_PRIORITY.add_def_property("spec_sw_default", "0x0");
    this.LUT_OFLOW_PRIORITY.add_def_property("sw_default_mask", "0x0");
    this.LUT_OFLOW_PRIORITY.add_def_property("reset_mask", "0x1");
    this.LUT_HYBRID_PRIORITY = new("LUT_HYBRID_PRIORITY");
    this.LUT_HYBRID_PRIORITY.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_HYBRID_PRIORITY.configure(this, 1, 6, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_HYBRID_PRIORITY.add_def_property("spec_access", "rw");
    this.LUT_HYBRID_PRIORITY.add_def_property("spec_sw_default", "0x0");
    this.LUT_HYBRID_PRIORITY.add_def_property("sw_default_mask", "0x0");
    this.LUT_HYBRID_PRIORITY.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_FUNCTION"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_UFLOW_PRIORITY"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_OFLOW_PRIORITY"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_HYBRID_PRIORITY"}, 6, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_CFG

// S_LUT_INFO
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_INFO extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_INDEX_OFFSET;
  rand uvm_reg_field_rdl LUT_LE_INDEX_SELECT;
  rand uvm_reg_field_rdl LUT_LO_INDEX_SELECT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_INFO");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_INDEX_OFFSET = new("LUT_LE_INDEX_OFFSET");
    this.LUT_LE_INDEX_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_INDEX_OFFSET.configure(this, 8, 0, "RW", 0, 8'h0, 1, 1, 0);
    this.LUT_LE_INDEX_OFFSET.add_def_property("spec_access", "rw");
    this.LUT_LE_INDEX_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_INDEX_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_INDEX_OFFSET.add_def_property("reset_mask", "0xff");
    this.LUT_LE_INDEX_SELECT = new("LUT_LE_INDEX_SELECT");
    this.LUT_LE_INDEX_SELECT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_INDEX_SELECT.configure(this, 8, 8, "RW", 0, 8'h0, 1, 1, 0);
    this.LUT_LE_INDEX_SELECT.add_def_property("spec_access", "rw");
    this.LUT_LE_INDEX_SELECT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_INDEX_SELECT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_INDEX_SELECT.add_def_property("reset_mask", "0xff");
    this.LUT_LO_INDEX_SELECT = new("LUT_LO_INDEX_SELECT");
    this.LUT_LO_INDEX_SELECT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_INDEX_SELECT.configure(this, 8, 16, "RW", 0, 8'h0, 1, 1, 0);
    this.LUT_LO_INDEX_SELECT.add_def_property("spec_access", "rw");
    this.LUT_LO_INDEX_SELECT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_INDEX_SELECT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_INDEX_SELECT.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_INDEX_OFFSET"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_INDEX_SELECT"}, 8, 8);
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_INDEX_SELECT"}, 16, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_INFO

// S_LUT_LE_START
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_START extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_START;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_START");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_START = new("LUT_LE_START");
    this.LUT_LE_START.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_START.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LE_START.add_def_property("spec_access", "rw");
    this.LUT_LE_START.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_START.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_START.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_START"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_START

// S_LUT_LE_END
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_END extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_END;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_END");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_END = new("LUT_LE_END");
    this.LUT_LE_END.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_END.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LE_END.add_def_property("spec_access", "rw");
    this.LUT_LE_END.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_END.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_END.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_END"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_END

// S_LUT_LO_START
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_START extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_START;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_START");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_START = new("LUT_LO_START");
    this.LUT_LO_START.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_START.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LO_START.add_def_property("spec_access", "rw");
    this.LUT_LO_START.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_START.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_START.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_START"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_START

// S_LUT_LO_END
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_END extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_END;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_END");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_END = new("LUT_LO_END");
    this.LUT_LO_END.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_END.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LO_END.add_def_property("spec_access", "rw");
    this.LUT_LO_END.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_END.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_END.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_END"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_END

// S_LUT_LE_SLOPE_SCALE
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_UFLOW_SCALE;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_OFLOW_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_SLOPE_UFLOW_SCALE = new("LUT_LE_SLOPE_UFLOW_SCALE");
    this.LUT_LE_SLOPE_UFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_UFLOW_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    this.LUT_LE_SLOPE_OFLOW_SCALE = new("LUT_LE_SLOPE_OFLOW_SCALE");
    this.LUT_LE_SLOPE_OFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_OFLOW_SCALE.configure(this, 16, 16, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_UFLOW_SCALE"}, 0, 16);
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_OFLOW_SCALE"}, 16, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE

// S_LUT_LE_SLOPE_SHIFT
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_UFLOW_SHIFT;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_OFLOW_SHIFT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_SLOPE_UFLOW_SHIFT = new("LUT_LE_SLOPE_UFLOW_SHIFT");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_UFLOW_SHIFT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    this.LUT_LE_SLOPE_OFLOW_SHIFT = new("LUT_LE_SLOPE_OFLOW_SHIFT");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_OFLOW_SHIFT.configure(this, 5, 5, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_UFLOW_SHIFT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_OFLOW_SHIFT"}, 5, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT

// S_LUT_LO_SLOPE_SCALE
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_UFLOW_SCALE;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_OFLOW_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_SLOPE_UFLOW_SCALE = new("LUT_LO_SLOPE_UFLOW_SCALE");
    this.LUT_LO_SLOPE_UFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_UFLOW_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    this.LUT_LO_SLOPE_OFLOW_SCALE = new("LUT_LO_SLOPE_OFLOW_SCALE");
    this.LUT_LO_SLOPE_OFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_OFLOW_SCALE.configure(this, 16, 16, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_UFLOW_SCALE"}, 0, 16);
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_OFLOW_SCALE"}, 16, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE

// S_LUT_LO_SLOPE_SHIFT
class reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_UFLOW_SHIFT;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_OFLOW_SHIFT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_SLOPE_UFLOW_SHIFT = new("LUT_LO_SLOPE_UFLOW_SHIFT");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_UFLOW_SHIFT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    this.LUT_LO_SLOPE_OFLOW_SHIFT = new("LUT_LO_SLOPE_OFLOW_SHIFT");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_OFLOW_SHIFT.configure(this, 5, 5, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_UFLOW_SHIFT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_OFLOW_SHIFT"}, 5, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_SDP_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_OP_ENABLE

// D_DATA_CUBE_WIDTH
class reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WIDTH = new("WIDTH");
    this.WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.WIDTH.add_def_property("spec_access", "rw");
    this.WIDTH.add_def_property("spec_sw_default", "0x0");
    this.WIDTH.add_def_property("sw_default_mask", "0x0");
    this.WIDTH.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WIDTH"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_WIDTH

// D_DATA_CUBE_HEIGHT
class reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_HEIGHT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_HEIGHT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.HEIGHT = new("HEIGHT");
    this.HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.HEIGHT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.HEIGHT.add_def_property("spec_access", "rw");
    this.HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "HEIGHT"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_HEIGHT

// D_DATA_CUBE_CHANNEL
class reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_CHANNEL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_CHANNEL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CHANNEL = new("CHANNEL");
    this.CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CHANNEL.add_def_property("spec_access", "rw");
    this.CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_CHANNEL

// D_DST_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_BASE_ADDR_LOW = new("DST_BASE_ADDR_LOW");
    this.DST_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.DST_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.DST_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.DST_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_LOW

// D_DST_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_BASE_ADDR_HIGH = new("DST_BASE_ADDR_HIGH");
    this.DST_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.DST_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.DST_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.DST_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_HIGH

// D_DST_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DST_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DST_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_LINE_STRIDE = new("DST_LINE_STRIDE");
    this.DST_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.DST_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DST_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DST_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DST_LINE_STRIDE

// D_DST_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DST_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DST_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_SURFACE_STRIDE = new("DST_SURFACE_STRIDE");
    this.DST_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.DST_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DST_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DST_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DST_SURFACE_STRIDE

// D_DP_BS_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_BYPASS;
  rand uvm_reg_field_rdl BS_ALU_BYPASS;
  rand uvm_reg_field_rdl BS_ALU_ALGO;
  rand uvm_reg_field_rdl BS_MUL_BYPASS;
  rand uvm_reg_field_rdl BS_MUL_PRELU;
  rand uvm_reg_field_rdl BS_RELU_BYPASS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_BYPASS = new("BS_BYPASS");
    this.BS_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_BYPASS.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.BS_BYPASS.add_def_property("spec_access", "rw");
    this.BS_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BS_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BS_BYPASS.add_def_property("reset_mask", "0x1");
    this.BS_ALU_BYPASS = new("BS_ALU_BYPASS");
    this.BS_ALU_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_ALU_BYPASS.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.BS_ALU_BYPASS.add_def_property("spec_access", "rw");
    this.BS_ALU_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BS_ALU_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BS_ALU_BYPASS.add_def_property("reset_mask", "0x1");
    this.BS_ALU_ALGO = new("BS_ALU_ALGO");
    this.BS_ALU_ALGO.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_ALU_ALGO.configure(this, 2, 2, "RW", 0, 2'h0, 1, 1, 0);
    this.BS_ALU_ALGO.add_def_property("spec_access", "rw");
    this.BS_ALU_ALGO.add_def_property("spec_sw_default", "0x0");
    this.BS_ALU_ALGO.add_def_property("sw_default_mask", "0x0");
    this.BS_ALU_ALGO.add_def_property("reset_mask", "0x3");
    this.BS_MUL_BYPASS = new("BS_MUL_BYPASS");
    this.BS_MUL_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_MUL_BYPASS.configure(this, 1, 4, "RW", 0, 1'h1, 1, 1, 0);
    this.BS_MUL_BYPASS.add_def_property("spec_access", "rw");
    this.BS_MUL_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BS_MUL_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BS_MUL_BYPASS.add_def_property("reset_mask", "0x1");
    this.BS_MUL_PRELU = new("BS_MUL_PRELU");
    this.BS_MUL_PRELU.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_MUL_PRELU.configure(this, 1, 5, "RW", 0, 1'h1, 1, 1, 0);
    this.BS_MUL_PRELU.add_def_property("spec_access", "rw");
    this.BS_MUL_PRELU.add_def_property("spec_sw_default", "0x0");
    this.BS_MUL_PRELU.add_def_property("sw_default_mask", "0x0");
    this.BS_MUL_PRELU.add_def_property("reset_mask", "0x1");
    this.BS_RELU_BYPASS = new("BS_RELU_BYPASS");
    this.BS_RELU_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_RELU_BYPASS.configure(this, 1, 6, "RW", 0, 1'h1, 1, 1, 0);
    this.BS_RELU_BYPASS.add_def_property("spec_access", "rw");
    this.BS_RELU_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BS_RELU_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BS_RELU_BYPASS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_BYPASS"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "BS_ALU_BYPASS"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "BS_ALU_ALGO"}, 2, 2);
    add_hdl_path_slice({rdl_reg_name, "BS_MUL_BYPASS"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "BS_MUL_PRELU"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "BS_RELU_BYPASS"}, 6, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_CFG

// D_DP_BS_ALU_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_ALU_SRC;
  rand uvm_reg_field_rdl BS_ALU_SHIFT_VALUE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_ALU_SRC = new("BS_ALU_SRC");
    this.BS_ALU_SRC.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_ALU_SRC.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.BS_ALU_SRC.add_def_property("spec_access", "rw");
    this.BS_ALU_SRC.add_def_property("spec_sw_default", "0x0");
    this.BS_ALU_SRC.add_def_property("sw_default_mask", "0x0");
    this.BS_ALU_SRC.add_def_property("reset_mask", "0x1");
    this.BS_ALU_SHIFT_VALUE = new("BS_ALU_SHIFT_VALUE");
    this.BS_ALU_SHIFT_VALUE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_ALU_SHIFT_VALUE.configure(this, 6, 8, "RW", 0, 6'h0, 1, 1, 0);
    this.BS_ALU_SHIFT_VALUE.add_def_property("spec_access", "rw");
    this.BS_ALU_SHIFT_VALUE.add_def_property("spec_sw_default", "0x0");
    this.BS_ALU_SHIFT_VALUE.add_def_property("sw_default_mask", "0x0");
    this.BS_ALU_SHIFT_VALUE.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_ALU_SRC"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "BS_ALU_SHIFT_VALUE"}, 8, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_CFG

// D_DP_BS_ALU_SRC_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_ALU_OPERAND;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_ALU_OPERAND = new("BS_ALU_OPERAND");
    this.BS_ALU_OPERAND.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_ALU_OPERAND.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.BS_ALU_OPERAND.add_def_property("spec_access", "rw");
    this.BS_ALU_OPERAND.add_def_property("spec_sw_default", "0x0");
    this.BS_ALU_OPERAND.add_def_property("sw_default_mask", "0x0");
    this.BS_ALU_OPERAND.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_ALU_OPERAND"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE

// D_DP_BS_MUL_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_MUL_SRC;
  rand uvm_reg_field_rdl BS_MUL_SHIFT_VALUE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_MUL_SRC = new("BS_MUL_SRC");
    this.BS_MUL_SRC.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_MUL_SRC.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.BS_MUL_SRC.add_def_property("spec_access", "rw");
    this.BS_MUL_SRC.add_def_property("spec_sw_default", "0x0");
    this.BS_MUL_SRC.add_def_property("sw_default_mask", "0x0");
    this.BS_MUL_SRC.add_def_property("reset_mask", "0x1");
    this.BS_MUL_SHIFT_VALUE = new("BS_MUL_SHIFT_VALUE");
    this.BS_MUL_SHIFT_VALUE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_MUL_SHIFT_VALUE.configure(this, 8, 8, "RW", 0, 8'h0, 1, 1, 0);
    this.BS_MUL_SHIFT_VALUE.add_def_property("spec_access", "rw");
    this.BS_MUL_SHIFT_VALUE.add_def_property("spec_sw_default", "0x0");
    this.BS_MUL_SHIFT_VALUE.add_def_property("sw_default_mask", "0x0");
    this.BS_MUL_SHIFT_VALUE.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_MUL_SRC"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "BS_MUL_SHIFT_VALUE"}, 8, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_CFG

// D_DP_BS_MUL_SRC_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_MUL_OPERAND;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_MUL_OPERAND = new("BS_MUL_OPERAND");
    this.BS_MUL_OPERAND.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_MUL_OPERAND.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.BS_MUL_OPERAND.add_def_property("spec_access", "rw");
    this.BS_MUL_OPERAND.add_def_property("spec_sw_default", "0x0");
    this.BS_MUL_OPERAND.add_def_property("sw_default_mask", "0x0");
    this.BS_MUL_OPERAND.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_MUL_OPERAND"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE

// D_DP_BN_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_BYPASS;
  rand uvm_reg_field_rdl BN_ALU_BYPASS;
  rand uvm_reg_field_rdl BN_ALU_ALGO;
  rand uvm_reg_field_rdl BN_MUL_BYPASS;
  rand uvm_reg_field_rdl BN_MUL_PRELU;
  rand uvm_reg_field_rdl BN_RELU_BYPASS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_BYPASS = new("BN_BYPASS");
    this.BN_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_BYPASS.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.BN_BYPASS.add_def_property("spec_access", "rw");
    this.BN_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BN_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BN_BYPASS.add_def_property("reset_mask", "0x1");
    this.BN_ALU_BYPASS = new("BN_ALU_BYPASS");
    this.BN_ALU_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_ALU_BYPASS.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.BN_ALU_BYPASS.add_def_property("spec_access", "rw");
    this.BN_ALU_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BN_ALU_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BN_ALU_BYPASS.add_def_property("reset_mask", "0x1");
    this.BN_ALU_ALGO = new("BN_ALU_ALGO");
    this.BN_ALU_ALGO.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_ALU_ALGO.configure(this, 2, 2, "RW", 0, 2'h0, 1, 1, 0);
    this.BN_ALU_ALGO.add_def_property("spec_access", "rw");
    this.BN_ALU_ALGO.add_def_property("spec_sw_default", "0x0");
    this.BN_ALU_ALGO.add_def_property("sw_default_mask", "0x0");
    this.BN_ALU_ALGO.add_def_property("reset_mask", "0x3");
    this.BN_MUL_BYPASS = new("BN_MUL_BYPASS");
    this.BN_MUL_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_MUL_BYPASS.configure(this, 1, 4, "RW", 0, 1'h1, 1, 1, 0);
    this.BN_MUL_BYPASS.add_def_property("spec_access", "rw");
    this.BN_MUL_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BN_MUL_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BN_MUL_BYPASS.add_def_property("reset_mask", "0x1");
    this.BN_MUL_PRELU = new("BN_MUL_PRELU");
    this.BN_MUL_PRELU.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_MUL_PRELU.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.BN_MUL_PRELU.add_def_property("spec_access", "rw");
    this.BN_MUL_PRELU.add_def_property("spec_sw_default", "0x0");
    this.BN_MUL_PRELU.add_def_property("sw_default_mask", "0x0");
    this.BN_MUL_PRELU.add_def_property("reset_mask", "0x1");
    this.BN_RELU_BYPASS = new("BN_RELU_BYPASS");
    this.BN_RELU_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_RELU_BYPASS.configure(this, 1, 6, "RW", 0, 1'h1, 1, 1, 0);
    this.BN_RELU_BYPASS.add_def_property("spec_access", "rw");
    this.BN_RELU_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.BN_RELU_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.BN_RELU_BYPASS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_BYPASS"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "BN_ALU_BYPASS"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "BN_ALU_ALGO"}, 2, 2);
    add_hdl_path_slice({rdl_reg_name, "BN_MUL_BYPASS"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "BN_MUL_PRELU"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "BN_RELU_BYPASS"}, 6, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_CFG

// D_DP_BN_ALU_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_ALU_SRC;
  rand uvm_reg_field_rdl BN_ALU_SHIFT_VALUE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_ALU_SRC = new("BN_ALU_SRC");
    this.BN_ALU_SRC.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_ALU_SRC.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.BN_ALU_SRC.add_def_property("spec_access", "rw");
    this.BN_ALU_SRC.add_def_property("spec_sw_default", "0x0");
    this.BN_ALU_SRC.add_def_property("sw_default_mask", "0x0");
    this.BN_ALU_SRC.add_def_property("reset_mask", "0x1");
    this.BN_ALU_SHIFT_VALUE = new("BN_ALU_SHIFT_VALUE");
    this.BN_ALU_SHIFT_VALUE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_ALU_SHIFT_VALUE.configure(this, 6, 8, "RW", 0, 6'h0, 1, 1, 0);
    this.BN_ALU_SHIFT_VALUE.add_def_property("spec_access", "rw");
    this.BN_ALU_SHIFT_VALUE.add_def_property("spec_sw_default", "0x0");
    this.BN_ALU_SHIFT_VALUE.add_def_property("sw_default_mask", "0x0");
    this.BN_ALU_SHIFT_VALUE.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_ALU_SRC"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "BN_ALU_SHIFT_VALUE"}, 8, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_CFG

// D_DP_BN_ALU_SRC_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_ALU_OPERAND;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_ALU_OPERAND = new("BN_ALU_OPERAND");
    this.BN_ALU_OPERAND.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_ALU_OPERAND.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.BN_ALU_OPERAND.add_def_property("spec_access", "rw");
    this.BN_ALU_OPERAND.add_def_property("spec_sw_default", "0x0");
    this.BN_ALU_OPERAND.add_def_property("sw_default_mask", "0x0");
    this.BN_ALU_OPERAND.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_ALU_OPERAND"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE

// D_DP_BN_MUL_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_MUL_SRC;
  rand uvm_reg_field_rdl BN_MUL_SHIFT_VALUE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_MUL_SRC = new("BN_MUL_SRC");
    this.BN_MUL_SRC.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_MUL_SRC.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.BN_MUL_SRC.add_def_property("spec_access", "rw");
    this.BN_MUL_SRC.add_def_property("spec_sw_default", "0x0");
    this.BN_MUL_SRC.add_def_property("sw_default_mask", "0x0");
    this.BN_MUL_SRC.add_def_property("reset_mask", "0x1");
    this.BN_MUL_SHIFT_VALUE = new("BN_MUL_SHIFT_VALUE");
    this.BN_MUL_SHIFT_VALUE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_MUL_SHIFT_VALUE.configure(this, 8, 8, "RW", 0, 8'h0, 1, 1, 0);
    this.BN_MUL_SHIFT_VALUE.add_def_property("spec_access", "rw");
    this.BN_MUL_SHIFT_VALUE.add_def_property("spec_sw_default", "0x0");
    this.BN_MUL_SHIFT_VALUE.add_def_property("sw_default_mask", "0x0");
    this.BN_MUL_SHIFT_VALUE.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_MUL_SRC"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "BN_MUL_SHIFT_VALUE"}, 8, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_CFG

// D_DP_BN_MUL_SRC_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_MUL_OPERAND;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_MUL_OPERAND = new("BN_MUL_OPERAND");
    this.BN_MUL_OPERAND.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_MUL_OPERAND.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.BN_MUL_OPERAND.add_def_property("spec_access", "rw");
    this.BN_MUL_OPERAND.add_def_property("spec_sw_default", "0x0");
    this.BN_MUL_OPERAND.add_def_property("sw_default_mask", "0x0");
    this.BN_MUL_OPERAND.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_MUL_OPERAND"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE

// D_DP_EW_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_BYPASS;
  rand uvm_reg_field_rdl EW_ALU_BYPASS;
  rand uvm_reg_field_rdl EW_ALU_ALGO;
  rand uvm_reg_field_rdl EW_MUL_BYPASS;
  rand uvm_reg_field_rdl EW_MUL_PRELU;
  rand uvm_reg_field_rdl EW_LUT_BYPASS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_BYPASS = new("EW_BYPASS");
    this.EW_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_BYPASS.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.EW_BYPASS.add_def_property("spec_access", "rw");
    this.EW_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.EW_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.EW_BYPASS.add_def_property("reset_mask", "0x1");
    this.EW_ALU_BYPASS = new("EW_ALU_BYPASS");
    this.EW_ALU_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_BYPASS.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.EW_ALU_BYPASS.add_def_property("spec_access", "rw");
    this.EW_ALU_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.EW_ALU_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_BYPASS.add_def_property("reset_mask", "0x1");
    this.EW_ALU_ALGO = new("EW_ALU_ALGO");
    this.EW_ALU_ALGO.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_ALGO.configure(this, 2, 2, "RW", 0, 2'h0, 1, 1, 0);
    this.EW_ALU_ALGO.add_def_property("spec_access", "rw");
    this.EW_ALU_ALGO.add_def_property("spec_sw_default", "0x0");
    this.EW_ALU_ALGO.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_ALGO.add_def_property("reset_mask", "0x3");
    this.EW_MUL_BYPASS = new("EW_MUL_BYPASS");
    this.EW_MUL_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_BYPASS.configure(this, 1, 4, "RW", 0, 1'h1, 1, 1, 0);
    this.EW_MUL_BYPASS.add_def_property("spec_access", "rw");
    this.EW_MUL_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.EW_MUL_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_BYPASS.add_def_property("reset_mask", "0x1");
    this.EW_MUL_PRELU = new("EW_MUL_PRELU");
    this.EW_MUL_PRELU.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_PRELU.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.EW_MUL_PRELU.add_def_property("spec_access", "rw");
    this.EW_MUL_PRELU.add_def_property("spec_sw_default", "0x0");
    this.EW_MUL_PRELU.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_PRELU.add_def_property("reset_mask", "0x1");
    this.EW_LUT_BYPASS = new("EW_LUT_BYPASS");
    this.EW_LUT_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_LUT_BYPASS.configure(this, 1, 6, "RW", 0, 1'h1, 1, 1, 0);
    this.EW_LUT_BYPASS.add_def_property("spec_access", "rw");
    this.EW_LUT_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.EW_LUT_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.EW_LUT_BYPASS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_BYPASS"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_BYPASS"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_ALGO"}, 2, 2);
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_BYPASS"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_PRELU"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "EW_LUT_BYPASS"}, 6, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_CFG

// D_DP_EW_ALU_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_ALU_SRC;
  rand uvm_reg_field_rdl EW_ALU_CVT_BYPASS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_ALU_SRC = new("EW_ALU_SRC");
    this.EW_ALU_SRC.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_SRC.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.EW_ALU_SRC.add_def_property("spec_access", "rw");
    this.EW_ALU_SRC.add_def_property("spec_sw_default", "0x0");
    this.EW_ALU_SRC.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_SRC.add_def_property("reset_mask", "0x1");
    this.EW_ALU_CVT_BYPASS = new("EW_ALU_CVT_BYPASS");
    this.EW_ALU_CVT_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_CVT_BYPASS.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.EW_ALU_CVT_BYPASS.add_def_property("spec_access", "rw");
    this.EW_ALU_CVT_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.EW_ALU_CVT_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_CVT_BYPASS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_SRC"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_CVT_BYPASS"}, 1, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CFG

// D_DP_EW_ALU_SRC_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_ALU_OPERAND;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_ALU_OPERAND = new("EW_ALU_OPERAND");
    this.EW_ALU_OPERAND.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_OPERAND.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_ALU_OPERAND.add_def_property("spec_access", "rw");
    this.EW_ALU_OPERAND.add_def_property("spec_sw_default", "0x0");
    this.EW_ALU_OPERAND.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_OPERAND.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_OPERAND"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE

// D_DP_EW_ALU_CVT_OFFSET_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_ALU_CVT_OFFSET;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_ALU_CVT_OFFSET = new("EW_ALU_CVT_OFFSET");
    this.EW_ALU_CVT_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_CVT_OFFSET.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_ALU_CVT_OFFSET.add_def_property("spec_access", "rw");
    this.EW_ALU_CVT_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.EW_ALU_CVT_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_CVT_OFFSET.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_CVT_OFFSET"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE

// D_DP_EW_ALU_CVT_SCALE_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_ALU_CVT_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_ALU_CVT_SCALE = new("EW_ALU_CVT_SCALE");
    this.EW_ALU_CVT_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_CVT_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.EW_ALU_CVT_SCALE.add_def_property("spec_access", "rw");
    this.EW_ALU_CVT_SCALE.add_def_property("spec_sw_default", "0x0");
    this.EW_ALU_CVT_SCALE.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_CVT_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_CVT_SCALE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE

// D_DP_EW_ALU_CVT_TRUNCATE_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_ALU_CVT_TRUNCATE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_ALU_CVT_TRUNCATE = new("EW_ALU_CVT_TRUNCATE");
    this.EW_ALU_CVT_TRUNCATE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_ALU_CVT_TRUNCATE.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.EW_ALU_CVT_TRUNCATE.add_def_property("spec_access", "rw");
    this.EW_ALU_CVT_TRUNCATE.add_def_property("spec_sw_default", "0x0");
    this.EW_ALU_CVT_TRUNCATE.add_def_property("sw_default_mask", "0x0");
    this.EW_ALU_CVT_TRUNCATE.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_ALU_CVT_TRUNCATE"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE

// D_DP_EW_MUL_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_MUL_SRC;
  rand uvm_reg_field_rdl EW_MUL_CVT_BYPASS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_MUL_SRC = new("EW_MUL_SRC");
    this.EW_MUL_SRC.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_SRC.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.EW_MUL_SRC.add_def_property("spec_access", "rw");
    this.EW_MUL_SRC.add_def_property("spec_sw_default", "0x0");
    this.EW_MUL_SRC.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_SRC.add_def_property("reset_mask", "0x1");
    this.EW_MUL_CVT_BYPASS = new("EW_MUL_CVT_BYPASS");
    this.EW_MUL_CVT_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_CVT_BYPASS.configure(this, 1, 1, "RW", 0, 1'h1, 1, 1, 0);
    this.EW_MUL_CVT_BYPASS.add_def_property("spec_access", "rw");
    this.EW_MUL_CVT_BYPASS.add_def_property("spec_sw_default", "0x1");
    this.EW_MUL_CVT_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_CVT_BYPASS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_SRC"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_CVT_BYPASS"}, 1, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CFG

// D_DP_EW_MUL_SRC_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_MUL_OPERAND;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_MUL_OPERAND = new("EW_MUL_OPERAND");
    this.EW_MUL_OPERAND.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_OPERAND.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_MUL_OPERAND.add_def_property("spec_access", "rw");
    this.EW_MUL_OPERAND.add_def_property("spec_sw_default", "0x0");
    this.EW_MUL_OPERAND.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_OPERAND.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_OPERAND"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE

// D_DP_EW_MUL_CVT_OFFSET_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_MUL_CVT_OFFSET;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_MUL_CVT_OFFSET = new("EW_MUL_CVT_OFFSET");
    this.EW_MUL_CVT_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_CVT_OFFSET.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_MUL_CVT_OFFSET.add_def_property("spec_access", "rw");
    this.EW_MUL_CVT_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.EW_MUL_CVT_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_CVT_OFFSET.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_CVT_OFFSET"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE

// D_DP_EW_MUL_CVT_SCALE_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_MUL_CVT_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_MUL_CVT_SCALE = new("EW_MUL_CVT_SCALE");
    this.EW_MUL_CVT_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_CVT_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.EW_MUL_CVT_SCALE.add_def_property("spec_access", "rw");
    this.EW_MUL_CVT_SCALE.add_def_property("spec_sw_default", "0x0");
    this.EW_MUL_CVT_SCALE.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_CVT_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_CVT_SCALE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE

// D_DP_EW_MUL_CVT_TRUNCATE_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_MUL_CVT_TRUNCATE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_MUL_CVT_TRUNCATE = new("EW_MUL_CVT_TRUNCATE");
    this.EW_MUL_CVT_TRUNCATE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_MUL_CVT_TRUNCATE.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.EW_MUL_CVT_TRUNCATE.add_def_property("spec_access", "rw");
    this.EW_MUL_CVT_TRUNCATE.add_def_property("spec_sw_default", "0x0");
    this.EW_MUL_CVT_TRUNCATE.add_def_property("sw_default_mask", "0x0");
    this.EW_MUL_CVT_TRUNCATE.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_MUL_CVT_TRUNCATE"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE

// D_DP_EW_TRUNCATE_VALUE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_TRUNCATE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_TRUNCATE = new("EW_TRUNCATE");
    this.EW_TRUNCATE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_TRUNCATE.configure(this, 10, 0, "RW", 0, 10'h0, 1, 1, 1);
    this.EW_TRUNCATE.add_def_property("spec_access", "rw");
    this.EW_TRUNCATE.add_def_property("spec_sw_default", "0x0");
    this.EW_TRUNCATE.add_def_property("sw_default_mask", "0x0");
    this.EW_TRUNCATE.add_def_property("reset_mask", "0x3ff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_TRUNCATE"}, 0, 10);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE

// D_FEATURE_MODE_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_FEATURE_MODE_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl FLYING_MODE;
  rand uvm_reg_field_rdl OUTPUT_DST;
  rand uvm_reg_field_rdl WINOGRAD;
  rand uvm_reg_field_rdl NAN_TO_ZERO;
  rand uvm_reg_field_rdl BATCH_NUMBER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_FEATURE_MODE_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.FLYING_MODE = new("FLYING_MODE");
    this.FLYING_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.FLYING_MODE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.FLYING_MODE.add_def_property("spec_access", "rw");
    this.FLYING_MODE.add_def_property("spec_sw_default", "0x0");
    this.FLYING_MODE.add_def_property("sw_default_mask", "0x0");
    this.FLYING_MODE.add_def_property("reset_mask", "0x1");
    this.OUTPUT_DST = new("OUTPUT_DST");
    this.OUTPUT_DST.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OUTPUT_DST.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.OUTPUT_DST.add_def_property("spec_access", "rw");
    this.OUTPUT_DST.add_def_property("spec_sw_default", "0x0");
    this.OUTPUT_DST.add_def_property("sw_default_mask", "0x0");
    this.OUTPUT_DST.add_def_property("reset_mask", "0x1");
    this.WINOGRAD = new("WINOGRAD");
    this.WINOGRAD.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WINOGRAD.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.WINOGRAD.add_def_property("spec_access", "rw");
    this.WINOGRAD.add_def_property("spec_sw_default", "0x0");
    this.WINOGRAD.add_def_property("sw_default_mask", "0x0");
    this.WINOGRAD.add_def_property("reset_mask", "0x1");
    this.NAN_TO_ZERO = new("NAN_TO_ZERO");
    this.NAN_TO_ZERO.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NAN_TO_ZERO.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.NAN_TO_ZERO.add_def_property("spec_access", "rw");
    this.NAN_TO_ZERO.add_def_property("spec_sw_default", "0x0");
    this.NAN_TO_ZERO.add_def_property("sw_default_mask", "0x0");
    this.NAN_TO_ZERO.add_def_property("reset_mask", "0x1");
    this.BATCH_NUMBER = new("BATCH_NUMBER");
    this.BATCH_NUMBER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BATCH_NUMBER.configure(this, 5, 8, "RW", 0, 5'h0, 1, 1, 0);
    this.BATCH_NUMBER.add_def_property("spec_access", "rw");
    this.BATCH_NUMBER.add_def_property("spec_sw_default", "0x0");
    this.BATCH_NUMBER.add_def_property("sw_default_mask", "0x0");
    this.BATCH_NUMBER.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "FLYING_MODE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "OUTPUT_DST"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "WINOGRAD"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "NAN_TO_ZERO"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "BATCH_NUMBER"}, 8, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_FEATURE_MODE_CFG

// D_DST_DMA_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_D_DST_DMA_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DST_DMA_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_RAM_TYPE = new("DST_RAM_TYPE");
    this.DST_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DST_RAM_TYPE.add_def_property("spec_access", "rw");
    this.DST_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.DST_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.DST_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DST_DMA_CFG

// D_DST_BATCH_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BATCH_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_BATCH_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BATCH_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_BATCH_STRIDE = new("DST_BATCH_STRIDE");
    this.DST_BATCH_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_BATCH_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_BATCH_STRIDE.add_def_property("spec_access", "rw");
    this.DST_BATCH_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DST_BATCH_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DST_BATCH_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_BATCH_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BATCH_STRIDE

// D_DATA_FORMAT
class reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PROC_PRECISION;
  rand uvm_reg_field_rdl OUT_PRECISION;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PROC_PRECISION = new("PROC_PRECISION");
    this.PROC_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PROC_PRECISION.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 0);
    this.PROC_PRECISION.add_def_property("spec_access", "rw");
    this.PROC_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.PROC_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.PROC_PRECISION.add_def_property("reset_mask", "0x3");
    this.OUT_PRECISION = new("OUT_PRECISION");
    this.OUT_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OUT_PRECISION.configure(this, 2, 2, "RW", 0, 2'h0, 1, 1, 0);
    this.OUT_PRECISION.add_def_property("spec_access", "rw");
    this.OUT_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.OUT_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.OUT_PRECISION.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PROC_PRECISION"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "OUT_PRECISION"}, 2, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_FORMAT

// D_CVT_OFFSET
class reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_OFFSET extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CVT_OFFSET;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_OFFSET");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CVT_OFFSET = new("CVT_OFFSET");
    this.CVT_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CVT_OFFSET.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.CVT_OFFSET.add_def_property("spec_access", "rw");
    this.CVT_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.CVT_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.CVT_OFFSET.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CVT_OFFSET"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_OFFSET

// D_CVT_SCALE
class reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CVT_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CVT_SCALE = new("CVT_SCALE");
    this.CVT_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CVT_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.CVT_SCALE.add_def_property("spec_access", "rw");
    this.CVT_SCALE.add_def_property("spec_sw_default", "0x0");
    this.CVT_SCALE.add_def_property("sw_default_mask", "0x0");
    this.CVT_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CVT_SCALE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SCALE

// D_CVT_SHIFT
class reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SHIFT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CVT_SHIFT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SHIFT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CVT_SHIFT = new("CVT_SHIFT");
    this.CVT_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CVT_SHIFT.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.CVT_SHIFT.add_def_property("spec_access", "rw");
    this.CVT_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.CVT_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.CVT_SHIFT.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CVT_SHIFT"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SHIFT

// D_STATUS
class reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_UNEQUAL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_UNEQUAL = new("STATUS_UNEQUAL");
    this.STATUS_UNEQUAL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_UNEQUAL.configure(this, 1, 0, "RO", 1, 1'h0, 1, 0, 1);
    this.STATUS_UNEQUAL.add_def_property("spec_access", "r");
    this.STATUS_UNEQUAL.add_def_property("spec_sw_default", "0x0");
    this.STATUS_UNEQUAL.add_def_property("sw_default_mask", "0x0");
    this.STATUS_UNEQUAL.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_UNEQUAL"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS

// D_STATUS_NAN_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_NAN_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_NAN_INPUT_NUM = new("STATUS_NAN_INPUT_NUM");
    this.STATUS_NAN_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_NAN_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.STATUS_NAN_INPUT_NUM.add_def_property("spec_access", "r");
    this.STATUS_NAN_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.STATUS_NAN_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.STATUS_NAN_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_NAN_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM

// D_STATUS_INF_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_INF_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_INF_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_INF_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_INF_INPUT_NUM = new("STATUS_INF_INPUT_NUM");
    this.STATUS_INF_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_INF_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.STATUS_INF_INPUT_NUM.add_def_property("spec_access", "r");
    this.STATUS_INF_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.STATUS_INF_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.STATUS_INF_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_INF_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_INF_INPUT_NUM

// D_STATUS_NAN_OUTPUT_NUM
class reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_NAN_OUTPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_NAN_OUTPUT_NUM = new("STATUS_NAN_OUTPUT_NUM");
    this.STATUS_NAN_OUTPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_NAN_OUTPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.STATUS_NAN_OUTPUT_NUM.add_def_property("spec_access", "r");
    this.STATUS_NAN_OUTPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.STATUS_NAN_OUTPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.STATUS_NAN_OUTPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_NAN_OUTPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM

// D_PERF_ENABLE
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_DMA_EN;
  rand uvm_reg_field_rdl PERF_LUT_EN;
  rand uvm_reg_field_rdl PERF_SAT_EN;
  rand uvm_reg_field_rdl PERF_NAN_INF_COUNT_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_DMA_EN = new("PERF_DMA_EN");
    this.PERF_DMA_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PERF_DMA_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PERF_DMA_EN.add_def_property("spec_access", "rw");
    this.PERF_DMA_EN.add_def_property("spec_sw_default", "0x0");
    this.PERF_DMA_EN.add_def_property("sw_default_mask", "0x0");
    this.PERF_DMA_EN.add_def_property("reset_mask", "0x1");
    this.PERF_LUT_EN = new("PERF_LUT_EN");
    this.PERF_LUT_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PERF_LUT_EN.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.PERF_LUT_EN.add_def_property("spec_access", "rw");
    this.PERF_LUT_EN.add_def_property("spec_sw_default", "0x0");
    this.PERF_LUT_EN.add_def_property("sw_default_mask", "0x0");
    this.PERF_LUT_EN.add_def_property("reset_mask", "0x1");
    this.PERF_SAT_EN = new("PERF_SAT_EN");
    this.PERF_SAT_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PERF_SAT_EN.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.PERF_SAT_EN.add_def_property("spec_access", "rw");
    this.PERF_SAT_EN.add_def_property("spec_sw_default", "0x0");
    this.PERF_SAT_EN.add_def_property("sw_default_mask", "0x0");
    this.PERF_SAT_EN.add_def_property("reset_mask", "0x1");
    this.PERF_NAN_INF_COUNT_EN = new("PERF_NAN_INF_COUNT_EN");
    this.PERF_NAN_INF_COUNT_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PERF_NAN_INF_COUNT_EN.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.PERF_NAN_INF_COUNT_EN.add_def_property("spec_access", "rw");
    this.PERF_NAN_INF_COUNT_EN.add_def_property("spec_sw_default", "0x0");
    this.PERF_NAN_INF_COUNT_EN.add_def_property("sw_default_mask", "0x0");
    this.PERF_NAN_INF_COUNT_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_DMA_EN"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "PERF_LUT_EN"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "PERF_SAT_EN"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "PERF_NAN_INF_COUNT_EN"}, 3, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_ENABLE

// D_PERF_WDMA_WRITE_STALL
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WDMA_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WDMA_STALL = new("WDMA_STALL");
    this.WDMA_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.WDMA_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.WDMA_STALL.add_def_property("spec_access", "r");
    this.WDMA_STALL.add_def_property("spec_sw_default", "0x0");
    this.WDMA_STALL.add_def_property("sw_default_mask", "0x0");
    this.WDMA_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WDMA_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL

// D_PERF_LUT_UFLOW
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_UFLOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_UFLOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_UFLOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_UFLOW = new("LUT_UFLOW");
    this.LUT_UFLOW.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.LUT_UFLOW.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.LUT_UFLOW.add_def_property("spec_access", "r");
    this.LUT_UFLOW.add_def_property("spec_sw_default", "0x0");
    this.LUT_UFLOW.add_def_property("sw_default_mask", "0x0");
    this.LUT_UFLOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_UFLOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_UFLOW

// D_PERF_LUT_OFLOW
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_OFLOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_OFLOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_OFLOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_OFLOW = new("LUT_OFLOW");
    this.LUT_OFLOW.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.LUT_OFLOW.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.LUT_OFLOW.add_def_property("spec_access", "r");
    this.LUT_OFLOW.add_def_property("spec_sw_default", "0x0");
    this.LUT_OFLOW.add_def_property("sw_default_mask", "0x0");
    this.LUT_OFLOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_OFLOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_OFLOW

// D_PERF_OUT_SATURATION
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_OUT_SATURATION extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OUT_SATURATION;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_OUT_SATURATION");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OUT_SATURATION = new("OUT_SATURATION");
    this.OUT_SATURATION.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.OUT_SATURATION.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.OUT_SATURATION.add_def_property("spec_access", "r");
    this.OUT_SATURATION.add_def_property("spec_sw_default", "0x0");
    this.OUT_SATURATION.add_def_property("sw_default_mask", "0x0");
    this.OUT_SATURATION.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OUT_SATURATION"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_OUT_SATURATION

// D_PERF_LUT_HYBRID
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_HYBRID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_HYBRID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_HYBRID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_HYBRID = new("LUT_HYBRID");
    this.LUT_HYBRID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.LUT_HYBRID.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.LUT_HYBRID.add_def_property("spec_access", "r");
    this.LUT_HYBRID.add_def_property("spec_sw_default", "0x0");
    this.LUT_HYBRID.add_def_property("sw_default_mask", "0x0");
    this.LUT_HYBRID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_HYBRID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_HYBRID

// D_PERF_LUT_LE_HIT
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LE_HIT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_HIT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LE_HIT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_HIT = new("LUT_LE_HIT");
    this.LUT_LE_HIT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.LUT_LE_HIT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.LUT_LE_HIT.add_def_property("spec_access", "r");
    this.LUT_LE_HIT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_HIT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_HIT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_HIT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LE_HIT

// D_PERF_LUT_LO_HIT
class reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LO_HIT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_HIT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LO_HIT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_HIT = new("LUT_LO_HIT");
    this.LUT_LO_HIT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.LUT_LO_HIT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.LUT_LO_HIT.add_def_property("spec_access", "r");
    this.LUT_LO_HIT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_HIT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_HIT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_HIT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LO_HIT

// Block NVDLA_SDP
class block_addrmap_NVDLA_NVDLA_SDP extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_CFG S_LUT_ACCESS_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_ACCESS_DATA S_LUT_ACCESS_DATA;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_CFG S_LUT_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_INFO S_LUT_INFO;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_START S_LUT_LE_START;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_END S_LUT_LE_END;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_START S_LUT_LO_START;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_END S_LUT_LO_END;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE S_LUT_LE_SLOPE_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT S_LUT_LE_SLOPE_SHIFT;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE S_LUT_LO_SLOPE_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT S_LUT_LO_SLOPE_SHIFT;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_WIDTH D_DATA_CUBE_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_HEIGHT D_DATA_CUBE_HEIGHT;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_CUBE_CHANNEL D_DATA_CUBE_CHANNEL;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_LOW D_DST_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BASE_ADDR_HIGH D_DST_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DST_LINE_STRIDE D_DST_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DST_SURFACE_STRIDE D_DST_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_CFG D_DP_BS_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_CFG D_DP_BS_ALU_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE D_DP_BS_ALU_SRC_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_CFG D_DP_BS_MUL_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE D_DP_BS_MUL_SRC_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_CFG D_DP_BN_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_CFG D_DP_BN_ALU_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE D_DP_BN_ALU_SRC_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_CFG D_DP_BN_MUL_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE D_DP_BN_MUL_SRC_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_CFG D_DP_EW_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CFG D_DP_EW_ALU_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE D_DP_EW_ALU_SRC_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE D_DP_EW_ALU_CVT_OFFSET_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE D_DP_EW_ALU_CVT_SCALE_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE D_DP_EW_ALU_CVT_TRUNCATE_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CFG D_DP_EW_MUL_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE D_DP_EW_MUL_SRC_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE D_DP_EW_MUL_CVT_OFFSET_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE D_DP_EW_MUL_CVT_SCALE_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE D_DP_EW_MUL_CVT_TRUNCATE_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE D_DP_EW_TRUNCATE_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_FEATURE_MODE_CFG D_FEATURE_MODE_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DST_DMA_CFG D_DST_DMA_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DST_BATCH_STRIDE D_DST_BATCH_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_DATA_FORMAT D_DATA_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_OFFSET D_CVT_OFFSET;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SCALE D_CVT_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_CVT_SHIFT D_CVT_SHIFT;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS D_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM D_STATUS_NAN_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_INF_INPUT_NUM D_STATUS_INF_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM D_STATUS_NAN_OUTPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_ENABLE D_PERF_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL D_PERF_WDMA_WRITE_STALL;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_UFLOW D_PERF_LUT_UFLOW;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_OFLOW D_PERF_LUT_OFLOW;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_OUT_SATURATION D_PERF_OUT_SATURATION;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_HYBRID D_PERF_LUT_HYBRID;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LE_HIT D_PERF_LUT_LE_HIT;
  rand reg_addrmap_NVDLA_NVDLA_SDP_D_PERF_LUT_LO_HIT D_PERF_LUT_LO_HIT;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_SDP");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.S_LUT_ACCESS_CFG = new("S_LUT_ACCESS_CFG");
    this.S_LUT_ACCESS_CFG.configure(this, null, "");
    this.S_LUT_ACCESS_CFG.set_rdl_tag("S_LUT_ACCESS_CFG_");
    this.S_LUT_ACCESS_CFG.set_reg_test_info(0, 0, 2);
    this.S_LUT_ACCESS_CFG.build();
    this.default_map.add_reg(this.S_LUT_ACCESS_CFG, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.S_LUT_ACCESS_DATA = new("S_LUT_ACCESS_DATA");
    this.S_LUT_ACCESS_DATA.configure(this, null, "");
    this.S_LUT_ACCESS_DATA.set_rdl_tag("S_LUT_ACCESS_DATA_");
    this.S_LUT_ACCESS_DATA.set_reg_test_info(0, 0, 2);
    this.S_LUT_ACCESS_DATA.build();
    this.default_map.add_reg(this.S_LUT_ACCESS_DATA, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.S_LUT_CFG = new("S_LUT_CFG");
    this.S_LUT_CFG.configure(this, null, "");
    this.S_LUT_CFG.set_rdl_tag("S_LUT_CFG_");
    this.S_LUT_CFG.set_reg_test_info(0, 0, 2);
    this.S_LUT_CFG.build();
    this.default_map.add_reg(this.S_LUT_CFG, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.S_LUT_INFO = new("S_LUT_INFO");
    this.S_LUT_INFO.configure(this, null, "");
    this.S_LUT_INFO.set_rdl_tag("S_LUT_INFO_");
    this.S_LUT_INFO.set_reg_test_info(0, 0, 2);
    this.S_LUT_INFO.build();
    this.default_map.add_reg(this.S_LUT_INFO, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.S_LUT_LE_START = new("S_LUT_LE_START");
    this.S_LUT_LE_START.configure(this, null, "");
    this.S_LUT_LE_START.set_rdl_tag("S_LUT_LE_START_");
    this.S_LUT_LE_START.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_START.build();
    this.default_map.add_reg(this.S_LUT_LE_START, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.S_LUT_LE_END = new("S_LUT_LE_END");
    this.S_LUT_LE_END.configure(this, null, "");
    this.S_LUT_LE_END.set_rdl_tag("S_LUT_LE_END_");
    this.S_LUT_LE_END.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_END.build();
    this.default_map.add_reg(this.S_LUT_LE_END, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.S_LUT_LO_START = new("S_LUT_LO_START");
    this.S_LUT_LO_START.configure(this, null, "");
    this.S_LUT_LO_START.set_rdl_tag("S_LUT_LO_START_");
    this.S_LUT_LO_START.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_START.build();
    this.default_map.add_reg(this.S_LUT_LO_START, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.S_LUT_LO_END = new("S_LUT_LO_END");
    this.S_LUT_LO_END.configure(this, null, "");
    this.S_LUT_LO_END.set_rdl_tag("S_LUT_LO_END_");
    this.S_LUT_LO_END.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_END.build();
    this.default_map.add_reg(this.S_LUT_LO_END, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.S_LUT_LE_SLOPE_SCALE = new("S_LUT_LE_SLOPE_SCALE");
    this.S_LUT_LE_SLOPE_SCALE.configure(this, null, "");
    this.S_LUT_LE_SLOPE_SCALE.set_rdl_tag("S_LUT_LE_SLOPE_SCALE_");
    this.S_LUT_LE_SLOPE_SCALE.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_SLOPE_SCALE.build();
    this.default_map.add_reg(this.S_LUT_LE_SLOPE_SCALE, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.S_LUT_LE_SLOPE_SHIFT = new("S_LUT_LE_SLOPE_SHIFT");
    this.S_LUT_LE_SLOPE_SHIFT.configure(this, null, "");
    this.S_LUT_LE_SLOPE_SHIFT.set_rdl_tag("S_LUT_LE_SLOPE_SHIFT_");
    this.S_LUT_LE_SLOPE_SHIFT.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_SLOPE_SHIFT.build();
    this.default_map.add_reg(this.S_LUT_LE_SLOPE_SHIFT, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.S_LUT_LO_SLOPE_SCALE = new("S_LUT_LO_SLOPE_SCALE");
    this.S_LUT_LO_SLOPE_SCALE.configure(this, null, "");
    this.S_LUT_LO_SLOPE_SCALE.set_rdl_tag("S_LUT_LO_SLOPE_SCALE_");
    this.S_LUT_LO_SLOPE_SCALE.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_SLOPE_SCALE.build();
    this.default_map.add_reg(this.S_LUT_LO_SLOPE_SCALE, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.S_LUT_LO_SLOPE_SHIFT = new("S_LUT_LO_SLOPE_SHIFT");
    this.S_LUT_LO_SLOPE_SHIFT.configure(this, null, "");
    this.S_LUT_LO_SLOPE_SHIFT.set_rdl_tag("S_LUT_LO_SLOPE_SHIFT_");
    this.S_LUT_LO_SLOPE_SHIFT.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_SLOPE_SHIFT.build();
    this.default_map.add_reg(this.S_LUT_LO_SLOPE_SHIFT, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.D_DATA_CUBE_WIDTH = new("D_DATA_CUBE_WIDTH");
    this.D_DATA_CUBE_WIDTH.configure(this, null, "");
    this.D_DATA_CUBE_WIDTH.set_rdl_tag("D_DATA_CUBE_WIDTH_");
    this.D_DATA_CUBE_WIDTH.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_WIDTH.build();
    this.default_map.add_reg(this.D_DATA_CUBE_WIDTH, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.D_DATA_CUBE_HEIGHT = new("D_DATA_CUBE_HEIGHT");
    this.D_DATA_CUBE_HEIGHT.configure(this, null, "");
    this.D_DATA_CUBE_HEIGHT.set_rdl_tag("D_DATA_CUBE_HEIGHT_");
    this.D_DATA_CUBE_HEIGHT.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_HEIGHT.build();
    this.default_map.add_reg(this.D_DATA_CUBE_HEIGHT, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.D_DATA_CUBE_CHANNEL = new("D_DATA_CUBE_CHANNEL");
    this.D_DATA_CUBE_CHANNEL.configure(this, null, "");
    this.D_DATA_CUBE_CHANNEL.set_rdl_tag("D_DATA_CUBE_CHANNEL_");
    this.D_DATA_CUBE_CHANNEL.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_CHANNEL.build();
    this.default_map.add_reg(this.D_DATA_CUBE_CHANNEL, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.D_DST_BASE_ADDR_LOW = new("D_DST_BASE_ADDR_LOW");
    this.D_DST_BASE_ADDR_LOW.configure(this, null, "");
    this.D_DST_BASE_ADDR_LOW.set_rdl_tag("D_DST_BASE_ADDR_LOW_");
    this.D_DST_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_DST_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_DST_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.D_DST_BASE_ADDR_HIGH = new("D_DST_BASE_ADDR_HIGH");
    this.D_DST_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_DST_BASE_ADDR_HIGH.set_rdl_tag("D_DST_BASE_ADDR_HIGH_");
    this.D_DST_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_DST_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_DST_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h4c, "RW", 0);
    this.D_DST_LINE_STRIDE = new("D_DST_LINE_STRIDE");
    this.D_DST_LINE_STRIDE.configure(this, null, "");
    this.D_DST_LINE_STRIDE.set_rdl_tag("D_DST_LINE_STRIDE_");
    this.D_DST_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DST_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_DST_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h50, "RW", 0);
    this.D_DST_SURFACE_STRIDE = new("D_DST_SURFACE_STRIDE");
    this.D_DST_SURFACE_STRIDE.configure(this, null, "");
    this.D_DST_SURFACE_STRIDE.set_rdl_tag("D_DST_SURFACE_STRIDE_");
    this.D_DST_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DST_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_DST_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h54, "RW", 0);
    this.D_DP_BS_CFG = new("D_DP_BS_CFG");
    this.D_DP_BS_CFG.configure(this, null, "");
    this.D_DP_BS_CFG.set_rdl_tag("D_DP_BS_CFG_");
    this.D_DP_BS_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_BS_CFG.build();
    this.default_map.add_reg(this.D_DP_BS_CFG, `UVM_REG_ADDR_WIDTH'h58, "RW", 0);
    this.D_DP_BS_ALU_CFG = new("D_DP_BS_ALU_CFG");
    this.D_DP_BS_ALU_CFG.configure(this, null, "");
    this.D_DP_BS_ALU_CFG.set_rdl_tag("D_DP_BS_ALU_CFG_");
    this.D_DP_BS_ALU_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_BS_ALU_CFG.build();
    this.default_map.add_reg(this.D_DP_BS_ALU_CFG, `UVM_REG_ADDR_WIDTH'h5c, "RW", 0);
    this.D_DP_BS_ALU_SRC_VALUE = new("D_DP_BS_ALU_SRC_VALUE");
    this.D_DP_BS_ALU_SRC_VALUE.configure(this, null, "");
    this.D_DP_BS_ALU_SRC_VALUE.set_rdl_tag("D_DP_BS_ALU_SRC_VALUE_");
    this.D_DP_BS_ALU_SRC_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_BS_ALU_SRC_VALUE.build();
    this.default_map.add_reg(this.D_DP_BS_ALU_SRC_VALUE, `UVM_REG_ADDR_WIDTH'h60, "RW", 0);
    this.D_DP_BS_MUL_CFG = new("D_DP_BS_MUL_CFG");
    this.D_DP_BS_MUL_CFG.configure(this, null, "");
    this.D_DP_BS_MUL_CFG.set_rdl_tag("D_DP_BS_MUL_CFG_");
    this.D_DP_BS_MUL_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_BS_MUL_CFG.build();
    this.default_map.add_reg(this.D_DP_BS_MUL_CFG, `UVM_REG_ADDR_WIDTH'h64, "RW", 0);
    this.D_DP_BS_MUL_SRC_VALUE = new("D_DP_BS_MUL_SRC_VALUE");
    this.D_DP_BS_MUL_SRC_VALUE.configure(this, null, "");
    this.D_DP_BS_MUL_SRC_VALUE.set_rdl_tag("D_DP_BS_MUL_SRC_VALUE_");
    this.D_DP_BS_MUL_SRC_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_BS_MUL_SRC_VALUE.build();
    this.default_map.add_reg(this.D_DP_BS_MUL_SRC_VALUE, `UVM_REG_ADDR_WIDTH'h68, "RW", 0);
    this.D_DP_BN_CFG = new("D_DP_BN_CFG");
    this.D_DP_BN_CFG.configure(this, null, "");
    this.D_DP_BN_CFG.set_rdl_tag("D_DP_BN_CFG_");
    this.D_DP_BN_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_BN_CFG.build();
    this.default_map.add_reg(this.D_DP_BN_CFG, `UVM_REG_ADDR_WIDTH'h6c, "RW", 0);
    this.D_DP_BN_ALU_CFG = new("D_DP_BN_ALU_CFG");
    this.D_DP_BN_ALU_CFG.configure(this, null, "");
    this.D_DP_BN_ALU_CFG.set_rdl_tag("D_DP_BN_ALU_CFG_");
    this.D_DP_BN_ALU_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_BN_ALU_CFG.build();
    this.default_map.add_reg(this.D_DP_BN_ALU_CFG, `UVM_REG_ADDR_WIDTH'h70, "RW", 0);
    this.D_DP_BN_ALU_SRC_VALUE = new("D_DP_BN_ALU_SRC_VALUE");
    this.D_DP_BN_ALU_SRC_VALUE.configure(this, null, "");
    this.D_DP_BN_ALU_SRC_VALUE.set_rdl_tag("D_DP_BN_ALU_SRC_VALUE_");
    this.D_DP_BN_ALU_SRC_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_BN_ALU_SRC_VALUE.build();
    this.default_map.add_reg(this.D_DP_BN_ALU_SRC_VALUE, `UVM_REG_ADDR_WIDTH'h74, "RW", 0);
    this.D_DP_BN_MUL_CFG = new("D_DP_BN_MUL_CFG");
    this.D_DP_BN_MUL_CFG.configure(this, null, "");
    this.D_DP_BN_MUL_CFG.set_rdl_tag("D_DP_BN_MUL_CFG_");
    this.D_DP_BN_MUL_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_BN_MUL_CFG.build();
    this.default_map.add_reg(this.D_DP_BN_MUL_CFG, `UVM_REG_ADDR_WIDTH'h78, "RW", 0);
    this.D_DP_BN_MUL_SRC_VALUE = new("D_DP_BN_MUL_SRC_VALUE");
    this.D_DP_BN_MUL_SRC_VALUE.configure(this, null, "");
    this.D_DP_BN_MUL_SRC_VALUE.set_rdl_tag("D_DP_BN_MUL_SRC_VALUE_");
    this.D_DP_BN_MUL_SRC_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_BN_MUL_SRC_VALUE.build();
    this.default_map.add_reg(this.D_DP_BN_MUL_SRC_VALUE, `UVM_REG_ADDR_WIDTH'h7c, "RW", 0);
    this.D_DP_EW_CFG = new("D_DP_EW_CFG");
    this.D_DP_EW_CFG.configure(this, null, "");
    this.D_DP_EW_CFG.set_rdl_tag("D_DP_EW_CFG_");
    this.D_DP_EW_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_CFG.build();
    this.default_map.add_reg(this.D_DP_EW_CFG, `UVM_REG_ADDR_WIDTH'h80, "RW", 0);
    this.D_DP_EW_ALU_CFG = new("D_DP_EW_ALU_CFG");
    this.D_DP_EW_ALU_CFG.configure(this, null, "");
    this.D_DP_EW_ALU_CFG.set_rdl_tag("D_DP_EW_ALU_CFG_");
    this.D_DP_EW_ALU_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_ALU_CFG.build();
    this.default_map.add_reg(this.D_DP_EW_ALU_CFG, `UVM_REG_ADDR_WIDTH'h84, "RW", 0);
    this.D_DP_EW_ALU_SRC_VALUE = new("D_DP_EW_ALU_SRC_VALUE");
    this.D_DP_EW_ALU_SRC_VALUE.configure(this, null, "");
    this.D_DP_EW_ALU_SRC_VALUE.set_rdl_tag("D_DP_EW_ALU_SRC_VALUE_");
    this.D_DP_EW_ALU_SRC_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_ALU_SRC_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_ALU_SRC_VALUE, `UVM_REG_ADDR_WIDTH'h88, "RW", 0);
    this.D_DP_EW_ALU_CVT_OFFSET_VALUE = new("D_DP_EW_ALU_CVT_OFFSET_VALUE");
    this.D_DP_EW_ALU_CVT_OFFSET_VALUE.configure(this, null, "");
    this.D_DP_EW_ALU_CVT_OFFSET_VALUE.set_rdl_tag("D_DP_EW_ALU_CVT_OFFSET_VALUE_");
    this.D_DP_EW_ALU_CVT_OFFSET_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_ALU_CVT_OFFSET_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_ALU_CVT_OFFSET_VALUE, `UVM_REG_ADDR_WIDTH'h8c, "RW", 0);
    this.D_DP_EW_ALU_CVT_SCALE_VALUE = new("D_DP_EW_ALU_CVT_SCALE_VALUE");
    this.D_DP_EW_ALU_CVT_SCALE_VALUE.configure(this, null, "");
    this.D_DP_EW_ALU_CVT_SCALE_VALUE.set_rdl_tag("D_DP_EW_ALU_CVT_SCALE_VALUE_");
    this.D_DP_EW_ALU_CVT_SCALE_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_ALU_CVT_SCALE_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_ALU_CVT_SCALE_VALUE, `UVM_REG_ADDR_WIDTH'h90, "RW", 0);
    this.D_DP_EW_ALU_CVT_TRUNCATE_VALUE = new("D_DP_EW_ALU_CVT_TRUNCATE_VALUE");
    this.D_DP_EW_ALU_CVT_TRUNCATE_VALUE.configure(this, null, "");
    this.D_DP_EW_ALU_CVT_TRUNCATE_VALUE.set_rdl_tag("D_DP_EW_ALU_CVT_TRUNCATE_VALUE_");
    this.D_DP_EW_ALU_CVT_TRUNCATE_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_ALU_CVT_TRUNCATE_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_ALU_CVT_TRUNCATE_VALUE, `UVM_REG_ADDR_WIDTH'h94, "RW", 0);
    this.D_DP_EW_MUL_CFG = new("D_DP_EW_MUL_CFG");
    this.D_DP_EW_MUL_CFG.configure(this, null, "");
    this.D_DP_EW_MUL_CFG.set_rdl_tag("D_DP_EW_MUL_CFG_");
    this.D_DP_EW_MUL_CFG.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_MUL_CFG.build();
    this.default_map.add_reg(this.D_DP_EW_MUL_CFG, `UVM_REG_ADDR_WIDTH'h98, "RW", 0);
    this.D_DP_EW_MUL_SRC_VALUE = new("D_DP_EW_MUL_SRC_VALUE");
    this.D_DP_EW_MUL_SRC_VALUE.configure(this, null, "");
    this.D_DP_EW_MUL_SRC_VALUE.set_rdl_tag("D_DP_EW_MUL_SRC_VALUE_");
    this.D_DP_EW_MUL_SRC_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_MUL_SRC_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_MUL_SRC_VALUE, `UVM_REG_ADDR_WIDTH'h9c, "RW", 0);
    this.D_DP_EW_MUL_CVT_OFFSET_VALUE = new("D_DP_EW_MUL_CVT_OFFSET_VALUE");
    this.D_DP_EW_MUL_CVT_OFFSET_VALUE.configure(this, null, "");
    this.D_DP_EW_MUL_CVT_OFFSET_VALUE.set_rdl_tag("D_DP_EW_MUL_CVT_OFFSET_VALUE_");
    this.D_DP_EW_MUL_CVT_OFFSET_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_MUL_CVT_OFFSET_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_MUL_CVT_OFFSET_VALUE, `UVM_REG_ADDR_WIDTH'ha0, "RW", 0);
    this.D_DP_EW_MUL_CVT_SCALE_VALUE = new("D_DP_EW_MUL_CVT_SCALE_VALUE");
    this.D_DP_EW_MUL_CVT_SCALE_VALUE.configure(this, null, "");
    this.D_DP_EW_MUL_CVT_SCALE_VALUE.set_rdl_tag("D_DP_EW_MUL_CVT_SCALE_VALUE_");
    this.D_DP_EW_MUL_CVT_SCALE_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_MUL_CVT_SCALE_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_MUL_CVT_SCALE_VALUE, `UVM_REG_ADDR_WIDTH'ha4, "RW", 0);
    this.D_DP_EW_MUL_CVT_TRUNCATE_VALUE = new("D_DP_EW_MUL_CVT_TRUNCATE_VALUE");
    this.D_DP_EW_MUL_CVT_TRUNCATE_VALUE.configure(this, null, "");
    this.D_DP_EW_MUL_CVT_TRUNCATE_VALUE.set_rdl_tag("D_DP_EW_MUL_CVT_TRUNCATE_VALUE_");
    this.D_DP_EW_MUL_CVT_TRUNCATE_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_MUL_CVT_TRUNCATE_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_MUL_CVT_TRUNCATE_VALUE, `UVM_REG_ADDR_WIDTH'ha8, "RW", 0);
    this.D_DP_EW_TRUNCATE_VALUE = new("D_DP_EW_TRUNCATE_VALUE");
    this.D_DP_EW_TRUNCATE_VALUE.configure(this, null, "");
    this.D_DP_EW_TRUNCATE_VALUE.set_rdl_tag("D_DP_EW_TRUNCATE_VALUE_");
    this.D_DP_EW_TRUNCATE_VALUE.set_reg_test_info(0, 0, 2);
    this.D_DP_EW_TRUNCATE_VALUE.build();
    this.default_map.add_reg(this.D_DP_EW_TRUNCATE_VALUE, `UVM_REG_ADDR_WIDTH'hac, "RW", 0);
    this.D_FEATURE_MODE_CFG = new("D_FEATURE_MODE_CFG");
    this.D_FEATURE_MODE_CFG.configure(this, null, "");
    this.D_FEATURE_MODE_CFG.set_rdl_tag("D_FEATURE_MODE_CFG_");
    this.D_FEATURE_MODE_CFG.set_reg_test_info(0, 0, 2);
    this.D_FEATURE_MODE_CFG.build();
    this.default_map.add_reg(this.D_FEATURE_MODE_CFG, `UVM_REG_ADDR_WIDTH'hb0, "RW", 0);
    this.D_DST_DMA_CFG = new("D_DST_DMA_CFG");
    this.D_DST_DMA_CFG.configure(this, null, "");
    this.D_DST_DMA_CFG.set_rdl_tag("D_DST_DMA_CFG_");
    this.D_DST_DMA_CFG.set_reg_test_info(0, 0, 2);
    this.D_DST_DMA_CFG.build();
    this.default_map.add_reg(this.D_DST_DMA_CFG, `UVM_REG_ADDR_WIDTH'hb4, "RW", 0);
    this.D_DST_BATCH_STRIDE = new("D_DST_BATCH_STRIDE");
    this.D_DST_BATCH_STRIDE.configure(this, null, "");
    this.D_DST_BATCH_STRIDE.set_rdl_tag("D_DST_BATCH_STRIDE_");
    this.D_DST_BATCH_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DST_BATCH_STRIDE.build();
    this.default_map.add_reg(this.D_DST_BATCH_STRIDE, `UVM_REG_ADDR_WIDTH'hb8, "RW", 0);
    this.D_DATA_FORMAT = new("D_DATA_FORMAT");
    this.D_DATA_FORMAT.configure(this, null, "");
    this.D_DATA_FORMAT.set_rdl_tag("D_DATA_FORMAT_");
    this.D_DATA_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_DATA_FORMAT.build();
    this.default_map.add_reg(this.D_DATA_FORMAT, `UVM_REG_ADDR_WIDTH'hbc, "RW", 0);
    this.D_CVT_OFFSET = new("D_CVT_OFFSET");
    this.D_CVT_OFFSET.configure(this, null, "");
    this.D_CVT_OFFSET.set_rdl_tag("D_CVT_OFFSET_");
    this.D_CVT_OFFSET.set_reg_test_info(0, 0, 2);
    this.D_CVT_OFFSET.build();
    this.default_map.add_reg(this.D_CVT_OFFSET, `UVM_REG_ADDR_WIDTH'hc0, "RW", 0);
    this.D_CVT_SCALE = new("D_CVT_SCALE");
    this.D_CVT_SCALE.configure(this, null, "");
    this.D_CVT_SCALE.set_rdl_tag("D_CVT_SCALE_");
    this.D_CVT_SCALE.set_reg_test_info(0, 0, 2);
    this.D_CVT_SCALE.build();
    this.default_map.add_reg(this.D_CVT_SCALE, `UVM_REG_ADDR_WIDTH'hc4, "RW", 0);
    this.D_CVT_SHIFT = new("D_CVT_SHIFT");
    this.D_CVT_SHIFT.configure(this, null, "");
    this.D_CVT_SHIFT.set_rdl_tag("D_CVT_SHIFT_");
    this.D_CVT_SHIFT.set_reg_test_info(0, 0, 2);
    this.D_CVT_SHIFT.build();
    this.default_map.add_reg(this.D_CVT_SHIFT, `UVM_REG_ADDR_WIDTH'hc8, "RW", 0);
    this.D_STATUS = new("D_STATUS");
    this.D_STATUS.configure(this, null, "");
    this.D_STATUS.set_rdl_tag("D_STATUS_");
    this.D_STATUS.set_reg_test_info(0, 0, 32);
    this.D_STATUS.build();
    this.default_map.add_reg(this.D_STATUS, `UVM_REG_ADDR_WIDTH'hcc, "RO", 0);
    this.D_STATUS_NAN_INPUT_NUM = new("D_STATUS_NAN_INPUT_NUM");
    this.D_STATUS_NAN_INPUT_NUM.configure(this, null, "");
    this.D_STATUS_NAN_INPUT_NUM.set_rdl_tag("D_STATUS_NAN_INPUT_NUM_");
    this.D_STATUS_NAN_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_STATUS_NAN_INPUT_NUM.build();
    this.default_map.add_reg(this.D_STATUS_NAN_INPUT_NUM, `UVM_REG_ADDR_WIDTH'hd0, "RO", 0);
    this.D_STATUS_INF_INPUT_NUM = new("D_STATUS_INF_INPUT_NUM");
    this.D_STATUS_INF_INPUT_NUM.configure(this, null, "");
    this.D_STATUS_INF_INPUT_NUM.set_rdl_tag("D_STATUS_INF_INPUT_NUM_");
    this.D_STATUS_INF_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_STATUS_INF_INPUT_NUM.build();
    this.default_map.add_reg(this.D_STATUS_INF_INPUT_NUM, `UVM_REG_ADDR_WIDTH'hd4, "RO", 0);
    this.D_STATUS_NAN_OUTPUT_NUM = new("D_STATUS_NAN_OUTPUT_NUM");
    this.D_STATUS_NAN_OUTPUT_NUM.configure(this, null, "");
    this.D_STATUS_NAN_OUTPUT_NUM.set_rdl_tag("D_STATUS_NAN_OUTPUT_NUM_");
    this.D_STATUS_NAN_OUTPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_STATUS_NAN_OUTPUT_NUM.build();
    this.default_map.add_reg(this.D_STATUS_NAN_OUTPUT_NUM, `UVM_REG_ADDR_WIDTH'hd8, "RO", 0);
    this.D_PERF_ENABLE = new("D_PERF_ENABLE");
    this.D_PERF_ENABLE.configure(this, null, "");
    this.D_PERF_ENABLE.set_rdl_tag("D_PERF_ENABLE_");
    this.D_PERF_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_PERF_ENABLE.build();
    this.default_map.add_reg(this.D_PERF_ENABLE, `UVM_REG_ADDR_WIDTH'hdc, "RW", 0);
    this.D_PERF_WDMA_WRITE_STALL = new("D_PERF_WDMA_WRITE_STALL");
    this.D_PERF_WDMA_WRITE_STALL.configure(this, null, "");
    this.D_PERF_WDMA_WRITE_STALL.set_rdl_tag("D_PERF_WDMA_WRITE_STALL_");
    this.D_PERF_WDMA_WRITE_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_WDMA_WRITE_STALL.build();
    this.default_map.add_reg(this.D_PERF_WDMA_WRITE_STALL, `UVM_REG_ADDR_WIDTH'he0, "RO", 0);
    this.D_PERF_LUT_UFLOW = new("D_PERF_LUT_UFLOW");
    this.D_PERF_LUT_UFLOW.configure(this, null, "");
    this.D_PERF_LUT_UFLOW.set_rdl_tag("D_PERF_LUT_UFLOW_");
    this.D_PERF_LUT_UFLOW.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_UFLOW.build();
    this.default_map.add_reg(this.D_PERF_LUT_UFLOW, `UVM_REG_ADDR_WIDTH'he4, "RO", 0);
    this.D_PERF_LUT_OFLOW = new("D_PERF_LUT_OFLOW");
    this.D_PERF_LUT_OFLOW.configure(this, null, "");
    this.D_PERF_LUT_OFLOW.set_rdl_tag("D_PERF_LUT_OFLOW_");
    this.D_PERF_LUT_OFLOW.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_OFLOW.build();
    this.default_map.add_reg(this.D_PERF_LUT_OFLOW, `UVM_REG_ADDR_WIDTH'he8, "RO", 0);
    this.D_PERF_OUT_SATURATION = new("D_PERF_OUT_SATURATION");
    this.D_PERF_OUT_SATURATION.configure(this, null, "");
    this.D_PERF_OUT_SATURATION.set_rdl_tag("D_PERF_OUT_SATURATION_");
    this.D_PERF_OUT_SATURATION.set_reg_test_info(0, 0, 32);
    this.D_PERF_OUT_SATURATION.build();
    this.default_map.add_reg(this.D_PERF_OUT_SATURATION, `UVM_REG_ADDR_WIDTH'hec, "RO", 0);
    this.D_PERF_LUT_HYBRID = new("D_PERF_LUT_HYBRID");
    this.D_PERF_LUT_HYBRID.configure(this, null, "");
    this.D_PERF_LUT_HYBRID.set_rdl_tag("D_PERF_LUT_HYBRID_");
    this.D_PERF_LUT_HYBRID.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_HYBRID.build();
    this.default_map.add_reg(this.D_PERF_LUT_HYBRID, `UVM_REG_ADDR_WIDTH'hf0, "RO", 0);
    this.D_PERF_LUT_LE_HIT = new("D_PERF_LUT_LE_HIT");
    this.D_PERF_LUT_LE_HIT.configure(this, null, "");
    this.D_PERF_LUT_LE_HIT.set_rdl_tag("D_PERF_LUT_LE_HIT_");
    this.D_PERF_LUT_LE_HIT.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_LE_HIT.build();
    this.default_map.add_reg(this.D_PERF_LUT_LE_HIT, `UVM_REG_ADDR_WIDTH'hf4, "RO", 0);
    this.D_PERF_LUT_LO_HIT = new("D_PERF_LUT_LO_HIT");
    this.D_PERF_LUT_LO_HIT.configure(this, null, "");
    this.D_PERF_LUT_LO_HIT.set_rdl_tag("D_PERF_LUT_LO_HIT_");
    this.D_PERF_LUT_LO_HIT.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_LO_HIT.build();
    this.default_map.add_reg(this.D_PERF_LUT_LO_HIT, `UVM_REG_ADDR_WIDTH'hf8, "RO", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_SDP)
endclass : block_addrmap_NVDLA_NVDLA_SDP

// Base block
class block_addrmap_NVDLA extends uvm_reg_block_rdl;
  rand block_addrmap_NVDLA_NVDLA_SDP NVDLA_SDP;
  
  function new(string name = "block_addrmap_NVDLA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", `UVM_REG_ADDR_WIDTH'h0, 4, UVM_LITTLE_ENDIAN, 1);
    this.set_rdl_address_map(1);
    this.set_rdl_address_map_hdl_path({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.NVDLA_SDP = block_addrmap_NVDLA_NVDLA_SDP::type_id::create("NVDLA_SDP",, get_full_name());
    this.NVDLA_SDP.configure(this, "");
    this.NVDLA_SDP.set_rdl_tag("NVDLA_SDP_");
    this.NVDLA_SDP.build();
    this.default_map.add_submap(this.NVDLA_SDP.default_map, `UVM_REG_ADDR_WIDTH'h9000);
    set_hdl_path_root({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.add_callbacks();
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA)
endclass : block_addrmap_NVDLA
