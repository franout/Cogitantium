//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_SDP_RDMA.rdl
//   Parms: opendla.parms
//   Date: Tue Feb 18 10:18:56 CET 2020
//

import uvm_pkg::*;
import ordt_uvm_reg_pkg::*;

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_POINTER

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_OP_ENABLE

// D_DATA_CUBE_WIDTH
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WIDTH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WIDTH = new("WIDTH");
    this.WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.WIDTH.add_def_property("spec_access", "rw");
    this.WIDTH.add_def_property("spec_sw_default", "0x0");
    this.WIDTH.add_def_property("sw_default_mask", "0x0");
    this.WIDTH.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WIDTH"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH

// D_DATA_CUBE_HEIGHT
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.HEIGHT = new("HEIGHT");
    this.HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.HEIGHT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.HEIGHT.add_def_property("spec_access", "rw");
    this.HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "HEIGHT"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT

// D_DATA_CUBE_CHANNEL
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CHANNEL = new("CHANNEL");
    this.CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.CHANNEL.add_def_property("spec_access", "rw");
    this.CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL

// D_SRC_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_BASE_ADDR_LOW = new("SRC_BASE_ADDR_LOW");
    this.SRC_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.SRC_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.SRC_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.SRC_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW

// D_SRC_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_BASE_ADDR_HIGH = new("SRC_BASE_ADDR_HIGH");
    this.SRC_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.SRC_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.SRC_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.SRC_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH

// D_SRC_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_LINE_STRIDE = new("SRC_LINE_STRIDE");
    this.SRC_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.SRC_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.SRC_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.SRC_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE

// D_SRC_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_SURFACE_STRIDE = new("SRC_SURFACE_STRIDE");
    this.SRC_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.SRC_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.SRC_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.SRC_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.SRC_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE

// D_BRDMA_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BRDMA_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BRDMA_DISABLE;
  rand uvm_reg_field_rdl BRDMA_DATA_USE;
  rand uvm_reg_field_rdl BRDMA_DATA_SIZE;
  rand uvm_reg_field_rdl BRDMA_DATA_MODE;
  rand uvm_reg_field_rdl BRDMA_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BRDMA_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BRDMA_DISABLE = new("BRDMA_DISABLE");
    this.BRDMA_DISABLE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BRDMA_DISABLE.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.BRDMA_DISABLE.add_def_property("spec_access", "rw");
    this.BRDMA_DISABLE.add_def_property("spec_sw_default", "0x1");
    this.BRDMA_DISABLE.add_def_property("sw_default_mask", "0x0");
    this.BRDMA_DISABLE.add_def_property("reset_mask", "0x1");
    this.BRDMA_DATA_USE = new("BRDMA_DATA_USE");
    this.BRDMA_DATA_USE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BRDMA_DATA_USE.configure(this, 2, 1, "RW", 0, 2'h0, 1, 1, 0);
    this.BRDMA_DATA_USE.add_def_property("spec_access", "rw");
    this.BRDMA_DATA_USE.add_def_property("spec_sw_default", "0x0");
    this.BRDMA_DATA_USE.add_def_property("sw_default_mask", "0x0");
    this.BRDMA_DATA_USE.add_def_property("reset_mask", "0x3");
    this.BRDMA_DATA_SIZE = new("BRDMA_DATA_SIZE");
    this.BRDMA_DATA_SIZE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BRDMA_DATA_SIZE.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.BRDMA_DATA_SIZE.add_def_property("spec_access", "rw");
    this.BRDMA_DATA_SIZE.add_def_property("spec_sw_default", "0x0");
    this.BRDMA_DATA_SIZE.add_def_property("sw_default_mask", "0x0");
    this.BRDMA_DATA_SIZE.add_def_property("reset_mask", "0x1");
    this.BRDMA_DATA_MODE = new("BRDMA_DATA_MODE");
    this.BRDMA_DATA_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BRDMA_DATA_MODE.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.BRDMA_DATA_MODE.add_def_property("spec_access", "rw");
    this.BRDMA_DATA_MODE.add_def_property("spec_sw_default", "0x0");
    this.BRDMA_DATA_MODE.add_def_property("sw_default_mask", "0x0");
    this.BRDMA_DATA_MODE.add_def_property("reset_mask", "0x1");
    this.BRDMA_RAM_TYPE = new("BRDMA_RAM_TYPE");
    this.BRDMA_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BRDMA_RAM_TYPE.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.BRDMA_RAM_TYPE.add_def_property("spec_access", "rw");
    this.BRDMA_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.BRDMA_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.BRDMA_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BRDMA_DISABLE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "BRDMA_DATA_USE"}, 1, 2);
    add_hdl_path_slice({rdl_reg_name, "BRDMA_DATA_SIZE"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "BRDMA_DATA_MODE"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "BRDMA_RAM_TYPE"}, 5, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BRDMA_CFG

// D_BS_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_BASE_ADDR_LOW = new("BS_BASE_ADDR_LOW");
    this.BS_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BS_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.BS_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.BS_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.BS_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW

// D_BS_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_BASE_ADDR_HIGH = new("BS_BASE_ADDR_HIGH");
    this.BS_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BS_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.BS_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.BS_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.BS_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH

// D_BS_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_LINE_STRIDE = new("BS_LINE_STRIDE");
    this.BS_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BS_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.BS_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.BS_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.BS_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE

// D_BS_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_SURFACE_STRIDE = new("BS_SURFACE_STRIDE");
    this.BS_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BS_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.BS_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.BS_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.BS_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE

// D_BS_BATCH_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BS_BATCH_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BS_BATCH_STRIDE = new("BS_BATCH_STRIDE");
    this.BS_BATCH_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BS_BATCH_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BS_BATCH_STRIDE.add_def_property("spec_access", "rw");
    this.BS_BATCH_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.BS_BATCH_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.BS_BATCH_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BS_BATCH_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE

// D_NRDMA_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_NRDMA_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NRDMA_DISABLE;
  rand uvm_reg_field_rdl NRDMA_DATA_USE;
  rand uvm_reg_field_rdl NRDMA_DATA_SIZE;
  rand uvm_reg_field_rdl NRDMA_DATA_MODE;
  rand uvm_reg_field_rdl NRDMA_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_NRDMA_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NRDMA_DISABLE = new("NRDMA_DISABLE");
    this.NRDMA_DISABLE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NRDMA_DISABLE.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.NRDMA_DISABLE.add_def_property("spec_access", "rw");
    this.NRDMA_DISABLE.add_def_property("spec_sw_default", "0x1");
    this.NRDMA_DISABLE.add_def_property("sw_default_mask", "0x0");
    this.NRDMA_DISABLE.add_def_property("reset_mask", "0x1");
    this.NRDMA_DATA_USE = new("NRDMA_DATA_USE");
    this.NRDMA_DATA_USE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NRDMA_DATA_USE.configure(this, 2, 1, "RW", 0, 2'h0, 1, 1, 0);
    this.NRDMA_DATA_USE.add_def_property("spec_access", "rw");
    this.NRDMA_DATA_USE.add_def_property("spec_sw_default", "0x0");
    this.NRDMA_DATA_USE.add_def_property("sw_default_mask", "0x0");
    this.NRDMA_DATA_USE.add_def_property("reset_mask", "0x3");
    this.NRDMA_DATA_SIZE = new("NRDMA_DATA_SIZE");
    this.NRDMA_DATA_SIZE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NRDMA_DATA_SIZE.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.NRDMA_DATA_SIZE.add_def_property("spec_access", "rw");
    this.NRDMA_DATA_SIZE.add_def_property("spec_sw_default", "0x0");
    this.NRDMA_DATA_SIZE.add_def_property("sw_default_mask", "0x0");
    this.NRDMA_DATA_SIZE.add_def_property("reset_mask", "0x1");
    this.NRDMA_DATA_MODE = new("NRDMA_DATA_MODE");
    this.NRDMA_DATA_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NRDMA_DATA_MODE.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.NRDMA_DATA_MODE.add_def_property("spec_access", "rw");
    this.NRDMA_DATA_MODE.add_def_property("spec_sw_default", "0x0");
    this.NRDMA_DATA_MODE.add_def_property("sw_default_mask", "0x0");
    this.NRDMA_DATA_MODE.add_def_property("reset_mask", "0x1");
    this.NRDMA_RAM_TYPE = new("NRDMA_RAM_TYPE");
    this.NRDMA_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NRDMA_RAM_TYPE.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.NRDMA_RAM_TYPE.add_def_property("spec_access", "rw");
    this.NRDMA_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.NRDMA_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.NRDMA_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NRDMA_DISABLE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "NRDMA_DATA_USE"}, 1, 2);
    add_hdl_path_slice({rdl_reg_name, "NRDMA_DATA_SIZE"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "NRDMA_DATA_MODE"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "NRDMA_RAM_TYPE"}, 5, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_NRDMA_CFG

// D_BN_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_BASE_ADDR_LOW = new("BN_BASE_ADDR_LOW");
    this.BN_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BN_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.BN_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.BN_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.BN_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW

// D_BN_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_BASE_ADDR_HIGH = new("BN_BASE_ADDR_HIGH");
    this.BN_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BN_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.BN_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.BN_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.BN_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH

// D_BN_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_LINE_STRIDE = new("BN_LINE_STRIDE");
    this.BN_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BN_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.BN_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.BN_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.BN_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE

// D_BN_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_SURFACE_STRIDE = new("BN_SURFACE_STRIDE");
    this.BN_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BN_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.BN_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.BN_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.BN_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE

// D_BN_BATCH_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BN_BATCH_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BN_BATCH_STRIDE = new("BN_BATCH_STRIDE");
    this.BN_BATCH_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BN_BATCH_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.BN_BATCH_STRIDE.add_def_property("spec_access", "rw");
    this.BN_BATCH_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.BN_BATCH_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.BN_BATCH_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BN_BATCH_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE

// D_ERDMA_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_ERDMA_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERDMA_DISABLE;
  rand uvm_reg_field_rdl ERDMA_DATA_USE;
  rand uvm_reg_field_rdl ERDMA_DATA_SIZE;
  rand uvm_reg_field_rdl ERDMA_DATA_MODE;
  rand uvm_reg_field_rdl ERDMA_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_ERDMA_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERDMA_DISABLE = new("ERDMA_DISABLE");
    this.ERDMA_DISABLE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERDMA_DISABLE.configure(this, 1, 0, "RW", 0, 1'h1, 1, 1, 0);
    this.ERDMA_DISABLE.add_def_property("spec_access", "rw");
    this.ERDMA_DISABLE.add_def_property("spec_sw_default", "0x1");
    this.ERDMA_DISABLE.add_def_property("sw_default_mask", "0x0");
    this.ERDMA_DISABLE.add_def_property("reset_mask", "0x1");
    this.ERDMA_DATA_USE = new("ERDMA_DATA_USE");
    this.ERDMA_DATA_USE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERDMA_DATA_USE.configure(this, 2, 1, "RW", 0, 2'h0, 1, 1, 0);
    this.ERDMA_DATA_USE.add_def_property("spec_access", "rw");
    this.ERDMA_DATA_USE.add_def_property("spec_sw_default", "0x0");
    this.ERDMA_DATA_USE.add_def_property("sw_default_mask", "0x0");
    this.ERDMA_DATA_USE.add_def_property("reset_mask", "0x3");
    this.ERDMA_DATA_SIZE = new("ERDMA_DATA_SIZE");
    this.ERDMA_DATA_SIZE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERDMA_DATA_SIZE.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.ERDMA_DATA_SIZE.add_def_property("spec_access", "rw");
    this.ERDMA_DATA_SIZE.add_def_property("spec_sw_default", "0x0");
    this.ERDMA_DATA_SIZE.add_def_property("sw_default_mask", "0x0");
    this.ERDMA_DATA_SIZE.add_def_property("reset_mask", "0x1");
    this.ERDMA_DATA_MODE = new("ERDMA_DATA_MODE");
    this.ERDMA_DATA_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERDMA_DATA_MODE.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.ERDMA_DATA_MODE.add_def_property("spec_access", "rw");
    this.ERDMA_DATA_MODE.add_def_property("spec_sw_default", "0x0");
    this.ERDMA_DATA_MODE.add_def_property("sw_default_mask", "0x0");
    this.ERDMA_DATA_MODE.add_def_property("reset_mask", "0x1");
    this.ERDMA_RAM_TYPE = new("ERDMA_RAM_TYPE");
    this.ERDMA_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ERDMA_RAM_TYPE.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.ERDMA_RAM_TYPE.add_def_property("spec_access", "rw");
    this.ERDMA_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.ERDMA_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.ERDMA_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERDMA_DISABLE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "ERDMA_DATA_USE"}, 1, 2);
    add_hdl_path_slice({rdl_reg_name, "ERDMA_DATA_SIZE"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "ERDMA_DATA_MODE"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "ERDMA_RAM_TYPE"}, 5, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_ERDMA_CFG

// D_EW_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_BASE_ADDR_LOW = new("EW_BASE_ADDR_LOW");
    this.EW_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.EW_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.EW_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.EW_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW

// D_EW_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_BASE_ADDR_HIGH = new("EW_BASE_ADDR_HIGH");
    this.EW_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.EW_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.EW_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.EW_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH

// D_EW_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_LINE_STRIDE = new("EW_LINE_STRIDE");
    this.EW_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.EW_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.EW_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.EW_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE

// D_EW_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_SURFACE_STRIDE = new("EW_SURFACE_STRIDE");
    this.EW_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.EW_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.EW_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.EW_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE

// D_EW_BATCH_STRIDE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl EW_BATCH_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.EW_BATCH_STRIDE = new("EW_BATCH_STRIDE");
    this.EW_BATCH_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.EW_BATCH_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.EW_BATCH_STRIDE.add_def_property("spec_access", "rw");
    this.EW_BATCH_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.EW_BATCH_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.EW_BATCH_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "EW_BATCH_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE

// D_FEATURE_MODE_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl FLYING_MODE;
  rand uvm_reg_field_rdl WINOGRAD;
  rand uvm_reg_field_rdl IN_PRECISION;
  rand uvm_reg_field_rdl PROC_PRECISION;
  rand uvm_reg_field_rdl OUT_PRECISION;
  rand uvm_reg_field_rdl BATCH_NUMBER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.FLYING_MODE = new("FLYING_MODE");
    this.FLYING_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.FLYING_MODE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.FLYING_MODE.add_def_property("spec_access", "rw");
    this.FLYING_MODE.add_def_property("spec_sw_default", "0x0");
    this.FLYING_MODE.add_def_property("sw_default_mask", "0x0");
    this.FLYING_MODE.add_def_property("reset_mask", "0x1");
    this.WINOGRAD = new("WINOGRAD");
    this.WINOGRAD.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WINOGRAD.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.WINOGRAD.add_def_property("spec_access", "rw");
    this.WINOGRAD.add_def_property("spec_sw_default", "0x0");
    this.WINOGRAD.add_def_property("sw_default_mask", "0x0");
    this.WINOGRAD.add_def_property("reset_mask", "0x1");
    this.IN_PRECISION = new("IN_PRECISION");
    this.IN_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.IN_PRECISION.configure(this, 2, 2, "RW", 0, 2'h1, 1, 1, 0);
    this.IN_PRECISION.add_def_property("spec_access", "rw");
    this.IN_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.IN_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.IN_PRECISION.add_def_property("reset_mask", "0x3");
    this.PROC_PRECISION = new("PROC_PRECISION");
    this.PROC_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PROC_PRECISION.configure(this, 2, 4, "RW", 0, 2'h1, 1, 1, 0);
    this.PROC_PRECISION.add_def_property("spec_access", "rw");
    this.PROC_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.PROC_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.PROC_PRECISION.add_def_property("reset_mask", "0x3");
    this.OUT_PRECISION = new("OUT_PRECISION");
    this.OUT_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OUT_PRECISION.configure(this, 2, 6, "RW", 0, 2'h0, 1, 1, 0);
    this.OUT_PRECISION.add_def_property("spec_access", "rw");
    this.OUT_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.OUT_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.OUT_PRECISION.add_def_property("reset_mask", "0x3");
    this.BATCH_NUMBER = new("BATCH_NUMBER");
    this.BATCH_NUMBER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BATCH_NUMBER.configure(this, 5, 8, "RW", 0, 5'h0, 1, 1, 0);
    this.BATCH_NUMBER.add_def_property("spec_access", "rw");
    this.BATCH_NUMBER.add_def_property("spec_sw_default", "0x0");
    this.BATCH_NUMBER.add_def_property("sw_default_mask", "0x0");
    this.BATCH_NUMBER.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "FLYING_MODE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "WINOGRAD"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "IN_PRECISION"}, 2, 2);
    add_hdl_path_slice({rdl_reg_name, "PROC_PRECISION"}, 4, 2);
    add_hdl_path_slice({rdl_reg_name, "OUT_PRECISION"}, 6, 2);
    add_hdl_path_slice({rdl_reg_name, "BATCH_NUMBER"}, 8, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG

// D_SRC_DMA_CFG
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_DMA_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SRC_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_DMA_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SRC_RAM_TYPE = new("SRC_RAM_TYPE");
    this.SRC_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SRC_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.SRC_RAM_TYPE.add_def_property("spec_access", "rw");
    this.SRC_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.SRC_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.SRC_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SRC_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_DMA_CFG

// D_STATUS_NAN_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_NAN_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_NAN_INPUT_NUM = new("STATUS_NAN_INPUT_NUM");
    this.STATUS_NAN_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_NAN_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.STATUS_NAN_INPUT_NUM.add_def_property("spec_access", "r");
    this.STATUS_NAN_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.STATUS_NAN_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.STATUS_NAN_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_NAN_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM

// D_STATUS_INF_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_INF_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_INF_INPUT_NUM = new("STATUS_INF_INPUT_NUM");
    this.STATUS_INF_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_INF_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.STATUS_INF_INPUT_NUM.add_def_property("spec_access", "r");
    this.STATUS_INF_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.STATUS_INF_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.STATUS_INF_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_INF_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM

// D_PERF_ENABLE
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_DMA_EN;
  rand uvm_reg_field_rdl PERF_NAN_INF_COUNT_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_DMA_EN = new("PERF_DMA_EN");
    this.PERF_DMA_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PERF_DMA_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PERF_DMA_EN.add_def_property("spec_access", "rw");
    this.PERF_DMA_EN.add_def_property("spec_sw_default", "0x0");
    this.PERF_DMA_EN.add_def_property("sw_default_mask", "0x0");
    this.PERF_DMA_EN.add_def_property("reset_mask", "0x1");
    this.PERF_NAN_INF_COUNT_EN = new("PERF_NAN_INF_COUNT_EN");
    this.PERF_NAN_INF_COUNT_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PERF_NAN_INF_COUNT_EN.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.PERF_NAN_INF_COUNT_EN.add_def_property("spec_access", "rw");
    this.PERF_NAN_INF_COUNT_EN.add_def_property("spec_sw_default", "0x0");
    this.PERF_NAN_INF_COUNT_EN.add_def_property("sw_default_mask", "0x0");
    this.PERF_NAN_INF_COUNT_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_DMA_EN"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "PERF_NAN_INF_COUNT_EN"}, 1, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ENABLE

// D_PERF_MRDMA_READ_STALL
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl MRDMA_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.MRDMA_STALL = new("MRDMA_STALL");
    this.MRDMA_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.MRDMA_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.MRDMA_STALL.add_def_property("spec_access", "r");
    this.MRDMA_STALL.add_def_property("spec_sw_default", "0x0");
    this.MRDMA_STALL.add_def_property("sw_default_mask", "0x0");
    this.MRDMA_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "MRDMA_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL

// D_PERF_BRDMA_READ_STALL
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BRDMA_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BRDMA_STALL = new("BRDMA_STALL");
    this.BRDMA_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.BRDMA_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.BRDMA_STALL.add_def_property("spec_access", "r");
    this.BRDMA_STALL.add_def_property("spec_sw_default", "0x0");
    this.BRDMA_STALL.add_def_property("sw_default_mask", "0x0");
    this.BRDMA_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BRDMA_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL

// D_PERF_NRDMA_READ_STALL
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NRDMA_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NRDMA_STALL = new("NRDMA_STALL");
    this.NRDMA_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.NRDMA_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.NRDMA_STALL.add_def_property("spec_access", "r");
    this.NRDMA_STALL.add_def_property("spec_sw_default", "0x0");
    this.NRDMA_STALL.add_def_property("sw_default_mask", "0x0");
    this.NRDMA_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NRDMA_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL

// D_PERF_ERDMA_READ_STALL
class reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ERDMA_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ERDMA_STALL = new("ERDMA_STALL");
    this.ERDMA_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.ERDMA_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.ERDMA_STALL.add_def_property("spec_access", "r");
    this.ERDMA_STALL.add_def_property("spec_sw_default", "0x0");
    this.ERDMA_STALL.add_def_property("sw_default_mask", "0x0");
    this.ERDMA_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ERDMA_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL

// Block NVDLA_SDP_RDMA
class block_addrmap_NVDLA_NVDLA_SDP_RDMA extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH D_DATA_CUBE_WIDTH;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT D_DATA_CUBE_HEIGHT;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL D_DATA_CUBE_CHANNEL;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW D_SRC_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH D_SRC_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE D_SRC_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE D_SRC_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BRDMA_CFG D_BRDMA_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW D_BS_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH D_BS_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE D_BS_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE D_BS_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE D_BS_BATCH_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_NRDMA_CFG D_NRDMA_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW D_BN_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH D_BN_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE D_BN_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE D_BN_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE D_BN_BATCH_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_ERDMA_CFG D_ERDMA_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW D_EW_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH D_EW_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE D_EW_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE D_EW_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE D_EW_BATCH_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG D_FEATURE_MODE_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_SRC_DMA_CFG D_SRC_DMA_CFG;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM D_STATUS_NAN_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM D_STATUS_INF_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ENABLE D_PERF_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL D_PERF_MRDMA_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL D_PERF_BRDMA_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL D_PERF_NRDMA_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL D_PERF_ERDMA_READ_STALL;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_SDP_RDMA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.D_DATA_CUBE_WIDTH = new("D_DATA_CUBE_WIDTH");
    this.D_DATA_CUBE_WIDTH.configure(this, null, "");
    this.D_DATA_CUBE_WIDTH.set_rdl_tag("D_DATA_CUBE_WIDTH_");
    this.D_DATA_CUBE_WIDTH.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_WIDTH.build();
    this.default_map.add_reg(this.D_DATA_CUBE_WIDTH, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.D_DATA_CUBE_HEIGHT = new("D_DATA_CUBE_HEIGHT");
    this.D_DATA_CUBE_HEIGHT.configure(this, null, "");
    this.D_DATA_CUBE_HEIGHT.set_rdl_tag("D_DATA_CUBE_HEIGHT_");
    this.D_DATA_CUBE_HEIGHT.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_HEIGHT.build();
    this.default_map.add_reg(this.D_DATA_CUBE_HEIGHT, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.D_DATA_CUBE_CHANNEL = new("D_DATA_CUBE_CHANNEL");
    this.D_DATA_CUBE_CHANNEL.configure(this, null, "");
    this.D_DATA_CUBE_CHANNEL.set_rdl_tag("D_DATA_CUBE_CHANNEL_");
    this.D_DATA_CUBE_CHANNEL.set_reg_test_info(0, 0, 2);
    this.D_DATA_CUBE_CHANNEL.build();
    this.default_map.add_reg(this.D_DATA_CUBE_CHANNEL, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.D_SRC_BASE_ADDR_LOW = new("D_SRC_BASE_ADDR_LOW");
    this.D_SRC_BASE_ADDR_LOW.configure(this, null, "");
    this.D_SRC_BASE_ADDR_LOW.set_rdl_tag("D_SRC_BASE_ADDR_LOW_");
    this.D_SRC_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_SRC_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_SRC_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.D_SRC_BASE_ADDR_HIGH = new("D_SRC_BASE_ADDR_HIGH");
    this.D_SRC_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_SRC_BASE_ADDR_HIGH.set_rdl_tag("D_SRC_BASE_ADDR_HIGH_");
    this.D_SRC_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_SRC_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_SRC_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.D_SRC_LINE_STRIDE = new("D_SRC_LINE_STRIDE");
    this.D_SRC_LINE_STRIDE.configure(this, null, "");
    this.D_SRC_LINE_STRIDE.set_rdl_tag("D_SRC_LINE_STRIDE_");
    this.D_SRC_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_SRC_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_SRC_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.D_SRC_SURFACE_STRIDE = new("D_SRC_SURFACE_STRIDE");
    this.D_SRC_SURFACE_STRIDE.configure(this, null, "");
    this.D_SRC_SURFACE_STRIDE.set_rdl_tag("D_SRC_SURFACE_STRIDE_");
    this.D_SRC_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_SRC_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_SRC_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.D_BRDMA_CFG = new("D_BRDMA_CFG");
    this.D_BRDMA_CFG.configure(this, null, "");
    this.D_BRDMA_CFG.set_rdl_tag("D_BRDMA_CFG_");
    this.D_BRDMA_CFG.set_reg_test_info(0, 0, 2);
    this.D_BRDMA_CFG.build();
    this.default_map.add_reg(this.D_BRDMA_CFG, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.D_BS_BASE_ADDR_LOW = new("D_BS_BASE_ADDR_LOW");
    this.D_BS_BASE_ADDR_LOW.configure(this, null, "");
    this.D_BS_BASE_ADDR_LOW.set_rdl_tag("D_BS_BASE_ADDR_LOW_");
    this.D_BS_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_BS_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_BS_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.D_BS_BASE_ADDR_HIGH = new("D_BS_BASE_ADDR_HIGH");
    this.D_BS_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_BS_BASE_ADDR_HIGH.set_rdl_tag("D_BS_BASE_ADDR_HIGH_");
    this.D_BS_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_BS_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_BS_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.D_BS_LINE_STRIDE = new("D_BS_LINE_STRIDE");
    this.D_BS_LINE_STRIDE.configure(this, null, "");
    this.D_BS_LINE_STRIDE.set_rdl_tag("D_BS_LINE_STRIDE_");
    this.D_BS_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_BS_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_BS_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.D_BS_SURFACE_STRIDE = new("D_BS_SURFACE_STRIDE");
    this.D_BS_SURFACE_STRIDE.configure(this, null, "");
    this.D_BS_SURFACE_STRIDE.set_rdl_tag("D_BS_SURFACE_STRIDE_");
    this.D_BS_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_BS_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_BS_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.D_BS_BATCH_STRIDE = new("D_BS_BATCH_STRIDE");
    this.D_BS_BATCH_STRIDE.configure(this, null, "");
    this.D_BS_BATCH_STRIDE.set_rdl_tag("D_BS_BATCH_STRIDE_");
    this.D_BS_BATCH_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_BS_BATCH_STRIDE.build();
    this.default_map.add_reg(this.D_BS_BATCH_STRIDE, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.D_NRDMA_CFG = new("D_NRDMA_CFG");
    this.D_NRDMA_CFG.configure(this, null, "");
    this.D_NRDMA_CFG.set_rdl_tag("D_NRDMA_CFG_");
    this.D_NRDMA_CFG.set_reg_test_info(0, 0, 2);
    this.D_NRDMA_CFG.build();
    this.default_map.add_reg(this.D_NRDMA_CFG, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.D_BN_BASE_ADDR_LOW = new("D_BN_BASE_ADDR_LOW");
    this.D_BN_BASE_ADDR_LOW.configure(this, null, "");
    this.D_BN_BASE_ADDR_LOW.set_rdl_tag("D_BN_BASE_ADDR_LOW_");
    this.D_BN_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_BN_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_BN_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.D_BN_BASE_ADDR_HIGH = new("D_BN_BASE_ADDR_HIGH");
    this.D_BN_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_BN_BASE_ADDR_HIGH.set_rdl_tag("D_BN_BASE_ADDR_HIGH_");
    this.D_BN_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_BN_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_BN_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.D_BN_LINE_STRIDE = new("D_BN_LINE_STRIDE");
    this.D_BN_LINE_STRIDE.configure(this, null, "");
    this.D_BN_LINE_STRIDE.set_rdl_tag("D_BN_LINE_STRIDE_");
    this.D_BN_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_BN_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_BN_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h4c, "RW", 0);
    this.D_BN_SURFACE_STRIDE = new("D_BN_SURFACE_STRIDE");
    this.D_BN_SURFACE_STRIDE.configure(this, null, "");
    this.D_BN_SURFACE_STRIDE.set_rdl_tag("D_BN_SURFACE_STRIDE_");
    this.D_BN_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_BN_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_BN_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h50, "RW", 0);
    this.D_BN_BATCH_STRIDE = new("D_BN_BATCH_STRIDE");
    this.D_BN_BATCH_STRIDE.configure(this, null, "");
    this.D_BN_BATCH_STRIDE.set_rdl_tag("D_BN_BATCH_STRIDE_");
    this.D_BN_BATCH_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_BN_BATCH_STRIDE.build();
    this.default_map.add_reg(this.D_BN_BATCH_STRIDE, `UVM_REG_ADDR_WIDTH'h54, "RW", 0);
    this.D_ERDMA_CFG = new("D_ERDMA_CFG");
    this.D_ERDMA_CFG.configure(this, null, "");
    this.D_ERDMA_CFG.set_rdl_tag("D_ERDMA_CFG_");
    this.D_ERDMA_CFG.set_reg_test_info(0, 0, 2);
    this.D_ERDMA_CFG.build();
    this.default_map.add_reg(this.D_ERDMA_CFG, `UVM_REG_ADDR_WIDTH'h58, "RW", 0);
    this.D_EW_BASE_ADDR_LOW = new("D_EW_BASE_ADDR_LOW");
    this.D_EW_BASE_ADDR_LOW.configure(this, null, "");
    this.D_EW_BASE_ADDR_LOW.set_rdl_tag("D_EW_BASE_ADDR_LOW_");
    this.D_EW_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_EW_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_EW_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h5c, "RW", 0);
    this.D_EW_BASE_ADDR_HIGH = new("D_EW_BASE_ADDR_HIGH");
    this.D_EW_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_EW_BASE_ADDR_HIGH.set_rdl_tag("D_EW_BASE_ADDR_HIGH_");
    this.D_EW_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_EW_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_EW_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h60, "RW", 0);
    this.D_EW_LINE_STRIDE = new("D_EW_LINE_STRIDE");
    this.D_EW_LINE_STRIDE.configure(this, null, "");
    this.D_EW_LINE_STRIDE.set_rdl_tag("D_EW_LINE_STRIDE_");
    this.D_EW_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_EW_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_EW_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h64, "RW", 0);
    this.D_EW_SURFACE_STRIDE = new("D_EW_SURFACE_STRIDE");
    this.D_EW_SURFACE_STRIDE.configure(this, null, "");
    this.D_EW_SURFACE_STRIDE.set_rdl_tag("D_EW_SURFACE_STRIDE_");
    this.D_EW_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_EW_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_EW_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h68, "RW", 0);
    this.D_EW_BATCH_STRIDE = new("D_EW_BATCH_STRIDE");
    this.D_EW_BATCH_STRIDE.configure(this, null, "");
    this.D_EW_BATCH_STRIDE.set_rdl_tag("D_EW_BATCH_STRIDE_");
    this.D_EW_BATCH_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_EW_BATCH_STRIDE.build();
    this.default_map.add_reg(this.D_EW_BATCH_STRIDE, `UVM_REG_ADDR_WIDTH'h6c, "RW", 0);
    this.D_FEATURE_MODE_CFG = new("D_FEATURE_MODE_CFG");
    this.D_FEATURE_MODE_CFG.configure(this, null, "");
    this.D_FEATURE_MODE_CFG.set_rdl_tag("D_FEATURE_MODE_CFG_");
    this.D_FEATURE_MODE_CFG.set_reg_test_info(0, 0, 2);
    this.D_FEATURE_MODE_CFG.build();
    this.default_map.add_reg(this.D_FEATURE_MODE_CFG, `UVM_REG_ADDR_WIDTH'h70, "RW", 0);
    this.D_SRC_DMA_CFG = new("D_SRC_DMA_CFG");
    this.D_SRC_DMA_CFG.configure(this, null, "");
    this.D_SRC_DMA_CFG.set_rdl_tag("D_SRC_DMA_CFG_");
    this.D_SRC_DMA_CFG.set_reg_test_info(0, 0, 2);
    this.D_SRC_DMA_CFG.build();
    this.default_map.add_reg(this.D_SRC_DMA_CFG, `UVM_REG_ADDR_WIDTH'h74, "RW", 0);
    this.D_STATUS_NAN_INPUT_NUM = new("D_STATUS_NAN_INPUT_NUM");
    this.D_STATUS_NAN_INPUT_NUM.configure(this, null, "");
    this.D_STATUS_NAN_INPUT_NUM.set_rdl_tag("D_STATUS_NAN_INPUT_NUM_");
    this.D_STATUS_NAN_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_STATUS_NAN_INPUT_NUM.build();
    this.default_map.add_reg(this.D_STATUS_NAN_INPUT_NUM, `UVM_REG_ADDR_WIDTH'h78, "RO", 0);
    this.D_STATUS_INF_INPUT_NUM = new("D_STATUS_INF_INPUT_NUM");
    this.D_STATUS_INF_INPUT_NUM.configure(this, null, "");
    this.D_STATUS_INF_INPUT_NUM.set_rdl_tag("D_STATUS_INF_INPUT_NUM_");
    this.D_STATUS_INF_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_STATUS_INF_INPUT_NUM.build();
    this.default_map.add_reg(this.D_STATUS_INF_INPUT_NUM, `UVM_REG_ADDR_WIDTH'h7c, "RO", 0);
    this.D_PERF_ENABLE = new("D_PERF_ENABLE");
    this.D_PERF_ENABLE.configure(this, null, "");
    this.D_PERF_ENABLE.set_rdl_tag("D_PERF_ENABLE_");
    this.D_PERF_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_PERF_ENABLE.build();
    this.default_map.add_reg(this.D_PERF_ENABLE, `UVM_REG_ADDR_WIDTH'h80, "RW", 0);
    this.D_PERF_MRDMA_READ_STALL = new("D_PERF_MRDMA_READ_STALL");
    this.D_PERF_MRDMA_READ_STALL.configure(this, null, "");
    this.D_PERF_MRDMA_READ_STALL.set_rdl_tag("D_PERF_MRDMA_READ_STALL_");
    this.D_PERF_MRDMA_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_MRDMA_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_MRDMA_READ_STALL, `UVM_REG_ADDR_WIDTH'h84, "RO", 0);
    this.D_PERF_BRDMA_READ_STALL = new("D_PERF_BRDMA_READ_STALL");
    this.D_PERF_BRDMA_READ_STALL.configure(this, null, "");
    this.D_PERF_BRDMA_READ_STALL.set_rdl_tag("D_PERF_BRDMA_READ_STALL_");
    this.D_PERF_BRDMA_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_BRDMA_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_BRDMA_READ_STALL, `UVM_REG_ADDR_WIDTH'h88, "RO", 0);
    this.D_PERF_NRDMA_READ_STALL = new("D_PERF_NRDMA_READ_STALL");
    this.D_PERF_NRDMA_READ_STALL.configure(this, null, "");
    this.D_PERF_NRDMA_READ_STALL.set_rdl_tag("D_PERF_NRDMA_READ_STALL_");
    this.D_PERF_NRDMA_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_NRDMA_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_NRDMA_READ_STALL, `UVM_REG_ADDR_WIDTH'h8c, "RO", 0);
    this.D_PERF_ERDMA_READ_STALL = new("D_PERF_ERDMA_READ_STALL");
    this.D_PERF_ERDMA_READ_STALL.configure(this, null, "");
    this.D_PERF_ERDMA_READ_STALL.set_rdl_tag("D_PERF_ERDMA_READ_STALL_");
    this.D_PERF_ERDMA_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_ERDMA_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_ERDMA_READ_STALL, `UVM_REG_ADDR_WIDTH'h90, "RO", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_SDP_RDMA)
endclass : block_addrmap_NVDLA_NVDLA_SDP_RDMA

// Base block
class block_addrmap_NVDLA extends uvm_reg_block_rdl;
  rand block_addrmap_NVDLA_NVDLA_SDP_RDMA NVDLA_SDP_RDMA;
  
  function new(string name = "block_addrmap_NVDLA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", `UVM_REG_ADDR_WIDTH'h0, 4, UVM_LITTLE_ENDIAN, 1);
    this.set_rdl_address_map(1);
    this.set_rdl_address_map_hdl_path({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.NVDLA_SDP_RDMA = block_addrmap_NVDLA_NVDLA_SDP_RDMA::type_id::create("NVDLA_SDP_RDMA",, get_full_name());
    this.NVDLA_SDP_RDMA.configure(this, "");
    this.NVDLA_SDP_RDMA.set_rdl_tag("NVDLA_SDP_RDMA_");
    this.NVDLA_SDP_RDMA.build();
    this.default_map.add_submap(this.NVDLA_SDP_RDMA.default_map, `UVM_REG_ADDR_WIDTH'h8000);
    set_hdl_path_root({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.add_callbacks();
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA)
endclass : block_addrmap_NVDLA
