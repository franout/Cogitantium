//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_CSC.rdl
//   Parms: opendla.parms
//   Date: Fri Feb 07 13:00:56 CET 2020
//

#include "ordt_pio_common.hpp"
#include "ordt_pio.hpp"

// ------------------ ordt_addr_elem methods ------------------

ordt_addr_elem::ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : m_startaddress(_m_startaddress),
    m_endaddress(_m_endaddress) {
}

bool  ordt_addr_elem::containsAddress(const uint64_t &addr) {
  return ((addr >= m_startaddress) && (addr <= m_endaddress));
}

bool  ordt_addr_elem::isBelowAddress(const uint64_t &addr) {
  return (addr > m_endaddress);
}

bool  ordt_addr_elem::isAboveAddress(const uint64_t &addr) {
  return (addr < m_startaddress);
}

bool  ordt_addr_elem::hasStartAddress(const uint64_t &addr) {
  return (addr == m_startaddress);
}

void  ordt_addr_elem::update_child_ptrs() {
}

// ------------------ ordt_regset methods ------------------

ordt_addr_elem*  ordt_regset::findAddrElem(const uint64_t &addr) {
  int lo = 0;
  int hi = m_children.size()-1;
  int mid = 0;
  while (lo <= hi) {
     mid = (lo + hi) / 2;
     if (m_children[mid]->containsAddress(addr)) {
        //outElem = m_children[mid];
        return m_children[mid];
     }
     else if (m_children[mid]->isAboveAddress(addr))
        hi = mid - 1;
     else
        lo = mid + 1;
  }
  return nullptr;
}

ordt_regset::ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

int  ordt_regset::write(const uint64_t &addr, const ordt_data &wdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->write(addr, wdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in regset\n";
  #endif
     return 8;
}

int  ordt_regset::read(const uint64_t &addr, ordt_data &rdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->read(addr, rdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in regset\n";
  #endif
     rdata.clear();
     return 8;
}

// ------------------ ordt_reg methods ------------------

ordt_reg::ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

ordt_reg::ordt_reg(const ordt_reg &_old)
  : ordt_addr_elem(_old),
    m_mutex() {
}

void  ordt_reg::write(const ordt_data &wdata) {
}

int  ordt_reg::write(const uint64_t &addr, const ordt_data &wdata) {
     return 0;
}

void  ordt_reg::read(ordt_data &rdata) {
}

int  ordt_reg::read(const uint64_t &addr, ordt_data &rdata) {
     return 0;
}

// ------------------ ordt_rg_NVDLA_CSC_S_STATUS methods ------------------

ordt_rg_NVDLA_CSC_S_STATUS::ordt_rg_NVDLA_CSC_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CSC_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_CSC_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_S_POINTER methods ------------------

ordt_rg_NVDLA_CSC_S_POINTER::ordt_rg_NVDLA_CSC_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CSC_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_CSC_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_CSC_D_OP_ENABLE::ordt_rg_NVDLA_CSC_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_MISC_CFG methods ------------------

ordt_rg_NVDLA_CSC_D_MISC_CFG::ordt_rg_NVDLA_CSC_D_MISC_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CONV_MODE(0, 1, 0x0, r_std, w_std),
    IN_PRECISION(8, 2, 0x1, r_std, w_std),
    PROC_PRECISION(12, 2, 0x1, r_std, w_std),
    DATA_REUSE(16, 1, 0x0, r_std, w_std),
    WEIGHT_REUSE(20, 1, 0x0, r_std, w_std),
    SKIP_DATA_RLS(24, 1, 0x0, r_std, w_std),
    SKIP_WEIGHT_RLS(28, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_MISC_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_MISC_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_MISC_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_MISC_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CONV_MODE.write(wdata);
  IN_PRECISION.write(wdata);
  PROC_PRECISION.write(wdata);
  DATA_REUSE.write(wdata);
  WEIGHT_REUSE.write(wdata);
  SKIP_DATA_RLS.write(wdata);
  SKIP_WEIGHT_RLS.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_MISC_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_MISC_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_MISC_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_MISC_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CONV_MODE.read(rdata);
  IN_PRECISION.read(rdata);
  PROC_PRECISION.read(rdata);
  DATA_REUSE.read(rdata);
  WEIGHT_REUSE.read(rdata);
  SKIP_DATA_RLS.read(rdata);
  SKIP_WEIGHT_RLS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT methods ------------------

ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT::ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_FORMAT(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_FORMAT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_FORMAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0 methods ------------------

ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0::ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_WIDTH_EXT(0, 13, 0x0, r_std, w_std),
    DATAIN_HEIGHT_EXT(16, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_WIDTH_EXT.write(wdata);
  DATAIN_HEIGHT_EXT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_WIDTH_EXT.read(rdata);
  DATAIN_HEIGHT_EXT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1 methods ------------------

ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1::ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_CHANNEL_EXT(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_CHANNEL_EXT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_CHANNEL_EXT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_BATCH_NUMBER methods ------------------

ordt_rg_NVDLA_CSC_D_BATCH_NUMBER::ordt_rg_NVDLA_CSC_D_BATCH_NUMBER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BATCHES(0, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_BATCH_NUMBER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_BATCH_NUMBER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_BATCH_NUMBER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_BATCH_NUMBER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BATCHES.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_BATCH_NUMBER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_BATCH_NUMBER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_BATCH_NUMBER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_BATCH_NUMBER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BATCHES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION methods ------------------

ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION::ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    Y_EXTENSION(0, 2, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  Y_EXTENSION.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  Y_EXTENSION.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE methods ------------------

ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE::ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ENTRIES(0, 14, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ENTRIES.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ENTRIES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT methods ------------------

ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT::ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_FORMAT(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_FORMAT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_FORMAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0 methods ------------------

ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0::ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_WIDTH_EXT(0, 5, 0x0, r_std, w_std),
    WEIGHT_HEIGHT_EXT(16, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_WIDTH_EXT.write(wdata);
  WEIGHT_HEIGHT_EXT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_WIDTH_EXT.read(rdata);
  WEIGHT_HEIGHT_EXT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1 methods ------------------

ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1::ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_CHANNEL_EXT(0, 13, 0x0, r_std, w_std),
    WEIGHT_KERNEL(16, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_CHANNEL_EXT.write(wdata);
  WEIGHT_KERNEL.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_CHANNEL_EXT.read(rdata);
  WEIGHT_KERNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES methods ------------------

ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES::ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_BYTES(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_BYTES.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_BYTES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_WMB_BYTES methods ------------------

ordt_rg_NVDLA_CSC_D_WMB_BYTES::ordt_rg_NVDLA_CSC_D_WMB_BYTES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WMB_BYTES(0, 28, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_WMB_BYTES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_WMB_BYTES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WMB_BYTES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WMB_BYTES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WMB_BYTES.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_WMB_BYTES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_WMB_BYTES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WMB_BYTES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WMB_BYTES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WMB_BYTES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0 methods ------------------

ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0::ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAOUT_WIDTH(0, 13, 0x0, r_std, w_std),
    DATAOUT_HEIGHT(16, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAOUT_WIDTH.write(wdata);
  DATAOUT_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAOUT_WIDTH.read(rdata);
  DATAOUT_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1 methods ------------------

ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1::ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAOUT_CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAOUT_CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAOUT_CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_ATOMICS methods ------------------

ordt_rg_NVDLA_CSC_D_ATOMICS::ordt_rg_NVDLA_CSC_D_ATOMICS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ATOMICS(0, 21, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_ATOMICS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_ATOMICS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ATOMICS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ATOMICS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ATOMICS.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_ATOMICS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_ATOMICS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ATOMICS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ATOMICS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ATOMICS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_RELEASE methods ------------------

ordt_rg_NVDLA_CSC_D_RELEASE::ordt_rg_NVDLA_CSC_D_RELEASE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RLS_SLICES(0, 12, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_RELEASE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_RELEASE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_RELEASE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_RELEASE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RLS_SLICES.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_RELEASE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_RELEASE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_RELEASE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_RELEASE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RLS_SLICES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT methods ------------------

ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT::ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CONV_X_STRIDE_EXT(0, 3, 0x0, r_std, w_std),
    CONV_Y_STRIDE_EXT(16, 3, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CONV_X_STRIDE_EXT.write(wdata);
  CONV_Y_STRIDE_EXT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CONV_X_STRIDE_EXT.read(rdata);
  CONV_Y_STRIDE_EXT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_DILATION_EXT methods ------------------

ordt_rg_NVDLA_CSC_D_DILATION_EXT::ordt_rg_NVDLA_CSC_D_DILATION_EXT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    X_DILATION_EXT(0, 5, 0x0, r_std, w_std),
    Y_DILATION_EXT(16, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_DILATION_EXT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_DILATION_EXT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DILATION_EXT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DILATION_EXT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  X_DILATION_EXT.write(wdata);
  Y_DILATION_EXT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_DILATION_EXT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_DILATION_EXT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DILATION_EXT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DILATION_EXT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  X_DILATION_EXT.read(rdata);
  Y_DILATION_EXT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_ZERO_PADDING methods ------------------

ordt_rg_NVDLA_CSC_D_ZERO_PADDING::ordt_rg_NVDLA_CSC_D_ZERO_PADDING(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_LEFT(0, 5, 0x0, r_std, w_std),
    PAD_TOP(16, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_ZERO_PADDING::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ZERO_PADDING::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_LEFT.write(wdata);
  PAD_TOP.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_ZERO_PADDING::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ZERO_PADDING::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_LEFT.read(rdata);
  PAD_TOP.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE methods ------------------

ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE::ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_BANK methods ------------------

ordt_rg_NVDLA_CSC_D_BANK::ordt_rg_NVDLA_CSC_D_BANK(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATA_BANK(0, 5, 0x0, r_std, w_std),
    WEIGHT_BANK(16, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_BANK::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_BANK at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_BANK\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_BANK::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATA_BANK.write(wdata);
  WEIGHT_BANK.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_BANK::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_BANK at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_BANK\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_BANK::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATA_BANK.read(rdata);
  WEIGHT_BANK.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_PRA_CFG methods ------------------

ordt_rg_NVDLA_CSC_D_PRA_CFG::ordt_rg_NVDLA_CSC_D_PRA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRA_TRUNCATE(0, 2, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_PRA_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_PRA_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_PRA_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_PRA_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRA_TRUNCATE.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_PRA_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_PRA_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_PRA_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_PRA_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRA_TRUNCATE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_CYA methods ------------------

ordt_rg_NVDLA_CSC_D_CYA::ordt_rg_NVDLA_CSC_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CYA(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_CYA::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_CYA at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_CYA\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_CYA::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CYA.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_CYA::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_CYA at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_CYA\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_CYA::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CYA.read(rdata);
}

// ------------------ ordt_rset_NVDLA_CSC methods ------------------

ordt_rset_NVDLA_CSC::ordt_rset_NVDLA_CSC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    D_OP_ENABLE(_m_startaddress + 0x8, _m_startaddress + 0xb),
    D_MISC_CFG(_m_startaddress + 0xc, _m_startaddress + 0xf),
    D_DATAIN_FORMAT(_m_startaddress + 0x10, _m_startaddress + 0x13),
    D_DATAIN_SIZE_EXT_0(_m_startaddress + 0x14, _m_startaddress + 0x17),
    D_DATAIN_SIZE_EXT_1(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    D_BATCH_NUMBER(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    D_POST_Y_EXTENSION(_m_startaddress + 0x20, _m_startaddress + 0x23),
    D_ENTRY_PER_SLICE(_m_startaddress + 0x24, _m_startaddress + 0x27),
    D_WEIGHT_FORMAT(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    D_WEIGHT_SIZE_EXT_0(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    D_WEIGHT_SIZE_EXT_1(_m_startaddress + 0x30, _m_startaddress + 0x33),
    D_WEIGHT_BYTES(_m_startaddress + 0x34, _m_startaddress + 0x37),
    D_WMB_BYTES(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    D_DATAOUT_SIZE_0(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    D_DATAOUT_SIZE_1(_m_startaddress + 0x40, _m_startaddress + 0x43),
    D_ATOMICS(_m_startaddress + 0x44, _m_startaddress + 0x47),
    D_RELEASE(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    D_CONV_STRIDE_EXT(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    D_DILATION_EXT(_m_startaddress + 0x50, _m_startaddress + 0x53),
    D_ZERO_PADDING(_m_startaddress + 0x54, _m_startaddress + 0x57),
    D_ZERO_PADDING_VALUE(_m_startaddress + 0x58, _m_startaddress + 0x5b),
    D_BANK(_m_startaddress + 0x5c, _m_startaddress + 0x5f),
    D_PRA_CFG(_m_startaddress + 0x60, _m_startaddress + 0x63),
    D_CYA(_m_startaddress + 0x64, _m_startaddress + 0x67) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
  m_children.push_back(&D_DATAIN_FORMAT);
  m_children.push_back(&D_DATAIN_SIZE_EXT_0);
  m_children.push_back(&D_DATAIN_SIZE_EXT_1);
  m_children.push_back(&D_BATCH_NUMBER);
  m_children.push_back(&D_POST_Y_EXTENSION);
  m_children.push_back(&D_ENTRY_PER_SLICE);
  m_children.push_back(&D_WEIGHT_FORMAT);
  m_children.push_back(&D_WEIGHT_SIZE_EXT_0);
  m_children.push_back(&D_WEIGHT_SIZE_EXT_1);
  m_children.push_back(&D_WEIGHT_BYTES);
  m_children.push_back(&D_WMB_BYTES);
  m_children.push_back(&D_DATAOUT_SIZE_0);
  m_children.push_back(&D_DATAOUT_SIZE_1);
  m_children.push_back(&D_ATOMICS);
  m_children.push_back(&D_RELEASE);
  m_children.push_back(&D_CONV_STRIDE_EXT);
  m_children.push_back(&D_DILATION_EXT);
  m_children.push_back(&D_ZERO_PADDING);
  m_children.push_back(&D_ZERO_PADDING_VALUE);
  m_children.push_back(&D_BANK);
  m_children.push_back(&D_PRA_CFG);
  m_children.push_back(&D_CYA);
}

void  ordt_rset_NVDLA_CSC::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
  m_children.push_back(&D_DATAIN_FORMAT);
  m_children.push_back(&D_DATAIN_SIZE_EXT_0);
  m_children.push_back(&D_DATAIN_SIZE_EXT_1);
  m_children.push_back(&D_BATCH_NUMBER);
  m_children.push_back(&D_POST_Y_EXTENSION);
  m_children.push_back(&D_ENTRY_PER_SLICE);
  m_children.push_back(&D_WEIGHT_FORMAT);
  m_children.push_back(&D_WEIGHT_SIZE_EXT_0);
  m_children.push_back(&D_WEIGHT_SIZE_EXT_1);
  m_children.push_back(&D_WEIGHT_BYTES);
  m_children.push_back(&D_WMB_BYTES);
  m_children.push_back(&D_DATAOUT_SIZE_0);
  m_children.push_back(&D_DATAOUT_SIZE_1);
  m_children.push_back(&D_ATOMICS);
  m_children.push_back(&D_RELEASE);
  m_children.push_back(&D_CONV_STRIDE_EXT);
  m_children.push_back(&D_DILATION_EXT);
  m_children.push_back(&D_ZERO_PADDING);
  m_children.push_back(&D_ZERO_PADDING_VALUE);
  m_children.push_back(&D_BANK);
  m_children.push_back(&D_PRA_CFG);
  m_children.push_back(&D_CYA);
}

// ------------------ ordt_root methods ------------------

ordt_root::ordt_root()
  : ordt_root(0x0, 0x4067) {
}

ordt_root::ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    NVDLA_CSC(_m_startaddress + 0x4000, _m_startaddress + 0x407f) {
  m_children.push_back(&NVDLA_CSC);
}

void  ordt_root::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&NVDLA_CSC);
}

