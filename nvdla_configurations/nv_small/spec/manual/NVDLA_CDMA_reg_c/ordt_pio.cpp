//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_CDMA.rdl
//   Parms: opendla.parms
//   Date: Tue Feb 04 11:22:06 CET 2020
//

#include "ordt_pio_common.hpp"
#include "ordt_pio.hpp"

// ------------------ ordt_addr_elem methods ------------------

ordt_addr_elem::ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : m_startaddress(_m_startaddress),
    m_endaddress(_m_endaddress) {
}

bool  ordt_addr_elem::containsAddress(const uint64_t &addr) {
  return ((addr >= m_startaddress) && (addr <= m_endaddress));
}

bool  ordt_addr_elem::isBelowAddress(const uint64_t &addr) {
  return (addr > m_endaddress);
}

bool  ordt_addr_elem::isAboveAddress(const uint64_t &addr) {
  return (addr < m_startaddress);
}

bool  ordt_addr_elem::hasStartAddress(const uint64_t &addr) {
  return (addr == m_startaddress);
}

void  ordt_addr_elem::update_child_ptrs() {
}

// ------------------ ordt_regset methods ------------------

ordt_addr_elem*  ordt_regset::findAddrElem(const uint64_t &addr) {
  int lo = 0;
  int hi = m_children.size()-1;
  int mid = 0;
  while (lo <= hi) {
     mid = (lo + hi) / 2;
     if (m_children[mid]->containsAddress(addr)) {
        //outElem = m_children[mid];
        return m_children[mid];
     }
     else if (m_children[mid]->isAboveAddress(addr))
        hi = mid - 1;
     else
        lo = mid + 1;
  }
  return nullptr;
}

ordt_regset::ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

int  ordt_regset::write(const uint64_t &addr, const ordt_data &wdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->write(addr, wdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in regset\n";
  #endif
     return 8;
}

int  ordt_regset::read(const uint64_t &addr, ordt_data &rdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->read(addr, rdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in regset\n";
  #endif
     rdata.clear();
     return 8;
}

// ------------------ ordt_reg methods ------------------

ordt_reg::ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

ordt_reg::ordt_reg(const ordt_reg &_old)
  : ordt_addr_elem(_old),
    m_mutex() {
}

void  ordt_reg::write(const ordt_data &wdata) {
}

int  ordt_reg::write(const uint64_t &addr, const ordt_data &wdata) {
     return 0;
}

void  ordt_reg::read(ordt_data &rdata) {
}

int  ordt_reg::read(const uint64_t &addr, ordt_data &rdata) {
     return 0;
}

// ------------------ ordt_rg_NVDLA_CDMA_S_STATUS methods ------------------

ordt_rg_NVDLA_CDMA_S_STATUS::ordt_rg_NVDLA_CDMA_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_S_POINTER methods ------------------

ordt_rg_NVDLA_CDMA_S_POINTER::ordt_rg_NVDLA_CDMA_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_S_ARBITER methods ------------------

ordt_rg_NVDLA_CDMA_S_ARBITER::ordt_rg_NVDLA_CDMA_S_ARBITER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ARB_WEIGHT(0, 4, 0xf, r_std, w_std),
    ARB_WMB(16, 4, 0x3, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_S_ARBITER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_S_ARBITER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_ARBITER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_ARBITER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ARB_WEIGHT.write(wdata);
  ARB_WMB.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_S_ARBITER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_S_ARBITER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_ARBITER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_ARBITER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ARB_WEIGHT.read(rdata);
  ARB_WMB.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS methods ------------------

ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS::ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    FLUSH_DONE(0, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  FLUSH_DONE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  FLUSH_DONE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_CDMA_D_OP_ENABLE::ordt_rg_NVDLA_CDMA_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_MISC_CFG methods ------------------

ordt_rg_NVDLA_CDMA_D_MISC_CFG::ordt_rg_NVDLA_CDMA_D_MISC_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CONV_MODE(0, 1, 0x0, r_std, w_std),
    IN_PRECISION(8, 2, 0x1, r_std, w_std),
    PROC_PRECISION(12, 2, 0x1, r_std, w_std),
    DATA_REUSE(16, 1, 0x0, r_std, w_std),
    WEIGHT_REUSE(20, 1, 0x0, r_std, w_std),
    SKIP_DATA_RLS(24, 1, 0x0, r_std, w_std),
    SKIP_WEIGHT_RLS(28, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_MISC_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_MISC_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MISC_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MISC_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CONV_MODE.write(wdata);
  IN_PRECISION.write(wdata);
  PROC_PRECISION.write(wdata);
  DATA_REUSE.write(wdata);
  WEIGHT_REUSE.write(wdata);
  SKIP_DATA_RLS.write(wdata);
  SKIP_WEIGHT_RLS.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_MISC_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_MISC_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MISC_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MISC_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CONV_MODE.read(rdata);
  IN_PRECISION.read(rdata);
  PROC_PRECISION.read(rdata);
  DATA_REUSE.read(rdata);
  WEIGHT_REUSE.read(rdata);
  SKIP_DATA_RLS.read(rdata);
  SKIP_WEIGHT_RLS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT methods ------------------

ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT::ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_FORMAT(0, 1, 0x0, r_std, w_std),
    PIXEL_FORMAT(8, 6, 0xc, r_std, w_std),
    PIXEL_MAPPING(16, 1, 0x0, r_std, w_std),
    PIXEL_SIGN_OVERRIDE(20, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_FORMAT.write(wdata);
  PIXEL_FORMAT.write(wdata);
  PIXEL_MAPPING.write(wdata);
  PIXEL_SIGN_OVERRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_FORMAT.read(rdata);
  PIXEL_FORMAT.read(rdata);
  PIXEL_MAPPING.read(rdata);
  PIXEL_SIGN_OVERRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0 methods ------------------

ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0::ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_WIDTH(0, 13, 0x0, r_std, w_std),
    DATAIN_HEIGHT(16, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_WIDTH.write(wdata);
  DATAIN_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_WIDTH.read(rdata);
  DATAIN_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1 methods ------------------

ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1::ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0 methods ------------------

ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0::ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_WIDTH_EXT(0, 13, 0x0, r_std, w_std),
    DATAIN_HEIGHT_EXT(16, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_WIDTH_EXT.write(wdata);
  DATAIN_HEIGHT_EXT.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_WIDTH_EXT.read(rdata);
  DATAIN_HEIGHT_EXT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET methods ------------------

ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET::ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PIXEL_X_OFFSET(0, 5, 0x0, r_std, w_std),
    PIXEL_Y_OFFSET(16, 3, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PIXEL_X_OFFSET.write(wdata);
  PIXEL_Y_OFFSET.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PIXEL_X_OFFSET.read(rdata);
  PIXEL_Y_OFFSET.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE methods ------------------

ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE::ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0 methods ------------------

ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0::ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_ADDR_HIGH_0(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_ADDR_HIGH_0.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_ADDR_HIGH_0.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0 methods ------------------

ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0::ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_ADDR_LOW_0(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_ADDR_LOW_0.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_ADDR_LOW_0.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1 methods ------------------

ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1::ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_ADDR_HIGH_1(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_ADDR_HIGH_1.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_ADDR_HIGH_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1 methods ------------------

ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1::ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_ADDR_LOW_1(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_ADDR_LOW_1.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_ADDR_LOW_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_CDMA_D_LINE_STRIDE::ordt_rg_NVDLA_CDMA_D_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE methods ------------------

ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE::ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    UV_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  UV_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  UV_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_SURF_STRIDE methods ------------------

ordt_rg_NVDLA_CDMA_D_SURF_STRIDE::ordt_rg_NVDLA_CDMA_D_SURF_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SURF_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_SURF_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_SURF_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_SURF_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_SURF_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SURF_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_SURF_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_SURF_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_SURF_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_SURF_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SURF_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DAIN_MAP methods ------------------

ordt_rg_NVDLA_CDMA_D_DAIN_MAP::ordt_rg_NVDLA_CDMA_D_DAIN_MAP(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LINE_PACKED(0, 1, 0x0, r_std, w_std),
    SURF_PACKED(16, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_MAP::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DAIN_MAP at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_MAP\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_MAP::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LINE_PACKED.write(wdata);
  SURF_PACKED.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_MAP::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DAIN_MAP at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_MAP\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_MAP::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LINE_PACKED.read(rdata);
  SURF_PACKED.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG methods ------------------

ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG::ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RSV_PER_LINE(0, 10, 0x0, r_std, w_std),
    RSV_PER_UV_LINE(16, 10, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RSV_PER_LINE.write(wdata);
  RSV_PER_UV_LINE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RSV_PER_LINE.read(rdata);
  RSV_PER_UV_LINE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG methods ------------------

ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG::ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RSV_HEIGHT(0, 3, 0x0, r_std, w_std),
    RSV_Y_INDEX(16, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RSV_HEIGHT.write(wdata);
  RSV_Y_INDEX.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RSV_HEIGHT.read(rdata);
  RSV_Y_INDEX.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER methods ------------------

ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER::ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BATCHES(0, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BATCHES.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BATCHES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE methods ------------------

ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE::ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BATCH_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BATCH_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BATCH_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE methods ------------------

ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE::ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ENTRIES(0, 14, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ENTRIES.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ENTRIES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN methods ------------------

ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN::ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    GRAINS(0, 12, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  GRAINS.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  GRAINS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT methods ------------------

ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT::ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_FORMAT(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_FORMAT.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_FORMAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0 methods ------------------

ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0::ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BYTE_PER_KERNEL(0, 18, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BYTE_PER_KERNEL.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BYTE_PER_KERNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1 methods ------------------

ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1::ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_KERNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_KERNEL.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_KERNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE methods ------------------

ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE::ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH::ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW methods ------------------

ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW::ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES methods ------------------

ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES::ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_BYTES(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_BYTES.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_BYTES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH::ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WGS_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WGS_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WGS_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW methods ------------------

ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW::ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WGS_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WGS_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WGS_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH::ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WMB_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WMB_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WMB_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW methods ------------------

ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW::ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WMB_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WMB_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WMB_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WMB_BYTES methods ------------------

ordt_rg_NVDLA_CDMA_D_WMB_BYTES::ordt_rg_NVDLA_CDMA_D_WMB_BYTES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WMB_BYTES(0, 28, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WMB_BYTES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WMB_BYTES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WMB_BYTES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WMB_BYTES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WMB_BYTES.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WMB_BYTES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WMB_BYTES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WMB_BYTES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WMB_BYTES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WMB_BYTES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT methods ------------------

ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT::ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    MEAN_FORMAT(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  MEAN_FORMAT.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  MEAN_FORMAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0 methods ------------------

ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0::ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    MEAN_RY(0, 16, 0x0, r_std, w_std),
    MEAN_GU(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  MEAN_RY.write(wdata);
  MEAN_GU.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  MEAN_RY.read(rdata);
  MEAN_GU.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1 methods ------------------

ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1::ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    MEAN_BV(0, 16, 0x0, r_std, w_std),
    MEAN_AX(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  MEAN_BV.write(wdata);
  MEAN_AX.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  MEAN_BV.read(rdata);
  MEAN_AX.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_CVT_CFG methods ------------------

ordt_rg_NVDLA_CDMA_D_CVT_CFG::ordt_rg_NVDLA_CDMA_D_CVT_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CVT_EN(0, 1, 0x0, r_std, w_std),
    CVT_TRUNCATE(4, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_CVT_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_CVT_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CVT_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CVT_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CVT_EN.write(wdata);
  CVT_TRUNCATE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_CVT_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_CVT_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CVT_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CVT_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CVT_EN.read(rdata);
  CVT_TRUNCATE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_CVT_OFFSET methods ------------------

ordt_rg_NVDLA_CDMA_D_CVT_OFFSET::ordt_rg_NVDLA_CDMA_D_CVT_OFFSET(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CVT_OFFSET(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_CVT_OFFSET::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_CVT_OFFSET at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CVT_OFFSET\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CVT_OFFSET::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CVT_OFFSET.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_CVT_OFFSET::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_CVT_OFFSET at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CVT_OFFSET\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CVT_OFFSET::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CVT_OFFSET.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_CVT_SCALE methods ------------------

ordt_rg_NVDLA_CDMA_D_CVT_SCALE::ordt_rg_NVDLA_CDMA_D_CVT_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CVT_SCALE(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_CVT_SCALE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_CVT_SCALE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CVT_SCALE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CVT_SCALE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CVT_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_CVT_SCALE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_CVT_SCALE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CVT_SCALE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CVT_SCALE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CVT_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_CONV_STRIDE methods ------------------

ordt_rg_NVDLA_CDMA_D_CONV_STRIDE::ordt_rg_NVDLA_CDMA_D_CONV_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CONV_X_STRIDE(0, 3, 0x0, r_std, w_std),
    CONV_Y_STRIDE(16, 3, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_CONV_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_CONV_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CONV_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CONV_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CONV_X_STRIDE.write(wdata);
  CONV_Y_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_CONV_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_CONV_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CONV_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CONV_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CONV_X_STRIDE.read(rdata);
  CONV_Y_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_ZERO_PADDING methods ------------------

ordt_rg_NVDLA_CDMA_D_ZERO_PADDING::ordt_rg_NVDLA_CDMA_D_ZERO_PADDING(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_LEFT(0, 5, 0x0, r_std, w_std),
    PAD_RIGHT(8, 6, 0x0, r_std, w_std),
    PAD_TOP(16, 5, 0x0, r_std, w_std),
    PAD_BOTTOM(24, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_LEFT.write(wdata);
  PAD_RIGHT.write(wdata);
  PAD_TOP.write(wdata);
  PAD_BOTTOM.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_LEFT.read(rdata);
  PAD_RIGHT.read(rdata);
  PAD_TOP.read(rdata);
  PAD_BOTTOM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE methods ------------------

ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE::ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_BANK methods ------------------

ordt_rg_NVDLA_CDMA_D_BANK::ordt_rg_NVDLA_CDMA_D_BANK(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATA_BANK(0, 5, 0x0, r_std, w_std),
    WEIGHT_BANK(16, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_BANK::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_BANK at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_BANK\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_BANK::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATA_BANK.write(wdata);
  WEIGHT_BANK.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_BANK::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_BANK at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_BANK\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_BANK::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATA_BANK.read(rdata);
  WEIGHT_BANK.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO methods ------------------

ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO::ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NAN_TO_ZERO(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NAN_TO_ZERO.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NAN_TO_ZERO.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM methods ------------------

ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM::ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NAN_DATA_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NAN_DATA_NUM.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NAN_DATA_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM methods ------------------

ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM::ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NAN_WEIGHT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NAN_WEIGHT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NAN_WEIGHT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM methods ------------------

ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM::ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    INF_DATA_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  INF_DATA_NUM.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  INF_DATA_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM methods ------------------

ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM::ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    INF_WEIGHT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  INF_WEIGHT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  INF_WEIGHT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_PERF_ENABLE methods ------------------

ordt_rg_NVDLA_CDMA_D_PERF_ENABLE::ordt_rg_NVDLA_CDMA_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DMA_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_PERF_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_PERF_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DMA_EN.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_PERF_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_PERF_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DMA_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL methods ------------------

ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL::ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAT_RD_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAT_RD_STALL.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAT_RD_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL methods ------------------

ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL::ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WT_RD_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WT_RD_STALL.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WT_RD_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY methods ------------------

ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY::ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAT_RD_LATENCY(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAT_RD_LATENCY.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAT_RD_LATENCY.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY methods ------------------

ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY::ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WT_RD_LATENCY(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WT_RD_LATENCY.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WT_RD_LATENCY.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_CYA methods ------------------

ordt_rg_NVDLA_CDMA_D_CYA::ordt_rg_NVDLA_CDMA_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CYA(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_CYA::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_CYA at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CYA\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CYA::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CYA.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_CYA::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_CYA at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CYA\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CYA::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CYA.read(rdata);
}

// ------------------ ordt_rset_NVDLA_CDMA methods ------------------

ordt_rset_NVDLA_CDMA::ordt_rset_NVDLA_CDMA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    S_ARBITER(_m_startaddress + 0x8, _m_startaddress + 0xb),
    S_CBUF_FLUSH_STATUS(_m_startaddress + 0xc, _m_startaddress + 0xf),
    D_OP_ENABLE(_m_startaddress + 0x10, _m_startaddress + 0x13),
    D_MISC_CFG(_m_startaddress + 0x14, _m_startaddress + 0x17),
    D_DATAIN_FORMAT(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    D_DATAIN_SIZE_0(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    D_DATAIN_SIZE_1(_m_startaddress + 0x20, _m_startaddress + 0x23),
    D_DATAIN_SIZE_EXT_0(_m_startaddress + 0x24, _m_startaddress + 0x27),
    D_PIXEL_OFFSET(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    D_DAIN_RAM_TYPE(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    D_DAIN_ADDR_HIGH_0(_m_startaddress + 0x30, _m_startaddress + 0x33),
    D_DAIN_ADDR_LOW_0(_m_startaddress + 0x34, _m_startaddress + 0x37),
    D_DAIN_ADDR_HIGH_1(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    D_DAIN_ADDR_LOW_1(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    D_LINE_STRIDE(_m_startaddress + 0x40, _m_startaddress + 0x43),
    D_LINE_UV_STRIDE(_m_startaddress + 0x44, _m_startaddress + 0x47),
    D_SURF_STRIDE(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    D_DAIN_MAP(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    D_RESERVED_X_CFG(_m_startaddress + 0x50, _m_startaddress + 0x53),
    D_RESERVED_Y_CFG(_m_startaddress + 0x54, _m_startaddress + 0x57),
    D_BATCH_NUMBER(_m_startaddress + 0x58, _m_startaddress + 0x5b),
    D_BATCH_STRIDE(_m_startaddress + 0x5c, _m_startaddress + 0x5f),
    D_ENTRY_PER_SLICE(_m_startaddress + 0x60, _m_startaddress + 0x63),
    D_FETCH_GRAIN(_m_startaddress + 0x64, _m_startaddress + 0x67),
    D_WEIGHT_FORMAT(_m_startaddress + 0x68, _m_startaddress + 0x6b),
    D_WEIGHT_SIZE_0(_m_startaddress + 0x6c, _m_startaddress + 0x6f),
    D_WEIGHT_SIZE_1(_m_startaddress + 0x70, _m_startaddress + 0x73),
    D_WEIGHT_RAM_TYPE(_m_startaddress + 0x74, _m_startaddress + 0x77),
    D_WEIGHT_ADDR_HIGH(_m_startaddress + 0x78, _m_startaddress + 0x7b),
    D_WEIGHT_ADDR_LOW(_m_startaddress + 0x7c, _m_startaddress + 0x7f),
    D_WEIGHT_BYTES(_m_startaddress + 0x80, _m_startaddress + 0x83),
    D_WGS_ADDR_HIGH(_m_startaddress + 0x84, _m_startaddress + 0x87),
    D_WGS_ADDR_LOW(_m_startaddress + 0x88, _m_startaddress + 0x8b),
    D_WMB_ADDR_HIGH(_m_startaddress + 0x8c, _m_startaddress + 0x8f),
    D_WMB_ADDR_LOW(_m_startaddress + 0x90, _m_startaddress + 0x93),
    D_WMB_BYTES(_m_startaddress + 0x94, _m_startaddress + 0x97),
    D_MEAN_FORMAT(_m_startaddress + 0x98, _m_startaddress + 0x9b),
    D_MEAN_GLOBAL_0(_m_startaddress + 0x9c, _m_startaddress + 0x9f),
    D_MEAN_GLOBAL_1(_m_startaddress + 0xa0, _m_startaddress + 0xa3),
    D_CVT_CFG(_m_startaddress + 0xa4, _m_startaddress + 0xa7),
    D_CVT_OFFSET(_m_startaddress + 0xa8, _m_startaddress + 0xab),
    D_CVT_SCALE(_m_startaddress + 0xac, _m_startaddress + 0xaf),
    D_CONV_STRIDE(_m_startaddress + 0xb0, _m_startaddress + 0xb3),
    D_ZERO_PADDING(_m_startaddress + 0xb4, _m_startaddress + 0xb7),
    D_ZERO_PADDING_VALUE(_m_startaddress + 0xb8, _m_startaddress + 0xbb),
    D_BANK(_m_startaddress + 0xbc, _m_startaddress + 0xbf),
    D_NAN_FLUSH_TO_ZERO(_m_startaddress + 0xc0, _m_startaddress + 0xc3),
    D_NAN_INPUT_DATA_NUM(_m_startaddress + 0xc4, _m_startaddress + 0xc7),
    D_NAN_INPUT_WEIGHT_NUM(_m_startaddress + 0xc8, _m_startaddress + 0xcb),
    D_INF_INPUT_DATA_NUM(_m_startaddress + 0xcc, _m_startaddress + 0xcf),
    D_INF_INPUT_WEIGHT_NUM(_m_startaddress + 0xd0, _m_startaddress + 0xd3),
    D_PERF_ENABLE(_m_startaddress + 0xd4, _m_startaddress + 0xd7),
    D_PERF_DAT_READ_STALL(_m_startaddress + 0xd8, _m_startaddress + 0xdb),
    D_PERF_WT_READ_STALL(_m_startaddress + 0xdc, _m_startaddress + 0xdf),
    D_PERF_DAT_READ_LATENCY(_m_startaddress + 0xe0, _m_startaddress + 0xe3),
    D_PERF_WT_READ_LATENCY(_m_startaddress + 0xe4, _m_startaddress + 0xe7),
    D_CYA(_m_startaddress + 0xe8, _m_startaddress + 0xeb) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&S_ARBITER);
  m_children.push_back(&S_CBUF_FLUSH_STATUS);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
  m_children.push_back(&D_DATAIN_FORMAT);
  m_children.push_back(&D_DATAIN_SIZE_0);
  m_children.push_back(&D_DATAIN_SIZE_1);
  m_children.push_back(&D_DATAIN_SIZE_EXT_0);
  m_children.push_back(&D_PIXEL_OFFSET);
  m_children.push_back(&D_DAIN_RAM_TYPE);
  m_children.push_back(&D_DAIN_ADDR_HIGH_0);
  m_children.push_back(&D_DAIN_ADDR_LOW_0);
  m_children.push_back(&D_DAIN_ADDR_HIGH_1);
  m_children.push_back(&D_DAIN_ADDR_LOW_1);
  m_children.push_back(&D_LINE_STRIDE);
  m_children.push_back(&D_LINE_UV_STRIDE);
  m_children.push_back(&D_SURF_STRIDE);
  m_children.push_back(&D_DAIN_MAP);
  m_children.push_back(&D_RESERVED_X_CFG);
  m_children.push_back(&D_RESERVED_Y_CFG);
  m_children.push_back(&D_BATCH_NUMBER);
  m_children.push_back(&D_BATCH_STRIDE);
  m_children.push_back(&D_ENTRY_PER_SLICE);
  m_children.push_back(&D_FETCH_GRAIN);
  m_children.push_back(&D_WEIGHT_FORMAT);
  m_children.push_back(&D_WEIGHT_SIZE_0);
  m_children.push_back(&D_WEIGHT_SIZE_1);
  m_children.push_back(&D_WEIGHT_RAM_TYPE);
  m_children.push_back(&D_WEIGHT_ADDR_HIGH);
  m_children.push_back(&D_WEIGHT_ADDR_LOW);
  m_children.push_back(&D_WEIGHT_BYTES);
  m_children.push_back(&D_WGS_ADDR_HIGH);
  m_children.push_back(&D_WGS_ADDR_LOW);
  m_children.push_back(&D_WMB_ADDR_HIGH);
  m_children.push_back(&D_WMB_ADDR_LOW);
  m_children.push_back(&D_WMB_BYTES);
  m_children.push_back(&D_MEAN_FORMAT);
  m_children.push_back(&D_MEAN_GLOBAL_0);
  m_children.push_back(&D_MEAN_GLOBAL_1);
  m_children.push_back(&D_CVT_CFG);
  m_children.push_back(&D_CVT_OFFSET);
  m_children.push_back(&D_CVT_SCALE);
  m_children.push_back(&D_CONV_STRIDE);
  m_children.push_back(&D_ZERO_PADDING);
  m_children.push_back(&D_ZERO_PADDING_VALUE);
  m_children.push_back(&D_BANK);
  m_children.push_back(&D_NAN_FLUSH_TO_ZERO);
  m_children.push_back(&D_NAN_INPUT_DATA_NUM);
  m_children.push_back(&D_NAN_INPUT_WEIGHT_NUM);
  m_children.push_back(&D_INF_INPUT_DATA_NUM);
  m_children.push_back(&D_INF_INPUT_WEIGHT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_DAT_READ_STALL);
  m_children.push_back(&D_PERF_WT_READ_STALL);
  m_children.push_back(&D_PERF_DAT_READ_LATENCY);
  m_children.push_back(&D_PERF_WT_READ_LATENCY);
  m_children.push_back(&D_CYA);
}

void  ordt_rset_NVDLA_CDMA::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&S_ARBITER);
  m_children.push_back(&S_CBUF_FLUSH_STATUS);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
  m_children.push_back(&D_DATAIN_FORMAT);
  m_children.push_back(&D_DATAIN_SIZE_0);
  m_children.push_back(&D_DATAIN_SIZE_1);
  m_children.push_back(&D_DATAIN_SIZE_EXT_0);
  m_children.push_back(&D_PIXEL_OFFSET);
  m_children.push_back(&D_DAIN_RAM_TYPE);
  m_children.push_back(&D_DAIN_ADDR_HIGH_0);
  m_children.push_back(&D_DAIN_ADDR_LOW_0);
  m_children.push_back(&D_DAIN_ADDR_HIGH_1);
  m_children.push_back(&D_DAIN_ADDR_LOW_1);
  m_children.push_back(&D_LINE_STRIDE);
  m_children.push_back(&D_LINE_UV_STRIDE);
  m_children.push_back(&D_SURF_STRIDE);
  m_children.push_back(&D_DAIN_MAP);
  m_children.push_back(&D_RESERVED_X_CFG);
  m_children.push_back(&D_RESERVED_Y_CFG);
  m_children.push_back(&D_BATCH_NUMBER);
  m_children.push_back(&D_BATCH_STRIDE);
  m_children.push_back(&D_ENTRY_PER_SLICE);
  m_children.push_back(&D_FETCH_GRAIN);
  m_children.push_back(&D_WEIGHT_FORMAT);
  m_children.push_back(&D_WEIGHT_SIZE_0);
  m_children.push_back(&D_WEIGHT_SIZE_1);
  m_children.push_back(&D_WEIGHT_RAM_TYPE);
  m_children.push_back(&D_WEIGHT_ADDR_HIGH);
  m_children.push_back(&D_WEIGHT_ADDR_LOW);
  m_children.push_back(&D_WEIGHT_BYTES);
  m_children.push_back(&D_WGS_ADDR_HIGH);
  m_children.push_back(&D_WGS_ADDR_LOW);
  m_children.push_back(&D_WMB_ADDR_HIGH);
  m_children.push_back(&D_WMB_ADDR_LOW);
  m_children.push_back(&D_WMB_BYTES);
  m_children.push_back(&D_MEAN_FORMAT);
  m_children.push_back(&D_MEAN_GLOBAL_0);
  m_children.push_back(&D_MEAN_GLOBAL_1);
  m_children.push_back(&D_CVT_CFG);
  m_children.push_back(&D_CVT_OFFSET);
  m_children.push_back(&D_CVT_SCALE);
  m_children.push_back(&D_CONV_STRIDE);
  m_children.push_back(&D_ZERO_PADDING);
  m_children.push_back(&D_ZERO_PADDING_VALUE);
  m_children.push_back(&D_BANK);
  m_children.push_back(&D_NAN_FLUSH_TO_ZERO);
  m_children.push_back(&D_NAN_INPUT_DATA_NUM);
  m_children.push_back(&D_NAN_INPUT_WEIGHT_NUM);
  m_children.push_back(&D_INF_INPUT_DATA_NUM);
  m_children.push_back(&D_INF_INPUT_WEIGHT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_DAT_READ_STALL);
  m_children.push_back(&D_PERF_WT_READ_STALL);
  m_children.push_back(&D_PERF_DAT_READ_LATENCY);
  m_children.push_back(&D_PERF_WT_READ_LATENCY);
  m_children.push_back(&D_CYA);
}

// ------------------ ordt_root methods ------------------

ordt_root::ordt_root()
  : ordt_root(0x0, 0x30eb) {
}

ordt_root::ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    NVDLA_CDMA(_m_startaddress + 0x3000, _m_startaddress + 0x30ff) {
  m_children.push_back(&NVDLA_CDMA);
}

void  ordt_root::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&NVDLA_CDMA);
}

