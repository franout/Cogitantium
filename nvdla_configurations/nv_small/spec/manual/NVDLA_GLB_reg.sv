//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_GLB.rdl
//   Parms: opendla.parms
//   Date: Tue Feb 04 11:22:03 CET 2020
//

import uvm_pkg::*;
import ordt_uvm_reg_pkg::*;

// S_NVDLA_HW_VERSION
class reg_addrmap_NVDLA_NVDLA_GLB_S_NVDLA_HW_VERSION extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl MAJOR;
  rand uvm_reg_field_rdl MINOR;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GLB_S_NVDLA_HW_VERSION");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.MAJOR = new("MAJOR");
    this.MAJOR.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.MAJOR.configure(this, 8, 0, "RO", 0, 8'h31, 1, 0, 0);
    this.MAJOR.add_def_property("spec_access", "c");
    this.MAJOR.add_def_property("spec_sw_default", "0x0");
    this.MAJOR.add_def_property("sw_default_mask", "0x0");
    this.MAJOR.add_def_property("reset_mask", "0xff");
    this.MINOR = new("MINOR");
    this.MINOR.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.MINOR.configure(this, 16, 8, "RO", 0, 16'h3030, 1, 0, 0);
    this.MINOR.add_def_property("spec_access", "c");
    this.MINOR.add_def_property("spec_sw_default", "0x0");
    this.MINOR.add_def_property("sw_default_mask", "0x0");
    this.MINOR.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "MAJOR"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "MINOR"}, 8, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GLB_S_NVDLA_HW_VERSION

// S_INTR_MASK
class reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_MASK extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_DONE_MASK0;
  rand uvm_reg_field_rdl SDP_DONE_MASK1;
  rand uvm_reg_field_rdl CDP_DONE_MASK0;
  rand uvm_reg_field_rdl CDP_DONE_MASK1;
  rand uvm_reg_field_rdl PDP_DONE_MASK0;
  rand uvm_reg_field_rdl PDP_DONE_MASK1;
  rand uvm_reg_field_rdl BDMA_DONE_MASK0;
  rand uvm_reg_field_rdl BDMA_DONE_MASK1;
  rand uvm_reg_field_rdl RUBIK_DONE_MASK0;
  rand uvm_reg_field_rdl RUBIK_DONE_MASK1;
  rand uvm_reg_field_rdl CDMA_DAT_DONE_MASK0;
  rand uvm_reg_field_rdl CDMA_DAT_DONE_MASK1;
  rand uvm_reg_field_rdl CDMA_WT_DONE_MASK0;
  rand uvm_reg_field_rdl CDMA_WT_DONE_MASK1;
  rand uvm_reg_field_rdl CACC_DONE_MASK0;
  rand uvm_reg_field_rdl CACC_DONE_MASK1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_MASK");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_DONE_MASK0 = new("SDP_DONE_MASK0");
    this.SDP_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SDP_DONE_MASK0.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.SDP_DONE_MASK0.add_def_property("spec_access", "rw");
    this.SDP_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.SDP_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.SDP_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.SDP_DONE_MASK1 = new("SDP_DONE_MASK1");
    this.SDP_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SDP_DONE_MASK1.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.SDP_DONE_MASK1.add_def_property("spec_access", "rw");
    this.SDP_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.SDP_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.SDP_DONE_MASK1.add_def_property("reset_mask", "0x1");
    this.CDP_DONE_MASK0 = new("CDP_DONE_MASK0");
    this.CDP_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDP_DONE_MASK0.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.CDP_DONE_MASK0.add_def_property("spec_access", "rw");
    this.CDP_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.CDP_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.CDP_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.CDP_DONE_MASK1 = new("CDP_DONE_MASK1");
    this.CDP_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDP_DONE_MASK1.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.CDP_DONE_MASK1.add_def_property("spec_access", "rw");
    this.CDP_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.CDP_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.CDP_DONE_MASK1.add_def_property("reset_mask", "0x1");
    this.PDP_DONE_MASK0 = new("PDP_DONE_MASK0");
    this.PDP_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PDP_DONE_MASK0.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.PDP_DONE_MASK0.add_def_property("spec_access", "rw");
    this.PDP_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.PDP_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.PDP_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.PDP_DONE_MASK1 = new("PDP_DONE_MASK1");
    this.PDP_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PDP_DONE_MASK1.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.PDP_DONE_MASK1.add_def_property("spec_access", "rw");
    this.PDP_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.PDP_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.PDP_DONE_MASK1.add_def_property("reset_mask", "0x1");
    this.BDMA_DONE_MASK0 = new("BDMA_DONE_MASK0");
    this.BDMA_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BDMA_DONE_MASK0.configure(this, 1, 6, "RW", 0, 1'h0, 1, 1, 0);
    this.BDMA_DONE_MASK0.add_def_property("spec_access", "rw");
    this.BDMA_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.BDMA_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.BDMA_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.BDMA_DONE_MASK1 = new("BDMA_DONE_MASK1");
    this.BDMA_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BDMA_DONE_MASK1.configure(this, 1, 7, "RW", 0, 1'h0, 1, 1, 0);
    this.BDMA_DONE_MASK1.add_def_property("spec_access", "rw");
    this.BDMA_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.BDMA_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.BDMA_DONE_MASK1.add_def_property("reset_mask", "0x1");
    this.RUBIK_DONE_MASK0 = new("RUBIK_DONE_MASK0");
    this.RUBIK_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RUBIK_DONE_MASK0.configure(this, 1, 8, "RW", 0, 1'h0, 1, 1, 0);
    this.RUBIK_DONE_MASK0.add_def_property("spec_access", "rw");
    this.RUBIK_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.RUBIK_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.RUBIK_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.RUBIK_DONE_MASK1 = new("RUBIK_DONE_MASK1");
    this.RUBIK_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RUBIK_DONE_MASK1.configure(this, 1, 9, "RW", 0, 1'h0, 1, 1, 0);
    this.RUBIK_DONE_MASK1.add_def_property("spec_access", "rw");
    this.RUBIK_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.RUBIK_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.RUBIK_DONE_MASK1.add_def_property("reset_mask", "0x1");
    this.CDMA_DAT_DONE_MASK0 = new("CDMA_DAT_DONE_MASK0");
    this.CDMA_DAT_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_DAT_DONE_MASK0.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_DAT_DONE_MASK0.add_def_property("spec_access", "rw");
    this.CDMA_DAT_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.CDMA_DAT_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.CDMA_DAT_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.CDMA_DAT_DONE_MASK1 = new("CDMA_DAT_DONE_MASK1");
    this.CDMA_DAT_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_DAT_DONE_MASK1.configure(this, 1, 17, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_DAT_DONE_MASK1.add_def_property("spec_access", "rw");
    this.CDMA_DAT_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.CDMA_DAT_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.CDMA_DAT_DONE_MASK1.add_def_property("reset_mask", "0x1");
    this.CDMA_WT_DONE_MASK0 = new("CDMA_WT_DONE_MASK0");
    this.CDMA_WT_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_WT_DONE_MASK0.configure(this, 1, 18, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_WT_DONE_MASK0.add_def_property("spec_access", "rw");
    this.CDMA_WT_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.CDMA_WT_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.CDMA_WT_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.CDMA_WT_DONE_MASK1 = new("CDMA_WT_DONE_MASK1");
    this.CDMA_WT_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_WT_DONE_MASK1.configure(this, 1, 19, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_WT_DONE_MASK1.add_def_property("spec_access", "rw");
    this.CDMA_WT_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.CDMA_WT_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.CDMA_WT_DONE_MASK1.add_def_property("reset_mask", "0x1");
    this.CACC_DONE_MASK0 = new("CACC_DONE_MASK0");
    this.CACC_DONE_MASK0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CACC_DONE_MASK0.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.CACC_DONE_MASK0.add_def_property("spec_access", "rw");
    this.CACC_DONE_MASK0.add_def_property("spec_sw_default", "0x0");
    this.CACC_DONE_MASK0.add_def_property("sw_default_mask", "0x0");
    this.CACC_DONE_MASK0.add_def_property("reset_mask", "0x1");
    this.CACC_DONE_MASK1 = new("CACC_DONE_MASK1");
    this.CACC_DONE_MASK1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CACC_DONE_MASK1.configure(this, 1, 21, "RW", 0, 1'h0, 1, 1, 0);
    this.CACC_DONE_MASK1.add_def_property("spec_access", "rw");
    this.CACC_DONE_MASK1.add_def_property("spec_sw_default", "0x0");
    this.CACC_DONE_MASK1.add_def_property("sw_default_mask", "0x0");
    this.CACC_DONE_MASK1.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_DONE_MASK0"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "SDP_DONE_MASK1"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "CDP_DONE_MASK0"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "CDP_DONE_MASK1"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "PDP_DONE_MASK0"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "PDP_DONE_MASK1"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "BDMA_DONE_MASK0"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "BDMA_DONE_MASK1"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "RUBIK_DONE_MASK0"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "RUBIK_DONE_MASK1"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_DAT_DONE_MASK0"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_DAT_DONE_MASK1"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_WT_DONE_MASK0"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_WT_DONE_MASK1"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "CACC_DONE_MASK0"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "CACC_DONE_MASK1"}, 21, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_MASK

// S_INTR_SET
class reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_SET extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_DONE_SET0;
  rand uvm_reg_field_rdl SDP_DONE_SET1;
  rand uvm_reg_field_rdl CDP_DONE_SET0;
  rand uvm_reg_field_rdl CDP_DONE_SET1;
  rand uvm_reg_field_rdl PDP_DONE_SET0;
  rand uvm_reg_field_rdl PDP_DONE_SET1;
  rand uvm_reg_field_rdl BDMA_DONE_SET0;
  rand uvm_reg_field_rdl BDMA_DONE_SET1;
  rand uvm_reg_field_rdl RUBIK_DONE_SET0;
  rand uvm_reg_field_rdl RUBIK_DONE_SET1;
  rand uvm_reg_field_rdl CDMA_DAT_DONE_SET0;
  rand uvm_reg_field_rdl CDMA_DAT_DONE_SET1;
  rand uvm_reg_field_rdl CDMA_WT_DONE_SET0;
  rand uvm_reg_field_rdl CDMA_WT_DONE_SET1;
  rand uvm_reg_field_rdl CACC_DONE_SET0;
  rand uvm_reg_field_rdl CACC_DONE_SET1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_SET");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_DONE_SET0 = new("SDP_DONE_SET0");
    this.SDP_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.SDP_DONE_SET0.configure(this, 1, 0, "WO", 0, 1'h0, 1, 1, 0);
    this.SDP_DONE_SET0.add_def_property("spec_access", "wto");
    this.SDP_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.SDP_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.SDP_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.SDP_DONE_SET1 = new("SDP_DONE_SET1");
    this.SDP_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.SDP_DONE_SET1.configure(this, 1, 1, "WO", 0, 1'h0, 1, 1, 0);
    this.SDP_DONE_SET1.add_def_property("spec_access", "wo");
    this.SDP_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.SDP_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.SDP_DONE_SET1.add_def_property("reset_mask", "0x1");
    this.CDP_DONE_SET0 = new("CDP_DONE_SET0");
    this.CDP_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CDP_DONE_SET0.configure(this, 1, 2, "WO", 0, 1'h0, 1, 1, 0);
    this.CDP_DONE_SET0.add_def_property("spec_access", "wo");
    this.CDP_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.CDP_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.CDP_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.CDP_DONE_SET1 = new("CDP_DONE_SET1");
    this.CDP_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CDP_DONE_SET1.configure(this, 1, 3, "WO", 0, 1'h0, 1, 1, 0);
    this.CDP_DONE_SET1.add_def_property("spec_access", "wo");
    this.CDP_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.CDP_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.CDP_DONE_SET1.add_def_property("reset_mask", "0x1");
    this.PDP_DONE_SET0 = new("PDP_DONE_SET0");
    this.PDP_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.PDP_DONE_SET0.configure(this, 1, 4, "WO", 0, 1'h0, 1, 1, 0);
    this.PDP_DONE_SET0.add_def_property("spec_access", "wo");
    this.PDP_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.PDP_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.PDP_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.PDP_DONE_SET1 = new("PDP_DONE_SET1");
    this.PDP_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.PDP_DONE_SET1.configure(this, 1, 5, "WO", 0, 1'h0, 1, 1, 0);
    this.PDP_DONE_SET1.add_def_property("spec_access", "wo");
    this.PDP_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.PDP_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.PDP_DONE_SET1.add_def_property("reset_mask", "0x1");
    this.BDMA_DONE_SET0 = new("BDMA_DONE_SET0");
    this.BDMA_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.BDMA_DONE_SET0.configure(this, 1, 6, "WO", 0, 1'h0, 1, 1, 0);
    this.BDMA_DONE_SET0.add_def_property("spec_access", "wo");
    this.BDMA_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.BDMA_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.BDMA_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.BDMA_DONE_SET1 = new("BDMA_DONE_SET1");
    this.BDMA_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.BDMA_DONE_SET1.configure(this, 1, 7, "WO", 0, 1'h0, 1, 1, 0);
    this.BDMA_DONE_SET1.add_def_property("spec_access", "wo");
    this.BDMA_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.BDMA_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.BDMA_DONE_SET1.add_def_property("reset_mask", "0x1");
    this.RUBIK_DONE_SET0 = new("RUBIK_DONE_SET0");
    this.RUBIK_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.RUBIK_DONE_SET0.configure(this, 1, 8, "WO", 0, 1'h0, 1, 1, 0);
    this.RUBIK_DONE_SET0.add_def_property("spec_access", "wo");
    this.RUBIK_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.RUBIK_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.RUBIK_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.RUBIK_DONE_SET1 = new("RUBIK_DONE_SET1");
    this.RUBIK_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.RUBIK_DONE_SET1.configure(this, 1, 9, "WO", 0, 1'h0, 1, 1, 0);
    this.RUBIK_DONE_SET1.add_def_property("spec_access", "wo");
    this.RUBIK_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.RUBIK_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.RUBIK_DONE_SET1.add_def_property("reset_mask", "0x1");
    this.CDMA_DAT_DONE_SET0 = new("CDMA_DAT_DONE_SET0");
    this.CDMA_DAT_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CDMA_DAT_DONE_SET0.configure(this, 1, 16, "WO", 0, 1'h0, 1, 1, 0);
    this.CDMA_DAT_DONE_SET0.add_def_property("spec_access", "wo");
    this.CDMA_DAT_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.CDMA_DAT_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.CDMA_DAT_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.CDMA_DAT_DONE_SET1 = new("CDMA_DAT_DONE_SET1");
    this.CDMA_DAT_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CDMA_DAT_DONE_SET1.configure(this, 1, 17, "WO", 0, 1'h0, 1, 1, 0);
    this.CDMA_DAT_DONE_SET1.add_def_property("spec_access", "wo");
    this.CDMA_DAT_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.CDMA_DAT_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.CDMA_DAT_DONE_SET1.add_def_property("reset_mask", "0x1");
    this.CDMA_WT_DONE_SET0 = new("CDMA_WT_DONE_SET0");
    this.CDMA_WT_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CDMA_WT_DONE_SET0.configure(this, 1, 18, "WO", 0, 1'h0, 1, 1, 0);
    this.CDMA_WT_DONE_SET0.add_def_property("spec_access", "wo");
    this.CDMA_WT_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.CDMA_WT_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.CDMA_WT_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.CDMA_WT_DONE_SET1 = new("CDMA_WT_DONE_SET1");
    this.CDMA_WT_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CDMA_WT_DONE_SET1.configure(this, 1, 19, "WO", 0, 1'h0, 1, 1, 0);
    this.CDMA_WT_DONE_SET1.add_def_property("spec_access", "wo");
    this.CDMA_WT_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.CDMA_WT_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.CDMA_WT_DONE_SET1.add_def_property("reset_mask", "0x1");
    this.CACC_DONE_SET0 = new("CACC_DONE_SET0");
    this.CACC_DONE_SET0.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CACC_DONE_SET0.configure(this, 1, 20, "WO", 0, 1'h0, 1, 1, 0);
    this.CACC_DONE_SET0.add_def_property("spec_access", "wo");
    this.CACC_DONE_SET0.add_def_property("spec_sw_default", "0x0");
    this.CACC_DONE_SET0.add_def_property("sw_default_mask", "0x0");
    this.CACC_DONE_SET0.add_def_property("reset_mask", "0x1");
    this.CACC_DONE_SET1 = new("CACC_DONE_SET1");
    this.CACC_DONE_SET1.set_rdl_access_info(0, 1, 1, 0, 0, 0);
    this.CACC_DONE_SET1.configure(this, 1, 21, "WO", 0, 1'h0, 1, 1, 0);
    this.CACC_DONE_SET1.add_def_property("spec_access", "wo");
    this.CACC_DONE_SET1.add_def_property("spec_sw_default", "0x0");
    this.CACC_DONE_SET1.add_def_property("sw_default_mask", "0x0");
    this.CACC_DONE_SET1.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_DONE_SET0"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "SDP_DONE_SET1"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "CDP_DONE_SET0"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "CDP_DONE_SET1"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "PDP_DONE_SET0"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "PDP_DONE_SET1"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "BDMA_DONE_SET0"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "BDMA_DONE_SET1"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "RUBIK_DONE_SET0"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "RUBIK_DONE_SET1"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_DAT_DONE_SET0"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_DAT_DONE_SET1"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_WT_DONE_SET0"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_WT_DONE_SET1"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "CACC_DONE_SET0"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "CACC_DONE_SET1"}, 21, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_SET

// S_INTR_STATUS
class reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SDP_DONE_STATUS0;
  rand uvm_reg_field_rdl SDP_DONE_STATUS1;
  rand uvm_reg_field_rdl CDP_DONE_STATUS0;
  rand uvm_reg_field_rdl CDP_DONE_STATUS1;
  rand uvm_reg_field_rdl PDP_DONE_STATUS0;
  rand uvm_reg_field_rdl PDP_DONE_STATUS1;
  rand uvm_reg_field_rdl BDMA_DONE_STATUS0;
  rand uvm_reg_field_rdl BDMA_DONE_STATUS1;
  rand uvm_reg_field_rdl RUBIK_DONE_STATUS0;
  rand uvm_reg_field_rdl RUBIK_DONE_STATUS1;
  rand uvm_reg_field_rdl CDMA_DAT_DONE_STATUS0;
  rand uvm_reg_field_rdl CDMA_DAT_DONE_STATUS1;
  rand uvm_reg_field_rdl CDMA_WT_DONE_STATUS0;
  rand uvm_reg_field_rdl CDMA_WT_DONE_STATUS1;
  rand uvm_reg_field_rdl CACC_DONE_STATUS0;
  rand uvm_reg_field_rdl CACC_DONE_STATUS1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SDP_DONE_STATUS0 = new("SDP_DONE_STATUS0");
    this.SDP_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SDP_DONE_STATUS0.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.SDP_DONE_STATUS0.add_def_property("spec_access", "rwto");
    this.SDP_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.SDP_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.SDP_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.SDP_DONE_STATUS1 = new("SDP_DONE_STATUS1");
    this.SDP_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SDP_DONE_STATUS1.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.SDP_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.SDP_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.SDP_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.SDP_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    this.CDP_DONE_STATUS0 = new("CDP_DONE_STATUS0");
    this.CDP_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDP_DONE_STATUS0.configure(this, 1, 2, "RW", 0, 1'h0, 1, 1, 0);
    this.CDP_DONE_STATUS0.add_def_property("spec_access", "rwo");
    this.CDP_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.CDP_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.CDP_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.CDP_DONE_STATUS1 = new("CDP_DONE_STATUS1");
    this.CDP_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDP_DONE_STATUS1.configure(this, 1, 3, "RW", 0, 1'h0, 1, 1, 0);
    this.CDP_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.CDP_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.CDP_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.CDP_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    this.PDP_DONE_STATUS0 = new("PDP_DONE_STATUS0");
    this.PDP_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PDP_DONE_STATUS0.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.PDP_DONE_STATUS0.add_def_property("spec_access", "rwo");
    this.PDP_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.PDP_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.PDP_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.PDP_DONE_STATUS1 = new("PDP_DONE_STATUS1");
    this.PDP_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PDP_DONE_STATUS1.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.PDP_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.PDP_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.PDP_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.PDP_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    this.BDMA_DONE_STATUS0 = new("BDMA_DONE_STATUS0");
    this.BDMA_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BDMA_DONE_STATUS0.configure(this, 1, 6, "RW", 0, 1'h0, 1, 1, 0);
    this.BDMA_DONE_STATUS0.add_def_property("spec_access", "rwo");
    this.BDMA_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.BDMA_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.BDMA_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.BDMA_DONE_STATUS1 = new("BDMA_DONE_STATUS1");
    this.BDMA_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BDMA_DONE_STATUS1.configure(this, 1, 7, "RW", 0, 1'h0, 1, 1, 0);
    this.BDMA_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.BDMA_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.BDMA_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.BDMA_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    this.RUBIK_DONE_STATUS0 = new("RUBIK_DONE_STATUS0");
    this.RUBIK_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RUBIK_DONE_STATUS0.configure(this, 1, 8, "RW", 0, 1'h0, 1, 1, 0);
    this.RUBIK_DONE_STATUS0.add_def_property("spec_access", "rwo");
    this.RUBIK_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.RUBIK_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.RUBIK_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.RUBIK_DONE_STATUS1 = new("RUBIK_DONE_STATUS1");
    this.RUBIK_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RUBIK_DONE_STATUS1.configure(this, 1, 9, "RW", 0, 1'h0, 1, 1, 0);
    this.RUBIK_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.RUBIK_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.RUBIK_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.RUBIK_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    this.CDMA_DAT_DONE_STATUS0 = new("CDMA_DAT_DONE_STATUS0");
    this.CDMA_DAT_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_DAT_DONE_STATUS0.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_DAT_DONE_STATUS0.add_def_property("spec_access", "rwo");
    this.CDMA_DAT_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.CDMA_DAT_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.CDMA_DAT_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.CDMA_DAT_DONE_STATUS1 = new("CDMA_DAT_DONE_STATUS1");
    this.CDMA_DAT_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_DAT_DONE_STATUS1.configure(this, 1, 17, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_DAT_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.CDMA_DAT_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.CDMA_DAT_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.CDMA_DAT_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    this.CDMA_WT_DONE_STATUS0 = new("CDMA_WT_DONE_STATUS0");
    this.CDMA_WT_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_WT_DONE_STATUS0.configure(this, 1, 18, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_WT_DONE_STATUS0.add_def_property("spec_access", "rwo");
    this.CDMA_WT_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.CDMA_WT_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.CDMA_WT_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.CDMA_WT_DONE_STATUS1 = new("CDMA_WT_DONE_STATUS1");
    this.CDMA_WT_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CDMA_WT_DONE_STATUS1.configure(this, 1, 19, "RW", 0, 1'h0, 1, 1, 0);
    this.CDMA_WT_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.CDMA_WT_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.CDMA_WT_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.CDMA_WT_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    this.CACC_DONE_STATUS0 = new("CACC_DONE_STATUS0");
    this.CACC_DONE_STATUS0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CACC_DONE_STATUS0.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.CACC_DONE_STATUS0.add_def_property("spec_access", "rwo");
    this.CACC_DONE_STATUS0.add_def_property("spec_sw_default", "0x0");
    this.CACC_DONE_STATUS0.add_def_property("sw_default_mask", "0x0");
    this.CACC_DONE_STATUS0.add_def_property("reset_mask", "0x1");
    this.CACC_DONE_STATUS1 = new("CACC_DONE_STATUS1");
    this.CACC_DONE_STATUS1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CACC_DONE_STATUS1.configure(this, 1, 21, "RW", 0, 1'h0, 1, 1, 0);
    this.CACC_DONE_STATUS1.add_def_property("spec_access", "rwo");
    this.CACC_DONE_STATUS1.add_def_property("spec_sw_default", "0x0");
    this.CACC_DONE_STATUS1.add_def_property("sw_default_mask", "0x0");
    this.CACC_DONE_STATUS1.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SDP_DONE_STATUS0"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "SDP_DONE_STATUS1"}, 1, 1);
    add_hdl_path_slice({rdl_reg_name, "CDP_DONE_STATUS0"}, 2, 1);
    add_hdl_path_slice({rdl_reg_name, "CDP_DONE_STATUS1"}, 3, 1);
    add_hdl_path_slice({rdl_reg_name, "PDP_DONE_STATUS0"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "PDP_DONE_STATUS1"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "BDMA_DONE_STATUS0"}, 6, 1);
    add_hdl_path_slice({rdl_reg_name, "BDMA_DONE_STATUS1"}, 7, 1);
    add_hdl_path_slice({rdl_reg_name, "RUBIK_DONE_STATUS0"}, 8, 1);
    add_hdl_path_slice({rdl_reg_name, "RUBIK_DONE_STATUS1"}, 9, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_DAT_DONE_STATUS0"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_DAT_DONE_STATUS1"}, 17, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_WT_DONE_STATUS0"}, 18, 1);
    add_hdl_path_slice({rdl_reg_name, "CDMA_WT_DONE_STATUS1"}, 19, 1);
    add_hdl_path_slice({rdl_reg_name, "CACC_DONE_STATUS0"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "CACC_DONE_STATUS1"}, 21, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_STATUS

// Block NVDLA_GLB
class block_addrmap_NVDLA_NVDLA_GLB extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_GLB_S_NVDLA_HW_VERSION S_NVDLA_HW_VERSION;
  rand reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_MASK S_INTR_MASK;
  rand reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_SET S_INTR_SET;
  rand reg_addrmap_NVDLA_NVDLA_GLB_S_INTR_STATUS S_INTR_STATUS;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_GLB");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_NVDLA_HW_VERSION = new("S_NVDLA_HW_VERSION");
    this.S_NVDLA_HW_VERSION.configure(this, null, "");
    this.S_NVDLA_HW_VERSION.set_rdl_tag("S_NVDLA_HW_VERSION_");
    this.S_NVDLA_HW_VERSION.set_reg_test_info(0, 0, 0);
    this.S_NVDLA_HW_VERSION.build();
    this.default_map.add_reg(this.S_NVDLA_HW_VERSION, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_INTR_MASK = new("S_INTR_MASK");
    this.S_INTR_MASK.configure(this, null, "");
    this.S_INTR_MASK.set_rdl_tag("S_INTR_MASK_");
    this.S_INTR_MASK.set_reg_test_info(0, 0, 2);
    this.S_INTR_MASK.build();
    this.default_map.add_reg(this.S_INTR_MASK, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.S_INTR_SET = new("S_INTR_SET");
    this.S_INTR_SET.configure(this, null, "");
    this.S_INTR_SET.set_rdl_tag("S_INTR_SET_");
    this.S_INTR_SET.set_reg_test_info(0, 0, 2);
    this.S_INTR_SET.build();
    this.default_map.add_reg(this.S_INTR_SET, `UVM_REG_ADDR_WIDTH'h8, "WO", 0);
    this.S_INTR_STATUS = new("S_INTR_STATUS");
    this.S_INTR_STATUS.configure(this, null, "");
    this.S_INTR_STATUS.set_rdl_tag("S_INTR_STATUS_");
    this.S_INTR_STATUS.set_reg_test_info(0, 0, 2);
    this.S_INTR_STATUS.build();
    this.default_map.add_reg(this.S_INTR_STATUS, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_GLB)
endclass : block_addrmap_NVDLA_NVDLA_GLB

// Base block
class block_addrmap_NVDLA extends uvm_reg_block_rdl;
  rand block_addrmap_NVDLA_NVDLA_GLB NVDLA_GLB;
  
  function new(string name = "block_addrmap_NVDLA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", `UVM_REG_ADDR_WIDTH'h0, 4, UVM_LITTLE_ENDIAN, 1);
    this.set_rdl_address_map(1);
    this.set_rdl_address_map_hdl_path({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.NVDLA_GLB = block_addrmap_NVDLA_NVDLA_GLB::type_id::create("NVDLA_GLB",, get_full_name());
    this.NVDLA_GLB.configure(this, "");
    this.NVDLA_GLB.set_rdl_tag("NVDLA_GLB_");
    this.NVDLA_GLB.build();
    this.default_map.add_submap(this.NVDLA_GLB.default_map, `UVM_REG_ADDR_WIDTH'h1000);
    set_hdl_path_root({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.add_callbacks();
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA)
endclass : block_addrmap_NVDLA
