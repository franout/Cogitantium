//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_CSC.rdl
//   Parms: opendla.parms
//   Date: Tue Feb 04 16:44:57 CET 2020
//

import uvm_pkg::*;
import ordt_uvm_reg_pkg::*;

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_CSC_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_CSC_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_S_POINTER

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_CSC_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_OP_ENABLE

// D_MISC_CFG
class reg_addrmap_NVDLA_NVDLA_CSC_D_MISC_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CONV_MODE;
  rand uvm_reg_field_rdl IN_PRECISION;
  rand uvm_reg_field_rdl PROC_PRECISION;
  rand uvm_reg_field_rdl DATA_REUSE;
  rand uvm_reg_field_rdl WEIGHT_REUSE;
  rand uvm_reg_field_rdl SKIP_DATA_RLS;
  rand uvm_reg_field_rdl SKIP_WEIGHT_RLS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_MISC_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CONV_MODE = new("CONV_MODE");
    this.CONV_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONV_MODE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.CONV_MODE.add_def_property("spec_access", "rw");
    this.CONV_MODE.add_def_property("spec_sw_default", "0x0");
    this.CONV_MODE.add_def_property("sw_default_mask", "0x0");
    this.CONV_MODE.add_def_property("reset_mask", "0x1");
    this.IN_PRECISION = new("IN_PRECISION");
    this.IN_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.IN_PRECISION.configure(this, 2, 8, "RW", 0, 2'h1, 1, 1, 0);
    this.IN_PRECISION.add_def_property("spec_access", "rw");
    this.IN_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.IN_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.IN_PRECISION.add_def_property("reset_mask", "0x3");
    this.PROC_PRECISION = new("PROC_PRECISION");
    this.PROC_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PROC_PRECISION.configure(this, 2, 12, "RW", 0, 2'h1, 1, 1, 0);
    this.PROC_PRECISION.add_def_property("spec_access", "rw");
    this.PROC_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.PROC_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.PROC_PRECISION.add_def_property("reset_mask", "0x3");
    this.DATA_REUSE = new("DATA_REUSE");
    this.DATA_REUSE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATA_REUSE.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.DATA_REUSE.add_def_property("spec_access", "rw");
    this.DATA_REUSE.add_def_property("spec_sw_default", "0x0");
    this.DATA_REUSE.add_def_property("sw_default_mask", "0x0");
    this.DATA_REUSE.add_def_property("reset_mask", "0x1");
    this.WEIGHT_REUSE = new("WEIGHT_REUSE");
    this.WEIGHT_REUSE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_REUSE.configure(this, 1, 20, "RW", 0, 1'h0, 1, 1, 0);
    this.WEIGHT_REUSE.add_def_property("spec_access", "rw");
    this.WEIGHT_REUSE.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_REUSE.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_REUSE.add_def_property("reset_mask", "0x1");
    this.SKIP_DATA_RLS = new("SKIP_DATA_RLS");
    this.SKIP_DATA_RLS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SKIP_DATA_RLS.configure(this, 1, 24, "RW", 0, 1'h0, 1, 1, 0);
    this.SKIP_DATA_RLS.add_def_property("spec_access", "rw");
    this.SKIP_DATA_RLS.add_def_property("spec_sw_default", "0x0");
    this.SKIP_DATA_RLS.add_def_property("sw_default_mask", "0x0");
    this.SKIP_DATA_RLS.add_def_property("reset_mask", "0x1");
    this.SKIP_WEIGHT_RLS = new("SKIP_WEIGHT_RLS");
    this.SKIP_WEIGHT_RLS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SKIP_WEIGHT_RLS.configure(this, 1, 28, "RW", 0, 1'h0, 1, 1, 0);
    this.SKIP_WEIGHT_RLS.add_def_property("spec_access", "rw");
    this.SKIP_WEIGHT_RLS.add_def_property("spec_sw_default", "0x0");
    this.SKIP_WEIGHT_RLS.add_def_property("sw_default_mask", "0x0");
    this.SKIP_WEIGHT_RLS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CONV_MODE"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "IN_PRECISION"}, 8, 2);
    add_hdl_path_slice({rdl_reg_name, "PROC_PRECISION"}, 12, 2);
    add_hdl_path_slice({rdl_reg_name, "DATA_REUSE"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_REUSE"}, 20, 1);
    add_hdl_path_slice({rdl_reg_name, "SKIP_DATA_RLS"}, 24, 1);
    add_hdl_path_slice({rdl_reg_name, "SKIP_WEIGHT_RLS"}, 28, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_MISC_CFG

// D_DATAIN_FORMAT
class reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_FORMAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_FORMAT = new("DATAIN_FORMAT");
    this.DATAIN_FORMAT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_FORMAT.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DATAIN_FORMAT.add_def_property("spec_access", "rw");
    this.DATAIN_FORMAT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_FORMAT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_FORMAT.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_FORMAT"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_FORMAT

// D_DATAIN_SIZE_EXT_0
class reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_WIDTH_EXT;
  rand uvm_reg_field_rdl DATAIN_HEIGHT_EXT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_WIDTH_EXT = new("DATAIN_WIDTH_EXT");
    this.DATAIN_WIDTH_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_WIDTH_EXT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_WIDTH_EXT.add_def_property("spec_access", "rw");
    this.DATAIN_WIDTH_EXT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_WIDTH_EXT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_WIDTH_EXT.add_def_property("reset_mask", "0x1fff");
    this.DATAIN_HEIGHT_EXT = new("DATAIN_HEIGHT_EXT");
    this.DATAIN_HEIGHT_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_HEIGHT_EXT.configure(this, 13, 16, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_HEIGHT_EXT.add_def_property("spec_access", "rw");
    this.DATAIN_HEIGHT_EXT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_HEIGHT_EXT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_HEIGHT_EXT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_WIDTH_EXT"}, 0, 13);
    add_hdl_path_slice({rdl_reg_name, "DATAIN_HEIGHT_EXT"}, 16, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_0

// D_DATAIN_SIZE_EXT_1
class reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_CHANNEL_EXT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_CHANNEL_EXT = new("DATAIN_CHANNEL_EXT");
    this.DATAIN_CHANNEL_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_CHANNEL_EXT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.DATAIN_CHANNEL_EXT.add_def_property("spec_access", "rw");
    this.DATAIN_CHANNEL_EXT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_CHANNEL_EXT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_CHANNEL_EXT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_CHANNEL_EXT"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_1

// D_BATCH_NUMBER
class reg_addrmap_NVDLA_NVDLA_CSC_D_BATCH_NUMBER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl BATCHES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_BATCH_NUMBER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.BATCHES = new("BATCHES");
    this.BATCHES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.BATCHES.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 1);
    this.BATCHES.add_def_property("spec_access", "rw");
    this.BATCHES.add_def_property("spec_sw_default", "0x0");
    this.BATCHES.add_def_property("sw_default_mask", "0x0");
    this.BATCHES.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "BATCHES"}, 0, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_BATCH_NUMBER

// D_POST_Y_EXTENSION
class reg_addrmap_NVDLA_NVDLA_CSC_D_POST_Y_EXTENSION extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl Y_EXTENSION;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_POST_Y_EXTENSION");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.Y_EXTENSION = new("Y_EXTENSION");
    this.Y_EXTENSION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.Y_EXTENSION.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 1);
    this.Y_EXTENSION.add_def_property("spec_access", "rw");
    this.Y_EXTENSION.add_def_property("spec_sw_default", "0x0");
    this.Y_EXTENSION.add_def_property("sw_default_mask", "0x0");
    this.Y_EXTENSION.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "Y_EXTENSION"}, 0, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_POST_Y_EXTENSION

// D_ENTRY_PER_SLICE
class reg_addrmap_NVDLA_NVDLA_CSC_D_ENTRY_PER_SLICE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ENTRIES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_ENTRY_PER_SLICE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ENTRIES = new("ENTRIES");
    this.ENTRIES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ENTRIES.configure(this, 14, 0, "RW", 0, 14'h0, 1, 1, 1);
    this.ENTRIES.add_def_property("spec_access", "rw");
    this.ENTRIES.add_def_property("spec_sw_default", "0x0");
    this.ENTRIES.add_def_property("sw_default_mask", "0x0");
    this.ENTRIES.add_def_property("reset_mask", "0x3fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ENTRIES"}, 0, 14);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_ENTRY_PER_SLICE

// D_WEIGHT_FORMAT
class reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_FORMAT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_FORMAT = new("WEIGHT_FORMAT");
    this.WEIGHT_FORMAT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_FORMAT.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.WEIGHT_FORMAT.add_def_property("spec_access", "rw");
    this.WEIGHT_FORMAT.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_FORMAT.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_FORMAT.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_FORMAT"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_FORMAT

// D_WEIGHT_SIZE_EXT_0
class reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_WIDTH_EXT;
  rand uvm_reg_field_rdl WEIGHT_HEIGHT_EXT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_WIDTH_EXT = new("WEIGHT_WIDTH_EXT");
    this.WEIGHT_WIDTH_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_WIDTH_EXT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.WEIGHT_WIDTH_EXT.add_def_property("spec_access", "rw");
    this.WEIGHT_WIDTH_EXT.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_WIDTH_EXT.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_WIDTH_EXT.add_def_property("reset_mask", "0x1f");
    this.WEIGHT_HEIGHT_EXT = new("WEIGHT_HEIGHT_EXT");
    this.WEIGHT_HEIGHT_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_HEIGHT_EXT.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.WEIGHT_HEIGHT_EXT.add_def_property("spec_access", "rw");
    this.WEIGHT_HEIGHT_EXT.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_HEIGHT_EXT.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_HEIGHT_EXT.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_WIDTH_EXT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_HEIGHT_EXT"}, 16, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0

// D_WEIGHT_SIZE_EXT_1
class reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_CHANNEL_EXT;
  rand uvm_reg_field_rdl WEIGHT_KERNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_CHANNEL_EXT = new("WEIGHT_CHANNEL_EXT");
    this.WEIGHT_CHANNEL_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_CHANNEL_EXT.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 0);
    this.WEIGHT_CHANNEL_EXT.add_def_property("spec_access", "rw");
    this.WEIGHT_CHANNEL_EXT.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_CHANNEL_EXT.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_CHANNEL_EXT.add_def_property("reset_mask", "0x1fff");
    this.WEIGHT_KERNEL = new("WEIGHT_KERNEL");
    this.WEIGHT_KERNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_KERNEL.configure(this, 13, 16, "RW", 0, 13'h0, 1, 1, 0);
    this.WEIGHT_KERNEL.add_def_property("spec_access", "rw");
    this.WEIGHT_KERNEL.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_KERNEL.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_KERNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_CHANNEL_EXT"}, 0, 13);
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_KERNEL"}, 16, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1

// D_WEIGHT_BYTES
class reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_BYTES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WEIGHT_BYTES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_BYTES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WEIGHT_BYTES = new("WEIGHT_BYTES");
    this.WEIGHT_BYTES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_BYTES.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.WEIGHT_BYTES.add_def_property("spec_access", "rw");
    this.WEIGHT_BYTES.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_BYTES.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_BYTES.add_def_property("reset_mask", "0x1ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_BYTES"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_BYTES

// D_WMB_BYTES
class reg_addrmap_NVDLA_NVDLA_CSC_D_WMB_BYTES extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WMB_BYTES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_WMB_BYTES");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WMB_BYTES = new("WMB_BYTES");
    this.WMB_BYTES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WMB_BYTES.configure(this, 28, 0, "RW", 0, 28'h0, 1, 1, 1);
    this.WMB_BYTES.add_def_property("spec_access", "rw");
    this.WMB_BYTES.add_def_property("spec_sw_default", "0x0");
    this.WMB_BYTES.add_def_property("sw_default_mask", "0x0");
    this.WMB_BYTES.add_def_property("reset_mask", "0x1fffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WMB_BYTES"}, 0, 28);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_WMB_BYTES

// D_DATAOUT_SIZE_0
class reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAOUT_WIDTH;
  rand uvm_reg_field_rdl DATAOUT_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAOUT_WIDTH = new("DATAOUT_WIDTH");
    this.DATAOUT_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAOUT_WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAOUT_WIDTH.add_def_property("spec_access", "rw");
    this.DATAOUT_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.DATAOUT_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.DATAOUT_WIDTH.add_def_property("reset_mask", "0x1fff");
    this.DATAOUT_HEIGHT = new("DATAOUT_HEIGHT");
    this.DATAOUT_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAOUT_HEIGHT.configure(this, 13, 16, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAOUT_HEIGHT.add_def_property("spec_access", "rw");
    this.DATAOUT_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.DATAOUT_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.DATAOUT_HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAOUT_WIDTH"}, 0, 13);
    add_hdl_path_slice({rdl_reg_name, "DATAOUT_HEIGHT"}, 16, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_0

// D_DATAOUT_SIZE_1
class reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAOUT_CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAOUT_CHANNEL = new("DATAOUT_CHANNEL");
    this.DATAOUT_CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAOUT_CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.DATAOUT_CHANNEL.add_def_property("spec_access", "rw");
    this.DATAOUT_CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.DATAOUT_CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.DATAOUT_CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAOUT_CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_1

// D_ATOMICS
class reg_addrmap_NVDLA_NVDLA_CSC_D_ATOMICS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl ATOMICS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_ATOMICS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.ATOMICS = new("ATOMICS");
    this.ATOMICS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.ATOMICS.configure(this, 21, 0, "RW", 0, 21'h1, 1, 1, 1);
    this.ATOMICS.add_def_property("spec_access", "rw");
    this.ATOMICS.add_def_property("spec_sw_default", "0x0");
    this.ATOMICS.add_def_property("sw_default_mask", "0x0");
    this.ATOMICS.add_def_property("reset_mask", "0x1fffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "ATOMICS"}, 0, 21);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_ATOMICS

// D_RELEASE
class reg_addrmap_NVDLA_NVDLA_CSC_D_RELEASE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RLS_SLICES;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_RELEASE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RLS_SLICES = new("RLS_SLICES");
    this.RLS_SLICES.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RLS_SLICES.configure(this, 12, 0, "RW", 0, 12'h1, 1, 1, 1);
    this.RLS_SLICES.add_def_property("spec_access", "rw");
    this.RLS_SLICES.add_def_property("spec_sw_default", "0x0");
    this.RLS_SLICES.add_def_property("sw_default_mask", "0x0");
    this.RLS_SLICES.add_def_property("reset_mask", "0xfff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RLS_SLICES"}, 0, 12);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_RELEASE

// D_CONV_STRIDE_EXT
class reg_addrmap_NVDLA_NVDLA_CSC_D_CONV_STRIDE_EXT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CONV_X_STRIDE_EXT;
  rand uvm_reg_field_rdl CONV_Y_STRIDE_EXT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_CONV_STRIDE_EXT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CONV_X_STRIDE_EXT = new("CONV_X_STRIDE_EXT");
    this.CONV_X_STRIDE_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONV_X_STRIDE_EXT.configure(this, 3, 0, "RW", 0, 3'h0, 1, 1, 0);
    this.CONV_X_STRIDE_EXT.add_def_property("spec_access", "rw");
    this.CONV_X_STRIDE_EXT.add_def_property("spec_sw_default", "0x0");
    this.CONV_X_STRIDE_EXT.add_def_property("sw_default_mask", "0x0");
    this.CONV_X_STRIDE_EXT.add_def_property("reset_mask", "0x7");
    this.CONV_Y_STRIDE_EXT = new("CONV_Y_STRIDE_EXT");
    this.CONV_Y_STRIDE_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONV_Y_STRIDE_EXT.configure(this, 3, 16, "RW", 0, 3'h0, 1, 1, 0);
    this.CONV_Y_STRIDE_EXT.add_def_property("spec_access", "rw");
    this.CONV_Y_STRIDE_EXT.add_def_property("spec_sw_default", "0x0");
    this.CONV_Y_STRIDE_EXT.add_def_property("sw_default_mask", "0x0");
    this.CONV_Y_STRIDE_EXT.add_def_property("reset_mask", "0x7");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CONV_X_STRIDE_EXT"}, 0, 3);
    add_hdl_path_slice({rdl_reg_name, "CONV_Y_STRIDE_EXT"}, 16, 3);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_CONV_STRIDE_EXT

// D_DILATION_EXT
class reg_addrmap_NVDLA_NVDLA_CSC_D_DILATION_EXT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl X_DILATION_EXT;
  rand uvm_reg_field_rdl Y_DILATION_EXT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_DILATION_EXT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.X_DILATION_EXT = new("X_DILATION_EXT");
    this.X_DILATION_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.X_DILATION_EXT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.X_DILATION_EXT.add_def_property("spec_access", "rw");
    this.X_DILATION_EXT.add_def_property("spec_sw_default", "0x0");
    this.X_DILATION_EXT.add_def_property("sw_default_mask", "0x0");
    this.X_DILATION_EXT.add_def_property("reset_mask", "0x1f");
    this.Y_DILATION_EXT = new("Y_DILATION_EXT");
    this.Y_DILATION_EXT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.Y_DILATION_EXT.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.Y_DILATION_EXT.add_def_property("spec_access", "rw");
    this.Y_DILATION_EXT.add_def_property("spec_sw_default", "0x0");
    this.Y_DILATION_EXT.add_def_property("sw_default_mask", "0x0");
    this.Y_DILATION_EXT.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "X_DILATION_EXT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "Y_DILATION_EXT"}, 16, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_DILATION_EXT

// D_ZERO_PADDING
class reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_LEFT;
  rand uvm_reg_field_rdl PAD_TOP;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_LEFT = new("PAD_LEFT");
    this.PAD_LEFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_LEFT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.PAD_LEFT.add_def_property("spec_access", "rw");
    this.PAD_LEFT.add_def_property("spec_sw_default", "0x0");
    this.PAD_LEFT.add_def_property("sw_default_mask", "0x0");
    this.PAD_LEFT.add_def_property("reset_mask", "0x1f");
    this.PAD_TOP = new("PAD_TOP");
    this.PAD_TOP.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_TOP.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.PAD_TOP.add_def_property("spec_access", "rw");
    this.PAD_TOP.add_def_property("spec_sw_default", "0x0");
    this.PAD_TOP.add_def_property("sw_default_mask", "0x0");
    this.PAD_TOP.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_LEFT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "PAD_TOP"}, 16, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING

// D_ZERO_PADDING_VALUE
class reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING_VALUE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PAD_VALUE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING_VALUE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PAD_VALUE = new("PAD_VALUE");
    this.PAD_VALUE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PAD_VALUE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.PAD_VALUE.add_def_property("spec_access", "rw");
    this.PAD_VALUE.add_def_property("spec_sw_default", "0x0");
    this.PAD_VALUE.add_def_property("sw_default_mask", "0x0");
    this.PAD_VALUE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PAD_VALUE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING_VALUE

// D_BANK
class reg_addrmap_NVDLA_NVDLA_CSC_D_BANK extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATA_BANK;
  rand uvm_reg_field_rdl WEIGHT_BANK;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_BANK");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATA_BANK = new("DATA_BANK");
    this.DATA_BANK.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATA_BANK.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.DATA_BANK.add_def_property("spec_access", "rw");
    this.DATA_BANK.add_def_property("spec_sw_default", "0x0");
    this.DATA_BANK.add_def_property("sw_default_mask", "0x0");
    this.DATA_BANK.add_def_property("reset_mask", "0x1f");
    this.WEIGHT_BANK = new("WEIGHT_BANK");
    this.WEIGHT_BANK.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.WEIGHT_BANK.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.WEIGHT_BANK.add_def_property("spec_access", "rw");
    this.WEIGHT_BANK.add_def_property("spec_sw_default", "0x0");
    this.WEIGHT_BANK.add_def_property("sw_default_mask", "0x0");
    this.WEIGHT_BANK.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATA_BANK"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "WEIGHT_BANK"}, 16, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_BANK

// D_PRA_CFG
class reg_addrmap_NVDLA_NVDLA_CSC_D_PRA_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRA_TRUNCATE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_PRA_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRA_TRUNCATE = new("PRA_TRUNCATE");
    this.PRA_TRUNCATE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRA_TRUNCATE.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 1);
    this.PRA_TRUNCATE.add_def_property("spec_access", "rw");
    this.PRA_TRUNCATE.add_def_property("spec_sw_default", "0x0");
    this.PRA_TRUNCATE.add_def_property("sw_default_mask", "0x0");
    this.PRA_TRUNCATE.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRA_TRUNCATE"}, 0, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_PRA_CFG

// D_CYA
class reg_addrmap_NVDLA_NVDLA_CSC_D_CYA extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CYA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CSC_D_CYA");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CYA = new("CYA");
    this.CYA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CYA.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.CYA.add_def_property("spec_access", "rw");
    this.CYA.add_def_property("spec_sw_default", "0x0");
    this.CYA.add_def_property("sw_default_mask", "0x0");
    this.CYA.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CYA"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CSC_D_CYA

// Block NVDLA_CSC
class block_addrmap_NVDLA_NVDLA_CSC extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_CSC_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_CSC_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_MISC_CFG D_MISC_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_FORMAT D_DATAIN_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_0 D_DATAIN_SIZE_EXT_0;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_DATAIN_SIZE_EXT_1 D_DATAIN_SIZE_EXT_1;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_BATCH_NUMBER D_BATCH_NUMBER;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_POST_Y_EXTENSION D_POST_Y_EXTENSION;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_ENTRY_PER_SLICE D_ENTRY_PER_SLICE;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_FORMAT D_WEIGHT_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0 D_WEIGHT_SIZE_EXT_0;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1 D_WEIGHT_SIZE_EXT_1;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_WEIGHT_BYTES D_WEIGHT_BYTES;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_WMB_BYTES D_WMB_BYTES;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_0 D_DATAOUT_SIZE_0;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_DATAOUT_SIZE_1 D_DATAOUT_SIZE_1;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_ATOMICS D_ATOMICS;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_RELEASE D_RELEASE;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_CONV_STRIDE_EXT D_CONV_STRIDE_EXT;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_DILATION_EXT D_DILATION_EXT;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING D_ZERO_PADDING;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_ZERO_PADDING_VALUE D_ZERO_PADDING_VALUE;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_BANK D_BANK;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_PRA_CFG D_PRA_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CSC_D_CYA D_CYA;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_CSC");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.D_MISC_CFG = new("D_MISC_CFG");
    this.D_MISC_CFG.configure(this, null, "");
    this.D_MISC_CFG.set_rdl_tag("D_MISC_CFG_");
    this.D_MISC_CFG.set_reg_test_info(0, 0, 2);
    this.D_MISC_CFG.build();
    this.default_map.add_reg(this.D_MISC_CFG, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.D_DATAIN_FORMAT = new("D_DATAIN_FORMAT");
    this.D_DATAIN_FORMAT.configure(this, null, "");
    this.D_DATAIN_FORMAT.set_rdl_tag("D_DATAIN_FORMAT_");
    this.D_DATAIN_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_FORMAT.build();
    this.default_map.add_reg(this.D_DATAIN_FORMAT, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.D_DATAIN_SIZE_EXT_0 = new("D_DATAIN_SIZE_EXT_0");
    this.D_DATAIN_SIZE_EXT_0.configure(this, null, "");
    this.D_DATAIN_SIZE_EXT_0.set_rdl_tag("D_DATAIN_SIZE_EXT_0_");
    this.D_DATAIN_SIZE_EXT_0.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_SIZE_EXT_0.build();
    this.default_map.add_reg(this.D_DATAIN_SIZE_EXT_0, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.D_DATAIN_SIZE_EXT_1 = new("D_DATAIN_SIZE_EXT_1");
    this.D_DATAIN_SIZE_EXT_1.configure(this, null, "");
    this.D_DATAIN_SIZE_EXT_1.set_rdl_tag("D_DATAIN_SIZE_EXT_1_");
    this.D_DATAIN_SIZE_EXT_1.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_SIZE_EXT_1.build();
    this.default_map.add_reg(this.D_DATAIN_SIZE_EXT_1, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.D_BATCH_NUMBER = new("D_BATCH_NUMBER");
    this.D_BATCH_NUMBER.configure(this, null, "");
    this.D_BATCH_NUMBER.set_rdl_tag("D_BATCH_NUMBER_");
    this.D_BATCH_NUMBER.set_reg_test_info(0, 0, 2);
    this.D_BATCH_NUMBER.build();
    this.default_map.add_reg(this.D_BATCH_NUMBER, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.D_POST_Y_EXTENSION = new("D_POST_Y_EXTENSION");
    this.D_POST_Y_EXTENSION.configure(this, null, "");
    this.D_POST_Y_EXTENSION.set_rdl_tag("D_POST_Y_EXTENSION_");
    this.D_POST_Y_EXTENSION.set_reg_test_info(0, 0, 2);
    this.D_POST_Y_EXTENSION.build();
    this.default_map.add_reg(this.D_POST_Y_EXTENSION, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.D_ENTRY_PER_SLICE = new("D_ENTRY_PER_SLICE");
    this.D_ENTRY_PER_SLICE.configure(this, null, "");
    this.D_ENTRY_PER_SLICE.set_rdl_tag("D_ENTRY_PER_SLICE_");
    this.D_ENTRY_PER_SLICE.set_reg_test_info(0, 0, 2);
    this.D_ENTRY_PER_SLICE.build();
    this.default_map.add_reg(this.D_ENTRY_PER_SLICE, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.D_WEIGHT_FORMAT = new("D_WEIGHT_FORMAT");
    this.D_WEIGHT_FORMAT.configure(this, null, "");
    this.D_WEIGHT_FORMAT.set_rdl_tag("D_WEIGHT_FORMAT_");
    this.D_WEIGHT_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_FORMAT.build();
    this.default_map.add_reg(this.D_WEIGHT_FORMAT, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.D_WEIGHT_SIZE_EXT_0 = new("D_WEIGHT_SIZE_EXT_0");
    this.D_WEIGHT_SIZE_EXT_0.configure(this, null, "");
    this.D_WEIGHT_SIZE_EXT_0.set_rdl_tag("D_WEIGHT_SIZE_EXT_0_");
    this.D_WEIGHT_SIZE_EXT_0.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_SIZE_EXT_0.build();
    this.default_map.add_reg(this.D_WEIGHT_SIZE_EXT_0, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.D_WEIGHT_SIZE_EXT_1 = new("D_WEIGHT_SIZE_EXT_1");
    this.D_WEIGHT_SIZE_EXT_1.configure(this, null, "");
    this.D_WEIGHT_SIZE_EXT_1.set_rdl_tag("D_WEIGHT_SIZE_EXT_1_");
    this.D_WEIGHT_SIZE_EXT_1.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_SIZE_EXT_1.build();
    this.default_map.add_reg(this.D_WEIGHT_SIZE_EXT_1, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.D_WEIGHT_BYTES = new("D_WEIGHT_BYTES");
    this.D_WEIGHT_BYTES.configure(this, null, "");
    this.D_WEIGHT_BYTES.set_rdl_tag("D_WEIGHT_BYTES_");
    this.D_WEIGHT_BYTES.set_reg_test_info(0, 0, 2);
    this.D_WEIGHT_BYTES.build();
    this.default_map.add_reg(this.D_WEIGHT_BYTES, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.D_WMB_BYTES = new("D_WMB_BYTES");
    this.D_WMB_BYTES.configure(this, null, "");
    this.D_WMB_BYTES.set_rdl_tag("D_WMB_BYTES_");
    this.D_WMB_BYTES.set_reg_test_info(0, 0, 2);
    this.D_WMB_BYTES.build();
    this.default_map.add_reg(this.D_WMB_BYTES, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.D_DATAOUT_SIZE_0 = new("D_DATAOUT_SIZE_0");
    this.D_DATAOUT_SIZE_0.configure(this, null, "");
    this.D_DATAOUT_SIZE_0.set_rdl_tag("D_DATAOUT_SIZE_0_");
    this.D_DATAOUT_SIZE_0.set_reg_test_info(0, 0, 2);
    this.D_DATAOUT_SIZE_0.build();
    this.default_map.add_reg(this.D_DATAOUT_SIZE_0, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.D_DATAOUT_SIZE_1 = new("D_DATAOUT_SIZE_1");
    this.D_DATAOUT_SIZE_1.configure(this, null, "");
    this.D_DATAOUT_SIZE_1.set_rdl_tag("D_DATAOUT_SIZE_1_");
    this.D_DATAOUT_SIZE_1.set_reg_test_info(0, 0, 2);
    this.D_DATAOUT_SIZE_1.build();
    this.default_map.add_reg(this.D_DATAOUT_SIZE_1, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.D_ATOMICS = new("D_ATOMICS");
    this.D_ATOMICS.configure(this, null, "");
    this.D_ATOMICS.set_rdl_tag("D_ATOMICS_");
    this.D_ATOMICS.set_reg_test_info(0, 0, 2);
    this.D_ATOMICS.build();
    this.default_map.add_reg(this.D_ATOMICS, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.D_RELEASE = new("D_RELEASE");
    this.D_RELEASE.configure(this, null, "");
    this.D_RELEASE.set_rdl_tag("D_RELEASE_");
    this.D_RELEASE.set_reg_test_info(0, 0, 2);
    this.D_RELEASE.build();
    this.default_map.add_reg(this.D_RELEASE, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.D_CONV_STRIDE_EXT = new("D_CONV_STRIDE_EXT");
    this.D_CONV_STRIDE_EXT.configure(this, null, "");
    this.D_CONV_STRIDE_EXT.set_rdl_tag("D_CONV_STRIDE_EXT_");
    this.D_CONV_STRIDE_EXT.set_reg_test_info(0, 0, 2);
    this.D_CONV_STRIDE_EXT.build();
    this.default_map.add_reg(this.D_CONV_STRIDE_EXT, `UVM_REG_ADDR_WIDTH'h4c, "RW", 0);
    this.D_DILATION_EXT = new("D_DILATION_EXT");
    this.D_DILATION_EXT.configure(this, null, "");
    this.D_DILATION_EXT.set_rdl_tag("D_DILATION_EXT_");
    this.D_DILATION_EXT.set_reg_test_info(0, 0, 2);
    this.D_DILATION_EXT.build();
    this.default_map.add_reg(this.D_DILATION_EXT, `UVM_REG_ADDR_WIDTH'h50, "RW", 0);
    this.D_ZERO_PADDING = new("D_ZERO_PADDING");
    this.D_ZERO_PADDING.configure(this, null, "");
    this.D_ZERO_PADDING.set_rdl_tag("D_ZERO_PADDING_");
    this.D_ZERO_PADDING.set_reg_test_info(0, 0, 2);
    this.D_ZERO_PADDING.build();
    this.default_map.add_reg(this.D_ZERO_PADDING, `UVM_REG_ADDR_WIDTH'h54, "RW", 0);
    this.D_ZERO_PADDING_VALUE = new("D_ZERO_PADDING_VALUE");
    this.D_ZERO_PADDING_VALUE.configure(this, null, "");
    this.D_ZERO_PADDING_VALUE.set_rdl_tag("D_ZERO_PADDING_VALUE_");
    this.D_ZERO_PADDING_VALUE.set_reg_test_info(0, 0, 2);
    this.D_ZERO_PADDING_VALUE.build();
    this.default_map.add_reg(this.D_ZERO_PADDING_VALUE, `UVM_REG_ADDR_WIDTH'h58, "RW", 0);
    this.D_BANK = new("D_BANK");
    this.D_BANK.configure(this, null, "");
    this.D_BANK.set_rdl_tag("D_BANK_");
    this.D_BANK.set_reg_test_info(0, 0, 2);
    this.D_BANK.build();
    this.default_map.add_reg(this.D_BANK, `UVM_REG_ADDR_WIDTH'h5c, "RW", 0);
    this.D_PRA_CFG = new("D_PRA_CFG");
    this.D_PRA_CFG.configure(this, null, "");
    this.D_PRA_CFG.set_rdl_tag("D_PRA_CFG_");
    this.D_PRA_CFG.set_reg_test_info(0, 0, 2);
    this.D_PRA_CFG.build();
    this.default_map.add_reg(this.D_PRA_CFG, `UVM_REG_ADDR_WIDTH'h60, "RW", 0);
    this.D_CYA = new("D_CYA");
    this.D_CYA.configure(this, null, "");
    this.D_CYA.set_rdl_tag("D_CYA_");
    this.D_CYA.set_reg_test_info(0, 0, 2);
    this.D_CYA.build();
    this.default_map.add_reg(this.D_CYA, `UVM_REG_ADDR_WIDTH'h64, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_CSC)
endclass : block_addrmap_NVDLA_NVDLA_CSC

// Base block
class block_addrmap_NVDLA extends uvm_reg_block_rdl;
  rand block_addrmap_NVDLA_NVDLA_CSC NVDLA_CSC;
  
  function new(string name = "block_addrmap_NVDLA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", `UVM_REG_ADDR_WIDTH'h0, 4, UVM_LITTLE_ENDIAN, 1);
    this.set_rdl_address_map(1);
    this.set_rdl_address_map_hdl_path({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.NVDLA_CSC = block_addrmap_NVDLA_NVDLA_CSC::type_id::create("NVDLA_CSC",, get_full_name());
    this.NVDLA_CSC.configure(this, "");
    this.NVDLA_CSC.set_rdl_tag("NVDLA_CSC_");
    this.NVDLA_CSC.build();
    this.default_map.add_submap(this.NVDLA_CSC.default_map, `UVM_REG_ADDR_WIDTH'h4000);
    set_hdl_path_root({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.add_callbacks();
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA)
endclass : block_addrmap_NVDLA
