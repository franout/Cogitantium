//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_CFGROM.rdl
//   Parms: opendla.parms
//   Date: Sat Feb 01 17:34:08 CET 2020
//

#ifndef __ORDT_PIO_HPP_INCLUDED__
#define __ORDT_PIO_HPP_INCLUDED__

#include <vector>
#include <iostream>
#include <memory>
#include <cstdint>
#include <algorithm>
#include <string>
#include <sstream>
#include <mutex>
#include <atomic>
#define quote(x) #x

enum ordt_read_mode_t : uint8_t {r_none, r_std, r_clr};
enum ordt_write_mode_t : uint8_t {w_none, w_std, w_1clr, w_1set};
class ordt_addr_elem {
  protected:
    uint64_t m_startaddress;
    uint64_t m_endaddress;
  public:
    ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata) = 0;
    virtual int read(const uint64_t &addr, ordt_data &rdata) = 0;
    bool containsAddress(const uint64_t &addr);
    bool isBelowAddress(const uint64_t &addr);
    bool isAboveAddress(const uint64_t &addr);
    bool hasStartAddress(const uint64_t &addr);
    virtual void update_child_ptrs();
};

class ordt_regset : public ordt_addr_elem {
  private:
    ordt_addr_elem* childElem;
    ordt_addr_elem* findAddrElem(const uint64_t &addr);
  protected:
    std::vector<ordt_addr_elem *>  m_children;
  public:
    ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
};


template<typename T>
class ordt_addr_elem_array : public std::vector<T>, public ordt_addr_elem {
  protected:
    std::vector<T> vec;
    uint64_t m_stride;
  public:
    ordt_addr_elem_array(uint64_t _m_startaddress, uint64_t _m_endaddress, int _reps, uint64_t _m_stride);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
};

template<typename T>
ordt_addr_elem_array<T>::ordt_addr_elem_array(uint64_t _m_startaddress, uint64_t _m_endaddress, int _reps, uint64_t _m_stride)
   : ordt_addr_elem(_m_startaddress, _m_endaddress + (_m_stride * _reps)), m_stride(_m_stride) {
   this->reserve(_reps);
   uint64_t el_startaddress = _m_startaddress;
   uint64_t el_endaddress = _m_endaddress;
   for(int idx=0; idx<_reps; idx++) {
      std::unique_ptr<T> new_elem(new T(el_startaddress, el_endaddress));
      this->push_back(*new_elem);
      this->back().update_child_ptrs();
      el_startaddress += _m_stride;
      el_endaddress += _m_stride;
   }
}

template<typename T>
int ordt_addr_elem_array<T>::write(const uint64_t &addr, const ordt_data &wdata) {
   if (this->containsAddress(addr)) {
      int idx = (addr - m_startaddress) / m_stride;
      if (idx < this->size()) return this->at(idx).write(addr, wdata);
   }
#ifdef ORDT_PIO_VERBOSE
   std::cout << "--> write to invalid address " << addr << " in arrayed regset\n";
#endif
   return 8;
}

template<typename T>
int ordt_addr_elem_array<T>::read(const uint64_t &addr, ordt_data &rdata) {
   if (this->containsAddress(addr)) {
      int idx = (addr - m_startaddress) / m_stride;
      if (idx < this->size()) return this->at(idx).read(addr, rdata);
   }
#ifdef ORDT_PIO_VERBOSE
   std::cout << "--> read to invalid address " << addr << " in arrayed regset\n";
#endif
   rdata.clear();
   return 8;
}

class ordt_reg : public ordt_addr_elem {
  public:
    std::mutex  m_mutex;
    ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress);
    ordt_reg(const ordt_reg &_old);
    virtual void write(const ordt_data &wdata);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void read(ordt_data &rdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
};


template<typename T>
class ordt_field {
  public:
    int lobit, size;
    T data;
    ordt_read_mode_t r_mode;
    ordt_write_mode_t w_mode;
    ordt_field(int _lobit, int _size, int _vsize, uint32_t _data, ordt_read_mode_t _r_mode, ordt_write_mode_t _w_mode);
    ordt_field(int _lobit, int _size, T _init_data, ordt_read_mode_t _r_mode, ordt_write_mode_t _w_mode);
    void write(const ordt_data &wdata);
    void read(ordt_data &rdata);
    void clear();
};

template<typename T>
ordt_field<T>::ordt_field(int _lobit, int _size, int _vsize, uint32_t _data, ordt_read_mode_t _r_mode, ordt_write_mode_t _w_mode)
   : lobit(_lobit), size(_size), data(_vsize, _data), r_mode(_r_mode), w_mode(_w_mode) {
}

template<typename T>
ordt_field<T>::ordt_field(int _lobit, int _size, T _init_data, ordt_read_mode_t _r_mode, ordt_write_mode_t _w_mode)
   : lobit(_lobit), size(_size), data(_init_data), r_mode(_r_mode), w_mode(_w_mode) {
}

template<typename T>
void ordt_field<T>::write(const ordt_data &wdata) {
   if (w_mode == w_std) wdata.get_slice(lobit, size, data);
   else if (w_mode == w_1set) {
      T mask_data;
      wdata.get_slice(lobit, size, mask_data);
      data = data | mask_data;
   }
   else if (w_mode == w_1clr) {
      T mask_data;
      wdata.get_slice(lobit, size, mask_data);
      data = data & ~mask_data;
   }
}

template<typename T>
void ordt_field<T>::read(ordt_data &rdata) {
   rdata.set_slice(lobit, size, data);
   if (r_mode == r_clr) clear();
}

template<typename T>
void ordt_field<T>::clear() {
    data = 0;
}

class ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION : public ordt_reg {
  public:
    ordt_field<uint32_t> HW_VERSION;
    ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> GLB_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CIF_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CIF_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CIF_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> CIF_BASE_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY : public ordt_reg {
  public:
    ordt_field<uint32_t> CIF_BASE_LATENCY;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX : public ordt_reg {
  public:
    ordt_field<uint32_t> BASE_BURST_LENGTH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CIF_BASE_MEM_ADDR_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_CBUF_BANK_NUM;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_CBUF_BANK_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_CBUF_BANK_DEPTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_IMAGE_IN_FORMATS_PACKED;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_IMAGE_IN_FORMATS_SEMI;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CBUF_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CBUF_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CBUF_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> CBUF_BASE_CBUF_BANK_NUM;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CBUF_BASE_CBUF_BANK_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CBUF_BASE_CBUF_BANK_DEPTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> CBUF_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_CBUF_BANK_NUM;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_CBUF_BANK_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_CBUF_BANK_DEPTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_RDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_RDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_RDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_RDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_RDMA_BASE_SDP_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_BS_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_BN_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_EW_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_RDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_RDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_RDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_RDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_RDMA_BASE_PDP_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_BASE_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_RDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_RDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_RDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_RDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_RDMA_BASE_CDP_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_BASE_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST : public ordt_reg {
  public:
    ordt_field<uint32_t> END_OF_LIST;
    ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_CFGROM : public ordt_regset {
  public:
    ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION CFGROM_HW_VERSION;
    ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC CFGROM_GLB_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC CFGROM_CIF_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT CFGROM_CIF_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT CFGROM_CIF_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH CFGROM_CIF_BASE_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY CFGROM_CIF_BASE_LATENCY;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX CFGROM_CIF_BASE_BURST_LENGTH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH CFGROM_CIF_BASE_MEM_ADDR_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC CFGROM_CDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT CFGROM_CDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT CFGROM_CDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES CFGROM_CDMA_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES CFGROM_CDMA_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C CFGROM_CDMA_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K CFGROM_CDMA_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M CFGROM_CDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM CFGROM_CDMA_BASE_CBUF_BANK_NUM;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH CFGROM_CDMA_BASE_CBUF_BANK_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH CFGROM_CDMA_BASE_CBUF_BANK_DEPTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX CFGROM_CDMA_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC CFGROM_CBUF_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT CFGROM_CBUF_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT CFGROM_CBUF_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM CFGROM_CBUF_BASE_CBUF_BANK_NUM;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH CFGROM_CBUF_BASE_CBUF_BANK_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH CFGROM_CBUF_BASE_CBUF_BANK_DEPTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID CFGROM_CBUF_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC CFGROM_CSC_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT CFGROM_CSC_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT CFGROM_CSC_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES CFGROM_CSC_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES CFGROM_CSC_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C CFGROM_CSC_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K CFGROM_CSC_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M CFGROM_CSC_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM CFGROM_CSC_BASE_CBUF_BANK_NUM;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH CFGROM_CSC_BASE_CBUF_BANK_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH CFGROM_CSC_BASE_CBUF_BANK_DEPTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID CFGROM_CSC_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX CFGROM_CSC_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC CFGROM_CMAC_A_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT CFGROM_CMAC_A_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT CFGROM_CMAC_A_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES CFGROM_CMAC_A_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES CFGROM_CMAC_A_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C CFGROM_CMAC_A_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K CFGROM_CMAC_A_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID CFGROM_CMAC_A_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC CFGROM_CMAC_B_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT CFGROM_CMAC_B_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT CFGROM_CMAC_B_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES CFGROM_CMAC_B_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES CFGROM_CMAC_B_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C CFGROM_CMAC_B_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K CFGROM_CMAC_B_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID CFGROM_CMAC_B_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC CFGROM_CACC_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT CFGROM_CACC_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT CFGROM_CACC_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES CFGROM_CACC_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES CFGROM_CACC_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C CFGROM_CACC_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K CFGROM_CACC_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID CFGROM_CACC_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX CFGROM_CACC_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC CFGROM_SDP_RDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT CFGROM_SDP_RDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT CFGROM_SDP_RDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M CFGROM_SDP_RDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID CFGROM_SDP_RDMA_BASE_SDP_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC CFGROM_SDP_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT CFGROM_SDP_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT CFGROM_SDP_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES CFGROM_SDP_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES CFGROM_SDP_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID CFGROM_SDP_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX CFGROM_SDP_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT CFGROM_SDP_BS_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT CFGROM_SDP_BN_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT CFGROM_SDP_EW_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC CFGROM_PDP_RDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT CFGROM_PDP_RDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT CFGROM_PDP_RDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M CFGROM_PDP_RDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID CFGROM_PDP_RDMA_BASE_PDP_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC CFGROM_PDP_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT CFGROM_PDP_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT CFGROM_PDP_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES CFGROM_PDP_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT CFGROM_PDP_BASE_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC CFGROM_CDP_RDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT CFGROM_CDP_RDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT CFGROM_CDP_RDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M CFGROM_CDP_RDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID CFGROM_CDP_RDMA_BASE_CDP_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC CFGROM_CDP_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT CFGROM_CDP_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT CFGROM_CDP_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES CFGROM_CDP_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT CFGROM_CDP_BASE_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST CFGROM_END_OF_LIST;
    ordt_rset_NVDLA_CFGROM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_root : public ordt_regset {
  public:
    ordt_rset_NVDLA_CFGROM NVDLA_CFGROM;
    ordt_root();
    ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

#endif // __ORDT_PIO_HPP_INCLUDED__
