//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_CDP.rdl
//   Parms: opendla.parms
//   Date: Sat Feb 01 17:34:22 CET 2020
//

import uvm_pkg::*;
import ordt_uvm_reg_pkg::*;

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_CDP_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_CDP_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_POINTER

// S_LUT_ACCESS_CFG
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_ADDR;
  rand uvm_reg_field_rdl LUT_TABLE_ID;
  rand uvm_reg_field_rdl LUT_ACCESS_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_ADDR = new("LUT_ADDR");
    this.LUT_ADDR.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_ADDR.configure(this, 10, 0, "RW", 0, 10'h0, 1, 1, 0);
    this.LUT_ADDR.add_def_property("spec_access", "rwto");
    this.LUT_ADDR.add_def_property("spec_sw_default", "0x0");
    this.LUT_ADDR.add_def_property("sw_default_mask", "0x0");
    this.LUT_ADDR.add_def_property("reset_mask", "0x3ff");
    this.LUT_TABLE_ID = new("LUT_TABLE_ID");
    this.LUT_TABLE_ID.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_TABLE_ID.configure(this, 1, 16, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_TABLE_ID.add_def_property("spec_access", "rw");
    this.LUT_TABLE_ID.add_def_property("spec_sw_default", "0x0");
    this.LUT_TABLE_ID.add_def_property("sw_default_mask", "0x0");
    this.LUT_TABLE_ID.add_def_property("reset_mask", "0x1");
    this.LUT_ACCESS_TYPE = new("LUT_ACCESS_TYPE");
    this.LUT_ACCESS_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_ACCESS_TYPE.configure(this, 1, 17, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_ACCESS_TYPE.add_def_property("spec_access", "rw");
    this.LUT_ACCESS_TYPE.add_def_property("spec_sw_default", "0x0");
    this.LUT_ACCESS_TYPE.add_def_property("sw_default_mask", "0x0");
    this.LUT_ACCESS_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_ADDR"}, 0, 10);
    add_hdl_path_slice({rdl_reg_name, "LUT_TABLE_ID"}, 16, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_ACCESS_TYPE"}, 17, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_CFG

// S_LUT_ACCESS_DATA
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_DATA extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_DATA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_DATA");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_DATA = new("LUT_DATA");
    this.LUT_DATA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_DATA.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.LUT_DATA.add_def_property("spec_access", "rwto");
    this.LUT_DATA.add_def_property("spec_sw_default", "0x0");
    this.LUT_DATA.add_def_property("sw_default_mask", "0x0");
    this.LUT_DATA.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_DATA"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_DATA

// S_LUT_CFG
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_FUNCTION;
  rand uvm_reg_field_rdl LUT_UFLOW_PRIORITY;
  rand uvm_reg_field_rdl LUT_OFLOW_PRIORITY;
  rand uvm_reg_field_rdl LUT_HYBRID_PRIORITY;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_FUNCTION = new("LUT_LE_FUNCTION");
    this.LUT_LE_FUNCTION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_FUNCTION.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_LE_FUNCTION.add_def_property("spec_access", "rw");
    this.LUT_LE_FUNCTION.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_FUNCTION.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_FUNCTION.add_def_property("reset_mask", "0x1");
    this.LUT_UFLOW_PRIORITY = new("LUT_UFLOW_PRIORITY");
    this.LUT_UFLOW_PRIORITY.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_UFLOW_PRIORITY.configure(this, 1, 4, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_UFLOW_PRIORITY.add_def_property("spec_access", "rw");
    this.LUT_UFLOW_PRIORITY.add_def_property("spec_sw_default", "0x0");
    this.LUT_UFLOW_PRIORITY.add_def_property("sw_default_mask", "0x0");
    this.LUT_UFLOW_PRIORITY.add_def_property("reset_mask", "0x1");
    this.LUT_OFLOW_PRIORITY = new("LUT_OFLOW_PRIORITY");
    this.LUT_OFLOW_PRIORITY.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_OFLOW_PRIORITY.configure(this, 1, 5, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_OFLOW_PRIORITY.add_def_property("spec_access", "rw");
    this.LUT_OFLOW_PRIORITY.add_def_property("spec_sw_default", "0x0");
    this.LUT_OFLOW_PRIORITY.add_def_property("sw_default_mask", "0x0");
    this.LUT_OFLOW_PRIORITY.add_def_property("reset_mask", "0x1");
    this.LUT_HYBRID_PRIORITY = new("LUT_HYBRID_PRIORITY");
    this.LUT_HYBRID_PRIORITY.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_HYBRID_PRIORITY.configure(this, 1, 6, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_HYBRID_PRIORITY.add_def_property("spec_access", "rw");
    this.LUT_HYBRID_PRIORITY.add_def_property("spec_sw_default", "0x0");
    this.LUT_HYBRID_PRIORITY.add_def_property("sw_default_mask", "0x0");
    this.LUT_HYBRID_PRIORITY.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_FUNCTION"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_UFLOW_PRIORITY"}, 4, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_OFLOW_PRIORITY"}, 5, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_HYBRID_PRIORITY"}, 6, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_CFG

// S_LUT_INFO
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_INFO extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_INDEX_OFFSET;
  rand uvm_reg_field_rdl LUT_LE_INDEX_SELECT;
  rand uvm_reg_field_rdl LUT_LO_INDEX_SELECT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_INFO");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_INDEX_OFFSET = new("LUT_LE_INDEX_OFFSET");
    this.LUT_LE_INDEX_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_INDEX_OFFSET.configure(this, 8, 0, "RW", 0, 8'h0, 1, 1, 0);
    this.LUT_LE_INDEX_OFFSET.add_def_property("spec_access", "rw");
    this.LUT_LE_INDEX_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_INDEX_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_INDEX_OFFSET.add_def_property("reset_mask", "0xff");
    this.LUT_LE_INDEX_SELECT = new("LUT_LE_INDEX_SELECT");
    this.LUT_LE_INDEX_SELECT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_INDEX_SELECT.configure(this, 8, 8, "RW", 0, 8'h0, 1, 1, 0);
    this.LUT_LE_INDEX_SELECT.add_def_property("spec_access", "rw");
    this.LUT_LE_INDEX_SELECT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_INDEX_SELECT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_INDEX_SELECT.add_def_property("reset_mask", "0xff");
    this.LUT_LO_INDEX_SELECT = new("LUT_LO_INDEX_SELECT");
    this.LUT_LO_INDEX_SELECT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_INDEX_SELECT.configure(this, 8, 16, "RW", 0, 8'h0, 1, 1, 0);
    this.LUT_LO_INDEX_SELECT.add_def_property("spec_access", "rw");
    this.LUT_LO_INDEX_SELECT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_INDEX_SELECT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_INDEX_SELECT.add_def_property("reset_mask", "0xff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_INDEX_OFFSET"}, 0, 8);
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_INDEX_SELECT"}, 8, 8);
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_INDEX_SELECT"}, 16, 8);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_INFO

// S_LUT_LE_START_LOW
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_START_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_START_LOW = new("LUT_LE_START_LOW");
    this.LUT_LE_START_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_START_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LE_START_LOW.add_def_property("spec_access", "rw");
    this.LUT_LE_START_LOW.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_START_LOW.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_START_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_START_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_LOW

// S_LUT_LE_START_HIGH
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_START_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_START_HIGH = new("LUT_LE_START_HIGH");
    this.LUT_LE_START_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_START_HIGH.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.LUT_LE_START_HIGH.add_def_property("spec_access", "rw");
    this.LUT_LE_START_HIGH.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_START_HIGH.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_START_HIGH.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_START_HIGH"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_HIGH

// S_LUT_LE_END_LOW
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_END_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_END_LOW = new("LUT_LE_END_LOW");
    this.LUT_LE_END_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_END_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LE_END_LOW.add_def_property("spec_access", "rw");
    this.LUT_LE_END_LOW.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_END_LOW.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_END_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_END_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_LOW

// S_LUT_LE_END_HIGH
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_END_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_END_HIGH = new("LUT_LE_END_HIGH");
    this.LUT_LE_END_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_END_HIGH.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.LUT_LE_END_HIGH.add_def_property("spec_access", "rw");
    this.LUT_LE_END_HIGH.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_END_HIGH.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_END_HIGH.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_END_HIGH"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_HIGH

// S_LUT_LO_START_LOW
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_START_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_START_LOW = new("LUT_LO_START_LOW");
    this.LUT_LO_START_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_START_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LO_START_LOW.add_def_property("spec_access", "rw");
    this.LUT_LO_START_LOW.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_START_LOW.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_START_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_START_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_LOW

// S_LUT_LO_START_HIGH
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_START_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_START_HIGH = new("LUT_LO_START_HIGH");
    this.LUT_LO_START_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_START_HIGH.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.LUT_LO_START_HIGH.add_def_property("spec_access", "rw");
    this.LUT_LO_START_HIGH.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_START_HIGH.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_START_HIGH.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_START_HIGH"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_HIGH

// S_LUT_LO_END_LOW
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_END_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_END_LOW = new("LUT_LO_END_LOW");
    this.LUT_LO_END_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_END_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.LUT_LO_END_LOW.add_def_property("spec_access", "rw");
    this.LUT_LO_END_LOW.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_END_LOW.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_END_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_END_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_LOW

// S_LUT_LO_END_HIGH
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_END_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_END_HIGH = new("LUT_LO_END_HIGH");
    this.LUT_LO_END_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_END_HIGH.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.LUT_LO_END_HIGH.add_def_property("spec_access", "rw");
    this.LUT_LO_END_HIGH.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_END_HIGH.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_END_HIGH.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_END_HIGH"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_HIGH

// S_LUT_LE_SLOPE_SCALE
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_UFLOW_SCALE;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_OFLOW_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_SLOPE_UFLOW_SCALE = new("LUT_LE_SLOPE_UFLOW_SCALE");
    this.LUT_LE_SLOPE_UFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_UFLOW_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    this.LUT_LE_SLOPE_OFLOW_SCALE = new("LUT_LE_SLOPE_OFLOW_SCALE");
    this.LUT_LE_SLOPE_OFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_OFLOW_SCALE.configure(this, 16, 16, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_UFLOW_SCALE"}, 0, 16);
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_OFLOW_SCALE"}, 16, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE

// S_LUT_LE_SLOPE_SHIFT
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_UFLOW_SHIFT;
  rand uvm_reg_field_rdl LUT_LE_SLOPE_OFLOW_SHIFT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LE_SLOPE_UFLOW_SHIFT = new("LUT_LE_SLOPE_UFLOW_SHIFT");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_UFLOW_SHIFT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_UFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    this.LUT_LE_SLOPE_OFLOW_SHIFT = new("LUT_LE_SLOPE_OFLOW_SHIFT");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LE_SLOPE_OFLOW_SHIFT.configure(this, 5, 5, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LE_SLOPE_OFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_UFLOW_SHIFT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "LUT_LE_SLOPE_OFLOW_SHIFT"}, 5, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT

// S_LUT_LO_SLOPE_SCALE
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_UFLOW_SCALE;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_OFLOW_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_SLOPE_UFLOW_SCALE = new("LUT_LO_SLOPE_UFLOW_SCALE");
    this.LUT_LO_SLOPE_UFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_UFLOW_SCALE.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    this.LUT_LO_SLOPE_OFLOW_SCALE = new("LUT_LO_SLOPE_OFLOW_SCALE");
    this.LUT_LO_SLOPE_OFLOW_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_OFLOW_SCALE.configure(this, 16, 16, "RW", 0, 16'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_UFLOW_SCALE"}, 0, 16);
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_OFLOW_SCALE"}, 16, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE

// S_LUT_LO_SLOPE_SHIFT
class reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_UFLOW_SHIFT;
  rand uvm_reg_field_rdl LUT_LO_SLOPE_OFLOW_SHIFT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.LUT_LO_SLOPE_UFLOW_SHIFT = new("LUT_LO_SLOPE_UFLOW_SHIFT");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_UFLOW_SHIFT.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_UFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    this.LUT_LO_SLOPE_OFLOW_SHIFT = new("LUT_LO_SLOPE_OFLOW_SHIFT");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_LO_SLOPE_OFLOW_SHIFT.configure(this, 5, 5, "RW", 0, 5'h0, 1, 1, 0);
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("spec_access", "rw");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("spec_sw_default", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("sw_default_mask", "0x0");
    this.LUT_LO_SLOPE_OFLOW_SHIFT.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_UFLOW_SHIFT"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "LUT_LO_SLOPE_OFLOW_SHIFT"}, 5, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_CDP_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_OP_ENABLE

// D_FUNC_BYPASS
class reg_addrmap_NVDLA_NVDLA_CDP_D_FUNC_BYPASS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl SQSUM_BYPASS;
  rand uvm_reg_field_rdl MUL_BYPASS;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_FUNC_BYPASS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.SQSUM_BYPASS = new("SQSUM_BYPASS");
    this.SQSUM_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.SQSUM_BYPASS.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.SQSUM_BYPASS.add_def_property("spec_access", "rw");
    this.SQSUM_BYPASS.add_def_property("spec_sw_default", "0x0");
    this.SQSUM_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.SQSUM_BYPASS.add_def_property("reset_mask", "0x1");
    this.MUL_BYPASS = new("MUL_BYPASS");
    this.MUL_BYPASS.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.MUL_BYPASS.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.MUL_BYPASS.add_def_property("spec_access", "rw");
    this.MUL_BYPASS.add_def_property("spec_sw_default", "0x0");
    this.MUL_BYPASS.add_def_property("sw_default_mask", "0x0");
    this.MUL_BYPASS.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "SQSUM_BYPASS"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "MUL_BYPASS"}, 1, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_FUNC_BYPASS

// D_DST_BASE_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_BASE_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_BASE_ADDR_LOW = new("DST_BASE_ADDR_LOW");
    this.DST_BASE_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_BASE_ADDR_LOW.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_BASE_ADDR_LOW.add_def_property("spec_access", "rw");
    this.DST_BASE_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.DST_BASE_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.DST_BASE_ADDR_LOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_BASE_ADDR_LOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_LOW

// D_DST_BASE_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_BASE_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_BASE_ADDR_HIGH = new("DST_BASE_ADDR_HIGH");
    this.DST_BASE_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_BASE_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_BASE_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.DST_BASE_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.DST_BASE_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.DST_BASE_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_BASE_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_HIGH

// D_DST_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDP_D_DST_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DST_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_LINE_STRIDE = new("DST_LINE_STRIDE");
    this.DST_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_LINE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.DST_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DST_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DST_LINE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_LINE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DST_LINE_STRIDE

// D_DST_SURFACE_STRIDE
class reg_addrmap_NVDLA_NVDLA_CDP_D_DST_SURFACE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_SURFACE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DST_SURFACE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_SURFACE_STRIDE = new("DST_SURFACE_STRIDE");
    this.DST_SURFACE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_SURFACE_STRIDE.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DST_SURFACE_STRIDE.add_def_property("spec_access", "rw");
    this.DST_SURFACE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DST_SURFACE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DST_SURFACE_STRIDE.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_SURFACE_STRIDE"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DST_SURFACE_STRIDE

// D_DST_DMA_CFG
class reg_addrmap_NVDLA_NVDLA_CDP_D_DST_DMA_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DST_DMA_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_RAM_TYPE = new("DST_RAM_TYPE");
    this.DST_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DST_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DST_RAM_TYPE.add_def_property("spec_access", "rw");
    this.DST_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.DST_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.DST_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DST_DMA_CFG

// D_DST_COMPRESSION_EN
class reg_addrmap_NVDLA_NVDLA_CDP_D_DST_COMPRESSION_EN extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DST_COMPRESSION_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DST_COMPRESSION_EN");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DST_COMPRESSION_EN = new("DST_COMPRESSION_EN");
    this.DST_COMPRESSION_EN.set_rdl_access_info(1, 0, 1, 0, 0, 0);
    this.DST_COMPRESSION_EN.configure(this, 1, 0, "RO", 0, 1'h0, 1, 0, 1);
    this.DST_COMPRESSION_EN.add_def_property("spec_access", "c");
    this.DST_COMPRESSION_EN.add_def_property("spec_sw_default", "0x0");
    this.DST_COMPRESSION_EN.add_def_property("sw_default_mask", "0x0");
    this.DST_COMPRESSION_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DST_COMPRESSION_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DST_COMPRESSION_EN

// D_DATA_FORMAT
class reg_addrmap_NVDLA_NVDLA_CDP_D_DATA_FORMAT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl INPUT_DATA_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DATA_FORMAT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.INPUT_DATA_TYPE = new("INPUT_DATA_TYPE");
    this.INPUT_DATA_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.INPUT_DATA_TYPE.configure(this, 2, 0, "RW", 0, 2'h1, 1, 1, 1);
    this.INPUT_DATA_TYPE.add_def_property("spec_access", "rw");
    this.INPUT_DATA_TYPE.add_def_property("spec_sw_default", "0x0");
    this.INPUT_DATA_TYPE.add_def_property("sw_default_mask", "0x0");
    this.INPUT_DATA_TYPE.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "INPUT_DATA_TYPE"}, 0, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DATA_FORMAT

// D_NAN_FLUSH_TO_ZERO
class reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_TO_ZERO;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_TO_ZERO = new("NAN_TO_ZERO");
    this.NAN_TO_ZERO.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NAN_TO_ZERO.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.NAN_TO_ZERO.add_def_property("spec_access", "rw");
    this.NAN_TO_ZERO.add_def_property("spec_sw_default", "0x0");
    this.NAN_TO_ZERO.add_def_property("sw_default_mask", "0x0");
    this.NAN_TO_ZERO.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_TO_ZERO"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO

// D_LRN_CFG
class reg_addrmap_NVDLA_NVDLA_CDP_D_LRN_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NORMALZ_LEN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_LRN_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NORMALZ_LEN = new("NORMALZ_LEN");
    this.NORMALZ_LEN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.NORMALZ_LEN.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 1);
    this.NORMALZ_LEN.add_def_property("spec_access", "rw");
    this.NORMALZ_LEN.add_def_property("spec_sw_default", "0x0");
    this.NORMALZ_LEN.add_def_property("sw_default_mask", "0x0");
    this.NORMALZ_LEN.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NORMALZ_LEN"}, 0, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_LRN_CFG

// D_DATIN_OFFSET
class reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_OFFSET extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATIN_OFFSET;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_OFFSET");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATIN_OFFSET = new("DATIN_OFFSET");
    this.DATIN_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATIN_OFFSET.configure(this, 16, 0, "RW", 0, 16'h0, 1, 1, 1);
    this.DATIN_OFFSET.add_def_property("spec_access", "rw");
    this.DATIN_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.DATIN_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.DATIN_OFFSET.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATIN_OFFSET"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_OFFSET

// D_DATIN_SCALE
class reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATIN_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATIN_SCALE = new("DATIN_SCALE");
    this.DATIN_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATIN_SCALE.configure(this, 16, 0, "RW", 0, 16'h1, 1, 1, 1);
    this.DATIN_SCALE.add_def_property("spec_access", "rw");
    this.DATIN_SCALE.add_def_property("spec_sw_default", "0x0");
    this.DATIN_SCALE.add_def_property("sw_default_mask", "0x0");
    this.DATIN_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATIN_SCALE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SCALE

// D_DATIN_SHIFTER
class reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SHIFTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATIN_SHIFTER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SHIFTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATIN_SHIFTER = new("DATIN_SHIFTER");
    this.DATIN_SHIFTER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATIN_SHIFTER.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 1);
    this.DATIN_SHIFTER.add_def_property("spec_access", "rw");
    this.DATIN_SHIFTER.add_def_property("spec_sw_default", "0x0");
    this.DATIN_SHIFTER.add_def_property("sw_default_mask", "0x0");
    this.DATIN_SHIFTER.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATIN_SHIFTER"}, 0, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SHIFTER

// D_DATOUT_OFFSET
class reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_OFFSET extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATOUT_OFFSET;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_OFFSET");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATOUT_OFFSET = new("DATOUT_OFFSET");
    this.DATOUT_OFFSET.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATOUT_OFFSET.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DATOUT_OFFSET.add_def_property("spec_access", "rw");
    this.DATOUT_OFFSET.add_def_property("spec_sw_default", "0x0");
    this.DATOUT_OFFSET.add_def_property("sw_default_mask", "0x0");
    this.DATOUT_OFFSET.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATOUT_OFFSET"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_OFFSET

// D_DATOUT_SCALE
class reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SCALE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATOUT_SCALE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SCALE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATOUT_SCALE = new("DATOUT_SCALE");
    this.DATOUT_SCALE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATOUT_SCALE.configure(this, 16, 0, "RW", 0, 16'h1, 1, 1, 1);
    this.DATOUT_SCALE.add_def_property("spec_access", "rw");
    this.DATOUT_SCALE.add_def_property("spec_sw_default", "0x0");
    this.DATOUT_SCALE.add_def_property("sw_default_mask", "0x0");
    this.DATOUT_SCALE.add_def_property("reset_mask", "0xffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATOUT_SCALE"}, 0, 16);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SCALE

// D_DATOUT_SHIFTER
class reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SHIFTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATOUT_SHIFTER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SHIFTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATOUT_SHIFTER = new("DATOUT_SHIFTER");
    this.DATOUT_SHIFTER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATOUT_SHIFTER.configure(this, 6, 0, "RW", 0, 6'h0, 1, 1, 1);
    this.DATOUT_SHIFTER.add_def_property("spec_access", "rw");
    this.DATOUT_SHIFTER.add_def_property("spec_sw_default", "0x0");
    this.DATOUT_SHIFTER.add_def_property("sw_default_mask", "0x0");
    this.DATOUT_SHIFTER.add_def_property("reset_mask", "0x3f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATOUT_SHIFTER"}, 0, 6);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SHIFTER

// D_NAN_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_INPUT_NUM = new("NAN_INPUT_NUM");
    this.NAN_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.NAN_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.NAN_INPUT_NUM.add_def_property("spec_access", "r");
    this.NAN_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.NAN_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.NAN_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_INPUT_NUM

// D_INF_INPUT_NUM
class reg_addrmap_NVDLA_NVDLA_CDP_D_INF_INPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl INF_INPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_INF_INPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.INF_INPUT_NUM = new("INF_INPUT_NUM");
    this.INF_INPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.INF_INPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.INF_INPUT_NUM.add_def_property("spec_access", "r");
    this.INF_INPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.INF_INPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.INF_INPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "INF_INPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_INF_INPUT_NUM

// D_NAN_OUTPUT_NUM
class reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_OUTPUT_NUM extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl NAN_OUTPUT_NUM;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_OUTPUT_NUM");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.NAN_OUTPUT_NUM = new("NAN_OUTPUT_NUM");
    this.NAN_OUTPUT_NUM.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.NAN_OUTPUT_NUM.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.NAN_OUTPUT_NUM.add_def_property("spec_access", "r");
    this.NAN_OUTPUT_NUM.add_def_property("spec_sw_default", "0x0");
    this.NAN_OUTPUT_NUM.add_def_property("sw_default_mask", "0x0");
    this.NAN_OUTPUT_NUM.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "NAN_OUTPUT_NUM"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_OUTPUT_NUM

// D_OUT_SATURATION
class reg_addrmap_NVDLA_NVDLA_CDP_D_OUT_SATURATION extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OUT_SATURATION;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_OUT_SATURATION");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OUT_SATURATION = new("OUT_SATURATION");
    this.OUT_SATURATION.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.OUT_SATURATION.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.OUT_SATURATION.add_def_property("spec_access", "r");
    this.OUT_SATURATION.add_def_property("spec_sw_default", "0x0");
    this.OUT_SATURATION.add_def_property("sw_default_mask", "0x0");
    this.OUT_SATURATION.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OUT_SATURATION"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_OUT_SATURATION

// D_PERF_ENABLE
class reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DMA_EN;
  rand uvm_reg_field_rdl LUT_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DMA_EN = new("DMA_EN");
    this.DMA_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DMA_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.DMA_EN.add_def_property("spec_access", "rw");
    this.DMA_EN.add_def_property("spec_sw_default", "0x0");
    this.DMA_EN.add_def_property("sw_default_mask", "0x0");
    this.DMA_EN.add_def_property("reset_mask", "0x1");
    this.LUT_EN = new("LUT_EN");
    this.LUT_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.LUT_EN.configure(this, 1, 1, "RW", 0, 1'h0, 1, 1, 0);
    this.LUT_EN.add_def_property("spec_access", "rw");
    this.LUT_EN.add_def_property("spec_sw_default", "0x0");
    this.LUT_EN.add_def_property("sw_default_mask", "0x0");
    this.LUT_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DMA_EN"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "LUT_EN"}, 1, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_ENABLE

// D_PERF_WRITE_STALL
class reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_WRITE_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_WRITE_STALL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_WRITE_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_WRITE_STALL = new("PERF_WRITE_STALL");
    this.PERF_WRITE_STALL.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_WRITE_STALL.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_WRITE_STALL.add_def_property("spec_access", "r");
    this.PERF_WRITE_STALL.add_def_property("spec_sw_default", "0x0");
    this.PERF_WRITE_STALL.add_def_property("sw_default_mask", "0x0");
    this.PERF_WRITE_STALL.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_WRITE_STALL"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_WRITE_STALL

// D_PERF_LUT_UFLOW
class reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_UFLOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_LUT_UFLOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_UFLOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_LUT_UFLOW = new("PERF_LUT_UFLOW");
    this.PERF_LUT_UFLOW.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_LUT_UFLOW.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_LUT_UFLOW.add_def_property("spec_access", "r");
    this.PERF_LUT_UFLOW.add_def_property("spec_sw_default", "0x0");
    this.PERF_LUT_UFLOW.add_def_property("sw_default_mask", "0x0");
    this.PERF_LUT_UFLOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_LUT_UFLOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_UFLOW

// D_PERF_LUT_OFLOW
class reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_OFLOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_LUT_OFLOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_OFLOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_LUT_OFLOW = new("PERF_LUT_OFLOW");
    this.PERF_LUT_OFLOW.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_LUT_OFLOW.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_LUT_OFLOW.add_def_property("spec_access", "r");
    this.PERF_LUT_OFLOW.add_def_property("spec_sw_default", "0x0");
    this.PERF_LUT_OFLOW.add_def_property("sw_default_mask", "0x0");
    this.PERF_LUT_OFLOW.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_LUT_OFLOW"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_OFLOW

// D_PERF_LUT_HYBRID
class reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_HYBRID extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_LUT_HYBRID;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_HYBRID");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_LUT_HYBRID = new("PERF_LUT_HYBRID");
    this.PERF_LUT_HYBRID.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_LUT_HYBRID.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_LUT_HYBRID.add_def_property("spec_access", "r");
    this.PERF_LUT_HYBRID.add_def_property("spec_sw_default", "0x0");
    this.PERF_LUT_HYBRID.add_def_property("sw_default_mask", "0x0");
    this.PERF_LUT_HYBRID.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_LUT_HYBRID"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_HYBRID

// D_PERF_LUT_LE_HIT
class reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LE_HIT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_LUT_LE_HIT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LE_HIT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_LUT_LE_HIT = new("PERF_LUT_LE_HIT");
    this.PERF_LUT_LE_HIT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_LUT_LE_HIT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_LUT_LE_HIT.add_def_property("spec_access", "r");
    this.PERF_LUT_LE_HIT.add_def_property("spec_sw_default", "0x0");
    this.PERF_LUT_LE_HIT.add_def_property("sw_default_mask", "0x0");
    this.PERF_LUT_LE_HIT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_LUT_LE_HIT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LE_HIT

// D_PERF_LUT_LO_HIT
class reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LO_HIT extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_LUT_LO_HIT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LO_HIT");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_LUT_LO_HIT = new("PERF_LUT_LO_HIT");
    this.PERF_LUT_LO_HIT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.PERF_LUT_LO_HIT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.PERF_LUT_LO_HIT.add_def_property("spec_access", "r");
    this.PERF_LUT_LO_HIT.add_def_property("spec_sw_default", "0x0");
    this.PERF_LUT_LO_HIT.add_def_property("sw_default_mask", "0x0");
    this.PERF_LUT_LO_HIT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_LUT_LO_HIT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LO_HIT

// D_CYA
class reg_addrmap_NVDLA_NVDLA_CDP_D_CYA extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CYA;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_CDP_D_CYA");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CYA = new("CYA");
    this.CYA.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CYA.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.CYA.add_def_property("spec_access", "rw");
    this.CYA.add_def_property("spec_sw_default", "0x0");
    this.CYA.add_def_property("sw_default_mask", "0x0");
    this.CYA.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CYA"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_CDP_D_CYA

// Block NVDLA_CDP
class block_addrmap_NVDLA_NVDLA_CDP extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_CFG S_LUT_ACCESS_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_ACCESS_DATA S_LUT_ACCESS_DATA;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_CFG S_LUT_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_INFO S_LUT_INFO;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_LOW S_LUT_LE_START_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_START_HIGH S_LUT_LE_START_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_LOW S_LUT_LE_END_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_END_HIGH S_LUT_LE_END_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_LOW S_LUT_LO_START_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_START_HIGH S_LUT_LO_START_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_LOW S_LUT_LO_END_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_END_HIGH S_LUT_LO_END_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE S_LUT_LE_SLOPE_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT S_LUT_LE_SLOPE_SHIFT;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE S_LUT_LO_SLOPE_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT S_LUT_LO_SLOPE_SHIFT;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_FUNC_BYPASS D_FUNC_BYPASS;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_LOW D_DST_BASE_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DST_BASE_ADDR_HIGH D_DST_BASE_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DST_LINE_STRIDE D_DST_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DST_SURFACE_STRIDE D_DST_SURFACE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DST_DMA_CFG D_DST_DMA_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DST_COMPRESSION_EN D_DST_COMPRESSION_EN;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DATA_FORMAT D_DATA_FORMAT;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO D_NAN_FLUSH_TO_ZERO;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_LRN_CFG D_LRN_CFG;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_OFFSET D_DATIN_OFFSET;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SCALE D_DATIN_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DATIN_SHIFTER D_DATIN_SHIFTER;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_OFFSET D_DATOUT_OFFSET;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SCALE D_DATOUT_SCALE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_DATOUT_SHIFTER D_DATOUT_SHIFTER;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_INPUT_NUM D_NAN_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_INF_INPUT_NUM D_INF_INPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_NAN_OUTPUT_NUM D_NAN_OUTPUT_NUM;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_OUT_SATURATION D_OUT_SATURATION;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_ENABLE D_PERF_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_WRITE_STALL D_PERF_WRITE_STALL;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_UFLOW D_PERF_LUT_UFLOW;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_OFLOW D_PERF_LUT_OFLOW;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_HYBRID D_PERF_LUT_HYBRID;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LE_HIT D_PERF_LUT_LE_HIT;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_PERF_LUT_LO_HIT D_PERF_LUT_LO_HIT;
  rand reg_addrmap_NVDLA_NVDLA_CDP_D_CYA D_CYA;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_CDP");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.S_LUT_ACCESS_CFG = new("S_LUT_ACCESS_CFG");
    this.S_LUT_ACCESS_CFG.configure(this, null, "");
    this.S_LUT_ACCESS_CFG.set_rdl_tag("S_LUT_ACCESS_CFG_");
    this.S_LUT_ACCESS_CFG.set_reg_test_info(0, 0, 2);
    this.S_LUT_ACCESS_CFG.build();
    this.default_map.add_reg(this.S_LUT_ACCESS_CFG, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.S_LUT_ACCESS_DATA = new("S_LUT_ACCESS_DATA");
    this.S_LUT_ACCESS_DATA.configure(this, null, "");
    this.S_LUT_ACCESS_DATA.set_rdl_tag("S_LUT_ACCESS_DATA_");
    this.S_LUT_ACCESS_DATA.set_reg_test_info(0, 0, 2);
    this.S_LUT_ACCESS_DATA.build();
    this.default_map.add_reg(this.S_LUT_ACCESS_DATA, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.S_LUT_CFG = new("S_LUT_CFG");
    this.S_LUT_CFG.configure(this, null, "");
    this.S_LUT_CFG.set_rdl_tag("S_LUT_CFG_");
    this.S_LUT_CFG.set_reg_test_info(0, 0, 2);
    this.S_LUT_CFG.build();
    this.default_map.add_reg(this.S_LUT_CFG, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.S_LUT_INFO = new("S_LUT_INFO");
    this.S_LUT_INFO.configure(this, null, "");
    this.S_LUT_INFO.set_rdl_tag("S_LUT_INFO_");
    this.S_LUT_INFO.set_reg_test_info(0, 0, 2);
    this.S_LUT_INFO.build();
    this.default_map.add_reg(this.S_LUT_INFO, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.S_LUT_LE_START_LOW = new("S_LUT_LE_START_LOW");
    this.S_LUT_LE_START_LOW.configure(this, null, "");
    this.S_LUT_LE_START_LOW.set_rdl_tag("S_LUT_LE_START_LOW_");
    this.S_LUT_LE_START_LOW.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_START_LOW.build();
    this.default_map.add_reg(this.S_LUT_LE_START_LOW, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.S_LUT_LE_START_HIGH = new("S_LUT_LE_START_HIGH");
    this.S_LUT_LE_START_HIGH.configure(this, null, "");
    this.S_LUT_LE_START_HIGH.set_rdl_tag("S_LUT_LE_START_HIGH_");
    this.S_LUT_LE_START_HIGH.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_START_HIGH.build();
    this.default_map.add_reg(this.S_LUT_LE_START_HIGH, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.S_LUT_LE_END_LOW = new("S_LUT_LE_END_LOW");
    this.S_LUT_LE_END_LOW.configure(this, null, "");
    this.S_LUT_LE_END_LOW.set_rdl_tag("S_LUT_LE_END_LOW_");
    this.S_LUT_LE_END_LOW.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_END_LOW.build();
    this.default_map.add_reg(this.S_LUT_LE_END_LOW, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.S_LUT_LE_END_HIGH = new("S_LUT_LE_END_HIGH");
    this.S_LUT_LE_END_HIGH.configure(this, null, "");
    this.S_LUT_LE_END_HIGH.set_rdl_tag("S_LUT_LE_END_HIGH_");
    this.S_LUT_LE_END_HIGH.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_END_HIGH.build();
    this.default_map.add_reg(this.S_LUT_LE_END_HIGH, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.S_LUT_LO_START_LOW = new("S_LUT_LO_START_LOW");
    this.S_LUT_LO_START_LOW.configure(this, null, "");
    this.S_LUT_LO_START_LOW.set_rdl_tag("S_LUT_LO_START_LOW_");
    this.S_LUT_LO_START_LOW.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_START_LOW.build();
    this.default_map.add_reg(this.S_LUT_LO_START_LOW, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.S_LUT_LO_START_HIGH = new("S_LUT_LO_START_HIGH");
    this.S_LUT_LO_START_HIGH.configure(this, null, "");
    this.S_LUT_LO_START_HIGH.set_rdl_tag("S_LUT_LO_START_HIGH_");
    this.S_LUT_LO_START_HIGH.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_START_HIGH.build();
    this.default_map.add_reg(this.S_LUT_LO_START_HIGH, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.S_LUT_LO_END_LOW = new("S_LUT_LO_END_LOW");
    this.S_LUT_LO_END_LOW.configure(this, null, "");
    this.S_LUT_LO_END_LOW.set_rdl_tag("S_LUT_LO_END_LOW_");
    this.S_LUT_LO_END_LOW.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_END_LOW.build();
    this.default_map.add_reg(this.S_LUT_LO_END_LOW, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.S_LUT_LO_END_HIGH = new("S_LUT_LO_END_HIGH");
    this.S_LUT_LO_END_HIGH.configure(this, null, "");
    this.S_LUT_LO_END_HIGH.set_rdl_tag("S_LUT_LO_END_HIGH_");
    this.S_LUT_LO_END_HIGH.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_END_HIGH.build();
    this.default_map.add_reg(this.S_LUT_LO_END_HIGH, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.S_LUT_LE_SLOPE_SCALE = new("S_LUT_LE_SLOPE_SCALE");
    this.S_LUT_LE_SLOPE_SCALE.configure(this, null, "");
    this.S_LUT_LE_SLOPE_SCALE.set_rdl_tag("S_LUT_LE_SLOPE_SCALE_");
    this.S_LUT_LE_SLOPE_SCALE.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_SLOPE_SCALE.build();
    this.default_map.add_reg(this.S_LUT_LE_SLOPE_SCALE, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.S_LUT_LE_SLOPE_SHIFT = new("S_LUT_LE_SLOPE_SHIFT");
    this.S_LUT_LE_SLOPE_SHIFT.configure(this, null, "");
    this.S_LUT_LE_SLOPE_SHIFT.set_rdl_tag("S_LUT_LE_SLOPE_SHIFT_");
    this.S_LUT_LE_SLOPE_SHIFT.set_reg_test_info(0, 0, 2);
    this.S_LUT_LE_SLOPE_SHIFT.build();
    this.default_map.add_reg(this.S_LUT_LE_SLOPE_SHIFT, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.S_LUT_LO_SLOPE_SCALE = new("S_LUT_LO_SLOPE_SCALE");
    this.S_LUT_LO_SLOPE_SCALE.configure(this, null, "");
    this.S_LUT_LO_SLOPE_SCALE.set_rdl_tag("S_LUT_LO_SLOPE_SCALE_");
    this.S_LUT_LO_SLOPE_SCALE.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_SLOPE_SCALE.build();
    this.default_map.add_reg(this.S_LUT_LO_SLOPE_SCALE, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.S_LUT_LO_SLOPE_SHIFT = new("S_LUT_LO_SLOPE_SHIFT");
    this.S_LUT_LO_SLOPE_SHIFT.configure(this, null, "");
    this.S_LUT_LO_SLOPE_SHIFT.set_rdl_tag("S_LUT_LO_SLOPE_SHIFT_");
    this.S_LUT_LO_SLOPE_SHIFT.set_reg_test_info(0, 0, 2);
    this.S_LUT_LO_SLOPE_SHIFT.build();
    this.default_map.add_reg(this.S_LUT_LO_SLOPE_SHIFT, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.D_FUNC_BYPASS = new("D_FUNC_BYPASS");
    this.D_FUNC_BYPASS.configure(this, null, "");
    this.D_FUNC_BYPASS.set_rdl_tag("D_FUNC_BYPASS_");
    this.D_FUNC_BYPASS.set_reg_test_info(0, 0, 2);
    this.D_FUNC_BYPASS.build();
    this.default_map.add_reg(this.D_FUNC_BYPASS, `UVM_REG_ADDR_WIDTH'h4c, "RW", 0);
    this.D_DST_BASE_ADDR_LOW = new("D_DST_BASE_ADDR_LOW");
    this.D_DST_BASE_ADDR_LOW.configure(this, null, "");
    this.D_DST_BASE_ADDR_LOW.set_rdl_tag("D_DST_BASE_ADDR_LOW_");
    this.D_DST_BASE_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_DST_BASE_ADDR_LOW.build();
    this.default_map.add_reg(this.D_DST_BASE_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h50, "RW", 0);
    this.D_DST_BASE_ADDR_HIGH = new("D_DST_BASE_ADDR_HIGH");
    this.D_DST_BASE_ADDR_HIGH.configure(this, null, "");
    this.D_DST_BASE_ADDR_HIGH.set_rdl_tag("D_DST_BASE_ADDR_HIGH_");
    this.D_DST_BASE_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_DST_BASE_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_DST_BASE_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h54, "RW", 0);
    this.D_DST_LINE_STRIDE = new("D_DST_LINE_STRIDE");
    this.D_DST_LINE_STRIDE.configure(this, null, "");
    this.D_DST_LINE_STRIDE.set_rdl_tag("D_DST_LINE_STRIDE_");
    this.D_DST_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DST_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_DST_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h58, "RW", 0);
    this.D_DST_SURFACE_STRIDE = new("D_DST_SURFACE_STRIDE");
    this.D_DST_SURFACE_STRIDE.configure(this, null, "");
    this.D_DST_SURFACE_STRIDE.set_rdl_tag("D_DST_SURFACE_STRIDE_");
    this.D_DST_SURFACE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DST_SURFACE_STRIDE.build();
    this.default_map.add_reg(this.D_DST_SURFACE_STRIDE, `UVM_REG_ADDR_WIDTH'h5c, "RW", 0);
    this.D_DST_DMA_CFG = new("D_DST_DMA_CFG");
    this.D_DST_DMA_CFG.configure(this, null, "");
    this.D_DST_DMA_CFG.set_rdl_tag("D_DST_DMA_CFG_");
    this.D_DST_DMA_CFG.set_reg_test_info(0, 0, 2);
    this.D_DST_DMA_CFG.build();
    this.default_map.add_reg(this.D_DST_DMA_CFG, `UVM_REG_ADDR_WIDTH'h60, "RW", 0);
    this.D_DST_COMPRESSION_EN = new("D_DST_COMPRESSION_EN");
    this.D_DST_COMPRESSION_EN.configure(this, null, "");
    this.D_DST_COMPRESSION_EN.set_rdl_tag("D_DST_COMPRESSION_EN_");
    this.D_DST_COMPRESSION_EN.set_reg_test_info(0, 0, 0);
    this.D_DST_COMPRESSION_EN.build();
    this.default_map.add_reg(this.D_DST_COMPRESSION_EN, `UVM_REG_ADDR_WIDTH'h64, "RO", 0);
    this.D_DATA_FORMAT = new("D_DATA_FORMAT");
    this.D_DATA_FORMAT.configure(this, null, "");
    this.D_DATA_FORMAT.set_rdl_tag("D_DATA_FORMAT_");
    this.D_DATA_FORMAT.set_reg_test_info(0, 0, 2);
    this.D_DATA_FORMAT.build();
    this.default_map.add_reg(this.D_DATA_FORMAT, `UVM_REG_ADDR_WIDTH'h68, "RW", 0);
    this.D_NAN_FLUSH_TO_ZERO = new("D_NAN_FLUSH_TO_ZERO");
    this.D_NAN_FLUSH_TO_ZERO.configure(this, null, "");
    this.D_NAN_FLUSH_TO_ZERO.set_rdl_tag("D_NAN_FLUSH_TO_ZERO_");
    this.D_NAN_FLUSH_TO_ZERO.set_reg_test_info(0, 0, 2);
    this.D_NAN_FLUSH_TO_ZERO.build();
    this.default_map.add_reg(this.D_NAN_FLUSH_TO_ZERO, `UVM_REG_ADDR_WIDTH'h6c, "RW", 0);
    this.D_LRN_CFG = new("D_LRN_CFG");
    this.D_LRN_CFG.configure(this, null, "");
    this.D_LRN_CFG.set_rdl_tag("D_LRN_CFG_");
    this.D_LRN_CFG.set_reg_test_info(0, 0, 2);
    this.D_LRN_CFG.build();
    this.default_map.add_reg(this.D_LRN_CFG, `UVM_REG_ADDR_WIDTH'h70, "RW", 0);
    this.D_DATIN_OFFSET = new("D_DATIN_OFFSET");
    this.D_DATIN_OFFSET.configure(this, null, "");
    this.D_DATIN_OFFSET.set_rdl_tag("D_DATIN_OFFSET_");
    this.D_DATIN_OFFSET.set_reg_test_info(0, 0, 2);
    this.D_DATIN_OFFSET.build();
    this.default_map.add_reg(this.D_DATIN_OFFSET, `UVM_REG_ADDR_WIDTH'h74, "RW", 0);
    this.D_DATIN_SCALE = new("D_DATIN_SCALE");
    this.D_DATIN_SCALE.configure(this, null, "");
    this.D_DATIN_SCALE.set_rdl_tag("D_DATIN_SCALE_");
    this.D_DATIN_SCALE.set_reg_test_info(0, 0, 2);
    this.D_DATIN_SCALE.build();
    this.default_map.add_reg(this.D_DATIN_SCALE, `UVM_REG_ADDR_WIDTH'h78, "RW", 0);
    this.D_DATIN_SHIFTER = new("D_DATIN_SHIFTER");
    this.D_DATIN_SHIFTER.configure(this, null, "");
    this.D_DATIN_SHIFTER.set_rdl_tag("D_DATIN_SHIFTER_");
    this.D_DATIN_SHIFTER.set_reg_test_info(0, 0, 2);
    this.D_DATIN_SHIFTER.build();
    this.default_map.add_reg(this.D_DATIN_SHIFTER, `UVM_REG_ADDR_WIDTH'h7c, "RW", 0);
    this.D_DATOUT_OFFSET = new("D_DATOUT_OFFSET");
    this.D_DATOUT_OFFSET.configure(this, null, "");
    this.D_DATOUT_OFFSET.set_rdl_tag("D_DATOUT_OFFSET_");
    this.D_DATOUT_OFFSET.set_reg_test_info(0, 0, 2);
    this.D_DATOUT_OFFSET.build();
    this.default_map.add_reg(this.D_DATOUT_OFFSET, `UVM_REG_ADDR_WIDTH'h80, "RW", 0);
    this.D_DATOUT_SCALE = new("D_DATOUT_SCALE");
    this.D_DATOUT_SCALE.configure(this, null, "");
    this.D_DATOUT_SCALE.set_rdl_tag("D_DATOUT_SCALE_");
    this.D_DATOUT_SCALE.set_reg_test_info(0, 0, 2);
    this.D_DATOUT_SCALE.build();
    this.default_map.add_reg(this.D_DATOUT_SCALE, `UVM_REG_ADDR_WIDTH'h84, "RW", 0);
    this.D_DATOUT_SHIFTER = new("D_DATOUT_SHIFTER");
    this.D_DATOUT_SHIFTER.configure(this, null, "");
    this.D_DATOUT_SHIFTER.set_rdl_tag("D_DATOUT_SHIFTER_");
    this.D_DATOUT_SHIFTER.set_reg_test_info(0, 0, 2);
    this.D_DATOUT_SHIFTER.build();
    this.default_map.add_reg(this.D_DATOUT_SHIFTER, `UVM_REG_ADDR_WIDTH'h88, "RW", 0);
    this.D_NAN_INPUT_NUM = new("D_NAN_INPUT_NUM");
    this.D_NAN_INPUT_NUM.configure(this, null, "");
    this.D_NAN_INPUT_NUM.set_rdl_tag("D_NAN_INPUT_NUM_");
    this.D_NAN_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_NAN_INPUT_NUM.build();
    this.default_map.add_reg(this.D_NAN_INPUT_NUM, `UVM_REG_ADDR_WIDTH'h8c, "RO", 0);
    this.D_INF_INPUT_NUM = new("D_INF_INPUT_NUM");
    this.D_INF_INPUT_NUM.configure(this, null, "");
    this.D_INF_INPUT_NUM.set_rdl_tag("D_INF_INPUT_NUM_");
    this.D_INF_INPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_INF_INPUT_NUM.build();
    this.default_map.add_reg(this.D_INF_INPUT_NUM, `UVM_REG_ADDR_WIDTH'h90, "RO", 0);
    this.D_NAN_OUTPUT_NUM = new("D_NAN_OUTPUT_NUM");
    this.D_NAN_OUTPUT_NUM.configure(this, null, "");
    this.D_NAN_OUTPUT_NUM.set_rdl_tag("D_NAN_OUTPUT_NUM_");
    this.D_NAN_OUTPUT_NUM.set_reg_test_info(0, 0, 32);
    this.D_NAN_OUTPUT_NUM.build();
    this.default_map.add_reg(this.D_NAN_OUTPUT_NUM, `UVM_REG_ADDR_WIDTH'h94, "RO", 0);
    this.D_OUT_SATURATION = new("D_OUT_SATURATION");
    this.D_OUT_SATURATION.configure(this, null, "");
    this.D_OUT_SATURATION.set_rdl_tag("D_OUT_SATURATION_");
    this.D_OUT_SATURATION.set_reg_test_info(0, 0, 32);
    this.D_OUT_SATURATION.build();
    this.default_map.add_reg(this.D_OUT_SATURATION, `UVM_REG_ADDR_WIDTH'h98, "RO", 0);
    this.D_PERF_ENABLE = new("D_PERF_ENABLE");
    this.D_PERF_ENABLE.configure(this, null, "");
    this.D_PERF_ENABLE.set_rdl_tag("D_PERF_ENABLE_");
    this.D_PERF_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_PERF_ENABLE.build();
    this.default_map.add_reg(this.D_PERF_ENABLE, `UVM_REG_ADDR_WIDTH'h9c, "RW", 0);
    this.D_PERF_WRITE_STALL = new("D_PERF_WRITE_STALL");
    this.D_PERF_WRITE_STALL.configure(this, null, "");
    this.D_PERF_WRITE_STALL.set_rdl_tag("D_PERF_WRITE_STALL_");
    this.D_PERF_WRITE_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_WRITE_STALL.build();
    this.default_map.add_reg(this.D_PERF_WRITE_STALL, `UVM_REG_ADDR_WIDTH'ha0, "RO", 0);
    this.D_PERF_LUT_UFLOW = new("D_PERF_LUT_UFLOW");
    this.D_PERF_LUT_UFLOW.configure(this, null, "");
    this.D_PERF_LUT_UFLOW.set_rdl_tag("D_PERF_LUT_UFLOW_");
    this.D_PERF_LUT_UFLOW.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_UFLOW.build();
    this.default_map.add_reg(this.D_PERF_LUT_UFLOW, `UVM_REG_ADDR_WIDTH'ha4, "RO", 0);
    this.D_PERF_LUT_OFLOW = new("D_PERF_LUT_OFLOW");
    this.D_PERF_LUT_OFLOW.configure(this, null, "");
    this.D_PERF_LUT_OFLOW.set_rdl_tag("D_PERF_LUT_OFLOW_");
    this.D_PERF_LUT_OFLOW.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_OFLOW.build();
    this.default_map.add_reg(this.D_PERF_LUT_OFLOW, `UVM_REG_ADDR_WIDTH'ha8, "RO", 0);
    this.D_PERF_LUT_HYBRID = new("D_PERF_LUT_HYBRID");
    this.D_PERF_LUT_HYBRID.configure(this, null, "");
    this.D_PERF_LUT_HYBRID.set_rdl_tag("D_PERF_LUT_HYBRID_");
    this.D_PERF_LUT_HYBRID.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_HYBRID.build();
    this.default_map.add_reg(this.D_PERF_LUT_HYBRID, `UVM_REG_ADDR_WIDTH'hac, "RO", 0);
    this.D_PERF_LUT_LE_HIT = new("D_PERF_LUT_LE_HIT");
    this.D_PERF_LUT_LE_HIT.configure(this, null, "");
    this.D_PERF_LUT_LE_HIT.set_rdl_tag("D_PERF_LUT_LE_HIT_");
    this.D_PERF_LUT_LE_HIT.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_LE_HIT.build();
    this.default_map.add_reg(this.D_PERF_LUT_LE_HIT, `UVM_REG_ADDR_WIDTH'hb0, "RO", 0);
    this.D_PERF_LUT_LO_HIT = new("D_PERF_LUT_LO_HIT");
    this.D_PERF_LUT_LO_HIT.configure(this, null, "");
    this.D_PERF_LUT_LO_HIT.set_rdl_tag("D_PERF_LUT_LO_HIT_");
    this.D_PERF_LUT_LO_HIT.set_reg_test_info(0, 0, 32);
    this.D_PERF_LUT_LO_HIT.build();
    this.default_map.add_reg(this.D_PERF_LUT_LO_HIT, `UVM_REG_ADDR_WIDTH'hb4, "RO", 0);
    this.D_CYA = new("D_CYA");
    this.D_CYA.configure(this, null, "");
    this.D_CYA.set_rdl_tag("D_CYA_");
    this.D_CYA.set_reg_test_info(0, 0, 2);
    this.D_CYA.build();
    this.default_map.add_reg(this.D_CYA, `UVM_REG_ADDR_WIDTH'hb8, "RW", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_CDP)
endclass : block_addrmap_NVDLA_NVDLA_CDP

// Base block
class block_addrmap_NVDLA extends uvm_reg_block_rdl;
  rand block_addrmap_NVDLA_NVDLA_CDP NVDLA_CDP;
  
  function new(string name = "block_addrmap_NVDLA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", `UVM_REG_ADDR_WIDTH'h0, 4, UVM_LITTLE_ENDIAN, 1);
    this.set_rdl_address_map(1);
    this.set_rdl_address_map_hdl_path({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.NVDLA_CDP = block_addrmap_NVDLA_NVDLA_CDP::type_id::create("NVDLA_CDP",, get_full_name());
    this.NVDLA_CDP.configure(this, "");
    this.NVDLA_CDP.set_rdl_tag("NVDLA_CDP_");
    this.NVDLA_CDP.build();
    this.default_map.add_submap(this.NVDLA_CDP.default_map, `UVM_REG_ADDR_WIDTH'hd000);
    set_hdl_path_root({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.add_callbacks();
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA)
endclass : block_addrmap_NVDLA
