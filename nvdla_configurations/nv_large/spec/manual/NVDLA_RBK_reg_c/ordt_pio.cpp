//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_RBK.rdl
//   Parms: opendla.parms
//   Date: Sat Feb 01 17:34:29 CET 2020
//

#include "ordt_pio_common.hpp"
#include "ordt_pio.hpp"

// ------------------ ordt_addr_elem methods ------------------

ordt_addr_elem::ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : m_startaddress(_m_startaddress),
    m_endaddress(_m_endaddress) {
}

bool  ordt_addr_elem::containsAddress(const uint64_t &addr) {
  return ((addr >= m_startaddress) && (addr <= m_endaddress));
}

bool  ordt_addr_elem::isBelowAddress(const uint64_t &addr) {
  return (addr > m_endaddress);
}

bool  ordt_addr_elem::isAboveAddress(const uint64_t &addr) {
  return (addr < m_startaddress);
}

bool  ordt_addr_elem::hasStartAddress(const uint64_t &addr) {
  return (addr == m_startaddress);
}

void  ordt_addr_elem::update_child_ptrs() {
}

// ------------------ ordt_regset methods ------------------

ordt_addr_elem*  ordt_regset::findAddrElem(const uint64_t &addr) {
  int lo = 0;
  int hi = m_children.size()-1;
  int mid = 0;
  while (lo <= hi) {
     mid = (lo + hi) / 2;
     if (m_children[mid]->containsAddress(addr)) {
        //outElem = m_children[mid];
        return m_children[mid];
     }
     else if (m_children[mid]->isAboveAddress(addr))
        hi = mid - 1;
     else
        lo = mid + 1;
  }
  return nullptr;
}

ordt_regset::ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

int  ordt_regset::write(const uint64_t &addr, const ordt_data &wdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->write(addr, wdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in regset\n";
  #endif
     return 8;
}

int  ordt_regset::read(const uint64_t &addr, ordt_data &rdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->read(addr, rdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in regset\n";
  #endif
     rdata.clear();
     return 8;
}

// ------------------ ordt_reg methods ------------------

ordt_reg::ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

ordt_reg::ordt_reg(const ordt_reg &_old)
  : ordt_addr_elem(_old),
    m_mutex() {
}

void  ordt_reg::write(const ordt_data &wdata) {
}

int  ordt_reg::write(const uint64_t &addr, const ordt_data &wdata) {
     return 0;
}

void  ordt_reg::read(ordt_data &rdata) {
}

int  ordt_reg::read(const uint64_t &addr, ordt_data &rdata) {
     return 0;
}

// ------------------ ordt_rg_NVDLA_RBK_S_STATUS methods ------------------

ordt_rg_NVDLA_RBK_S_STATUS::ordt_rg_NVDLA_RBK_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_RBK_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_RBK_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_S_POINTER methods ------------------

ordt_rg_NVDLA_RBK_S_POINTER::ordt_rg_NVDLA_RBK_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_RBK_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_RBK_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_RBK_D_OP_ENABLE::ordt_rg_NVDLA_RBK_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_MISC_CFG methods ------------------

ordt_rg_NVDLA_RBK_D_MISC_CFG::ordt_rg_NVDLA_RBK_D_MISC_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RUBIK_MODE(0, 2, 0x0, r_std, w_std),
    IN_PRECISION(8, 2, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_MISC_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_MISC_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_MISC_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_MISC_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RUBIK_MODE.write(wdata);
  IN_PRECISION.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_MISC_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_MISC_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_MISC_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_MISC_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RUBIK_MODE.read(rdata);
  IN_PRECISION.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE methods ------------------

ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE::ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0 methods ------------------

ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0::ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_WIDTH(0, 13, 0x0, r_std, w_std),
    DATAIN_HEIGHT(16, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_WIDTH.write(wdata);
  DATAIN_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_WIDTH.read(rdata);
  DATAIN_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1 methods ------------------

ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1::ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH::ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAIN_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAIN_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAIN_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW methods ------------------

ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW::ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAIN_ADDR_LOW(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAIN_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAIN_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE::ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAIN_LINE_STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAIN_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAIN_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE methods ------------------

ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE::ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAIN_SURF_STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAIN_SURF_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAIN_SURF_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE methods ------------------

ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE::ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAIN_PLANAR_STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAIN_PLANAR_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAIN_PLANAR_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE methods ------------------

ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE::ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAOUT_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAOUT_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAOUT_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1 methods ------------------

ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1::ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAOUT_CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAOUT_CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAOUT_CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH::ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAOUT_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAOUT_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAOUT_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW methods ------------------

ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW::ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAOUT_ADDR_LOW(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAOUT_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAOUT_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE::ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAOUT_LINE_STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAOUT_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAOUT_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0 methods ------------------

ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0::ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CONTRACT_STRIDE_0(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CONTRACT_STRIDE_0.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CONTRACT_STRIDE_0.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1 methods ------------------

ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1::ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CONTRACT_STRIDE_1(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CONTRACT_STRIDE_1.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CONTRACT_STRIDE_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE methods ------------------

ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE::ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAOUT_SURF_STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAOUT_SURF_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAOUT_SURF_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE methods ------------------

ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE::ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAOUT_PLANAR_STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAOUT_PLANAR_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAOUT_PLANAR_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DECONV_STRIDE methods ------------------

ordt_rg_NVDLA_RBK_D_DECONV_STRIDE::ordt_rg_NVDLA_RBK_D_DECONV_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DECONV_X_STRIDE(0, 5, 0x0, r_std, w_std),
    DECONV_Y_STRIDE(16, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DECONV_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DECONV_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DECONV_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DECONV_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DECONV_X_STRIDE.write(wdata);
  DECONV_Y_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DECONV_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DECONV_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DECONV_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DECONV_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DECONV_X_STRIDE.read(rdata);
  DECONV_Y_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_PERF_ENABLE methods ------------------

ordt_rg_NVDLA_RBK_D_PERF_ENABLE::ordt_rg_NVDLA_RBK_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_PERF_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_PERF_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_PERF_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_PERF_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_EN.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_PERF_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_PERF_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_PERF_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_PERF_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_PERF_READ_STALL methods ------------------

ordt_rg_NVDLA_RBK_D_PERF_READ_STALL::ordt_rg_NVDLA_RBK_D_PERF_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RD_STALL_CNT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_RBK_D_PERF_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_PERF_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_PERF_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_PERF_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RD_STALL_CNT.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_PERF_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_PERF_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_PERF_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_PERF_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RD_STALL_CNT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL methods ------------------

ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL::ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WR_STALL_CNT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WR_STALL_CNT.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WR_STALL_CNT.read(rdata);
}

// ------------------ ordt_rset_NVDLA_RBK methods ------------------

ordt_rset_NVDLA_RBK::ordt_rset_NVDLA_RBK(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    D_OP_ENABLE(_m_startaddress + 0x8, _m_startaddress + 0xb),
    D_MISC_CFG(_m_startaddress + 0xc, _m_startaddress + 0xf),
    D_DAIN_RAM_TYPE(_m_startaddress + 0x10, _m_startaddress + 0x13),
    D_DATAIN_SIZE_0(_m_startaddress + 0x14, _m_startaddress + 0x17),
    D_DATAIN_SIZE_1(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    D_DAIN_ADDR_HIGH(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    D_DAIN_ADDR_LOW(_m_startaddress + 0x20, _m_startaddress + 0x23),
    D_DAIN_LINE_STRIDE(_m_startaddress + 0x24, _m_startaddress + 0x27),
    D_DAIN_SURF_STRIDE(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    D_DAIN_PLANAR_STRIDE(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    D_DAOUT_RAM_TYPE(_m_startaddress + 0x30, _m_startaddress + 0x33),
    D_DATAOUT_SIZE_1(_m_startaddress + 0x34, _m_startaddress + 0x37),
    D_DAOUT_ADDR_HIGH(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    D_DAOUT_ADDR_LOW(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    D_DAOUT_LINE_STRIDE(_m_startaddress + 0x40, _m_startaddress + 0x43),
    D_CONTRACT_STRIDE_0(_m_startaddress + 0x44, _m_startaddress + 0x47),
    D_CONTRACT_STRIDE_1(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    D_DAOUT_SURF_STRIDE(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    D_DAOUT_PLANAR_STRIDE(_m_startaddress + 0x50, _m_startaddress + 0x53),
    D_DECONV_STRIDE(_m_startaddress + 0x54, _m_startaddress + 0x57),
    D_PERF_ENABLE(_m_startaddress + 0x58, _m_startaddress + 0x5b),
    D_PERF_READ_STALL(_m_startaddress + 0x5c, _m_startaddress + 0x5f),
    D_PERF_WRITE_STALL(_m_startaddress + 0x60, _m_startaddress + 0x63) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
  m_children.push_back(&D_DAIN_RAM_TYPE);
  m_children.push_back(&D_DATAIN_SIZE_0);
  m_children.push_back(&D_DATAIN_SIZE_1);
  m_children.push_back(&D_DAIN_ADDR_HIGH);
  m_children.push_back(&D_DAIN_ADDR_LOW);
  m_children.push_back(&D_DAIN_LINE_STRIDE);
  m_children.push_back(&D_DAIN_SURF_STRIDE);
  m_children.push_back(&D_DAIN_PLANAR_STRIDE);
  m_children.push_back(&D_DAOUT_RAM_TYPE);
  m_children.push_back(&D_DATAOUT_SIZE_1);
  m_children.push_back(&D_DAOUT_ADDR_HIGH);
  m_children.push_back(&D_DAOUT_ADDR_LOW);
  m_children.push_back(&D_DAOUT_LINE_STRIDE);
  m_children.push_back(&D_CONTRACT_STRIDE_0);
  m_children.push_back(&D_CONTRACT_STRIDE_1);
  m_children.push_back(&D_DAOUT_SURF_STRIDE);
  m_children.push_back(&D_DAOUT_PLANAR_STRIDE);
  m_children.push_back(&D_DECONV_STRIDE);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_READ_STALL);
  m_children.push_back(&D_PERF_WRITE_STALL);
}

void  ordt_rset_NVDLA_RBK::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
  m_children.push_back(&D_DAIN_RAM_TYPE);
  m_children.push_back(&D_DATAIN_SIZE_0);
  m_children.push_back(&D_DATAIN_SIZE_1);
  m_children.push_back(&D_DAIN_ADDR_HIGH);
  m_children.push_back(&D_DAIN_ADDR_LOW);
  m_children.push_back(&D_DAIN_LINE_STRIDE);
  m_children.push_back(&D_DAIN_SURF_STRIDE);
  m_children.push_back(&D_DAIN_PLANAR_STRIDE);
  m_children.push_back(&D_DAOUT_RAM_TYPE);
  m_children.push_back(&D_DATAOUT_SIZE_1);
  m_children.push_back(&D_DAOUT_ADDR_HIGH);
  m_children.push_back(&D_DAOUT_ADDR_LOW);
  m_children.push_back(&D_DAOUT_LINE_STRIDE);
  m_children.push_back(&D_CONTRACT_STRIDE_0);
  m_children.push_back(&D_CONTRACT_STRIDE_1);
  m_children.push_back(&D_DAOUT_SURF_STRIDE);
  m_children.push_back(&D_DAOUT_PLANAR_STRIDE);
  m_children.push_back(&D_DECONV_STRIDE);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_READ_STALL);
  m_children.push_back(&D_PERF_WRITE_STALL);
}

// ------------------ ordt_root methods ------------------

ordt_root::ordt_root()
  : ordt_root(0x0, 0x11063) {
}

ordt_root::ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    NVDLA_RBK(_m_startaddress + 0x11000, _m_startaddress + 0x1107f) {
  m_children.push_back(&NVDLA_RBK);
}

void  ordt_root::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&NVDLA_RBK);
}

