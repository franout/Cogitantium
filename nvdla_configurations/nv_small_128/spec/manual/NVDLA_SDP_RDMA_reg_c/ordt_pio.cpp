//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_SDP_RDMA.rdl
//   Parms: opendla.parms
//   Date: Tue Feb 04 11:11:23 CET 2020
//

#include "ordt_pio_common.hpp"
#include "ordt_pio.hpp"

// ------------------ ordt_addr_elem methods ------------------

ordt_addr_elem::ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : m_startaddress(_m_startaddress),
    m_endaddress(_m_endaddress) {
}

bool  ordt_addr_elem::containsAddress(const uint64_t &addr) {
  return ((addr >= m_startaddress) && (addr <= m_endaddress));
}

bool  ordt_addr_elem::isBelowAddress(const uint64_t &addr) {
  return (addr > m_endaddress);
}

bool  ordt_addr_elem::isAboveAddress(const uint64_t &addr) {
  return (addr < m_startaddress);
}

bool  ordt_addr_elem::hasStartAddress(const uint64_t &addr) {
  return (addr == m_startaddress);
}

void  ordt_addr_elem::update_child_ptrs() {
}

// ------------------ ordt_regset methods ------------------

ordt_addr_elem*  ordt_regset::findAddrElem(const uint64_t &addr) {
  int lo = 0;
  int hi = m_children.size()-1;
  int mid = 0;
  while (lo <= hi) {
     mid = (lo + hi) / 2;
     if (m_children[mid]->containsAddress(addr)) {
        //outElem = m_children[mid];
        return m_children[mid];
     }
     else if (m_children[mid]->isAboveAddress(addr))
        hi = mid - 1;
     else
        lo = mid + 1;
  }
  return nullptr;
}

ordt_regset::ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

int  ordt_regset::write(const uint64_t &addr, const ordt_data &wdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->write(addr, wdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in regset\n";
  #endif
     return 8;
}

int  ordt_regset::read(const uint64_t &addr, ordt_data &rdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->read(addr, rdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in regset\n";
  #endif
     rdata.clear();
     return 8;
}

// ------------------ ordt_reg methods ------------------

ordt_reg::ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

ordt_reg::ordt_reg(const ordt_reg &_old)
  : ordt_addr_elem(_old),
    m_mutex() {
}

void  ordt_reg::write(const ordt_data &wdata) {
}

int  ordt_reg::write(const uint64_t &addr, const ordt_data &wdata) {
     return 0;
}

void  ordt_reg::read(ordt_data &rdata) {
}

int  ordt_reg::read(const uint64_t &addr, ordt_data &rdata) {
     return 0;
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_S_STATUS methods ------------------

ordt_rg_NVDLA_SDP_RDMA_S_STATUS::ordt_rg_NVDLA_SDP_RDMA_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_S_POINTER methods ------------------

ordt_rg_NVDLA_SDP_RDMA_S_POINTER::ordt_rg_NVDLA_SDP_RDMA_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE::ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH::ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WIDTH(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT::ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    HEIGHT(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL::ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW::ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH::ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG::ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BRDMA_DISABLE(0, 1, 0x1, r_std, w_std),
    BRDMA_DATA_USE(1, 2, 0x0, r_std, w_std),
    BRDMA_DATA_SIZE(3, 1, 0x0, r_std, w_std),
    BRDMA_DATA_MODE(4, 1, 0x0, r_std, w_std),
    BRDMA_RAM_TYPE(5, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BRDMA_DISABLE.write(wdata);
  BRDMA_DATA_USE.write(wdata);
  BRDMA_DATA_SIZE.write(wdata);
  BRDMA_DATA_MODE.write(wdata);
  BRDMA_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BRDMA_DISABLE.read(rdata);
  BRDMA_DATA_USE.read(rdata);
  BRDMA_DATA_SIZE.read(rdata);
  BRDMA_DATA_MODE.read(rdata);
  BRDMA_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW::ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH::ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_BATCH_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_BATCH_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_BATCH_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG::ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NRDMA_DISABLE(0, 1, 0x1, r_std, w_std),
    NRDMA_DATA_USE(1, 2, 0x0, r_std, w_std),
    NRDMA_DATA_SIZE(3, 1, 0x0, r_std, w_std),
    NRDMA_DATA_MODE(4, 1, 0x0, r_std, w_std),
    NRDMA_RAM_TYPE(5, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NRDMA_DISABLE.write(wdata);
  NRDMA_DATA_USE.write(wdata);
  NRDMA_DATA_SIZE.write(wdata);
  NRDMA_DATA_MODE.write(wdata);
  NRDMA_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NRDMA_DISABLE.read(rdata);
  NRDMA_DATA_USE.read(rdata);
  NRDMA_DATA_SIZE.read(rdata);
  NRDMA_DATA_MODE.read(rdata);
  NRDMA_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW::ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH::ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_BATCH_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_BATCH_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_BATCH_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG::ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERDMA_DISABLE(0, 1, 0x1, r_std, w_std),
    ERDMA_DATA_USE(1, 2, 0x0, r_std, w_std),
    ERDMA_DATA_SIZE(3, 1, 0x0, r_std, w_std),
    ERDMA_DATA_MODE(4, 1, 0x0, r_std, w_std),
    ERDMA_RAM_TYPE(5, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERDMA_DISABLE.write(wdata);
  ERDMA_DATA_USE.write(wdata);
  ERDMA_DATA_SIZE.write(wdata);
  ERDMA_DATA_MODE.write(wdata);
  ERDMA_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERDMA_DISABLE.read(rdata);
  ERDMA_DATA_USE.read(rdata);
  ERDMA_DATA_SIZE.read(rdata);
  ERDMA_DATA_MODE.read(rdata);
  ERDMA_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW::ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH::ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_BATCH_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_BATCH_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_BATCH_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG::ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    FLYING_MODE(0, 1, 0x0, r_std, w_std),
    WINOGRAD(1, 1, 0x0, r_std, w_std),
    IN_PRECISION(2, 2, 0x1, r_std, w_std),
    PROC_PRECISION(4, 2, 0x1, r_std, w_std),
    OUT_PRECISION(6, 2, 0x0, r_std, w_std),
    BATCH_NUMBER(8, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  FLYING_MODE.write(wdata);
  WINOGRAD.write(wdata);
  IN_PRECISION.write(wdata);
  PROC_PRECISION.write(wdata);
  OUT_PRECISION.write(wdata);
  BATCH_NUMBER.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  FLYING_MODE.read(rdata);
  WINOGRAD.read(rdata);
  IN_PRECISION.read(rdata);
  PROC_PRECISION.read(rdata);
  OUT_PRECISION.read(rdata);
  BATCH_NUMBER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG::ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM::ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_NAN_INPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_NAN_INPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_NAN_INPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM::ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_INF_INPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_INF_INPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_INF_INPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE::ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_DMA_EN(0, 1, 0x0, r_std, w_std),
    PERF_NAN_INF_COUNT_EN(1, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_DMA_EN.write(wdata);
  PERF_NAN_INF_COUNT_EN.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_DMA_EN.read(rdata);
  PERF_NAN_INF_COUNT_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL::ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    MRDMA_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  MRDMA_STALL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  MRDMA_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL::ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BRDMA_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BRDMA_STALL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BRDMA_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL::ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NRDMA_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NRDMA_STALL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NRDMA_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL::ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERDMA_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERDMA_STALL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERDMA_STALL.read(rdata);
}

// ------------------ ordt_rset_NVDLA_SDP_RDMA methods ------------------

ordt_rset_NVDLA_SDP_RDMA::ordt_rset_NVDLA_SDP_RDMA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    D_OP_ENABLE(_m_startaddress + 0x8, _m_startaddress + 0xb),
    D_DATA_CUBE_WIDTH(_m_startaddress + 0xc, _m_startaddress + 0xf),
    D_DATA_CUBE_HEIGHT(_m_startaddress + 0x10, _m_startaddress + 0x13),
    D_DATA_CUBE_CHANNEL(_m_startaddress + 0x14, _m_startaddress + 0x17),
    D_SRC_BASE_ADDR_LOW(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    D_SRC_BASE_ADDR_HIGH(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    D_SRC_LINE_STRIDE(_m_startaddress + 0x20, _m_startaddress + 0x23),
    D_SRC_SURFACE_STRIDE(_m_startaddress + 0x24, _m_startaddress + 0x27),
    D_BRDMA_CFG(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    D_BS_BASE_ADDR_LOW(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    D_BS_BASE_ADDR_HIGH(_m_startaddress + 0x30, _m_startaddress + 0x33),
    D_BS_LINE_STRIDE(_m_startaddress + 0x34, _m_startaddress + 0x37),
    D_BS_SURFACE_STRIDE(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    D_BS_BATCH_STRIDE(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    D_NRDMA_CFG(_m_startaddress + 0x40, _m_startaddress + 0x43),
    D_BN_BASE_ADDR_LOW(_m_startaddress + 0x44, _m_startaddress + 0x47),
    D_BN_BASE_ADDR_HIGH(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    D_BN_LINE_STRIDE(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    D_BN_SURFACE_STRIDE(_m_startaddress + 0x50, _m_startaddress + 0x53),
    D_BN_BATCH_STRIDE(_m_startaddress + 0x54, _m_startaddress + 0x57),
    D_ERDMA_CFG(_m_startaddress + 0x58, _m_startaddress + 0x5b),
    D_EW_BASE_ADDR_LOW(_m_startaddress + 0x5c, _m_startaddress + 0x5f),
    D_EW_BASE_ADDR_HIGH(_m_startaddress + 0x60, _m_startaddress + 0x63),
    D_EW_LINE_STRIDE(_m_startaddress + 0x64, _m_startaddress + 0x67),
    D_EW_SURFACE_STRIDE(_m_startaddress + 0x68, _m_startaddress + 0x6b),
    D_EW_BATCH_STRIDE(_m_startaddress + 0x6c, _m_startaddress + 0x6f),
    D_FEATURE_MODE_CFG(_m_startaddress + 0x70, _m_startaddress + 0x73),
    D_SRC_DMA_CFG(_m_startaddress + 0x74, _m_startaddress + 0x77),
    D_STATUS_NAN_INPUT_NUM(_m_startaddress + 0x78, _m_startaddress + 0x7b),
    D_STATUS_INF_INPUT_NUM(_m_startaddress + 0x7c, _m_startaddress + 0x7f),
    D_PERF_ENABLE(_m_startaddress + 0x80, _m_startaddress + 0x83),
    D_PERF_MRDMA_READ_STALL(_m_startaddress + 0x84, _m_startaddress + 0x87),
    D_PERF_BRDMA_READ_STALL(_m_startaddress + 0x88, _m_startaddress + 0x8b),
    D_PERF_NRDMA_READ_STALL(_m_startaddress + 0x8c, _m_startaddress + 0x8f),
    D_PERF_ERDMA_READ_STALL(_m_startaddress + 0x90, _m_startaddress + 0x93) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_WIDTH);
  m_children.push_back(&D_DATA_CUBE_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_CHANNEL);
  m_children.push_back(&D_SRC_BASE_ADDR_LOW);
  m_children.push_back(&D_SRC_BASE_ADDR_HIGH);
  m_children.push_back(&D_SRC_LINE_STRIDE);
  m_children.push_back(&D_SRC_SURFACE_STRIDE);
  m_children.push_back(&D_BRDMA_CFG);
  m_children.push_back(&D_BS_BASE_ADDR_LOW);
  m_children.push_back(&D_BS_BASE_ADDR_HIGH);
  m_children.push_back(&D_BS_LINE_STRIDE);
  m_children.push_back(&D_BS_SURFACE_STRIDE);
  m_children.push_back(&D_BS_BATCH_STRIDE);
  m_children.push_back(&D_NRDMA_CFG);
  m_children.push_back(&D_BN_BASE_ADDR_LOW);
  m_children.push_back(&D_BN_BASE_ADDR_HIGH);
  m_children.push_back(&D_BN_LINE_STRIDE);
  m_children.push_back(&D_BN_SURFACE_STRIDE);
  m_children.push_back(&D_BN_BATCH_STRIDE);
  m_children.push_back(&D_ERDMA_CFG);
  m_children.push_back(&D_EW_BASE_ADDR_LOW);
  m_children.push_back(&D_EW_BASE_ADDR_HIGH);
  m_children.push_back(&D_EW_LINE_STRIDE);
  m_children.push_back(&D_EW_SURFACE_STRIDE);
  m_children.push_back(&D_EW_BATCH_STRIDE);
  m_children.push_back(&D_FEATURE_MODE_CFG);
  m_children.push_back(&D_SRC_DMA_CFG);
  m_children.push_back(&D_STATUS_NAN_INPUT_NUM);
  m_children.push_back(&D_STATUS_INF_INPUT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_MRDMA_READ_STALL);
  m_children.push_back(&D_PERF_BRDMA_READ_STALL);
  m_children.push_back(&D_PERF_NRDMA_READ_STALL);
  m_children.push_back(&D_PERF_ERDMA_READ_STALL);
}

void  ordt_rset_NVDLA_SDP_RDMA::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_WIDTH);
  m_children.push_back(&D_DATA_CUBE_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_CHANNEL);
  m_children.push_back(&D_SRC_BASE_ADDR_LOW);
  m_children.push_back(&D_SRC_BASE_ADDR_HIGH);
  m_children.push_back(&D_SRC_LINE_STRIDE);
  m_children.push_back(&D_SRC_SURFACE_STRIDE);
  m_children.push_back(&D_BRDMA_CFG);
  m_children.push_back(&D_BS_BASE_ADDR_LOW);
  m_children.push_back(&D_BS_BASE_ADDR_HIGH);
  m_children.push_back(&D_BS_LINE_STRIDE);
  m_children.push_back(&D_BS_SURFACE_STRIDE);
  m_children.push_back(&D_BS_BATCH_STRIDE);
  m_children.push_back(&D_NRDMA_CFG);
  m_children.push_back(&D_BN_BASE_ADDR_LOW);
  m_children.push_back(&D_BN_BASE_ADDR_HIGH);
  m_children.push_back(&D_BN_LINE_STRIDE);
  m_children.push_back(&D_BN_SURFACE_STRIDE);
  m_children.push_back(&D_BN_BATCH_STRIDE);
  m_children.push_back(&D_ERDMA_CFG);
  m_children.push_back(&D_EW_BASE_ADDR_LOW);
  m_children.push_back(&D_EW_BASE_ADDR_HIGH);
  m_children.push_back(&D_EW_LINE_STRIDE);
  m_children.push_back(&D_EW_SURFACE_STRIDE);
  m_children.push_back(&D_EW_BATCH_STRIDE);
  m_children.push_back(&D_FEATURE_MODE_CFG);
  m_children.push_back(&D_SRC_DMA_CFG);
  m_children.push_back(&D_STATUS_NAN_INPUT_NUM);
  m_children.push_back(&D_STATUS_INF_INPUT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_MRDMA_READ_STALL);
  m_children.push_back(&D_PERF_BRDMA_READ_STALL);
  m_children.push_back(&D_PERF_NRDMA_READ_STALL);
  m_children.push_back(&D_PERF_ERDMA_READ_STALL);
}

// ------------------ ordt_root methods ------------------

ordt_root::ordt_root()
  : ordt_root(0x0, 0x8093) {
}

ordt_root::ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    NVDLA_SDP_RDMA(_m_startaddress + 0x8000, _m_startaddress + 0x80ff) {
  m_children.push_back(&NVDLA_SDP_RDMA);
}

void  ordt_root::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&NVDLA_SDP_RDMA);
}

