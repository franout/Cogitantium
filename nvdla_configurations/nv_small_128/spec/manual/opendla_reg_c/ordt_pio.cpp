//   Ordt 171103.01 autogenerated file 
//   Input: /mnt/d/uni/2019-2020/thesis/cogitantium/nvdla/hw/outdir/nv_small/spec/manual/opendla.rdl
//   Parms: opendla.parms
//   Date: Tue Feb 04 11:11:37 CET 2020
//

#include "ordt_pio_common.hpp"
#include "ordt_pio.hpp"

// ------------------ ordt_addr_elem methods ------------------

ordt_addr_elem::ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : m_startaddress(_m_startaddress),
    m_endaddress(_m_endaddress) {
}

bool  ordt_addr_elem::containsAddress(const uint64_t &addr) {
  return ((addr >= m_startaddress) && (addr <= m_endaddress));
}

bool  ordt_addr_elem::isBelowAddress(const uint64_t &addr) {
  return (addr > m_endaddress);
}

bool  ordt_addr_elem::isAboveAddress(const uint64_t &addr) {
  return (addr < m_startaddress);
}

bool  ordt_addr_elem::hasStartAddress(const uint64_t &addr) {
  return (addr == m_startaddress);
}

void  ordt_addr_elem::update_child_ptrs() {
}

// ------------------ ordt_regset methods ------------------

ordt_addr_elem*  ordt_regset::findAddrElem(const uint64_t &addr) {
  int lo = 0;
  int hi = m_children.size()-1;
  int mid = 0;
  while (lo <= hi) {
     mid = (lo + hi) / 2;
     if (m_children[mid]->containsAddress(addr)) {
        //outElem = m_children[mid];
        return m_children[mid];
     }
     else if (m_children[mid]->isAboveAddress(addr))
        hi = mid - 1;
     else
        lo = mid + 1;
  }
  return nullptr;
}

ordt_regset::ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

int  ordt_regset::write(const uint64_t &addr, const ordt_data &wdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->write(addr, wdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in regset\n";
  #endif
     return 8;
}

int  ordt_regset::read(const uint64_t &addr, ordt_data &rdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->read(addr, rdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in regset\n";
  #endif
     rdata.clear();
     return 8;
}

// ------------------ ordt_reg methods ------------------

ordt_reg::ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

ordt_reg::ordt_reg(const ordt_reg &_old)
  : ordt_addr_elem(_old),
    m_mutex() {
}

void  ordt_reg::write(const ordt_data &wdata) {
}

int  ordt_reg::write(const uint64_t &addr, const ordt_data &wdata) {
     return 0;
}

void  ordt_reg::read(ordt_data &rdata) {
}

int  ordt_reg::read(const uint64_t &addr, ordt_data &rdata) {
     return 0;
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION::ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    HW_VERSION(0, 32, 0x10001, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  HW_VERSION.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  HW_VERSION.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC::ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    GLB_DESC(0, 32, 0x1, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  GLB_DESC.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  GLB_DESC.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC::ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CIF_DESC(0, 32, 0x180002, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CIF_DESC.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CIF_DESC.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CIF_CAP_INCOMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CIF_CAP_INCOMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CIF_CAP_INCOMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CIF_CAP_COMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CIF_CAP_COMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CIF_CAP_COMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH::ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CIF_BASE_WIDTH(0, 8, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CIF_BASE_WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CIF_BASE_WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY::ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CIF_BASE_LATENCY(0, 32, 0x32, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CIF_BASE_LATENCY.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CIF_BASE_LATENCY.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX::ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BASE_BURST_LENGTH_MAX(5, 27, 0x4, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BASE_BURST_LENGTH_MAX.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BASE_BURST_LENGTH_MAX.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH::ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CIF_BASE_MEM_ADDR_WIDTH(5, 27, 0x20, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CIF_BASE_MEM_ADDR_WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CIF_BASE_MEM_ADDR_WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC::ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDMA_DESC(0, 32, 0x340003, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDMA_DESC.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDMA_DESC.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDMA_CAP_INCOMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDMA_CAP_INCOMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDMA_CAP_INCOMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDMA_CAP_COMPAT(0, 32, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDMA_CAP_COMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDMA_CAP_COMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES::ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDMA_BASE_FEATURE_TYPES(0, 12, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDMA_BASE_FEATURE_TYPES.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDMA_BASE_FEATURE_TYPES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES::ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDMA_BASE_WEIGHT_TYPES(0, 12, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDMA_BASE_WEIGHT_TYPES.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDMA_BASE_WEIGHT_TYPES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C::ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDMA_BASE_ATOMIC_C(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDMA_BASE_ATOMIC_C.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDMA_BASE_ATOMIC_C.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K::ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDMA_BASE_ATOMIC_K(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDMA_BASE_ATOMIC_K.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDMA_BASE_ATOMIC_K.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M::ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDMA_BASE_ATOMIC_M(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDMA_BASE_ATOMIC_M.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDMA_BASE_ATOMIC_M.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM::ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDMA_BASE_CBUF_BANK_NUM(0, 32, 0x20, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDMA_BASE_CBUF_BANK_NUM.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDMA_BASE_CBUF_BANK_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH::ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDMA_BASE_CBUF_BANK_WIDTH(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDMA_BASE_CBUF_BANK_WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDMA_BASE_CBUF_BANK_WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH::ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDMA_BASE_CBUF_BANK_DEPTH(0, 32, 0x200, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDMA_BASE_CBUF_BANK_DEPTH.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDMA_BASE_CBUF_BANK_DEPTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX::ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDMA_MULTI_BATCH_MAX(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDMA_MULTI_BATCH_MAX.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDMA_MULTI_BATCH_MAX.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED::ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDMA_IMAGE_IN_FORMATS_PACKED(0, 32, 0xcfff001, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDMA_IMAGE_IN_FORMATS_PACKED.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDMA_IMAGE_IN_FORMATS_PACKED.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI::ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDMA_IMAGE_IN_FORMATS_SEMI(0, 32, 0x3, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDMA_IMAGE_IN_FORMATS_SEMI.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDMA_IMAGE_IN_FORMATS_SEMI.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC::ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CBUF_DESC(0, 32, 0x180004, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CBUF_DESC.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CBUF_DESC.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CBUF_CAP_INCOMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CBUF_CAP_INCOMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CBUF_CAP_INCOMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CBUF_CAP_COMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CBUF_CAP_COMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CBUF_CAP_COMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM::ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CBUF_BASE_CBUF_BANK_NUM(0, 32, 0x20, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CBUF_BASE_CBUF_BANK_NUM.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CBUF_BASE_CBUF_BANK_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH::ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CBUF_BASE_CBUF_BANK_WIDTH(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CBUF_BASE_CBUF_BANK_WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CBUF_BASE_CBUF_BANK_WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH::ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CBUF_BASE_CBUF_BANK_DEPTH(0, 32, 0x200, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CBUF_BASE_CBUF_BANK_DEPTH.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CBUF_BASE_CBUF_BANK_DEPTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID::ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CBUF_BASE_CDMA_ID(0, 32, 0x3, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CBUF_BASE_CDMA_ID.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CBUF_BASE_CDMA_ID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC::ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CSC_DESC(0, 32, 0x300005, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CSC_DESC.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CSC_DESC.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CSC_CAP_INCOMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CSC_CAP_INCOMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CSC_CAP_INCOMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CSC_CAP_COMPAT(0, 32, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CSC_CAP_COMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CSC_CAP_COMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES::ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CSC_BASE_FEATURE_TYPES(0, 12, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CSC_BASE_FEATURE_TYPES.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CSC_BASE_FEATURE_TYPES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES::ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CSC_BASE_WEIGHT_TYPES(0, 12, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CSC_BASE_WEIGHT_TYPES.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CSC_BASE_WEIGHT_TYPES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C::ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CSC_BASE_ATOMIC_C(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CSC_BASE_ATOMIC_C.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CSC_BASE_ATOMIC_C.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K::ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CSC_BASE_ATOMIC_K(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CSC_BASE_ATOMIC_K.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CSC_BASE_ATOMIC_K.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M::ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CSC_BASE_ATOMIC_M(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CSC_BASE_ATOMIC_M.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CSC_BASE_ATOMIC_M.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM::ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CSC_BASE_CBUF_BANK_NUM(0, 32, 0x20, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CSC_BASE_CBUF_BANK_NUM.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CSC_BASE_CBUF_BANK_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH::ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CSC_BASE_CBUF_BANK_WIDTH(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CSC_BASE_CBUF_BANK_WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CSC_BASE_CBUF_BANK_WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH::ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CSC_BASE_CBUF_BANK_DEPTH(0, 32, 0x200, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CSC_BASE_CBUF_BANK_DEPTH.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CSC_BASE_CBUF_BANK_DEPTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID::ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CSC_BASE_CDMA_ID(0, 32, 0x3, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CSC_BASE_CDMA_ID.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CSC_BASE_CDMA_ID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX::ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CSC_MULTI_BATCH_MAX(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CSC_MULTI_BATCH_MAX.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CSC_MULTI_BATCH_MAX.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_A_DESC(0, 32, 0x1c0006, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_A_DESC.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_A_DESC.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_A_CAP_INCOMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_A_CAP_INCOMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_A_CAP_INCOMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_A_CAP_COMPAT(0, 32, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_A_CAP_COMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_A_CAP_COMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_A_BASE_FEATURE_TYPES(0, 12, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_A_BASE_FEATURE_TYPES.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_A_BASE_FEATURE_TYPES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_A_BASE_WEIGHT_TYPES(0, 12, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_A_BASE_WEIGHT_TYPES.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_A_BASE_WEIGHT_TYPES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_A_BASE_ATOMIC_C(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_A_BASE_ATOMIC_C.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_A_BASE_ATOMIC_C.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_A_BASE_ATOMIC_K(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_A_BASE_ATOMIC_K.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_A_BASE_ATOMIC_K.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_A_BASE_CDMA_ID(0, 32, 0x3, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_A_BASE_CDMA_ID.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_A_BASE_CDMA_ID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_B_DESC(0, 32, 0x1c0006, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_B_DESC.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_B_DESC.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_B_CAP_INCOMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_B_CAP_INCOMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_B_CAP_INCOMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_B_CAP_COMPAT(0, 32, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_B_CAP_COMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_B_CAP_COMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_B_BASE_FEATURE_TYPES(0, 12, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_B_BASE_FEATURE_TYPES.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_B_BASE_FEATURE_TYPES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_B_BASE_WEIGHT_TYPES(0, 12, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_B_BASE_WEIGHT_TYPES.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_B_BASE_WEIGHT_TYPES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_B_BASE_ATOMIC_C(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_B_BASE_ATOMIC_C.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_B_BASE_ATOMIC_C.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_B_BASE_ATOMIC_K(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_B_BASE_ATOMIC_K.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_B_BASE_ATOMIC_K.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID::ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CMAC_B_BASE_CDMA_ID(0, 32, 0x3, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CMAC_B_BASE_CDMA_ID.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CMAC_B_BASE_CDMA_ID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC::ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CACC_DESC(0, 32, 0x200007, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CACC_DESC.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CACC_DESC.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CACC_CAP_INCOMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CACC_CAP_INCOMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CACC_CAP_INCOMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CACC_CAP_COMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CACC_CAP_COMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CACC_CAP_COMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES::ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CACC_BASE_FEATURE_TYPES(0, 12, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CACC_BASE_FEATURE_TYPES.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CACC_BASE_FEATURE_TYPES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES::ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CACC_BASE_WEIGHT_TYPES(0, 12, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CACC_BASE_WEIGHT_TYPES.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CACC_BASE_WEIGHT_TYPES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C::ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CACC_BASE_ATOMIC_C(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CACC_BASE_ATOMIC_C.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CACC_BASE_ATOMIC_C.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K::ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CACC_BASE_ATOMIC_K(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CACC_BASE_ATOMIC_K.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CACC_BASE_ATOMIC_K.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID::ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CACC_BASE_CDMA_ID(0, 32, 0x3, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CACC_BASE_CDMA_ID.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CACC_BASE_CDMA_ID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX::ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CACC_MULTI_BATCH_MAX(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CACC_MULTI_BATCH_MAX.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CACC_MULTI_BATCH_MAX.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC::ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_RDMA_DESC(0, 32, 0xe0008, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_RDMA_DESC.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_RDMA_DESC.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_RDMA_CAP_INCOMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_RDMA_CAP_INCOMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_RDMA_CAP_INCOMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_RDMA_CAP_COMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_RDMA_CAP_COMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_RDMA_CAP_COMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M::ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_RDMA_BASE_ATOMIC_M(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_RDMA_BASE_ATOMIC_M.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_RDMA_BASE_ATOMIC_M.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID::ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_RDMA_BASE_SDP_ID(0, 32, 0x9, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_RDMA_BASE_SDP_ID.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_RDMA_BASE_SDP_ID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC::ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_DESC(0, 32, 0x200009, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_DESC.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_DESC.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_CAP_INCOMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_CAP_INCOMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_CAP_INCOMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_CAP_COMPAT(0, 32, 0x18, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_CAP_COMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_CAP_COMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES::ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_BASE_FEATURE_TYPES(0, 12, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_BASE_FEATURE_TYPES.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_BASE_FEATURE_TYPES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES::ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_BASE_WEIGHT_TYPES(0, 12, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_BASE_WEIGHT_TYPES.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_BASE_WEIGHT_TYPES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID::ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_BASE_CDMA_ID(0, 32, 0x3, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_BASE_CDMA_ID.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_BASE_CDMA_ID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX::ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_MULTI_BATCH_MAX(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_MULTI_BATCH_MAX.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_MULTI_BATCH_MAX.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT::ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_BS_THROUGHPUT(0, 32, 0x1, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_BS_THROUGHPUT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_BS_THROUGHPUT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT::ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_BN_THROUGHPUT(0, 32, 0x1, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_BN_THROUGHPUT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_BN_THROUGHPUT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT::ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_EW_THROUGHPUT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_EW_THROUGHPUT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_EW_THROUGHPUT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC::ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PDP_RDMA_DESC(0, 32, 0xe000a, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PDP_RDMA_DESC.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PDP_RDMA_DESC.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PDP_RDMA_CAP_INCOMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PDP_RDMA_CAP_INCOMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PDP_RDMA_CAP_INCOMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PDP_RDMA_CAP_COMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PDP_RDMA_CAP_COMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PDP_RDMA_CAP_COMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M::ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PDP_RDMA_BASE_ATOMIC_M(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PDP_RDMA_BASE_ATOMIC_M.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PDP_RDMA_BASE_ATOMIC_M.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID::ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PDP_RDMA_BASE_PDP_ID(0, 32, 0xb, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PDP_RDMA_BASE_PDP_ID.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PDP_RDMA_BASE_PDP_ID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC::ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PDP_DESC(0, 32, 0x10000b, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PDP_DESC.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PDP_DESC.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PDP_CAP_INCOMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PDP_CAP_INCOMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PDP_CAP_INCOMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PDP_CAP_COMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PDP_CAP_COMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PDP_CAP_COMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES::ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PDP_BASE_FEATURE_TYPES(0, 12, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PDP_BASE_FEATURE_TYPES.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PDP_BASE_FEATURE_TYPES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT::ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PDP_BASE_THROUGHPUT(0, 32, 0x1, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PDP_BASE_THROUGHPUT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PDP_BASE_THROUGHPUT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC::ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDP_RDMA_DESC(0, 32, 0xe000c, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDP_RDMA_DESC.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDP_RDMA_DESC.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDP_RDMA_CAP_INCOMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDP_RDMA_CAP_INCOMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDP_RDMA_CAP_INCOMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDP_RDMA_CAP_COMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDP_RDMA_CAP_COMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDP_RDMA_CAP_COMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M::ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDP_RDMA_BASE_ATOMIC_M(0, 32, 0x8, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDP_RDMA_BASE_ATOMIC_M.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDP_RDMA_BASE_ATOMIC_M.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID::ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDP_RDMA_BASE_CDP_ID(0, 32, 0xd, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDP_RDMA_BASE_CDP_ID.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDP_RDMA_BASE_CDP_ID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC::ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDP_DESC(0, 32, 0x10000d, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDP_DESC.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDP_DESC.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDP_CAP_INCOMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDP_CAP_INCOMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDP_CAP_INCOMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT::ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDP_CAP_COMPAT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDP_CAP_COMPAT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDP_CAP_COMPAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES::ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDP_BASE_FEATURE_TYPES(0, 12, 0x10, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDP_BASE_FEATURE_TYPES.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDP_BASE_FEATURE_TYPES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT::ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CDP_BASE_THROUGHPUT(0, 32, 0x1, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CDP_BASE_THROUGHPUT.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CDP_BASE_THROUGHPUT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST methods ------------------

ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST::ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    END_OF_LIST(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  END_OF_LIST.write(wdata);
}

int  ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  END_OF_LIST.read(rdata);
}

// ------------------ ordt_rset_NVDLA_CFGROM methods ------------------

ordt_rset_NVDLA_CFGROM::ordt_rset_NVDLA_CFGROM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    CFGROM_HW_VERSION(_m_startaddress + 0x0, _m_startaddress + 0x3),
    CFGROM_GLB_DESC(_m_startaddress + 0x4, _m_startaddress + 0x7),
    CFGROM_CIF_DESC(_m_startaddress + 0x8, _m_startaddress + 0xb),
    CFGROM_CIF_CAP_INCOMPAT(_m_startaddress + 0xc, _m_startaddress + 0xf),
    CFGROM_CIF_CAP_COMPAT(_m_startaddress + 0x10, _m_startaddress + 0x13),
    CFGROM_CIF_BASE_WIDTH(_m_startaddress + 0x14, _m_startaddress + 0x17),
    CFGROM_CIF_BASE_LATENCY(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    CFGROM_CIF_BASE_BURST_LENGTH_MAX(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    CFGROM_CIF_BASE_MEM_ADDR_WIDTH(_m_startaddress + 0x20, _m_startaddress + 0x23),
    CFGROM_CDMA_DESC(_m_startaddress + 0x24, _m_startaddress + 0x27),
    CFGROM_CDMA_CAP_INCOMPAT(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    CFGROM_CDMA_CAP_COMPAT(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    CFGROM_CDMA_BASE_FEATURE_TYPES(_m_startaddress + 0x30, _m_startaddress + 0x33),
    CFGROM_CDMA_BASE_WEIGHT_TYPES(_m_startaddress + 0x34, _m_startaddress + 0x37),
    CFGROM_CDMA_BASE_ATOMIC_C(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    CFGROM_CDMA_BASE_ATOMIC_K(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    CFGROM_CDMA_BASE_ATOMIC_M(_m_startaddress + 0x40, _m_startaddress + 0x43),
    CFGROM_CDMA_BASE_CBUF_BANK_NUM(_m_startaddress + 0x44, _m_startaddress + 0x47),
    CFGROM_CDMA_BASE_CBUF_BANK_WIDTH(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    CFGROM_CDMA_BASE_CBUF_BANK_DEPTH(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    CFGROM_CDMA_MULTI_BATCH_MAX(_m_startaddress + 0x50, _m_startaddress + 0x53),
    CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED(_m_startaddress + 0x54, _m_startaddress + 0x57),
    CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI(_m_startaddress + 0x58, _m_startaddress + 0x5b),
    CFGROM_CBUF_DESC(_m_startaddress + 0x5c, _m_startaddress + 0x5f),
    CFGROM_CBUF_CAP_INCOMPAT(_m_startaddress + 0x60, _m_startaddress + 0x63),
    CFGROM_CBUF_CAP_COMPAT(_m_startaddress + 0x64, _m_startaddress + 0x67),
    CFGROM_CBUF_BASE_CBUF_BANK_NUM(_m_startaddress + 0x68, _m_startaddress + 0x6b),
    CFGROM_CBUF_BASE_CBUF_BANK_WIDTH(_m_startaddress + 0x6c, _m_startaddress + 0x6f),
    CFGROM_CBUF_BASE_CBUF_BANK_DEPTH(_m_startaddress + 0x70, _m_startaddress + 0x73),
    CFGROM_CBUF_BASE_CDMA_ID(_m_startaddress + 0x74, _m_startaddress + 0x77),
    CFGROM_CSC_DESC(_m_startaddress + 0x78, _m_startaddress + 0x7b),
    CFGROM_CSC_CAP_INCOMPAT(_m_startaddress + 0x7c, _m_startaddress + 0x7f),
    CFGROM_CSC_CAP_COMPAT(_m_startaddress + 0x80, _m_startaddress + 0x83),
    CFGROM_CSC_BASE_FEATURE_TYPES(_m_startaddress + 0x84, _m_startaddress + 0x87),
    CFGROM_CSC_BASE_WEIGHT_TYPES(_m_startaddress + 0x88, _m_startaddress + 0x8b),
    CFGROM_CSC_BASE_ATOMIC_C(_m_startaddress + 0x8c, _m_startaddress + 0x8f),
    CFGROM_CSC_BASE_ATOMIC_K(_m_startaddress + 0x90, _m_startaddress + 0x93),
    CFGROM_CSC_BASE_ATOMIC_M(_m_startaddress + 0x94, _m_startaddress + 0x97),
    CFGROM_CSC_BASE_CBUF_BANK_NUM(_m_startaddress + 0x98, _m_startaddress + 0x9b),
    CFGROM_CSC_BASE_CBUF_BANK_WIDTH(_m_startaddress + 0x9c, _m_startaddress + 0x9f),
    CFGROM_CSC_BASE_CBUF_BANK_DEPTH(_m_startaddress + 0xa0, _m_startaddress + 0xa3),
    CFGROM_CSC_BASE_CDMA_ID(_m_startaddress + 0xa4, _m_startaddress + 0xa7),
    CFGROM_CSC_MULTI_BATCH_MAX(_m_startaddress + 0xa8, _m_startaddress + 0xab),
    CFGROM_CMAC_A_DESC(_m_startaddress + 0xac, _m_startaddress + 0xaf),
    CFGROM_CMAC_A_CAP_INCOMPAT(_m_startaddress + 0xb0, _m_startaddress + 0xb3),
    CFGROM_CMAC_A_CAP_COMPAT(_m_startaddress + 0xb4, _m_startaddress + 0xb7),
    CFGROM_CMAC_A_BASE_FEATURE_TYPES(_m_startaddress + 0xb8, _m_startaddress + 0xbb),
    CFGROM_CMAC_A_BASE_WEIGHT_TYPES(_m_startaddress + 0xbc, _m_startaddress + 0xbf),
    CFGROM_CMAC_A_BASE_ATOMIC_C(_m_startaddress + 0xc0, _m_startaddress + 0xc3),
    CFGROM_CMAC_A_BASE_ATOMIC_K(_m_startaddress + 0xc4, _m_startaddress + 0xc7),
    CFGROM_CMAC_A_BASE_CDMA_ID(_m_startaddress + 0xc8, _m_startaddress + 0xcb),
    CFGROM_CMAC_B_DESC(_m_startaddress + 0xcc, _m_startaddress + 0xcf),
    CFGROM_CMAC_B_CAP_INCOMPAT(_m_startaddress + 0xd0, _m_startaddress + 0xd3),
    CFGROM_CMAC_B_CAP_COMPAT(_m_startaddress + 0xd4, _m_startaddress + 0xd7),
    CFGROM_CMAC_B_BASE_FEATURE_TYPES(_m_startaddress + 0xd8, _m_startaddress + 0xdb),
    CFGROM_CMAC_B_BASE_WEIGHT_TYPES(_m_startaddress + 0xdc, _m_startaddress + 0xdf),
    CFGROM_CMAC_B_BASE_ATOMIC_C(_m_startaddress + 0xe0, _m_startaddress + 0xe3),
    CFGROM_CMAC_B_BASE_ATOMIC_K(_m_startaddress + 0xe4, _m_startaddress + 0xe7),
    CFGROM_CMAC_B_BASE_CDMA_ID(_m_startaddress + 0xe8, _m_startaddress + 0xeb),
    CFGROM_CACC_DESC(_m_startaddress + 0xec, _m_startaddress + 0xef),
    CFGROM_CACC_CAP_INCOMPAT(_m_startaddress + 0xf0, _m_startaddress + 0xf3),
    CFGROM_CACC_CAP_COMPAT(_m_startaddress + 0xf4, _m_startaddress + 0xf7),
    CFGROM_CACC_BASE_FEATURE_TYPES(_m_startaddress + 0xf8, _m_startaddress + 0xfb),
    CFGROM_CACC_BASE_WEIGHT_TYPES(_m_startaddress + 0xfc, _m_startaddress + 0xff),
    CFGROM_CACC_BASE_ATOMIC_C(_m_startaddress + 0x100, _m_startaddress + 0x103),
    CFGROM_CACC_BASE_ATOMIC_K(_m_startaddress + 0x104, _m_startaddress + 0x107),
    CFGROM_CACC_BASE_CDMA_ID(_m_startaddress + 0x108, _m_startaddress + 0x10b),
    CFGROM_CACC_MULTI_BATCH_MAX(_m_startaddress + 0x10c, _m_startaddress + 0x10f),
    CFGROM_SDP_RDMA_DESC(_m_startaddress + 0x110, _m_startaddress + 0x113),
    CFGROM_SDP_RDMA_CAP_INCOMPAT(_m_startaddress + 0x114, _m_startaddress + 0x117),
    CFGROM_SDP_RDMA_CAP_COMPAT(_m_startaddress + 0x118, _m_startaddress + 0x11b),
    CFGROM_SDP_RDMA_BASE_ATOMIC_M(_m_startaddress + 0x11c, _m_startaddress + 0x11f),
    CFGROM_SDP_RDMA_BASE_SDP_ID(_m_startaddress + 0x120, _m_startaddress + 0x123),
    CFGROM_SDP_DESC(_m_startaddress + 0x124, _m_startaddress + 0x127),
    CFGROM_SDP_CAP_INCOMPAT(_m_startaddress + 0x128, _m_startaddress + 0x12b),
    CFGROM_SDP_CAP_COMPAT(_m_startaddress + 0x12c, _m_startaddress + 0x12f),
    CFGROM_SDP_BASE_FEATURE_TYPES(_m_startaddress + 0x130, _m_startaddress + 0x133),
    CFGROM_SDP_BASE_WEIGHT_TYPES(_m_startaddress + 0x134, _m_startaddress + 0x137),
    CFGROM_SDP_BASE_CDMA_ID(_m_startaddress + 0x138, _m_startaddress + 0x13b),
    CFGROM_SDP_MULTI_BATCH_MAX(_m_startaddress + 0x13c, _m_startaddress + 0x13f),
    CFGROM_SDP_BS_THROUGHPUT(_m_startaddress + 0x140, _m_startaddress + 0x143),
    CFGROM_SDP_BN_THROUGHPUT(_m_startaddress + 0x144, _m_startaddress + 0x147),
    CFGROM_SDP_EW_THROUGHPUT(_m_startaddress + 0x148, _m_startaddress + 0x14b),
    CFGROM_PDP_RDMA_DESC(_m_startaddress + 0x14c, _m_startaddress + 0x14f),
    CFGROM_PDP_RDMA_CAP_INCOMPAT(_m_startaddress + 0x150, _m_startaddress + 0x153),
    CFGROM_PDP_RDMA_CAP_COMPAT(_m_startaddress + 0x154, _m_startaddress + 0x157),
    CFGROM_PDP_RDMA_BASE_ATOMIC_M(_m_startaddress + 0x158, _m_startaddress + 0x15b),
    CFGROM_PDP_RDMA_BASE_PDP_ID(_m_startaddress + 0x15c, _m_startaddress + 0x15f),
    CFGROM_PDP_DESC(_m_startaddress + 0x160, _m_startaddress + 0x163),
    CFGROM_PDP_CAP_INCOMPAT(_m_startaddress + 0x164, _m_startaddress + 0x167),
    CFGROM_PDP_CAP_COMPAT(_m_startaddress + 0x168, _m_startaddress + 0x16b),
    CFGROM_PDP_BASE_FEATURE_TYPES(_m_startaddress + 0x16c, _m_startaddress + 0x16f),
    CFGROM_PDP_BASE_THROUGHPUT(_m_startaddress + 0x170, _m_startaddress + 0x173),
    CFGROM_CDP_RDMA_DESC(_m_startaddress + 0x174, _m_startaddress + 0x177),
    CFGROM_CDP_RDMA_CAP_INCOMPAT(_m_startaddress + 0x178, _m_startaddress + 0x17b),
    CFGROM_CDP_RDMA_CAP_COMPAT(_m_startaddress + 0x17c, _m_startaddress + 0x17f),
    CFGROM_CDP_RDMA_BASE_ATOMIC_M(_m_startaddress + 0x180, _m_startaddress + 0x183),
    CFGROM_CDP_RDMA_BASE_CDP_ID(_m_startaddress + 0x184, _m_startaddress + 0x187),
    CFGROM_CDP_DESC(_m_startaddress + 0x188, _m_startaddress + 0x18b),
    CFGROM_CDP_CAP_INCOMPAT(_m_startaddress + 0x18c, _m_startaddress + 0x18f),
    CFGROM_CDP_CAP_COMPAT(_m_startaddress + 0x190, _m_startaddress + 0x193),
    CFGROM_CDP_BASE_FEATURE_TYPES(_m_startaddress + 0x194, _m_startaddress + 0x197),
    CFGROM_CDP_BASE_THROUGHPUT(_m_startaddress + 0x198, _m_startaddress + 0x19b),
    CFGROM_END_OF_LIST(_m_startaddress + 0x19c, _m_startaddress + 0x19f) {
  m_children.push_back(&CFGROM_HW_VERSION);
  m_children.push_back(&CFGROM_GLB_DESC);
  m_children.push_back(&CFGROM_CIF_DESC);
  m_children.push_back(&CFGROM_CIF_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CIF_CAP_COMPAT);
  m_children.push_back(&CFGROM_CIF_BASE_WIDTH);
  m_children.push_back(&CFGROM_CIF_BASE_LATENCY);
  m_children.push_back(&CFGROM_CIF_BASE_BURST_LENGTH_MAX);
  m_children.push_back(&CFGROM_CIF_BASE_MEM_ADDR_WIDTH);
  m_children.push_back(&CFGROM_CDMA_DESC);
  m_children.push_back(&CFGROM_CDMA_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CDMA_CAP_COMPAT);
  m_children.push_back(&CFGROM_CDMA_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_CDMA_BASE_WEIGHT_TYPES);
  m_children.push_back(&CFGROM_CDMA_BASE_ATOMIC_C);
  m_children.push_back(&CFGROM_CDMA_BASE_ATOMIC_K);
  m_children.push_back(&CFGROM_CDMA_BASE_ATOMIC_M);
  m_children.push_back(&CFGROM_CDMA_BASE_CBUF_BANK_NUM);
  m_children.push_back(&CFGROM_CDMA_BASE_CBUF_BANK_WIDTH);
  m_children.push_back(&CFGROM_CDMA_BASE_CBUF_BANK_DEPTH);
  m_children.push_back(&CFGROM_CDMA_MULTI_BATCH_MAX);
  m_children.push_back(&CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED);
  m_children.push_back(&CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI);
  m_children.push_back(&CFGROM_CBUF_DESC);
  m_children.push_back(&CFGROM_CBUF_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CBUF_CAP_COMPAT);
  m_children.push_back(&CFGROM_CBUF_BASE_CBUF_BANK_NUM);
  m_children.push_back(&CFGROM_CBUF_BASE_CBUF_BANK_WIDTH);
  m_children.push_back(&CFGROM_CBUF_BASE_CBUF_BANK_DEPTH);
  m_children.push_back(&CFGROM_CBUF_BASE_CDMA_ID);
  m_children.push_back(&CFGROM_CSC_DESC);
  m_children.push_back(&CFGROM_CSC_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CSC_CAP_COMPAT);
  m_children.push_back(&CFGROM_CSC_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_CSC_BASE_WEIGHT_TYPES);
  m_children.push_back(&CFGROM_CSC_BASE_ATOMIC_C);
  m_children.push_back(&CFGROM_CSC_BASE_ATOMIC_K);
  m_children.push_back(&CFGROM_CSC_BASE_ATOMIC_M);
  m_children.push_back(&CFGROM_CSC_BASE_CBUF_BANK_NUM);
  m_children.push_back(&CFGROM_CSC_BASE_CBUF_BANK_WIDTH);
  m_children.push_back(&CFGROM_CSC_BASE_CBUF_BANK_DEPTH);
  m_children.push_back(&CFGROM_CSC_BASE_CDMA_ID);
  m_children.push_back(&CFGROM_CSC_MULTI_BATCH_MAX);
  m_children.push_back(&CFGROM_CMAC_A_DESC);
  m_children.push_back(&CFGROM_CMAC_A_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CMAC_A_CAP_COMPAT);
  m_children.push_back(&CFGROM_CMAC_A_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_CMAC_A_BASE_WEIGHT_TYPES);
  m_children.push_back(&CFGROM_CMAC_A_BASE_ATOMIC_C);
  m_children.push_back(&CFGROM_CMAC_A_BASE_ATOMIC_K);
  m_children.push_back(&CFGROM_CMAC_A_BASE_CDMA_ID);
  m_children.push_back(&CFGROM_CMAC_B_DESC);
  m_children.push_back(&CFGROM_CMAC_B_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CMAC_B_CAP_COMPAT);
  m_children.push_back(&CFGROM_CMAC_B_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_CMAC_B_BASE_WEIGHT_TYPES);
  m_children.push_back(&CFGROM_CMAC_B_BASE_ATOMIC_C);
  m_children.push_back(&CFGROM_CMAC_B_BASE_ATOMIC_K);
  m_children.push_back(&CFGROM_CMAC_B_BASE_CDMA_ID);
  m_children.push_back(&CFGROM_CACC_DESC);
  m_children.push_back(&CFGROM_CACC_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CACC_CAP_COMPAT);
  m_children.push_back(&CFGROM_CACC_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_CACC_BASE_WEIGHT_TYPES);
  m_children.push_back(&CFGROM_CACC_BASE_ATOMIC_C);
  m_children.push_back(&CFGROM_CACC_BASE_ATOMIC_K);
  m_children.push_back(&CFGROM_CACC_BASE_CDMA_ID);
  m_children.push_back(&CFGROM_CACC_MULTI_BATCH_MAX);
  m_children.push_back(&CFGROM_SDP_RDMA_DESC);
  m_children.push_back(&CFGROM_SDP_RDMA_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_SDP_RDMA_CAP_COMPAT);
  m_children.push_back(&CFGROM_SDP_RDMA_BASE_ATOMIC_M);
  m_children.push_back(&CFGROM_SDP_RDMA_BASE_SDP_ID);
  m_children.push_back(&CFGROM_SDP_DESC);
  m_children.push_back(&CFGROM_SDP_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_SDP_CAP_COMPAT);
  m_children.push_back(&CFGROM_SDP_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_SDP_BASE_WEIGHT_TYPES);
  m_children.push_back(&CFGROM_SDP_BASE_CDMA_ID);
  m_children.push_back(&CFGROM_SDP_MULTI_BATCH_MAX);
  m_children.push_back(&CFGROM_SDP_BS_THROUGHPUT);
  m_children.push_back(&CFGROM_SDP_BN_THROUGHPUT);
  m_children.push_back(&CFGROM_SDP_EW_THROUGHPUT);
  m_children.push_back(&CFGROM_PDP_RDMA_DESC);
  m_children.push_back(&CFGROM_PDP_RDMA_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_PDP_RDMA_CAP_COMPAT);
  m_children.push_back(&CFGROM_PDP_RDMA_BASE_ATOMIC_M);
  m_children.push_back(&CFGROM_PDP_RDMA_BASE_PDP_ID);
  m_children.push_back(&CFGROM_PDP_DESC);
  m_children.push_back(&CFGROM_PDP_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_PDP_CAP_COMPAT);
  m_children.push_back(&CFGROM_PDP_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_PDP_BASE_THROUGHPUT);
  m_children.push_back(&CFGROM_CDP_RDMA_DESC);
  m_children.push_back(&CFGROM_CDP_RDMA_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CDP_RDMA_CAP_COMPAT);
  m_children.push_back(&CFGROM_CDP_RDMA_BASE_ATOMIC_M);
  m_children.push_back(&CFGROM_CDP_RDMA_BASE_CDP_ID);
  m_children.push_back(&CFGROM_CDP_DESC);
  m_children.push_back(&CFGROM_CDP_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CDP_CAP_COMPAT);
  m_children.push_back(&CFGROM_CDP_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_CDP_BASE_THROUGHPUT);
  m_children.push_back(&CFGROM_END_OF_LIST);
}

void  ordt_rset_NVDLA_CFGROM::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&CFGROM_HW_VERSION);
  m_children.push_back(&CFGROM_GLB_DESC);
  m_children.push_back(&CFGROM_CIF_DESC);
  m_children.push_back(&CFGROM_CIF_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CIF_CAP_COMPAT);
  m_children.push_back(&CFGROM_CIF_BASE_WIDTH);
  m_children.push_back(&CFGROM_CIF_BASE_LATENCY);
  m_children.push_back(&CFGROM_CIF_BASE_BURST_LENGTH_MAX);
  m_children.push_back(&CFGROM_CIF_BASE_MEM_ADDR_WIDTH);
  m_children.push_back(&CFGROM_CDMA_DESC);
  m_children.push_back(&CFGROM_CDMA_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CDMA_CAP_COMPAT);
  m_children.push_back(&CFGROM_CDMA_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_CDMA_BASE_WEIGHT_TYPES);
  m_children.push_back(&CFGROM_CDMA_BASE_ATOMIC_C);
  m_children.push_back(&CFGROM_CDMA_BASE_ATOMIC_K);
  m_children.push_back(&CFGROM_CDMA_BASE_ATOMIC_M);
  m_children.push_back(&CFGROM_CDMA_BASE_CBUF_BANK_NUM);
  m_children.push_back(&CFGROM_CDMA_BASE_CBUF_BANK_WIDTH);
  m_children.push_back(&CFGROM_CDMA_BASE_CBUF_BANK_DEPTH);
  m_children.push_back(&CFGROM_CDMA_MULTI_BATCH_MAX);
  m_children.push_back(&CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED);
  m_children.push_back(&CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI);
  m_children.push_back(&CFGROM_CBUF_DESC);
  m_children.push_back(&CFGROM_CBUF_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CBUF_CAP_COMPAT);
  m_children.push_back(&CFGROM_CBUF_BASE_CBUF_BANK_NUM);
  m_children.push_back(&CFGROM_CBUF_BASE_CBUF_BANK_WIDTH);
  m_children.push_back(&CFGROM_CBUF_BASE_CBUF_BANK_DEPTH);
  m_children.push_back(&CFGROM_CBUF_BASE_CDMA_ID);
  m_children.push_back(&CFGROM_CSC_DESC);
  m_children.push_back(&CFGROM_CSC_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CSC_CAP_COMPAT);
  m_children.push_back(&CFGROM_CSC_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_CSC_BASE_WEIGHT_TYPES);
  m_children.push_back(&CFGROM_CSC_BASE_ATOMIC_C);
  m_children.push_back(&CFGROM_CSC_BASE_ATOMIC_K);
  m_children.push_back(&CFGROM_CSC_BASE_ATOMIC_M);
  m_children.push_back(&CFGROM_CSC_BASE_CBUF_BANK_NUM);
  m_children.push_back(&CFGROM_CSC_BASE_CBUF_BANK_WIDTH);
  m_children.push_back(&CFGROM_CSC_BASE_CBUF_BANK_DEPTH);
  m_children.push_back(&CFGROM_CSC_BASE_CDMA_ID);
  m_children.push_back(&CFGROM_CSC_MULTI_BATCH_MAX);
  m_children.push_back(&CFGROM_CMAC_A_DESC);
  m_children.push_back(&CFGROM_CMAC_A_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CMAC_A_CAP_COMPAT);
  m_children.push_back(&CFGROM_CMAC_A_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_CMAC_A_BASE_WEIGHT_TYPES);
  m_children.push_back(&CFGROM_CMAC_A_BASE_ATOMIC_C);
  m_children.push_back(&CFGROM_CMAC_A_BASE_ATOMIC_K);
  m_children.push_back(&CFGROM_CMAC_A_BASE_CDMA_ID);
  m_children.push_back(&CFGROM_CMAC_B_DESC);
  m_children.push_back(&CFGROM_CMAC_B_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CMAC_B_CAP_COMPAT);
  m_children.push_back(&CFGROM_CMAC_B_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_CMAC_B_BASE_WEIGHT_TYPES);
  m_children.push_back(&CFGROM_CMAC_B_BASE_ATOMIC_C);
  m_children.push_back(&CFGROM_CMAC_B_BASE_ATOMIC_K);
  m_children.push_back(&CFGROM_CMAC_B_BASE_CDMA_ID);
  m_children.push_back(&CFGROM_CACC_DESC);
  m_children.push_back(&CFGROM_CACC_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CACC_CAP_COMPAT);
  m_children.push_back(&CFGROM_CACC_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_CACC_BASE_WEIGHT_TYPES);
  m_children.push_back(&CFGROM_CACC_BASE_ATOMIC_C);
  m_children.push_back(&CFGROM_CACC_BASE_ATOMIC_K);
  m_children.push_back(&CFGROM_CACC_BASE_CDMA_ID);
  m_children.push_back(&CFGROM_CACC_MULTI_BATCH_MAX);
  m_children.push_back(&CFGROM_SDP_RDMA_DESC);
  m_children.push_back(&CFGROM_SDP_RDMA_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_SDP_RDMA_CAP_COMPAT);
  m_children.push_back(&CFGROM_SDP_RDMA_BASE_ATOMIC_M);
  m_children.push_back(&CFGROM_SDP_RDMA_BASE_SDP_ID);
  m_children.push_back(&CFGROM_SDP_DESC);
  m_children.push_back(&CFGROM_SDP_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_SDP_CAP_COMPAT);
  m_children.push_back(&CFGROM_SDP_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_SDP_BASE_WEIGHT_TYPES);
  m_children.push_back(&CFGROM_SDP_BASE_CDMA_ID);
  m_children.push_back(&CFGROM_SDP_MULTI_BATCH_MAX);
  m_children.push_back(&CFGROM_SDP_BS_THROUGHPUT);
  m_children.push_back(&CFGROM_SDP_BN_THROUGHPUT);
  m_children.push_back(&CFGROM_SDP_EW_THROUGHPUT);
  m_children.push_back(&CFGROM_PDP_RDMA_DESC);
  m_children.push_back(&CFGROM_PDP_RDMA_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_PDP_RDMA_CAP_COMPAT);
  m_children.push_back(&CFGROM_PDP_RDMA_BASE_ATOMIC_M);
  m_children.push_back(&CFGROM_PDP_RDMA_BASE_PDP_ID);
  m_children.push_back(&CFGROM_PDP_DESC);
  m_children.push_back(&CFGROM_PDP_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_PDP_CAP_COMPAT);
  m_children.push_back(&CFGROM_PDP_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_PDP_BASE_THROUGHPUT);
  m_children.push_back(&CFGROM_CDP_RDMA_DESC);
  m_children.push_back(&CFGROM_CDP_RDMA_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CDP_RDMA_CAP_COMPAT);
  m_children.push_back(&CFGROM_CDP_RDMA_BASE_ATOMIC_M);
  m_children.push_back(&CFGROM_CDP_RDMA_BASE_CDP_ID);
  m_children.push_back(&CFGROM_CDP_DESC);
  m_children.push_back(&CFGROM_CDP_CAP_INCOMPAT);
  m_children.push_back(&CFGROM_CDP_CAP_COMPAT);
  m_children.push_back(&CFGROM_CDP_BASE_FEATURE_TYPES);
  m_children.push_back(&CFGROM_CDP_BASE_THROUGHPUT);
  m_children.push_back(&CFGROM_END_OF_LIST);
}

// ------------------ ordt_rg_NVDLA_GLB_S_NVDLA_HW_VERSION methods ------------------

ordt_rg_NVDLA_GLB_S_NVDLA_HW_VERSION::ordt_rg_NVDLA_GLB_S_NVDLA_HW_VERSION(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    MAJOR(0, 8, 0x31, r_std, w_none),
    MINOR(8, 16, 0x3030, r_std, w_none) {
}

int  ordt_rg_NVDLA_GLB_S_NVDLA_HW_VERSION::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GLB_S_NVDLA_HW_VERSION at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GLB_S_NVDLA_HW_VERSION\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GLB_S_NVDLA_HW_VERSION::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  MAJOR.write(wdata);
  MINOR.write(wdata);
}

int  ordt_rg_NVDLA_GLB_S_NVDLA_HW_VERSION::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GLB_S_NVDLA_HW_VERSION at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GLB_S_NVDLA_HW_VERSION\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GLB_S_NVDLA_HW_VERSION::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  MAJOR.read(rdata);
  MINOR.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GLB_S_INTR_MASK methods ------------------

ordt_rg_NVDLA_GLB_S_INTR_MASK::ordt_rg_NVDLA_GLB_S_INTR_MASK(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_DONE_MASK0(0, 1, 0x0, r_std, w_std),
    SDP_DONE_MASK1(1, 1, 0x0, r_std, w_std),
    CDP_DONE_MASK0(2, 1, 0x0, r_std, w_std),
    CDP_DONE_MASK1(3, 1, 0x0, r_std, w_std),
    PDP_DONE_MASK0(4, 1, 0x0, r_std, w_std),
    PDP_DONE_MASK1(5, 1, 0x0, r_std, w_std),
    BDMA_DONE_MASK0(6, 1, 0x0, r_std, w_std),
    BDMA_DONE_MASK1(7, 1, 0x0, r_std, w_std),
    RUBIK_DONE_MASK0(8, 1, 0x0, r_std, w_std),
    RUBIK_DONE_MASK1(9, 1, 0x0, r_std, w_std),
    CDMA_DAT_DONE_MASK0(16, 1, 0x0, r_std, w_std),
    CDMA_DAT_DONE_MASK1(17, 1, 0x0, r_std, w_std),
    CDMA_WT_DONE_MASK0(18, 1, 0x0, r_std, w_std),
    CDMA_WT_DONE_MASK1(19, 1, 0x0, r_std, w_std),
    CACC_DONE_MASK0(20, 1, 0x0, r_std, w_std),
    CACC_DONE_MASK1(21, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GLB_S_INTR_MASK::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GLB_S_INTR_MASK at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GLB_S_INTR_MASK\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GLB_S_INTR_MASK::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_DONE_MASK0.write(wdata);
  SDP_DONE_MASK1.write(wdata);
  CDP_DONE_MASK0.write(wdata);
  CDP_DONE_MASK1.write(wdata);
  PDP_DONE_MASK0.write(wdata);
  PDP_DONE_MASK1.write(wdata);
  BDMA_DONE_MASK0.write(wdata);
  BDMA_DONE_MASK1.write(wdata);
  RUBIK_DONE_MASK0.write(wdata);
  RUBIK_DONE_MASK1.write(wdata);
  CDMA_DAT_DONE_MASK0.write(wdata);
  CDMA_DAT_DONE_MASK1.write(wdata);
  CDMA_WT_DONE_MASK0.write(wdata);
  CDMA_WT_DONE_MASK1.write(wdata);
  CACC_DONE_MASK0.write(wdata);
  CACC_DONE_MASK1.write(wdata);
}

int  ordt_rg_NVDLA_GLB_S_INTR_MASK::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GLB_S_INTR_MASK at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GLB_S_INTR_MASK\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GLB_S_INTR_MASK::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_DONE_MASK0.read(rdata);
  SDP_DONE_MASK1.read(rdata);
  CDP_DONE_MASK0.read(rdata);
  CDP_DONE_MASK1.read(rdata);
  PDP_DONE_MASK0.read(rdata);
  PDP_DONE_MASK1.read(rdata);
  BDMA_DONE_MASK0.read(rdata);
  BDMA_DONE_MASK1.read(rdata);
  RUBIK_DONE_MASK0.read(rdata);
  RUBIK_DONE_MASK1.read(rdata);
  CDMA_DAT_DONE_MASK0.read(rdata);
  CDMA_DAT_DONE_MASK1.read(rdata);
  CDMA_WT_DONE_MASK0.read(rdata);
  CDMA_WT_DONE_MASK1.read(rdata);
  CACC_DONE_MASK0.read(rdata);
  CACC_DONE_MASK1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GLB_S_INTR_SET methods ------------------

ordt_rg_NVDLA_GLB_S_INTR_SET::ordt_rg_NVDLA_GLB_S_INTR_SET(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_DONE_SET0(0, 1, 0x0, r_none, w_std),
    SDP_DONE_SET1(1, 1, 0x0, r_none, w_std),
    CDP_DONE_SET0(2, 1, 0x0, r_none, w_std),
    CDP_DONE_SET1(3, 1, 0x0, r_none, w_std),
    PDP_DONE_SET0(4, 1, 0x0, r_none, w_std),
    PDP_DONE_SET1(5, 1, 0x0, r_none, w_std),
    BDMA_DONE_SET0(6, 1, 0x0, r_none, w_std),
    BDMA_DONE_SET1(7, 1, 0x0, r_none, w_std),
    RUBIK_DONE_SET0(8, 1, 0x0, r_none, w_std),
    RUBIK_DONE_SET1(9, 1, 0x0, r_none, w_std),
    CDMA_DAT_DONE_SET0(16, 1, 0x0, r_none, w_std),
    CDMA_DAT_DONE_SET1(17, 1, 0x0, r_none, w_std),
    CDMA_WT_DONE_SET0(18, 1, 0x0, r_none, w_std),
    CDMA_WT_DONE_SET1(19, 1, 0x0, r_none, w_std),
    CACC_DONE_SET0(20, 1, 0x0, r_none, w_std),
    CACC_DONE_SET1(21, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GLB_S_INTR_SET::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GLB_S_INTR_SET at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GLB_S_INTR_SET\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GLB_S_INTR_SET::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_DONE_SET0.write(wdata);
  SDP_DONE_SET1.write(wdata);
  CDP_DONE_SET0.write(wdata);
  CDP_DONE_SET1.write(wdata);
  PDP_DONE_SET0.write(wdata);
  PDP_DONE_SET1.write(wdata);
  BDMA_DONE_SET0.write(wdata);
  BDMA_DONE_SET1.write(wdata);
  RUBIK_DONE_SET0.write(wdata);
  RUBIK_DONE_SET1.write(wdata);
  CDMA_DAT_DONE_SET0.write(wdata);
  CDMA_DAT_DONE_SET1.write(wdata);
  CDMA_WT_DONE_SET0.write(wdata);
  CDMA_WT_DONE_SET1.write(wdata);
  CACC_DONE_SET0.write(wdata);
  CACC_DONE_SET1.write(wdata);
}

int  ordt_rg_NVDLA_GLB_S_INTR_SET::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GLB_S_INTR_SET at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GLB_S_INTR_SET\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GLB_S_INTR_SET::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_DONE_SET0.read(rdata);
  SDP_DONE_SET1.read(rdata);
  CDP_DONE_SET0.read(rdata);
  CDP_DONE_SET1.read(rdata);
  PDP_DONE_SET0.read(rdata);
  PDP_DONE_SET1.read(rdata);
  BDMA_DONE_SET0.read(rdata);
  BDMA_DONE_SET1.read(rdata);
  RUBIK_DONE_SET0.read(rdata);
  RUBIK_DONE_SET1.read(rdata);
  CDMA_DAT_DONE_SET0.read(rdata);
  CDMA_DAT_DONE_SET1.read(rdata);
  CDMA_WT_DONE_SET0.read(rdata);
  CDMA_WT_DONE_SET1.read(rdata);
  CACC_DONE_SET0.read(rdata);
  CACC_DONE_SET1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GLB_S_INTR_STATUS methods ------------------

ordt_rg_NVDLA_GLB_S_INTR_STATUS::ordt_rg_NVDLA_GLB_S_INTR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SDP_DONE_STATUS0(0, 1, 0x0, r_std, w_std),
    SDP_DONE_STATUS1(1, 1, 0x0, r_std, w_std),
    CDP_DONE_STATUS0(2, 1, 0x0, r_std, w_std),
    CDP_DONE_STATUS1(3, 1, 0x0, r_std, w_std),
    PDP_DONE_STATUS0(4, 1, 0x0, r_std, w_std),
    PDP_DONE_STATUS1(5, 1, 0x0, r_std, w_std),
    BDMA_DONE_STATUS0(6, 1, 0x0, r_std, w_std),
    BDMA_DONE_STATUS1(7, 1, 0x0, r_std, w_std),
    RUBIK_DONE_STATUS0(8, 1, 0x0, r_std, w_std),
    RUBIK_DONE_STATUS1(9, 1, 0x0, r_std, w_std),
    CDMA_DAT_DONE_STATUS0(16, 1, 0x0, r_std, w_std),
    CDMA_DAT_DONE_STATUS1(17, 1, 0x0, r_std, w_std),
    CDMA_WT_DONE_STATUS0(18, 1, 0x0, r_std, w_std),
    CDMA_WT_DONE_STATUS1(19, 1, 0x0, r_std, w_std),
    CACC_DONE_STATUS0(20, 1, 0x0, r_std, w_std),
    CACC_DONE_STATUS1(21, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GLB_S_INTR_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GLB_S_INTR_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GLB_S_INTR_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GLB_S_INTR_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SDP_DONE_STATUS0.write(wdata);
  SDP_DONE_STATUS1.write(wdata);
  CDP_DONE_STATUS0.write(wdata);
  CDP_DONE_STATUS1.write(wdata);
  PDP_DONE_STATUS0.write(wdata);
  PDP_DONE_STATUS1.write(wdata);
  BDMA_DONE_STATUS0.write(wdata);
  BDMA_DONE_STATUS1.write(wdata);
  RUBIK_DONE_STATUS0.write(wdata);
  RUBIK_DONE_STATUS1.write(wdata);
  CDMA_DAT_DONE_STATUS0.write(wdata);
  CDMA_DAT_DONE_STATUS1.write(wdata);
  CDMA_WT_DONE_STATUS0.write(wdata);
  CDMA_WT_DONE_STATUS1.write(wdata);
  CACC_DONE_STATUS0.write(wdata);
  CACC_DONE_STATUS1.write(wdata);
}

int  ordt_rg_NVDLA_GLB_S_INTR_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GLB_S_INTR_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GLB_S_INTR_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GLB_S_INTR_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SDP_DONE_STATUS0.read(rdata);
  SDP_DONE_STATUS1.read(rdata);
  CDP_DONE_STATUS0.read(rdata);
  CDP_DONE_STATUS1.read(rdata);
  PDP_DONE_STATUS0.read(rdata);
  PDP_DONE_STATUS1.read(rdata);
  BDMA_DONE_STATUS0.read(rdata);
  BDMA_DONE_STATUS1.read(rdata);
  RUBIK_DONE_STATUS0.read(rdata);
  RUBIK_DONE_STATUS1.read(rdata);
  CDMA_DAT_DONE_STATUS0.read(rdata);
  CDMA_DAT_DONE_STATUS1.read(rdata);
  CDMA_WT_DONE_STATUS0.read(rdata);
  CDMA_WT_DONE_STATUS1.read(rdata);
  CACC_DONE_STATUS0.read(rdata);
  CACC_DONE_STATUS1.read(rdata);
}

// ------------------ ordt_rset_NVDLA_GLB methods ------------------

ordt_rset_NVDLA_GLB::ordt_rset_NVDLA_GLB(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_NVDLA_HW_VERSION(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_INTR_MASK(_m_startaddress + 0x4, _m_startaddress + 0x7),
    S_INTR_SET(_m_startaddress + 0x8, _m_startaddress + 0xb),
    S_INTR_STATUS(_m_startaddress + 0xc, _m_startaddress + 0xf) {
  m_children.push_back(&S_NVDLA_HW_VERSION);
  m_children.push_back(&S_INTR_MASK);
  m_children.push_back(&S_INTR_SET);
  m_children.push_back(&S_INTR_STATUS);
}

void  ordt_rset_NVDLA_GLB::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_NVDLA_HW_VERSION);
  m_children.push_back(&S_INTR_MASK);
  m_children.push_back(&S_INTR_SET);
  m_children.push_back(&S_INTR_STATUS);
}

// ------------------ ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_0 methods ------------------

ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_0::ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RD_WEIGHT_BDMA(0, 8, 0x1, r_std, w_std),
    RD_WEIGHT_SDP(8, 8, 0x1, r_std, w_std),
    RD_WEIGHT_PDP(16, 8, 0x1, r_std, w_std),
    RD_WEIGHT_CDP(24, 8, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RD_WEIGHT_BDMA.write(wdata);
  RD_WEIGHT_SDP.write(wdata);
  RD_WEIGHT_PDP.write(wdata);
  RD_WEIGHT_CDP.write(wdata);
}

int  ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RD_WEIGHT_BDMA.read(rdata);
  RD_WEIGHT_SDP.read(rdata);
  RD_WEIGHT_PDP.read(rdata);
  RD_WEIGHT_CDP.read(rdata);
}

// ------------------ ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_1 methods ------------------

ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_1::ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RD_WEIGHT_SDP_B(0, 8, 0x1, r_std, w_std),
    RD_WEIGHT_SDP_N(8, 8, 0x1, r_std, w_std),
    RD_WEIGHT_SDP_E(16, 8, 0x1, r_std, w_std),
    RD_WEIGHT_CDMA_DAT(24, 8, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RD_WEIGHT_SDP_B.write(wdata);
  RD_WEIGHT_SDP_N.write(wdata);
  RD_WEIGHT_SDP_E.write(wdata);
  RD_WEIGHT_CDMA_DAT.write(wdata);
}

int  ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RD_WEIGHT_SDP_B.read(rdata);
  RD_WEIGHT_SDP_N.read(rdata);
  RD_WEIGHT_SDP_E.read(rdata);
  RD_WEIGHT_CDMA_DAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_2 methods ------------------

ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_2::ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_2(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RD_WEIGHT_CDMA_WT(0, 8, 0x1, r_std, w_std),
    RD_WEIGHT_RBK(8, 8, 0x1, r_std, w_std),
    RD_WEIGHT_RSV_1(16, 8, 0x1, r_std, w_std),
    RD_WEIGHT_RSV_0(24, 8, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_2::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_2 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_2\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_2::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RD_WEIGHT_CDMA_WT.write(wdata);
  RD_WEIGHT_RBK.write(wdata);
  RD_WEIGHT_RSV_1.write(wdata);
  RD_WEIGHT_RSV_0.write(wdata);
}

int  ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_2::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_2 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_2\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_2::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RD_WEIGHT_CDMA_WT.read(rdata);
  RD_WEIGHT_RBK.read(rdata);
  RD_WEIGHT_RSV_1.read(rdata);
  RD_WEIGHT_RSV_0.read(rdata);
}

// ------------------ ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_0 methods ------------------

ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_0::ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WR_WEIGHT_BDMA(0, 8, 0x1, r_std, w_std),
    WR_WEIGHT_SDP(8, 8, 0x1, r_std, w_std),
    WR_WEIGHT_PDP(16, 8, 0x1, r_std, w_std),
    WR_WEIGHT_CDP(24, 8, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WR_WEIGHT_BDMA.write(wdata);
  WR_WEIGHT_SDP.write(wdata);
  WR_WEIGHT_PDP.write(wdata);
  WR_WEIGHT_CDP.write(wdata);
}

int  ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WR_WEIGHT_BDMA.read(rdata);
  WR_WEIGHT_SDP.read(rdata);
  WR_WEIGHT_PDP.read(rdata);
  WR_WEIGHT_CDP.read(rdata);
}

// ------------------ ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_1 methods ------------------

ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_1::ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WR_WEIGHT_RBK(0, 8, 0x1, r_std, w_std),
    WR_WEIGHT_RSV_2(8, 8, 0x1, r_std, w_std),
    WR_WEIGHT_RSV_1(16, 8, 0x1, r_std, w_std),
    WR_WEIGHT_RSV_0(24, 8, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WR_WEIGHT_RBK.write(wdata);
  WR_WEIGHT_RSV_2.write(wdata);
  WR_WEIGHT_RSV_1.write(wdata);
  WR_WEIGHT_RSV_0.write(wdata);
}

int  ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WR_WEIGHT_RBK.read(rdata);
  WR_WEIGHT_RSV_2.read(rdata);
  WR_WEIGHT_RSV_1.read(rdata);
  WR_WEIGHT_RSV_0.read(rdata);
}

// ------------------ ordt_rg_NVDLA_MCIF_CFG_OUTSTANDING_CNT methods ------------------

ordt_rg_NVDLA_MCIF_CFG_OUTSTANDING_CNT::ordt_rg_NVDLA_MCIF_CFG_OUTSTANDING_CNT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RD_OS_CNT(0, 8, 0xff, r_std, w_std),
    WR_OS_CNT(8, 8, 0xff, r_std, w_std) {
}

int  ordt_rg_NVDLA_MCIF_CFG_OUTSTANDING_CNT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_MCIF_CFG_OUTSTANDING_CNT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_MCIF_CFG_OUTSTANDING_CNT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_MCIF_CFG_OUTSTANDING_CNT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RD_OS_CNT.write(wdata);
  WR_OS_CNT.write(wdata);
}

int  ordt_rg_NVDLA_MCIF_CFG_OUTSTANDING_CNT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_MCIF_CFG_OUTSTANDING_CNT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_MCIF_CFG_OUTSTANDING_CNT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_MCIF_CFG_OUTSTANDING_CNT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RD_OS_CNT.read(rdata);
  WR_OS_CNT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_MCIF_STATUS methods ------------------

ordt_rg_NVDLA_MCIF_STATUS::ordt_rg_NVDLA_MCIF_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    IDLE(8, 1, 0x1, r_std, w_none) {
}

int  ordt_rg_NVDLA_MCIF_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_MCIF_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_MCIF_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_MCIF_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  IDLE.write(wdata);
}

int  ordt_rg_NVDLA_MCIF_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_MCIF_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_MCIF_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_MCIF_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  IDLE.read(rdata);
}

// ------------------ ordt_rset_NVDLA_MCIF methods ------------------

ordt_rset_NVDLA_MCIF::ordt_rset_NVDLA_MCIF(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    CFG_RD_WEIGHT_0(_m_startaddress + 0x0, _m_startaddress + 0x3),
    CFG_RD_WEIGHT_1(_m_startaddress + 0x4, _m_startaddress + 0x7),
    CFG_RD_WEIGHT_2(_m_startaddress + 0x8, _m_startaddress + 0xb),
    CFG_WR_WEIGHT_0(_m_startaddress + 0xc, _m_startaddress + 0xf),
    CFG_WR_WEIGHT_1(_m_startaddress + 0x10, _m_startaddress + 0x13),
    CFG_OUTSTANDING_CNT(_m_startaddress + 0x14, _m_startaddress + 0x17),
    STATUS(_m_startaddress + 0x18, _m_startaddress + 0x1b) {
  m_children.push_back(&CFG_RD_WEIGHT_0);
  m_children.push_back(&CFG_RD_WEIGHT_1);
  m_children.push_back(&CFG_RD_WEIGHT_2);
  m_children.push_back(&CFG_WR_WEIGHT_0);
  m_children.push_back(&CFG_WR_WEIGHT_1);
  m_children.push_back(&CFG_OUTSTANDING_CNT);
  m_children.push_back(&STATUS);
}

void  ordt_rset_NVDLA_MCIF::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&CFG_RD_WEIGHT_0);
  m_children.push_back(&CFG_RD_WEIGHT_1);
  m_children.push_back(&CFG_RD_WEIGHT_2);
  m_children.push_back(&CFG_WR_WEIGHT_0);
  m_children.push_back(&CFG_WR_WEIGHT_1);
  m_children.push_back(&CFG_OUTSTANDING_CNT);
  m_children.push_back(&STATUS);
}

// ------------------ ordt_rg_NVDLA_CDMA_S_STATUS methods ------------------

ordt_rg_NVDLA_CDMA_S_STATUS::ordt_rg_NVDLA_CDMA_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_S_POINTER methods ------------------

ordt_rg_NVDLA_CDMA_S_POINTER::ordt_rg_NVDLA_CDMA_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_S_ARBITER methods ------------------

ordt_rg_NVDLA_CDMA_S_ARBITER::ordt_rg_NVDLA_CDMA_S_ARBITER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ARB_WEIGHT(0, 4, 0xf, r_std, w_std),
    ARB_WMB(16, 4, 0x3, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_S_ARBITER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_S_ARBITER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_ARBITER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_ARBITER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ARB_WEIGHT.write(wdata);
  ARB_WMB.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_S_ARBITER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_S_ARBITER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_ARBITER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_ARBITER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ARB_WEIGHT.read(rdata);
  ARB_WMB.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS methods ------------------

ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS::ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    FLUSH_DONE(0, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  FLUSH_DONE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  FLUSH_DONE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_CDMA_D_OP_ENABLE::ordt_rg_NVDLA_CDMA_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_MISC_CFG methods ------------------

ordt_rg_NVDLA_CDMA_D_MISC_CFG::ordt_rg_NVDLA_CDMA_D_MISC_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CONV_MODE(0, 1, 0x0, r_std, w_std),
    IN_PRECISION(8, 2, 0x1, r_std, w_std),
    PROC_PRECISION(12, 2, 0x1, r_std, w_std),
    DATA_REUSE(16, 1, 0x0, r_std, w_std),
    WEIGHT_REUSE(20, 1, 0x0, r_std, w_std),
    SKIP_DATA_RLS(24, 1, 0x0, r_std, w_std),
    SKIP_WEIGHT_RLS(28, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_MISC_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_MISC_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MISC_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MISC_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CONV_MODE.write(wdata);
  IN_PRECISION.write(wdata);
  PROC_PRECISION.write(wdata);
  DATA_REUSE.write(wdata);
  WEIGHT_REUSE.write(wdata);
  SKIP_DATA_RLS.write(wdata);
  SKIP_WEIGHT_RLS.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_MISC_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_MISC_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MISC_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MISC_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CONV_MODE.read(rdata);
  IN_PRECISION.read(rdata);
  PROC_PRECISION.read(rdata);
  DATA_REUSE.read(rdata);
  WEIGHT_REUSE.read(rdata);
  SKIP_DATA_RLS.read(rdata);
  SKIP_WEIGHT_RLS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT methods ------------------

ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT::ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_FORMAT(0, 1, 0x0, r_std, w_std),
    PIXEL_FORMAT(8, 6, 0xc, r_std, w_std),
    PIXEL_MAPPING(16, 1, 0x0, r_std, w_std),
    PIXEL_SIGN_OVERRIDE(20, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_FORMAT.write(wdata);
  PIXEL_FORMAT.write(wdata);
  PIXEL_MAPPING.write(wdata);
  PIXEL_SIGN_OVERRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_FORMAT.read(rdata);
  PIXEL_FORMAT.read(rdata);
  PIXEL_MAPPING.read(rdata);
  PIXEL_SIGN_OVERRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0 methods ------------------

ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0::ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_WIDTH(0, 13, 0x0, r_std, w_std),
    DATAIN_HEIGHT(16, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_WIDTH.write(wdata);
  DATAIN_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_WIDTH.read(rdata);
  DATAIN_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1 methods ------------------

ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1::ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0 methods ------------------

ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0::ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_WIDTH_EXT(0, 13, 0x0, r_std, w_std),
    DATAIN_HEIGHT_EXT(16, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_WIDTH_EXT.write(wdata);
  DATAIN_HEIGHT_EXT.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_WIDTH_EXT.read(rdata);
  DATAIN_HEIGHT_EXT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET methods ------------------

ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET::ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PIXEL_X_OFFSET(0, 5, 0x0, r_std, w_std),
    PIXEL_Y_OFFSET(16, 3, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PIXEL_X_OFFSET.write(wdata);
  PIXEL_Y_OFFSET.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PIXEL_X_OFFSET.read(rdata);
  PIXEL_Y_OFFSET.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE methods ------------------

ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE::ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0 methods ------------------

ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0::ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_ADDR_HIGH_0(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_ADDR_HIGH_0.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_ADDR_HIGH_0.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0 methods ------------------

ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0::ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_ADDR_LOW_0(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_ADDR_LOW_0.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_ADDR_LOW_0.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1 methods ------------------

ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1::ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_ADDR_HIGH_1(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_ADDR_HIGH_1.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_ADDR_HIGH_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1 methods ------------------

ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1::ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_ADDR_LOW_1(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_ADDR_LOW_1.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_ADDR_LOW_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_CDMA_D_LINE_STRIDE::ordt_rg_NVDLA_CDMA_D_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE methods ------------------

ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE::ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    UV_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  UV_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  UV_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_SURF_STRIDE methods ------------------

ordt_rg_NVDLA_CDMA_D_SURF_STRIDE::ordt_rg_NVDLA_CDMA_D_SURF_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SURF_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_SURF_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_SURF_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_SURF_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_SURF_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SURF_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_SURF_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_SURF_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_SURF_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_SURF_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SURF_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_DAIN_MAP methods ------------------

ordt_rg_NVDLA_CDMA_D_DAIN_MAP::ordt_rg_NVDLA_CDMA_D_DAIN_MAP(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LINE_PACKED(0, 1, 0x0, r_std, w_std),
    SURF_PACKED(16, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_MAP::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_DAIN_MAP at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_MAP\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_MAP::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LINE_PACKED.write(wdata);
  SURF_PACKED.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_DAIN_MAP::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_DAIN_MAP at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_DAIN_MAP\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_DAIN_MAP::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LINE_PACKED.read(rdata);
  SURF_PACKED.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG methods ------------------

ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG::ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RSV_PER_LINE(0, 10, 0x0, r_std, w_std),
    RSV_PER_UV_LINE(16, 10, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RSV_PER_LINE.write(wdata);
  RSV_PER_UV_LINE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RSV_PER_LINE.read(rdata);
  RSV_PER_UV_LINE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG methods ------------------

ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG::ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RSV_HEIGHT(0, 3, 0x0, r_std, w_std),
    RSV_Y_INDEX(16, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RSV_HEIGHT.write(wdata);
  RSV_Y_INDEX.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RSV_HEIGHT.read(rdata);
  RSV_Y_INDEX.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER methods ------------------

ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER::ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BATCHES(0, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BATCHES.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BATCHES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE methods ------------------

ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE::ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BATCH_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BATCH_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BATCH_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE methods ------------------

ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE::ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ENTRIES(0, 14, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ENTRIES.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ENTRIES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN methods ------------------

ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN::ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    GRAINS(0, 12, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  GRAINS.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  GRAINS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT methods ------------------

ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT::ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_FORMAT(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_FORMAT.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_FORMAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0 methods ------------------

ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0::ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BYTE_PER_KERNEL(0, 18, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BYTE_PER_KERNEL.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BYTE_PER_KERNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1 methods ------------------

ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1::ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_KERNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_KERNEL.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_KERNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE methods ------------------

ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE::ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH::ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW methods ------------------

ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW::ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES methods ------------------

ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES::ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_BYTES(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_BYTES.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_BYTES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH::ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WGS_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WGS_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WGS_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW methods ------------------

ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW::ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WGS_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WGS_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WGS_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH::ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WMB_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WMB_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WMB_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW methods ------------------

ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW::ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WMB_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WMB_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WMB_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_WMB_BYTES methods ------------------

ordt_rg_NVDLA_CDMA_D_WMB_BYTES::ordt_rg_NVDLA_CDMA_D_WMB_BYTES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WMB_BYTES(0, 28, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_WMB_BYTES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_WMB_BYTES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WMB_BYTES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WMB_BYTES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WMB_BYTES.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_WMB_BYTES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_WMB_BYTES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_WMB_BYTES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_WMB_BYTES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WMB_BYTES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT methods ------------------

ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT::ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    MEAN_FORMAT(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  MEAN_FORMAT.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  MEAN_FORMAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0 methods ------------------

ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0::ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    MEAN_RY(0, 16, 0x0, r_std, w_std),
    MEAN_GU(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  MEAN_RY.write(wdata);
  MEAN_GU.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  MEAN_RY.read(rdata);
  MEAN_GU.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1 methods ------------------

ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1::ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    MEAN_BV(0, 16, 0x0, r_std, w_std),
    MEAN_AX(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  MEAN_BV.write(wdata);
  MEAN_AX.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  MEAN_BV.read(rdata);
  MEAN_AX.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_CVT_CFG methods ------------------

ordt_rg_NVDLA_CDMA_D_CVT_CFG::ordt_rg_NVDLA_CDMA_D_CVT_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CVT_EN(0, 1, 0x0, r_std, w_std),
    CVT_TRUNCATE(4, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_CVT_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_CVT_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CVT_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CVT_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CVT_EN.write(wdata);
  CVT_TRUNCATE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_CVT_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_CVT_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CVT_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CVT_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CVT_EN.read(rdata);
  CVT_TRUNCATE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_CVT_OFFSET methods ------------------

ordt_rg_NVDLA_CDMA_D_CVT_OFFSET::ordt_rg_NVDLA_CDMA_D_CVT_OFFSET(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CVT_OFFSET(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_CVT_OFFSET::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_CVT_OFFSET at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CVT_OFFSET\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CVT_OFFSET::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CVT_OFFSET.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_CVT_OFFSET::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_CVT_OFFSET at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CVT_OFFSET\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CVT_OFFSET::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CVT_OFFSET.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_CVT_SCALE methods ------------------

ordt_rg_NVDLA_CDMA_D_CVT_SCALE::ordt_rg_NVDLA_CDMA_D_CVT_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CVT_SCALE(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_CVT_SCALE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_CVT_SCALE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CVT_SCALE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CVT_SCALE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CVT_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_CVT_SCALE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_CVT_SCALE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CVT_SCALE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CVT_SCALE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CVT_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_CONV_STRIDE methods ------------------

ordt_rg_NVDLA_CDMA_D_CONV_STRIDE::ordt_rg_NVDLA_CDMA_D_CONV_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CONV_X_STRIDE(0, 3, 0x0, r_std, w_std),
    CONV_Y_STRIDE(16, 3, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_CONV_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_CONV_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CONV_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CONV_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CONV_X_STRIDE.write(wdata);
  CONV_Y_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_CONV_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_CONV_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CONV_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CONV_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CONV_X_STRIDE.read(rdata);
  CONV_Y_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_ZERO_PADDING methods ------------------

ordt_rg_NVDLA_CDMA_D_ZERO_PADDING::ordt_rg_NVDLA_CDMA_D_ZERO_PADDING(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_LEFT(0, 5, 0x0, r_std, w_std),
    PAD_RIGHT(8, 6, 0x0, r_std, w_std),
    PAD_TOP(16, 5, 0x0, r_std, w_std),
    PAD_BOTTOM(24, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_LEFT.write(wdata);
  PAD_RIGHT.write(wdata);
  PAD_TOP.write(wdata);
  PAD_BOTTOM.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_LEFT.read(rdata);
  PAD_RIGHT.read(rdata);
  PAD_TOP.read(rdata);
  PAD_BOTTOM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE methods ------------------

ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE::ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_BANK methods ------------------

ordt_rg_NVDLA_CDMA_D_BANK::ordt_rg_NVDLA_CDMA_D_BANK(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATA_BANK(0, 5, 0x0, r_std, w_std),
    WEIGHT_BANK(16, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_BANK::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_BANK at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_BANK\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_BANK::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATA_BANK.write(wdata);
  WEIGHT_BANK.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_BANK::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_BANK at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_BANK\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_BANK::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATA_BANK.read(rdata);
  WEIGHT_BANK.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO methods ------------------

ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO::ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NAN_TO_ZERO(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NAN_TO_ZERO.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NAN_TO_ZERO.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM methods ------------------

ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM::ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NAN_DATA_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NAN_DATA_NUM.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NAN_DATA_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM methods ------------------

ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM::ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NAN_WEIGHT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NAN_WEIGHT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NAN_WEIGHT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM methods ------------------

ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM::ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    INF_DATA_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  INF_DATA_NUM.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  INF_DATA_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM methods ------------------

ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM::ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    INF_WEIGHT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  INF_WEIGHT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  INF_WEIGHT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_PERF_ENABLE methods ------------------

ordt_rg_NVDLA_CDMA_D_PERF_ENABLE::ordt_rg_NVDLA_CDMA_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DMA_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_PERF_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_PERF_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DMA_EN.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_PERF_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_PERF_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DMA_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL methods ------------------

ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL::ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAT_RD_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAT_RD_STALL.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAT_RD_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL methods ------------------

ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL::ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WT_RD_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WT_RD_STALL.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WT_RD_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY methods ------------------

ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY::ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAT_RD_LATENCY(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAT_RD_LATENCY.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAT_RD_LATENCY.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY methods ------------------

ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY::ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WT_RD_LATENCY(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WT_RD_LATENCY.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WT_RD_LATENCY.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDMA_D_CYA methods ------------------

ordt_rg_NVDLA_CDMA_D_CYA::ordt_rg_NVDLA_CDMA_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CYA(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDMA_D_CYA::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDMA_D_CYA at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CYA\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CYA::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CYA.write(wdata);
}

int  ordt_rg_NVDLA_CDMA_D_CYA::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDMA_D_CYA at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDMA_D_CYA\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDMA_D_CYA::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CYA.read(rdata);
}

// ------------------ ordt_rset_NVDLA_CDMA methods ------------------

ordt_rset_NVDLA_CDMA::ordt_rset_NVDLA_CDMA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    S_ARBITER(_m_startaddress + 0x8, _m_startaddress + 0xb),
    S_CBUF_FLUSH_STATUS(_m_startaddress + 0xc, _m_startaddress + 0xf),
    D_OP_ENABLE(_m_startaddress + 0x10, _m_startaddress + 0x13),
    D_MISC_CFG(_m_startaddress + 0x14, _m_startaddress + 0x17),
    D_DATAIN_FORMAT(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    D_DATAIN_SIZE_0(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    D_DATAIN_SIZE_1(_m_startaddress + 0x20, _m_startaddress + 0x23),
    D_DATAIN_SIZE_EXT_0(_m_startaddress + 0x24, _m_startaddress + 0x27),
    D_PIXEL_OFFSET(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    D_DAIN_RAM_TYPE(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    D_DAIN_ADDR_HIGH_0(_m_startaddress + 0x30, _m_startaddress + 0x33),
    D_DAIN_ADDR_LOW_0(_m_startaddress + 0x34, _m_startaddress + 0x37),
    D_DAIN_ADDR_HIGH_1(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    D_DAIN_ADDR_LOW_1(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    D_LINE_STRIDE(_m_startaddress + 0x40, _m_startaddress + 0x43),
    D_LINE_UV_STRIDE(_m_startaddress + 0x44, _m_startaddress + 0x47),
    D_SURF_STRIDE(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    D_DAIN_MAP(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    D_RESERVED_X_CFG(_m_startaddress + 0x50, _m_startaddress + 0x53),
    D_RESERVED_Y_CFG(_m_startaddress + 0x54, _m_startaddress + 0x57),
    D_BATCH_NUMBER(_m_startaddress + 0x58, _m_startaddress + 0x5b),
    D_BATCH_STRIDE(_m_startaddress + 0x5c, _m_startaddress + 0x5f),
    D_ENTRY_PER_SLICE(_m_startaddress + 0x60, _m_startaddress + 0x63),
    D_FETCH_GRAIN(_m_startaddress + 0x64, _m_startaddress + 0x67),
    D_WEIGHT_FORMAT(_m_startaddress + 0x68, _m_startaddress + 0x6b),
    D_WEIGHT_SIZE_0(_m_startaddress + 0x6c, _m_startaddress + 0x6f),
    D_WEIGHT_SIZE_1(_m_startaddress + 0x70, _m_startaddress + 0x73),
    D_WEIGHT_RAM_TYPE(_m_startaddress + 0x74, _m_startaddress + 0x77),
    D_WEIGHT_ADDR_HIGH(_m_startaddress + 0x78, _m_startaddress + 0x7b),
    D_WEIGHT_ADDR_LOW(_m_startaddress + 0x7c, _m_startaddress + 0x7f),
    D_WEIGHT_BYTES(_m_startaddress + 0x80, _m_startaddress + 0x83),
    D_WGS_ADDR_HIGH(_m_startaddress + 0x84, _m_startaddress + 0x87),
    D_WGS_ADDR_LOW(_m_startaddress + 0x88, _m_startaddress + 0x8b),
    D_WMB_ADDR_HIGH(_m_startaddress + 0x8c, _m_startaddress + 0x8f),
    D_WMB_ADDR_LOW(_m_startaddress + 0x90, _m_startaddress + 0x93),
    D_WMB_BYTES(_m_startaddress + 0x94, _m_startaddress + 0x97),
    D_MEAN_FORMAT(_m_startaddress + 0x98, _m_startaddress + 0x9b),
    D_MEAN_GLOBAL_0(_m_startaddress + 0x9c, _m_startaddress + 0x9f),
    D_MEAN_GLOBAL_1(_m_startaddress + 0xa0, _m_startaddress + 0xa3),
    D_CVT_CFG(_m_startaddress + 0xa4, _m_startaddress + 0xa7),
    D_CVT_OFFSET(_m_startaddress + 0xa8, _m_startaddress + 0xab),
    D_CVT_SCALE(_m_startaddress + 0xac, _m_startaddress + 0xaf),
    D_CONV_STRIDE(_m_startaddress + 0xb0, _m_startaddress + 0xb3),
    D_ZERO_PADDING(_m_startaddress + 0xb4, _m_startaddress + 0xb7),
    D_ZERO_PADDING_VALUE(_m_startaddress + 0xb8, _m_startaddress + 0xbb),
    D_BANK(_m_startaddress + 0xbc, _m_startaddress + 0xbf),
    D_NAN_FLUSH_TO_ZERO(_m_startaddress + 0xc0, _m_startaddress + 0xc3),
    D_NAN_INPUT_DATA_NUM(_m_startaddress + 0xc4, _m_startaddress + 0xc7),
    D_NAN_INPUT_WEIGHT_NUM(_m_startaddress + 0xc8, _m_startaddress + 0xcb),
    D_INF_INPUT_DATA_NUM(_m_startaddress + 0xcc, _m_startaddress + 0xcf),
    D_INF_INPUT_WEIGHT_NUM(_m_startaddress + 0xd0, _m_startaddress + 0xd3),
    D_PERF_ENABLE(_m_startaddress + 0xd4, _m_startaddress + 0xd7),
    D_PERF_DAT_READ_STALL(_m_startaddress + 0xd8, _m_startaddress + 0xdb),
    D_PERF_WT_READ_STALL(_m_startaddress + 0xdc, _m_startaddress + 0xdf),
    D_PERF_DAT_READ_LATENCY(_m_startaddress + 0xe0, _m_startaddress + 0xe3),
    D_PERF_WT_READ_LATENCY(_m_startaddress + 0xe4, _m_startaddress + 0xe7),
    D_CYA(_m_startaddress + 0xe8, _m_startaddress + 0xeb) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&S_ARBITER);
  m_children.push_back(&S_CBUF_FLUSH_STATUS);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
  m_children.push_back(&D_DATAIN_FORMAT);
  m_children.push_back(&D_DATAIN_SIZE_0);
  m_children.push_back(&D_DATAIN_SIZE_1);
  m_children.push_back(&D_DATAIN_SIZE_EXT_0);
  m_children.push_back(&D_PIXEL_OFFSET);
  m_children.push_back(&D_DAIN_RAM_TYPE);
  m_children.push_back(&D_DAIN_ADDR_HIGH_0);
  m_children.push_back(&D_DAIN_ADDR_LOW_0);
  m_children.push_back(&D_DAIN_ADDR_HIGH_1);
  m_children.push_back(&D_DAIN_ADDR_LOW_1);
  m_children.push_back(&D_LINE_STRIDE);
  m_children.push_back(&D_LINE_UV_STRIDE);
  m_children.push_back(&D_SURF_STRIDE);
  m_children.push_back(&D_DAIN_MAP);
  m_children.push_back(&D_RESERVED_X_CFG);
  m_children.push_back(&D_RESERVED_Y_CFG);
  m_children.push_back(&D_BATCH_NUMBER);
  m_children.push_back(&D_BATCH_STRIDE);
  m_children.push_back(&D_ENTRY_PER_SLICE);
  m_children.push_back(&D_FETCH_GRAIN);
  m_children.push_back(&D_WEIGHT_FORMAT);
  m_children.push_back(&D_WEIGHT_SIZE_0);
  m_children.push_back(&D_WEIGHT_SIZE_1);
  m_children.push_back(&D_WEIGHT_RAM_TYPE);
  m_children.push_back(&D_WEIGHT_ADDR_HIGH);
  m_children.push_back(&D_WEIGHT_ADDR_LOW);
  m_children.push_back(&D_WEIGHT_BYTES);
  m_children.push_back(&D_WGS_ADDR_HIGH);
  m_children.push_back(&D_WGS_ADDR_LOW);
  m_children.push_back(&D_WMB_ADDR_HIGH);
  m_children.push_back(&D_WMB_ADDR_LOW);
  m_children.push_back(&D_WMB_BYTES);
  m_children.push_back(&D_MEAN_FORMAT);
  m_children.push_back(&D_MEAN_GLOBAL_0);
  m_children.push_back(&D_MEAN_GLOBAL_1);
  m_children.push_back(&D_CVT_CFG);
  m_children.push_back(&D_CVT_OFFSET);
  m_children.push_back(&D_CVT_SCALE);
  m_children.push_back(&D_CONV_STRIDE);
  m_children.push_back(&D_ZERO_PADDING);
  m_children.push_back(&D_ZERO_PADDING_VALUE);
  m_children.push_back(&D_BANK);
  m_children.push_back(&D_NAN_FLUSH_TO_ZERO);
  m_children.push_back(&D_NAN_INPUT_DATA_NUM);
  m_children.push_back(&D_NAN_INPUT_WEIGHT_NUM);
  m_children.push_back(&D_INF_INPUT_DATA_NUM);
  m_children.push_back(&D_INF_INPUT_WEIGHT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_DAT_READ_STALL);
  m_children.push_back(&D_PERF_WT_READ_STALL);
  m_children.push_back(&D_PERF_DAT_READ_LATENCY);
  m_children.push_back(&D_PERF_WT_READ_LATENCY);
  m_children.push_back(&D_CYA);
}

void  ordt_rset_NVDLA_CDMA::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&S_ARBITER);
  m_children.push_back(&S_CBUF_FLUSH_STATUS);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
  m_children.push_back(&D_DATAIN_FORMAT);
  m_children.push_back(&D_DATAIN_SIZE_0);
  m_children.push_back(&D_DATAIN_SIZE_1);
  m_children.push_back(&D_DATAIN_SIZE_EXT_0);
  m_children.push_back(&D_PIXEL_OFFSET);
  m_children.push_back(&D_DAIN_RAM_TYPE);
  m_children.push_back(&D_DAIN_ADDR_HIGH_0);
  m_children.push_back(&D_DAIN_ADDR_LOW_0);
  m_children.push_back(&D_DAIN_ADDR_HIGH_1);
  m_children.push_back(&D_DAIN_ADDR_LOW_1);
  m_children.push_back(&D_LINE_STRIDE);
  m_children.push_back(&D_LINE_UV_STRIDE);
  m_children.push_back(&D_SURF_STRIDE);
  m_children.push_back(&D_DAIN_MAP);
  m_children.push_back(&D_RESERVED_X_CFG);
  m_children.push_back(&D_RESERVED_Y_CFG);
  m_children.push_back(&D_BATCH_NUMBER);
  m_children.push_back(&D_BATCH_STRIDE);
  m_children.push_back(&D_ENTRY_PER_SLICE);
  m_children.push_back(&D_FETCH_GRAIN);
  m_children.push_back(&D_WEIGHT_FORMAT);
  m_children.push_back(&D_WEIGHT_SIZE_0);
  m_children.push_back(&D_WEIGHT_SIZE_1);
  m_children.push_back(&D_WEIGHT_RAM_TYPE);
  m_children.push_back(&D_WEIGHT_ADDR_HIGH);
  m_children.push_back(&D_WEIGHT_ADDR_LOW);
  m_children.push_back(&D_WEIGHT_BYTES);
  m_children.push_back(&D_WGS_ADDR_HIGH);
  m_children.push_back(&D_WGS_ADDR_LOW);
  m_children.push_back(&D_WMB_ADDR_HIGH);
  m_children.push_back(&D_WMB_ADDR_LOW);
  m_children.push_back(&D_WMB_BYTES);
  m_children.push_back(&D_MEAN_FORMAT);
  m_children.push_back(&D_MEAN_GLOBAL_0);
  m_children.push_back(&D_MEAN_GLOBAL_1);
  m_children.push_back(&D_CVT_CFG);
  m_children.push_back(&D_CVT_OFFSET);
  m_children.push_back(&D_CVT_SCALE);
  m_children.push_back(&D_CONV_STRIDE);
  m_children.push_back(&D_ZERO_PADDING);
  m_children.push_back(&D_ZERO_PADDING_VALUE);
  m_children.push_back(&D_BANK);
  m_children.push_back(&D_NAN_FLUSH_TO_ZERO);
  m_children.push_back(&D_NAN_INPUT_DATA_NUM);
  m_children.push_back(&D_NAN_INPUT_WEIGHT_NUM);
  m_children.push_back(&D_INF_INPUT_DATA_NUM);
  m_children.push_back(&D_INF_INPUT_WEIGHT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_DAT_READ_STALL);
  m_children.push_back(&D_PERF_WT_READ_STALL);
  m_children.push_back(&D_PERF_DAT_READ_LATENCY);
  m_children.push_back(&D_PERF_WT_READ_LATENCY);
  m_children.push_back(&D_CYA);
}

// ------------------ ordt_rg_NVDLA_CSC_S_STATUS methods ------------------

ordt_rg_NVDLA_CSC_S_STATUS::ordt_rg_NVDLA_CSC_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CSC_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_CSC_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_S_POINTER methods ------------------

ordt_rg_NVDLA_CSC_S_POINTER::ordt_rg_NVDLA_CSC_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CSC_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_CSC_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_CSC_D_OP_ENABLE::ordt_rg_NVDLA_CSC_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_MISC_CFG methods ------------------

ordt_rg_NVDLA_CSC_D_MISC_CFG::ordt_rg_NVDLA_CSC_D_MISC_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CONV_MODE(0, 1, 0x0, r_std, w_std),
    IN_PRECISION(8, 2, 0x1, r_std, w_std),
    PROC_PRECISION(12, 2, 0x1, r_std, w_std),
    DATA_REUSE(16, 1, 0x0, r_std, w_std),
    WEIGHT_REUSE(20, 1, 0x0, r_std, w_std),
    SKIP_DATA_RLS(24, 1, 0x0, r_std, w_std),
    SKIP_WEIGHT_RLS(28, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_MISC_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_MISC_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_MISC_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_MISC_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CONV_MODE.write(wdata);
  IN_PRECISION.write(wdata);
  PROC_PRECISION.write(wdata);
  DATA_REUSE.write(wdata);
  WEIGHT_REUSE.write(wdata);
  SKIP_DATA_RLS.write(wdata);
  SKIP_WEIGHT_RLS.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_MISC_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_MISC_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_MISC_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_MISC_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CONV_MODE.read(rdata);
  IN_PRECISION.read(rdata);
  PROC_PRECISION.read(rdata);
  DATA_REUSE.read(rdata);
  WEIGHT_REUSE.read(rdata);
  SKIP_DATA_RLS.read(rdata);
  SKIP_WEIGHT_RLS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT methods ------------------

ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT::ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_FORMAT(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_FORMAT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_FORMAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0 methods ------------------

ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0::ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_WIDTH_EXT(0, 13, 0x0, r_std, w_std),
    DATAIN_HEIGHT_EXT(16, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_WIDTH_EXT.write(wdata);
  DATAIN_HEIGHT_EXT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_WIDTH_EXT.read(rdata);
  DATAIN_HEIGHT_EXT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1 methods ------------------

ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1::ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_CHANNEL_EXT(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_CHANNEL_EXT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_CHANNEL_EXT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_BATCH_NUMBER methods ------------------

ordt_rg_NVDLA_CSC_D_BATCH_NUMBER::ordt_rg_NVDLA_CSC_D_BATCH_NUMBER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BATCHES(0, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_BATCH_NUMBER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_BATCH_NUMBER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_BATCH_NUMBER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_BATCH_NUMBER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BATCHES.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_BATCH_NUMBER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_BATCH_NUMBER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_BATCH_NUMBER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_BATCH_NUMBER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BATCHES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION methods ------------------

ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION::ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    Y_EXTENSION(0, 2, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  Y_EXTENSION.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  Y_EXTENSION.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE methods ------------------

ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE::ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ENTRIES(0, 14, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ENTRIES.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ENTRIES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT methods ------------------

ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT::ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_FORMAT(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_FORMAT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_FORMAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0 methods ------------------

ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0::ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_WIDTH_EXT(0, 5, 0x0, r_std, w_std),
    WEIGHT_HEIGHT_EXT(16, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_WIDTH_EXT.write(wdata);
  WEIGHT_HEIGHT_EXT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_WIDTH_EXT.read(rdata);
  WEIGHT_HEIGHT_EXT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1 methods ------------------

ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1::ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_CHANNEL_EXT(0, 13, 0x0, r_std, w_std),
    WEIGHT_KERNEL(16, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_CHANNEL_EXT.write(wdata);
  WEIGHT_KERNEL.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_CHANNEL_EXT.read(rdata);
  WEIGHT_KERNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES methods ------------------

ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES::ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WEIGHT_BYTES(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WEIGHT_BYTES.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WEIGHT_BYTES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_WMB_BYTES methods ------------------

ordt_rg_NVDLA_CSC_D_WMB_BYTES::ordt_rg_NVDLA_CSC_D_WMB_BYTES(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WMB_BYTES(0, 28, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_WMB_BYTES::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_WMB_BYTES at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WMB_BYTES\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WMB_BYTES::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WMB_BYTES.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_WMB_BYTES::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_WMB_BYTES at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_WMB_BYTES\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_WMB_BYTES::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WMB_BYTES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0 methods ------------------

ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0::ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAOUT_WIDTH(0, 13, 0x0, r_std, w_std),
    DATAOUT_HEIGHT(16, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAOUT_WIDTH.write(wdata);
  DATAOUT_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAOUT_WIDTH.read(rdata);
  DATAOUT_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1 methods ------------------

ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1::ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAOUT_CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAOUT_CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAOUT_CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_ATOMICS methods ------------------

ordt_rg_NVDLA_CSC_D_ATOMICS::ordt_rg_NVDLA_CSC_D_ATOMICS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ATOMICS(0, 21, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_ATOMICS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_ATOMICS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ATOMICS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ATOMICS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ATOMICS.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_ATOMICS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_ATOMICS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ATOMICS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ATOMICS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ATOMICS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_RELEASE methods ------------------

ordt_rg_NVDLA_CSC_D_RELEASE::ordt_rg_NVDLA_CSC_D_RELEASE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RLS_SLICES(0, 12, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_RELEASE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_RELEASE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_RELEASE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_RELEASE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RLS_SLICES.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_RELEASE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_RELEASE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_RELEASE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_RELEASE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RLS_SLICES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT methods ------------------

ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT::ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CONV_X_STRIDE_EXT(0, 3, 0x0, r_std, w_std),
    CONV_Y_STRIDE_EXT(16, 3, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CONV_X_STRIDE_EXT.write(wdata);
  CONV_Y_STRIDE_EXT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CONV_X_STRIDE_EXT.read(rdata);
  CONV_Y_STRIDE_EXT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_DILATION_EXT methods ------------------

ordt_rg_NVDLA_CSC_D_DILATION_EXT::ordt_rg_NVDLA_CSC_D_DILATION_EXT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    X_DILATION_EXT(0, 5, 0x0, r_std, w_std),
    Y_DILATION_EXT(16, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_DILATION_EXT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_DILATION_EXT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DILATION_EXT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DILATION_EXT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  X_DILATION_EXT.write(wdata);
  Y_DILATION_EXT.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_DILATION_EXT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_DILATION_EXT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_DILATION_EXT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_DILATION_EXT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  X_DILATION_EXT.read(rdata);
  Y_DILATION_EXT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_ZERO_PADDING methods ------------------

ordt_rg_NVDLA_CSC_D_ZERO_PADDING::ordt_rg_NVDLA_CSC_D_ZERO_PADDING(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_LEFT(0, 5, 0x0, r_std, w_std),
    PAD_TOP(16, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_ZERO_PADDING::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ZERO_PADDING::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_LEFT.write(wdata);
  PAD_TOP.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_ZERO_PADDING::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ZERO_PADDING::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_LEFT.read(rdata);
  PAD_TOP.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE methods ------------------

ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE::ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_BANK methods ------------------

ordt_rg_NVDLA_CSC_D_BANK::ordt_rg_NVDLA_CSC_D_BANK(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATA_BANK(0, 5, 0x0, r_std, w_std),
    WEIGHT_BANK(16, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_BANK::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_BANK at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_BANK\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_BANK::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATA_BANK.write(wdata);
  WEIGHT_BANK.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_BANK::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_BANK at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_BANK\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_BANK::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATA_BANK.read(rdata);
  WEIGHT_BANK.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_PRA_CFG methods ------------------

ordt_rg_NVDLA_CSC_D_PRA_CFG::ordt_rg_NVDLA_CSC_D_PRA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRA_TRUNCATE(0, 2, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_PRA_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_PRA_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_PRA_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_PRA_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRA_TRUNCATE.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_PRA_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_PRA_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_PRA_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_PRA_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRA_TRUNCATE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CSC_D_CYA methods ------------------

ordt_rg_NVDLA_CSC_D_CYA::ordt_rg_NVDLA_CSC_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CYA(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CSC_D_CYA::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CSC_D_CYA at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_CYA\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_CYA::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CYA.write(wdata);
}

int  ordt_rg_NVDLA_CSC_D_CYA::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CSC_D_CYA at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CSC_D_CYA\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CSC_D_CYA::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CYA.read(rdata);
}

// ------------------ ordt_rset_NVDLA_CSC methods ------------------

ordt_rset_NVDLA_CSC::ordt_rset_NVDLA_CSC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    D_OP_ENABLE(_m_startaddress + 0x8, _m_startaddress + 0xb),
    D_MISC_CFG(_m_startaddress + 0xc, _m_startaddress + 0xf),
    D_DATAIN_FORMAT(_m_startaddress + 0x10, _m_startaddress + 0x13),
    D_DATAIN_SIZE_EXT_0(_m_startaddress + 0x14, _m_startaddress + 0x17),
    D_DATAIN_SIZE_EXT_1(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    D_BATCH_NUMBER(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    D_POST_Y_EXTENSION(_m_startaddress + 0x20, _m_startaddress + 0x23),
    D_ENTRY_PER_SLICE(_m_startaddress + 0x24, _m_startaddress + 0x27),
    D_WEIGHT_FORMAT(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    D_WEIGHT_SIZE_EXT_0(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    D_WEIGHT_SIZE_EXT_1(_m_startaddress + 0x30, _m_startaddress + 0x33),
    D_WEIGHT_BYTES(_m_startaddress + 0x34, _m_startaddress + 0x37),
    D_WMB_BYTES(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    D_DATAOUT_SIZE_0(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    D_DATAOUT_SIZE_1(_m_startaddress + 0x40, _m_startaddress + 0x43),
    D_ATOMICS(_m_startaddress + 0x44, _m_startaddress + 0x47),
    D_RELEASE(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    D_CONV_STRIDE_EXT(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    D_DILATION_EXT(_m_startaddress + 0x50, _m_startaddress + 0x53),
    D_ZERO_PADDING(_m_startaddress + 0x54, _m_startaddress + 0x57),
    D_ZERO_PADDING_VALUE(_m_startaddress + 0x58, _m_startaddress + 0x5b),
    D_BANK(_m_startaddress + 0x5c, _m_startaddress + 0x5f),
    D_PRA_CFG(_m_startaddress + 0x60, _m_startaddress + 0x63),
    D_CYA(_m_startaddress + 0x64, _m_startaddress + 0x67) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
  m_children.push_back(&D_DATAIN_FORMAT);
  m_children.push_back(&D_DATAIN_SIZE_EXT_0);
  m_children.push_back(&D_DATAIN_SIZE_EXT_1);
  m_children.push_back(&D_BATCH_NUMBER);
  m_children.push_back(&D_POST_Y_EXTENSION);
  m_children.push_back(&D_ENTRY_PER_SLICE);
  m_children.push_back(&D_WEIGHT_FORMAT);
  m_children.push_back(&D_WEIGHT_SIZE_EXT_0);
  m_children.push_back(&D_WEIGHT_SIZE_EXT_1);
  m_children.push_back(&D_WEIGHT_BYTES);
  m_children.push_back(&D_WMB_BYTES);
  m_children.push_back(&D_DATAOUT_SIZE_0);
  m_children.push_back(&D_DATAOUT_SIZE_1);
  m_children.push_back(&D_ATOMICS);
  m_children.push_back(&D_RELEASE);
  m_children.push_back(&D_CONV_STRIDE_EXT);
  m_children.push_back(&D_DILATION_EXT);
  m_children.push_back(&D_ZERO_PADDING);
  m_children.push_back(&D_ZERO_PADDING_VALUE);
  m_children.push_back(&D_BANK);
  m_children.push_back(&D_PRA_CFG);
  m_children.push_back(&D_CYA);
}

void  ordt_rset_NVDLA_CSC::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
  m_children.push_back(&D_DATAIN_FORMAT);
  m_children.push_back(&D_DATAIN_SIZE_EXT_0);
  m_children.push_back(&D_DATAIN_SIZE_EXT_1);
  m_children.push_back(&D_BATCH_NUMBER);
  m_children.push_back(&D_POST_Y_EXTENSION);
  m_children.push_back(&D_ENTRY_PER_SLICE);
  m_children.push_back(&D_WEIGHT_FORMAT);
  m_children.push_back(&D_WEIGHT_SIZE_EXT_0);
  m_children.push_back(&D_WEIGHT_SIZE_EXT_1);
  m_children.push_back(&D_WEIGHT_BYTES);
  m_children.push_back(&D_WMB_BYTES);
  m_children.push_back(&D_DATAOUT_SIZE_0);
  m_children.push_back(&D_DATAOUT_SIZE_1);
  m_children.push_back(&D_ATOMICS);
  m_children.push_back(&D_RELEASE);
  m_children.push_back(&D_CONV_STRIDE_EXT);
  m_children.push_back(&D_DILATION_EXT);
  m_children.push_back(&D_ZERO_PADDING);
  m_children.push_back(&D_ZERO_PADDING_VALUE);
  m_children.push_back(&D_BANK);
  m_children.push_back(&D_PRA_CFG);
  m_children.push_back(&D_CYA);
}

// ------------------ ordt_rg_NVDLA_CMAC_A_S_STATUS methods ------------------

ordt_rg_NVDLA_CMAC_A_S_STATUS::ordt_rg_NVDLA_CMAC_A_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CMAC_A_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CMAC_A_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_A_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CMAC_A_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_CMAC_A_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CMAC_A_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_A_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CMAC_A_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CMAC_A_S_POINTER methods ------------------

ordt_rg_NVDLA_CMAC_A_S_POINTER::ordt_rg_NVDLA_CMAC_A_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CMAC_A_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CMAC_A_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_A_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CMAC_A_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_CMAC_A_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CMAC_A_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_A_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CMAC_A_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CMAC_A_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_CMAC_A_D_OP_ENABLE::ordt_rg_NVDLA_CMAC_A_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CMAC_A_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CMAC_A_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_A_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CMAC_A_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_CMAC_A_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CMAC_A_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_A_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CMAC_A_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CMAC_A_D_MISC_CFG methods ------------------

ordt_rg_NVDLA_CMAC_A_D_MISC_CFG::ordt_rg_NVDLA_CMAC_A_D_MISC_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CONV_MODE(0, 1, 0x0, r_std, w_std),
    PROC_PRECISION(12, 2, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_CMAC_A_D_MISC_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CMAC_A_D_MISC_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_A_D_MISC_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CMAC_A_D_MISC_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CONV_MODE.write(wdata);
  PROC_PRECISION.write(wdata);
}

int  ordt_rg_NVDLA_CMAC_A_D_MISC_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CMAC_A_D_MISC_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_A_D_MISC_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CMAC_A_D_MISC_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CONV_MODE.read(rdata);
  PROC_PRECISION.read(rdata);
}

// ------------------ ordt_rset_NVDLA_CMAC_A methods ------------------

ordt_rset_NVDLA_CMAC_A::ordt_rset_NVDLA_CMAC_A(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    D_OP_ENABLE(_m_startaddress + 0x8, _m_startaddress + 0xb),
    D_MISC_CFG(_m_startaddress + 0xc, _m_startaddress + 0xf) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
}

void  ordt_rset_NVDLA_CMAC_A::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
}

// ------------------ ordt_rg_NVDLA_CMAC_B_S_STATUS methods ------------------

ordt_rg_NVDLA_CMAC_B_S_STATUS::ordt_rg_NVDLA_CMAC_B_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CMAC_B_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CMAC_B_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_B_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CMAC_B_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_CMAC_B_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CMAC_B_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_B_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CMAC_B_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CMAC_B_S_POINTER methods ------------------

ordt_rg_NVDLA_CMAC_B_S_POINTER::ordt_rg_NVDLA_CMAC_B_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CMAC_B_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CMAC_B_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_B_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CMAC_B_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_CMAC_B_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CMAC_B_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_B_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CMAC_B_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CMAC_B_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_CMAC_B_D_OP_ENABLE::ordt_rg_NVDLA_CMAC_B_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CMAC_B_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CMAC_B_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_B_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CMAC_B_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_CMAC_B_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CMAC_B_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_B_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CMAC_B_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CMAC_B_D_MISC_CFG methods ------------------

ordt_rg_NVDLA_CMAC_B_D_MISC_CFG::ordt_rg_NVDLA_CMAC_B_D_MISC_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CONV_MODE(0, 1, 0x0, r_std, w_std),
    PROC_PRECISION(12, 2, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_CMAC_B_D_MISC_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CMAC_B_D_MISC_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_B_D_MISC_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CMAC_B_D_MISC_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CONV_MODE.write(wdata);
  PROC_PRECISION.write(wdata);
}

int  ordt_rg_NVDLA_CMAC_B_D_MISC_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CMAC_B_D_MISC_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CMAC_B_D_MISC_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CMAC_B_D_MISC_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CONV_MODE.read(rdata);
  PROC_PRECISION.read(rdata);
}

// ------------------ ordt_rset_NVDLA_CMAC_B methods ------------------

ordt_rset_NVDLA_CMAC_B::ordt_rset_NVDLA_CMAC_B(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    D_OP_ENABLE(_m_startaddress + 0x8, _m_startaddress + 0xb),
    D_MISC_CFG(_m_startaddress + 0xc, _m_startaddress + 0xf) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
}

void  ordt_rset_NVDLA_CMAC_B::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
}

// ------------------ ordt_rg_NVDLA_CACC_S_STATUS methods ------------------

ordt_rg_NVDLA_CACC_S_STATUS::ordt_rg_NVDLA_CACC_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CACC_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CACC_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CACC_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_CACC_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CACC_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CACC_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CACC_S_POINTER methods ------------------

ordt_rg_NVDLA_CACC_S_POINTER::ordt_rg_NVDLA_CACC_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CACC_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CACC_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CACC_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_CACC_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CACC_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CACC_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CACC_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_CACC_D_OP_ENABLE::ordt_rg_NVDLA_CACC_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CACC_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CACC_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_CACC_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CACC_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CACC_D_MISC_CFG methods ------------------

ordt_rg_NVDLA_CACC_D_MISC_CFG::ordt_rg_NVDLA_CACC_D_MISC_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CONV_MODE(0, 1, 0x0, r_std, w_std),
    PROC_PRECISION(12, 2, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_CACC_D_MISC_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CACC_D_MISC_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_MISC_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_MISC_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CONV_MODE.write(wdata);
  PROC_PRECISION.write(wdata);
}

int  ordt_rg_NVDLA_CACC_D_MISC_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CACC_D_MISC_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_MISC_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_MISC_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CONV_MODE.read(rdata);
  PROC_PRECISION.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_0 methods ------------------

ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_0::ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAOUT_WIDTH(0, 13, 0x0, r_std, w_std),
    DATAOUT_HEIGHT(16, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAOUT_WIDTH.write(wdata);
  DATAOUT_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAOUT_WIDTH.read(rdata);
  DATAOUT_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_1 methods ------------------

ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_1::ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAOUT_CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAOUT_CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAOUT_CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CACC_D_DATAOUT_ADDR methods ------------------

ordt_rg_NVDLA_CACC_D_DATAOUT_ADDR::ordt_rg_NVDLA_CACC_D_DATAOUT_ADDR(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAOUT_ADDR(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CACC_D_DATAOUT_ADDR::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CACC_D_DATAOUT_ADDR at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_DATAOUT_ADDR\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_DATAOUT_ADDR::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAOUT_ADDR.write(wdata);
}

int  ordt_rg_NVDLA_CACC_D_DATAOUT_ADDR::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CACC_D_DATAOUT_ADDR at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_DATAOUT_ADDR\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_DATAOUT_ADDR::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAOUT_ADDR.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CACC_D_BATCH_NUMBER methods ------------------

ordt_rg_NVDLA_CACC_D_BATCH_NUMBER::ordt_rg_NVDLA_CACC_D_BATCH_NUMBER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BATCHES(0, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CACC_D_BATCH_NUMBER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CACC_D_BATCH_NUMBER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_BATCH_NUMBER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_BATCH_NUMBER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BATCHES.write(wdata);
}

int  ordt_rg_NVDLA_CACC_D_BATCH_NUMBER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CACC_D_BATCH_NUMBER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_BATCH_NUMBER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_BATCH_NUMBER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BATCHES.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CACC_D_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_CACC_D_LINE_STRIDE::ordt_rg_NVDLA_CACC_D_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LINE_STRIDE(0, 24, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CACC_D_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CACC_D_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CACC_D_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CACC_D_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CACC_D_SURF_STRIDE methods ------------------

ordt_rg_NVDLA_CACC_D_SURF_STRIDE::ordt_rg_NVDLA_CACC_D_SURF_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SURF_STRIDE(0, 24, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CACC_D_SURF_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CACC_D_SURF_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_SURF_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_SURF_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SURF_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CACC_D_SURF_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CACC_D_SURF_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_SURF_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_SURF_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SURF_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CACC_D_DATAOUT_MAP methods ------------------

ordt_rg_NVDLA_CACC_D_DATAOUT_MAP::ordt_rg_NVDLA_CACC_D_DATAOUT_MAP(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LINE_PACKED(0, 1, 0x0, r_std, w_std),
    SURF_PACKED(16, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CACC_D_DATAOUT_MAP::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CACC_D_DATAOUT_MAP at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_DATAOUT_MAP\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_DATAOUT_MAP::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LINE_PACKED.write(wdata);
  SURF_PACKED.write(wdata);
}

int  ordt_rg_NVDLA_CACC_D_DATAOUT_MAP::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CACC_D_DATAOUT_MAP at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_DATAOUT_MAP\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_DATAOUT_MAP::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LINE_PACKED.read(rdata);
  SURF_PACKED.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CACC_D_CLIP_CFG methods ------------------

ordt_rg_NVDLA_CACC_D_CLIP_CFG::ordt_rg_NVDLA_CACC_D_CLIP_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CLIP_TRUNCATE(0, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CACC_D_CLIP_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CACC_D_CLIP_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_CLIP_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_CLIP_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CLIP_TRUNCATE.write(wdata);
}

int  ordt_rg_NVDLA_CACC_D_CLIP_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CACC_D_CLIP_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_CLIP_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_CLIP_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CLIP_TRUNCATE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CACC_D_OUT_SATURATION methods ------------------

ordt_rg_NVDLA_CACC_D_OUT_SATURATION::ordt_rg_NVDLA_CACC_D_OUT_SATURATION(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SAT_COUNT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CACC_D_OUT_SATURATION::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CACC_D_OUT_SATURATION at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_OUT_SATURATION\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_OUT_SATURATION::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SAT_COUNT.write(wdata);
}

int  ordt_rg_NVDLA_CACC_D_OUT_SATURATION::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CACC_D_OUT_SATURATION at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_OUT_SATURATION\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_OUT_SATURATION::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SAT_COUNT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CACC_D_CYA methods ------------------

ordt_rg_NVDLA_CACC_D_CYA::ordt_rg_NVDLA_CACC_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CYA(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CACC_D_CYA::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CACC_D_CYA at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_CYA\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_CYA::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CYA.write(wdata);
}

int  ordt_rg_NVDLA_CACC_D_CYA::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CACC_D_CYA at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CACC_D_CYA\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CACC_D_CYA::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CYA.read(rdata);
}

// ------------------ ordt_rset_NVDLA_CACC methods ------------------

ordt_rset_NVDLA_CACC::ordt_rset_NVDLA_CACC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    D_OP_ENABLE(_m_startaddress + 0x8, _m_startaddress + 0xb),
    D_MISC_CFG(_m_startaddress + 0xc, _m_startaddress + 0xf),
    D_DATAOUT_SIZE_0(_m_startaddress + 0x10, _m_startaddress + 0x13),
    D_DATAOUT_SIZE_1(_m_startaddress + 0x14, _m_startaddress + 0x17),
    D_DATAOUT_ADDR(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    D_BATCH_NUMBER(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    D_LINE_STRIDE(_m_startaddress + 0x20, _m_startaddress + 0x23),
    D_SURF_STRIDE(_m_startaddress + 0x24, _m_startaddress + 0x27),
    D_DATAOUT_MAP(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    D_CLIP_CFG(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    D_OUT_SATURATION(_m_startaddress + 0x30, _m_startaddress + 0x33),
    D_CYA(_m_startaddress + 0x34, _m_startaddress + 0x37) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
  m_children.push_back(&D_DATAOUT_SIZE_0);
  m_children.push_back(&D_DATAOUT_SIZE_1);
  m_children.push_back(&D_DATAOUT_ADDR);
  m_children.push_back(&D_BATCH_NUMBER);
  m_children.push_back(&D_LINE_STRIDE);
  m_children.push_back(&D_SURF_STRIDE);
  m_children.push_back(&D_DATAOUT_MAP);
  m_children.push_back(&D_CLIP_CFG);
  m_children.push_back(&D_OUT_SATURATION);
  m_children.push_back(&D_CYA);
}

void  ordt_rset_NVDLA_CACC::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
  m_children.push_back(&D_DATAOUT_SIZE_0);
  m_children.push_back(&D_DATAOUT_SIZE_1);
  m_children.push_back(&D_DATAOUT_ADDR);
  m_children.push_back(&D_BATCH_NUMBER);
  m_children.push_back(&D_LINE_STRIDE);
  m_children.push_back(&D_SURF_STRIDE);
  m_children.push_back(&D_DATAOUT_MAP);
  m_children.push_back(&D_CLIP_CFG);
  m_children.push_back(&D_OUT_SATURATION);
  m_children.push_back(&D_CYA);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_S_STATUS methods ------------------

ordt_rg_NVDLA_SDP_RDMA_S_STATUS::ordt_rg_NVDLA_SDP_RDMA_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_S_POINTER methods ------------------

ordt_rg_NVDLA_SDP_RDMA_S_POINTER::ordt_rg_NVDLA_SDP_RDMA_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE::ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH::ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WIDTH(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT::ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    HEIGHT(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL::ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW::ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH::ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG::ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BRDMA_DISABLE(0, 1, 0x1, r_std, w_std),
    BRDMA_DATA_USE(1, 2, 0x0, r_std, w_std),
    BRDMA_DATA_SIZE(3, 1, 0x0, r_std, w_std),
    BRDMA_DATA_MODE(4, 1, 0x0, r_std, w_std),
    BRDMA_RAM_TYPE(5, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BRDMA_DISABLE.write(wdata);
  BRDMA_DATA_USE.write(wdata);
  BRDMA_DATA_SIZE.write(wdata);
  BRDMA_DATA_MODE.write(wdata);
  BRDMA_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BRDMA_DISABLE.read(rdata);
  BRDMA_DATA_USE.read(rdata);
  BRDMA_DATA_SIZE.read(rdata);
  BRDMA_DATA_MODE.read(rdata);
  BRDMA_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW::ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH::ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_BATCH_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_BATCH_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_BATCH_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG::ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NRDMA_DISABLE(0, 1, 0x1, r_std, w_std),
    NRDMA_DATA_USE(1, 2, 0x0, r_std, w_std),
    NRDMA_DATA_SIZE(3, 1, 0x0, r_std, w_std),
    NRDMA_DATA_MODE(4, 1, 0x0, r_std, w_std),
    NRDMA_RAM_TYPE(5, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NRDMA_DISABLE.write(wdata);
  NRDMA_DATA_USE.write(wdata);
  NRDMA_DATA_SIZE.write(wdata);
  NRDMA_DATA_MODE.write(wdata);
  NRDMA_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NRDMA_DISABLE.read(rdata);
  NRDMA_DATA_USE.read(rdata);
  NRDMA_DATA_SIZE.read(rdata);
  NRDMA_DATA_MODE.read(rdata);
  NRDMA_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW::ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH::ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_BATCH_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_BATCH_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_BATCH_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG::ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERDMA_DISABLE(0, 1, 0x1, r_std, w_std),
    ERDMA_DATA_USE(1, 2, 0x0, r_std, w_std),
    ERDMA_DATA_SIZE(3, 1, 0x0, r_std, w_std),
    ERDMA_DATA_MODE(4, 1, 0x0, r_std, w_std),
    ERDMA_RAM_TYPE(5, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERDMA_DISABLE.write(wdata);
  ERDMA_DATA_USE.write(wdata);
  ERDMA_DATA_SIZE.write(wdata);
  ERDMA_DATA_MODE.write(wdata);
  ERDMA_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERDMA_DISABLE.read(rdata);
  ERDMA_DATA_USE.read(rdata);
  ERDMA_DATA_SIZE.read(rdata);
  ERDMA_DATA_MODE.read(rdata);
  ERDMA_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW::ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH::ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE::ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_BATCH_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_BATCH_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_BATCH_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG::ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    FLYING_MODE(0, 1, 0x0, r_std, w_std),
    WINOGRAD(1, 1, 0x0, r_std, w_std),
    IN_PRECISION(2, 2, 0x1, r_std, w_std),
    PROC_PRECISION(4, 2, 0x1, r_std, w_std),
    OUT_PRECISION(6, 2, 0x0, r_std, w_std),
    BATCH_NUMBER(8, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  FLYING_MODE.write(wdata);
  WINOGRAD.write(wdata);
  IN_PRECISION.write(wdata);
  PROC_PRECISION.write(wdata);
  OUT_PRECISION.write(wdata);
  BATCH_NUMBER.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  FLYING_MODE.read(rdata);
  WINOGRAD.read(rdata);
  IN_PRECISION.read(rdata);
  PROC_PRECISION.read(rdata);
  OUT_PRECISION.read(rdata);
  BATCH_NUMBER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG::ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM::ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_NAN_INPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_NAN_INPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_NAN_INPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM::ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_INF_INPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_INF_INPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_INF_INPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE::ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_DMA_EN(0, 1, 0x0, r_std, w_std),
    PERF_NAN_INF_COUNT_EN(1, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_DMA_EN.write(wdata);
  PERF_NAN_INF_COUNT_EN.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_DMA_EN.read(rdata);
  PERF_NAN_INF_COUNT_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL::ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    MRDMA_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  MRDMA_STALL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  MRDMA_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL::ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BRDMA_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BRDMA_STALL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BRDMA_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL::ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NRDMA_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NRDMA_STALL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NRDMA_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL methods ------------------

ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL::ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERDMA_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERDMA_STALL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERDMA_STALL.read(rdata);
}

// ------------------ ordt_rset_NVDLA_SDP_RDMA methods ------------------

ordt_rset_NVDLA_SDP_RDMA::ordt_rset_NVDLA_SDP_RDMA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    D_OP_ENABLE(_m_startaddress + 0x8, _m_startaddress + 0xb),
    D_DATA_CUBE_WIDTH(_m_startaddress + 0xc, _m_startaddress + 0xf),
    D_DATA_CUBE_HEIGHT(_m_startaddress + 0x10, _m_startaddress + 0x13),
    D_DATA_CUBE_CHANNEL(_m_startaddress + 0x14, _m_startaddress + 0x17),
    D_SRC_BASE_ADDR_LOW(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    D_SRC_BASE_ADDR_HIGH(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    D_SRC_LINE_STRIDE(_m_startaddress + 0x20, _m_startaddress + 0x23),
    D_SRC_SURFACE_STRIDE(_m_startaddress + 0x24, _m_startaddress + 0x27),
    D_BRDMA_CFG(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    D_BS_BASE_ADDR_LOW(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    D_BS_BASE_ADDR_HIGH(_m_startaddress + 0x30, _m_startaddress + 0x33),
    D_BS_LINE_STRIDE(_m_startaddress + 0x34, _m_startaddress + 0x37),
    D_BS_SURFACE_STRIDE(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    D_BS_BATCH_STRIDE(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    D_NRDMA_CFG(_m_startaddress + 0x40, _m_startaddress + 0x43),
    D_BN_BASE_ADDR_LOW(_m_startaddress + 0x44, _m_startaddress + 0x47),
    D_BN_BASE_ADDR_HIGH(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    D_BN_LINE_STRIDE(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    D_BN_SURFACE_STRIDE(_m_startaddress + 0x50, _m_startaddress + 0x53),
    D_BN_BATCH_STRIDE(_m_startaddress + 0x54, _m_startaddress + 0x57),
    D_ERDMA_CFG(_m_startaddress + 0x58, _m_startaddress + 0x5b),
    D_EW_BASE_ADDR_LOW(_m_startaddress + 0x5c, _m_startaddress + 0x5f),
    D_EW_BASE_ADDR_HIGH(_m_startaddress + 0x60, _m_startaddress + 0x63),
    D_EW_LINE_STRIDE(_m_startaddress + 0x64, _m_startaddress + 0x67),
    D_EW_SURFACE_STRIDE(_m_startaddress + 0x68, _m_startaddress + 0x6b),
    D_EW_BATCH_STRIDE(_m_startaddress + 0x6c, _m_startaddress + 0x6f),
    D_FEATURE_MODE_CFG(_m_startaddress + 0x70, _m_startaddress + 0x73),
    D_SRC_DMA_CFG(_m_startaddress + 0x74, _m_startaddress + 0x77),
    D_STATUS_NAN_INPUT_NUM(_m_startaddress + 0x78, _m_startaddress + 0x7b),
    D_STATUS_INF_INPUT_NUM(_m_startaddress + 0x7c, _m_startaddress + 0x7f),
    D_PERF_ENABLE(_m_startaddress + 0x80, _m_startaddress + 0x83),
    D_PERF_MRDMA_READ_STALL(_m_startaddress + 0x84, _m_startaddress + 0x87),
    D_PERF_BRDMA_READ_STALL(_m_startaddress + 0x88, _m_startaddress + 0x8b),
    D_PERF_NRDMA_READ_STALL(_m_startaddress + 0x8c, _m_startaddress + 0x8f),
    D_PERF_ERDMA_READ_STALL(_m_startaddress + 0x90, _m_startaddress + 0x93) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_WIDTH);
  m_children.push_back(&D_DATA_CUBE_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_CHANNEL);
  m_children.push_back(&D_SRC_BASE_ADDR_LOW);
  m_children.push_back(&D_SRC_BASE_ADDR_HIGH);
  m_children.push_back(&D_SRC_LINE_STRIDE);
  m_children.push_back(&D_SRC_SURFACE_STRIDE);
  m_children.push_back(&D_BRDMA_CFG);
  m_children.push_back(&D_BS_BASE_ADDR_LOW);
  m_children.push_back(&D_BS_BASE_ADDR_HIGH);
  m_children.push_back(&D_BS_LINE_STRIDE);
  m_children.push_back(&D_BS_SURFACE_STRIDE);
  m_children.push_back(&D_BS_BATCH_STRIDE);
  m_children.push_back(&D_NRDMA_CFG);
  m_children.push_back(&D_BN_BASE_ADDR_LOW);
  m_children.push_back(&D_BN_BASE_ADDR_HIGH);
  m_children.push_back(&D_BN_LINE_STRIDE);
  m_children.push_back(&D_BN_SURFACE_STRIDE);
  m_children.push_back(&D_BN_BATCH_STRIDE);
  m_children.push_back(&D_ERDMA_CFG);
  m_children.push_back(&D_EW_BASE_ADDR_LOW);
  m_children.push_back(&D_EW_BASE_ADDR_HIGH);
  m_children.push_back(&D_EW_LINE_STRIDE);
  m_children.push_back(&D_EW_SURFACE_STRIDE);
  m_children.push_back(&D_EW_BATCH_STRIDE);
  m_children.push_back(&D_FEATURE_MODE_CFG);
  m_children.push_back(&D_SRC_DMA_CFG);
  m_children.push_back(&D_STATUS_NAN_INPUT_NUM);
  m_children.push_back(&D_STATUS_INF_INPUT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_MRDMA_READ_STALL);
  m_children.push_back(&D_PERF_BRDMA_READ_STALL);
  m_children.push_back(&D_PERF_NRDMA_READ_STALL);
  m_children.push_back(&D_PERF_ERDMA_READ_STALL);
}

void  ordt_rset_NVDLA_SDP_RDMA::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_WIDTH);
  m_children.push_back(&D_DATA_CUBE_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_CHANNEL);
  m_children.push_back(&D_SRC_BASE_ADDR_LOW);
  m_children.push_back(&D_SRC_BASE_ADDR_HIGH);
  m_children.push_back(&D_SRC_LINE_STRIDE);
  m_children.push_back(&D_SRC_SURFACE_STRIDE);
  m_children.push_back(&D_BRDMA_CFG);
  m_children.push_back(&D_BS_BASE_ADDR_LOW);
  m_children.push_back(&D_BS_BASE_ADDR_HIGH);
  m_children.push_back(&D_BS_LINE_STRIDE);
  m_children.push_back(&D_BS_SURFACE_STRIDE);
  m_children.push_back(&D_BS_BATCH_STRIDE);
  m_children.push_back(&D_NRDMA_CFG);
  m_children.push_back(&D_BN_BASE_ADDR_LOW);
  m_children.push_back(&D_BN_BASE_ADDR_HIGH);
  m_children.push_back(&D_BN_LINE_STRIDE);
  m_children.push_back(&D_BN_SURFACE_STRIDE);
  m_children.push_back(&D_BN_BATCH_STRIDE);
  m_children.push_back(&D_ERDMA_CFG);
  m_children.push_back(&D_EW_BASE_ADDR_LOW);
  m_children.push_back(&D_EW_BASE_ADDR_HIGH);
  m_children.push_back(&D_EW_LINE_STRIDE);
  m_children.push_back(&D_EW_SURFACE_STRIDE);
  m_children.push_back(&D_EW_BATCH_STRIDE);
  m_children.push_back(&D_FEATURE_MODE_CFG);
  m_children.push_back(&D_SRC_DMA_CFG);
  m_children.push_back(&D_STATUS_NAN_INPUT_NUM);
  m_children.push_back(&D_STATUS_INF_INPUT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_MRDMA_READ_STALL);
  m_children.push_back(&D_PERF_BRDMA_READ_STALL);
  m_children.push_back(&D_PERF_NRDMA_READ_STALL);
  m_children.push_back(&D_PERF_ERDMA_READ_STALL);
}

// ------------------ ordt_rg_NVDLA_SDP_S_STATUS methods ------------------

ordt_rg_NVDLA_SDP_S_STATUS::ordt_rg_NVDLA_SDP_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_POINTER methods ------------------

ordt_rg_NVDLA_SDP_S_POINTER::ordt_rg_NVDLA_SDP_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG::ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_ADDR(0, 10, 0x0, r_std, w_std),
    LUT_TABLE_ID(16, 1, 0x0, r_std, w_std),
    LUT_ACCESS_TYPE(17, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_ADDR.write(wdata);
  LUT_TABLE_ID.write(wdata);
  LUT_ACCESS_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_ADDR.read(rdata);
  LUT_TABLE_ID.read(rdata);
  LUT_ACCESS_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA::ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_DATA(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_DATA.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_DATA.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_CFG methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_CFG::ordt_rg_NVDLA_SDP_S_LUT_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_FUNCTION(0, 1, 0x0, r_std, w_std),
    LUT_UFLOW_PRIORITY(4, 1, 0x0, r_std, w_std),
    LUT_OFLOW_PRIORITY(5, 1, 0x0, r_std, w_std),
    LUT_HYBRID_PRIORITY(6, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_FUNCTION.write(wdata);
  LUT_UFLOW_PRIORITY.write(wdata);
  LUT_OFLOW_PRIORITY.write(wdata);
  LUT_HYBRID_PRIORITY.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_FUNCTION.read(rdata);
  LUT_UFLOW_PRIORITY.read(rdata);
  LUT_OFLOW_PRIORITY.read(rdata);
  LUT_HYBRID_PRIORITY.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_INFO methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_INFO::ordt_rg_NVDLA_SDP_S_LUT_INFO(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_INDEX_OFFSET(0, 8, 0x0, r_std, w_std),
    LUT_LE_INDEX_SELECT(8, 8, 0x0, r_std, w_std),
    LUT_LO_INDEX_SELECT(16, 8, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_INFO::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_INFO at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_INFO\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_INFO::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_INDEX_OFFSET.write(wdata);
  LUT_LE_INDEX_SELECT.write(wdata);
  LUT_LO_INDEX_SELECT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_INFO::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_INFO at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_INFO\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_INFO::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_INDEX_OFFSET.read(rdata);
  LUT_LE_INDEX_SELECT.read(rdata);
  LUT_LO_INDEX_SELECT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LE_START methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LE_START::ordt_rg_NVDLA_SDP_S_LUT_LE_START(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_START(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_START::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LE_START at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_START\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_START::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_START.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_START::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LE_START at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_START\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_START::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_START.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LE_END methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LE_END::ordt_rg_NVDLA_SDP_S_LUT_LE_END(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_END(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_END::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LE_END at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_END\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_END::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_END.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_END::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LE_END at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_END\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_END::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_END.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LO_START methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LO_START::ordt_rg_NVDLA_SDP_S_LUT_LO_START(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_START(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_START::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LO_START at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_START\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_START::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_START.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_START::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LO_START at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_START\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_START::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_START.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LO_END methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LO_END::ordt_rg_NVDLA_SDP_S_LUT_LO_END(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_END(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_END::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LO_END at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_END\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_END::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_END.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_END::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LO_END at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_END\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_END::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_END.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE::ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_SLOPE_UFLOW_SCALE(0, 16, 0x0, r_std, w_std),
    LUT_LE_SLOPE_OFLOW_SCALE(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_SLOPE_UFLOW_SCALE.write(wdata);
  LUT_LE_SLOPE_OFLOW_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_SLOPE_UFLOW_SCALE.read(rdata);
  LUT_LE_SLOPE_OFLOW_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT::ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_SLOPE_UFLOW_SHIFT(0, 5, 0x0, r_std, w_std),
    LUT_LE_SLOPE_OFLOW_SHIFT(5, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_SLOPE_UFLOW_SHIFT.write(wdata);
  LUT_LE_SLOPE_OFLOW_SHIFT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_SLOPE_UFLOW_SHIFT.read(rdata);
  LUT_LE_SLOPE_OFLOW_SHIFT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE::ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_SLOPE_UFLOW_SCALE(0, 16, 0x0, r_std, w_std),
    LUT_LO_SLOPE_OFLOW_SCALE(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_SLOPE_UFLOW_SCALE.write(wdata);
  LUT_LO_SLOPE_OFLOW_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_SLOPE_UFLOW_SCALE.read(rdata);
  LUT_LO_SLOPE_OFLOW_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT::ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_SLOPE_UFLOW_SHIFT(0, 5, 0x0, r_std, w_std),
    LUT_LO_SLOPE_OFLOW_SHIFT(5, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_SLOPE_UFLOW_SHIFT.write(wdata);
  LUT_LO_SLOPE_OFLOW_SHIFT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_SLOPE_UFLOW_SHIFT.read(rdata);
  LUT_LO_SLOPE_OFLOW_SHIFT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_SDP_D_OP_ENABLE::ordt_rg_NVDLA_SDP_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH methods ------------------

ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH::ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WIDTH(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT methods ------------------

ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT::ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    HEIGHT(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL methods ------------------

ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL::ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW::ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH::ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE::ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE::ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BS_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BS_CFG::ordt_rg_NVDLA_SDP_D_DP_BS_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_BYPASS(0, 1, 0x1, r_std, w_std),
    BS_ALU_BYPASS(1, 1, 0x1, r_std, w_std),
    BS_ALU_ALGO(2, 2, 0x0, r_std, w_std),
    BS_MUL_BYPASS(4, 1, 0x1, r_std, w_std),
    BS_MUL_PRELU(5, 1, 0x1, r_std, w_std),
    BS_RELU_BYPASS(6, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BS_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_BYPASS.write(wdata);
  BS_ALU_BYPASS.write(wdata);
  BS_ALU_ALGO.write(wdata);
  BS_MUL_BYPASS.write(wdata);
  BS_MUL_PRELU.write(wdata);
  BS_RELU_BYPASS.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BS_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_BYPASS.read(rdata);
  BS_ALU_BYPASS.read(rdata);
  BS_ALU_ALGO.read(rdata);
  BS_MUL_BYPASS.read(rdata);
  BS_MUL_PRELU.read(rdata);
  BS_RELU_BYPASS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG::ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_ALU_SRC(0, 1, 0x0, r_std, w_std),
    BS_ALU_SHIFT_VALUE(8, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_ALU_SRC.write(wdata);
  BS_ALU_SHIFT_VALUE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_ALU_SRC.read(rdata);
  BS_ALU_SHIFT_VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE::ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_ALU_OPERAND(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_ALU_OPERAND.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_ALU_OPERAND.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG::ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_MUL_SRC(0, 1, 0x0, r_std, w_std),
    BS_MUL_SHIFT_VALUE(8, 8, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_MUL_SRC.write(wdata);
  BS_MUL_SHIFT_VALUE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_MUL_SRC.read(rdata);
  BS_MUL_SHIFT_VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE::ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_MUL_OPERAND(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_MUL_OPERAND.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_MUL_OPERAND.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BN_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BN_CFG::ordt_rg_NVDLA_SDP_D_DP_BN_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_BYPASS(0, 1, 0x1, r_std, w_std),
    BN_ALU_BYPASS(1, 1, 0x1, r_std, w_std),
    BN_ALU_ALGO(2, 2, 0x0, r_std, w_std),
    BN_MUL_BYPASS(4, 1, 0x1, r_std, w_std),
    BN_MUL_PRELU(5, 1, 0x0, r_std, w_std),
    BN_RELU_BYPASS(6, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BN_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_BYPASS.write(wdata);
  BN_ALU_BYPASS.write(wdata);
  BN_ALU_ALGO.write(wdata);
  BN_MUL_BYPASS.write(wdata);
  BN_MUL_PRELU.write(wdata);
  BN_RELU_BYPASS.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BN_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_BYPASS.read(rdata);
  BN_ALU_BYPASS.read(rdata);
  BN_ALU_ALGO.read(rdata);
  BN_MUL_BYPASS.read(rdata);
  BN_MUL_PRELU.read(rdata);
  BN_RELU_BYPASS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG::ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_ALU_SRC(0, 1, 0x0, r_std, w_std),
    BN_ALU_SHIFT_VALUE(8, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_ALU_SRC.write(wdata);
  BN_ALU_SHIFT_VALUE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_ALU_SRC.read(rdata);
  BN_ALU_SHIFT_VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE::ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_ALU_OPERAND(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_ALU_OPERAND.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_ALU_OPERAND.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG::ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_MUL_SRC(0, 1, 0x0, r_std, w_std),
    BN_MUL_SHIFT_VALUE(8, 8, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_MUL_SRC.write(wdata);
  BN_MUL_SHIFT_VALUE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_MUL_SRC.read(rdata);
  BN_MUL_SHIFT_VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE::ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_MUL_OPERAND(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_MUL_OPERAND.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_MUL_OPERAND.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_CFG::ordt_rg_NVDLA_SDP_D_DP_EW_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_BYPASS(0, 1, 0x1, r_std, w_std),
    EW_ALU_BYPASS(1, 1, 0x1, r_std, w_std),
    EW_ALU_ALGO(2, 2, 0x0, r_std, w_std),
    EW_MUL_BYPASS(4, 1, 0x1, r_std, w_std),
    EW_MUL_PRELU(5, 1, 0x0, r_std, w_std),
    EW_LUT_BYPASS(6, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_BYPASS.write(wdata);
  EW_ALU_BYPASS.write(wdata);
  EW_ALU_ALGO.write(wdata);
  EW_MUL_BYPASS.write(wdata);
  EW_MUL_PRELU.write(wdata);
  EW_LUT_BYPASS.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_BYPASS.read(rdata);
  EW_ALU_BYPASS.read(rdata);
  EW_ALU_ALGO.read(rdata);
  EW_MUL_BYPASS.read(rdata);
  EW_MUL_PRELU.read(rdata);
  EW_LUT_BYPASS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG::ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_ALU_SRC(0, 1, 0x0, r_std, w_std),
    EW_ALU_CVT_BYPASS(1, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_ALU_SRC.write(wdata);
  EW_ALU_CVT_BYPASS.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_ALU_SRC.read(rdata);
  EW_ALU_CVT_BYPASS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_ALU_OPERAND(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_ALU_OPERAND.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_ALU_OPERAND.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_ALU_CVT_OFFSET(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_ALU_CVT_OFFSET.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_ALU_CVT_OFFSET.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_ALU_CVT_SCALE(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_ALU_CVT_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_ALU_CVT_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_ALU_CVT_TRUNCATE(0, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_ALU_CVT_TRUNCATE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_ALU_CVT_TRUNCATE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG::ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_MUL_SRC(0, 1, 0x0, r_std, w_std),
    EW_MUL_CVT_BYPASS(1, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_MUL_SRC.write(wdata);
  EW_MUL_CVT_BYPASS.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_MUL_SRC.read(rdata);
  EW_MUL_CVT_BYPASS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_MUL_OPERAND(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_MUL_OPERAND.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_MUL_OPERAND.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_MUL_CVT_OFFSET(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_MUL_CVT_OFFSET.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_MUL_CVT_OFFSET.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_MUL_CVT_SCALE(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_MUL_CVT_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_MUL_CVT_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_MUL_CVT_TRUNCATE(0, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_MUL_CVT_TRUNCATE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_MUL_CVT_TRUNCATE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_TRUNCATE(0, 10, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_TRUNCATE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_TRUNCATE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG::ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    FLYING_MODE(0, 1, 0x0, r_std, w_std),
    OUTPUT_DST(1, 1, 0x0, r_std, w_std),
    WINOGRAD(2, 1, 0x0, r_std, w_std),
    NAN_TO_ZERO(3, 1, 0x0, r_std, w_std),
    BATCH_NUMBER(8, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  FLYING_MODE.write(wdata);
  OUTPUT_DST.write(wdata);
  WINOGRAD.write(wdata);
  NAN_TO_ZERO.write(wdata);
  BATCH_NUMBER.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  FLYING_MODE.read(rdata);
  OUTPUT_DST.read(rdata);
  WINOGRAD.read(rdata);
  NAN_TO_ZERO.read(rdata);
  BATCH_NUMBER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DST_DMA_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DST_DMA_CFG::ordt_rg_NVDLA_SDP_D_DST_DMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DST_DMA_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DST_DMA_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_DMA_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_DMA_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DST_DMA_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DST_DMA_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_DMA_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_DMA_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE::ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_BATCH_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_BATCH_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_BATCH_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DATA_FORMAT methods ------------------

ordt_rg_NVDLA_SDP_D_DATA_FORMAT::ordt_rg_NVDLA_SDP_D_DATA_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PROC_PRECISION(0, 2, 0x0, r_std, w_std),
    OUT_PRECISION(2, 2, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DATA_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DATA_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PROC_PRECISION.write(wdata);
  OUT_PRECISION.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DATA_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DATA_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PROC_PRECISION.read(rdata);
  OUT_PRECISION.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_CVT_OFFSET methods ------------------

ordt_rg_NVDLA_SDP_D_CVT_OFFSET::ordt_rg_NVDLA_SDP_D_CVT_OFFSET(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CVT_OFFSET(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_CVT_OFFSET::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_CVT_OFFSET at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_CVT_OFFSET\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_CVT_OFFSET::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CVT_OFFSET.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_CVT_OFFSET::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_CVT_OFFSET at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_CVT_OFFSET\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_CVT_OFFSET::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CVT_OFFSET.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_CVT_SCALE methods ------------------

ordt_rg_NVDLA_SDP_D_CVT_SCALE::ordt_rg_NVDLA_SDP_D_CVT_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CVT_SCALE(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_CVT_SCALE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_CVT_SCALE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_CVT_SCALE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_CVT_SCALE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CVT_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_CVT_SCALE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_CVT_SCALE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_CVT_SCALE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_CVT_SCALE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CVT_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_CVT_SHIFT methods ------------------

ordt_rg_NVDLA_SDP_D_CVT_SHIFT::ordt_rg_NVDLA_SDP_D_CVT_SHIFT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CVT_SHIFT(0, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_CVT_SHIFT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_CVT_SHIFT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_CVT_SHIFT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_CVT_SHIFT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CVT_SHIFT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_CVT_SHIFT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_CVT_SHIFT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_CVT_SHIFT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_CVT_SHIFT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CVT_SHIFT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_STATUS methods ------------------

ordt_rg_NVDLA_SDP_D_STATUS::ordt_rg_NVDLA_SDP_D_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_UNEQUAL(0, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_UNEQUAL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_UNEQUAL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM methods ------------------

ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM::ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_NAN_INPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_NAN_INPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_NAN_INPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM methods ------------------

ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM::ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_INF_INPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_INF_INPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_INF_INPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM methods ------------------

ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM::ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_NAN_OUTPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_NAN_OUTPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_NAN_OUTPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_ENABLE methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_ENABLE::ordt_rg_NVDLA_SDP_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_DMA_EN(0, 1, 0x0, r_std, w_std),
    PERF_LUT_EN(1, 1, 0x0, r_std, w_std),
    PERF_SAT_EN(2, 1, 0x0, r_std, w_std),
    PERF_NAN_INF_COUNT_EN(3, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_DMA_EN.write(wdata);
  PERF_LUT_EN.write(wdata);
  PERF_SAT_EN.write(wdata);
  PERF_NAN_INF_COUNT_EN.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_DMA_EN.read(rdata);
  PERF_LUT_EN.read(rdata);
  PERF_SAT_EN.read(rdata);
  PERF_NAN_INF_COUNT_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL::ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WDMA_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WDMA_STALL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WDMA_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW::ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_UFLOW(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_UFLOW.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_UFLOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW::ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_OFLOW(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_OFLOW.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_OFLOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION::ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OUT_SATURATION(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OUT_SATURATION.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OUT_SATURATION.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID::ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_HYBRID(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_HYBRID.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_HYBRID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT::ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_HIT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_HIT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_HIT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT::ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_HIT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_HIT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_HIT.read(rdata);
}

// ------------------ ordt_rset_NVDLA_SDP methods ------------------

ordt_rset_NVDLA_SDP::ordt_rset_NVDLA_SDP(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    S_LUT_ACCESS_CFG(_m_startaddress + 0x8, _m_startaddress + 0xb),
    S_LUT_ACCESS_DATA(_m_startaddress + 0xc, _m_startaddress + 0xf),
    S_LUT_CFG(_m_startaddress + 0x10, _m_startaddress + 0x13),
    S_LUT_INFO(_m_startaddress + 0x14, _m_startaddress + 0x17),
    S_LUT_LE_START(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    S_LUT_LE_END(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    S_LUT_LO_START(_m_startaddress + 0x20, _m_startaddress + 0x23),
    S_LUT_LO_END(_m_startaddress + 0x24, _m_startaddress + 0x27),
    S_LUT_LE_SLOPE_SCALE(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    S_LUT_LE_SLOPE_SHIFT(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    S_LUT_LO_SLOPE_SCALE(_m_startaddress + 0x30, _m_startaddress + 0x33),
    S_LUT_LO_SLOPE_SHIFT(_m_startaddress + 0x34, _m_startaddress + 0x37),
    D_OP_ENABLE(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    D_DATA_CUBE_WIDTH(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    D_DATA_CUBE_HEIGHT(_m_startaddress + 0x40, _m_startaddress + 0x43),
    D_DATA_CUBE_CHANNEL(_m_startaddress + 0x44, _m_startaddress + 0x47),
    D_DST_BASE_ADDR_LOW(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    D_DST_BASE_ADDR_HIGH(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    D_DST_LINE_STRIDE(_m_startaddress + 0x50, _m_startaddress + 0x53),
    D_DST_SURFACE_STRIDE(_m_startaddress + 0x54, _m_startaddress + 0x57),
    D_DP_BS_CFG(_m_startaddress + 0x58, _m_startaddress + 0x5b),
    D_DP_BS_ALU_CFG(_m_startaddress + 0x5c, _m_startaddress + 0x5f),
    D_DP_BS_ALU_SRC_VALUE(_m_startaddress + 0x60, _m_startaddress + 0x63),
    D_DP_BS_MUL_CFG(_m_startaddress + 0x64, _m_startaddress + 0x67),
    D_DP_BS_MUL_SRC_VALUE(_m_startaddress + 0x68, _m_startaddress + 0x6b),
    D_DP_BN_CFG(_m_startaddress + 0x6c, _m_startaddress + 0x6f),
    D_DP_BN_ALU_CFG(_m_startaddress + 0x70, _m_startaddress + 0x73),
    D_DP_BN_ALU_SRC_VALUE(_m_startaddress + 0x74, _m_startaddress + 0x77),
    D_DP_BN_MUL_CFG(_m_startaddress + 0x78, _m_startaddress + 0x7b),
    D_DP_BN_MUL_SRC_VALUE(_m_startaddress + 0x7c, _m_startaddress + 0x7f),
    D_DP_EW_CFG(_m_startaddress + 0x80, _m_startaddress + 0x83),
    D_DP_EW_ALU_CFG(_m_startaddress + 0x84, _m_startaddress + 0x87),
    D_DP_EW_ALU_SRC_VALUE(_m_startaddress + 0x88, _m_startaddress + 0x8b),
    D_DP_EW_ALU_CVT_OFFSET_VALUE(_m_startaddress + 0x8c, _m_startaddress + 0x8f),
    D_DP_EW_ALU_CVT_SCALE_VALUE(_m_startaddress + 0x90, _m_startaddress + 0x93),
    D_DP_EW_ALU_CVT_TRUNCATE_VALUE(_m_startaddress + 0x94, _m_startaddress + 0x97),
    D_DP_EW_MUL_CFG(_m_startaddress + 0x98, _m_startaddress + 0x9b),
    D_DP_EW_MUL_SRC_VALUE(_m_startaddress + 0x9c, _m_startaddress + 0x9f),
    D_DP_EW_MUL_CVT_OFFSET_VALUE(_m_startaddress + 0xa0, _m_startaddress + 0xa3),
    D_DP_EW_MUL_CVT_SCALE_VALUE(_m_startaddress + 0xa4, _m_startaddress + 0xa7),
    D_DP_EW_MUL_CVT_TRUNCATE_VALUE(_m_startaddress + 0xa8, _m_startaddress + 0xab),
    D_DP_EW_TRUNCATE_VALUE(_m_startaddress + 0xac, _m_startaddress + 0xaf),
    D_FEATURE_MODE_CFG(_m_startaddress + 0xb0, _m_startaddress + 0xb3),
    D_DST_DMA_CFG(_m_startaddress + 0xb4, _m_startaddress + 0xb7),
    D_DST_BATCH_STRIDE(_m_startaddress + 0xb8, _m_startaddress + 0xbb),
    D_DATA_FORMAT(_m_startaddress + 0xbc, _m_startaddress + 0xbf),
    D_CVT_OFFSET(_m_startaddress + 0xc0, _m_startaddress + 0xc3),
    D_CVT_SCALE(_m_startaddress + 0xc4, _m_startaddress + 0xc7),
    D_CVT_SHIFT(_m_startaddress + 0xc8, _m_startaddress + 0xcb),
    D_STATUS(_m_startaddress + 0xcc, _m_startaddress + 0xcf),
    D_STATUS_NAN_INPUT_NUM(_m_startaddress + 0xd0, _m_startaddress + 0xd3),
    D_STATUS_INF_INPUT_NUM(_m_startaddress + 0xd4, _m_startaddress + 0xd7),
    D_STATUS_NAN_OUTPUT_NUM(_m_startaddress + 0xd8, _m_startaddress + 0xdb),
    D_PERF_ENABLE(_m_startaddress + 0xdc, _m_startaddress + 0xdf),
    D_PERF_WDMA_WRITE_STALL(_m_startaddress + 0xe0, _m_startaddress + 0xe3),
    D_PERF_LUT_UFLOW(_m_startaddress + 0xe4, _m_startaddress + 0xe7),
    D_PERF_LUT_OFLOW(_m_startaddress + 0xe8, _m_startaddress + 0xeb),
    D_PERF_OUT_SATURATION(_m_startaddress + 0xec, _m_startaddress + 0xef),
    D_PERF_LUT_HYBRID(_m_startaddress + 0xf0, _m_startaddress + 0xf3),
    D_PERF_LUT_LE_HIT(_m_startaddress + 0xf4, _m_startaddress + 0xf7),
    D_PERF_LUT_LO_HIT(_m_startaddress + 0xf8, _m_startaddress + 0xfb) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&S_LUT_ACCESS_CFG);
  m_children.push_back(&S_LUT_ACCESS_DATA);
  m_children.push_back(&S_LUT_CFG);
  m_children.push_back(&S_LUT_INFO);
  m_children.push_back(&S_LUT_LE_START);
  m_children.push_back(&S_LUT_LE_END);
  m_children.push_back(&S_LUT_LO_START);
  m_children.push_back(&S_LUT_LO_END);
  m_children.push_back(&S_LUT_LE_SLOPE_SCALE);
  m_children.push_back(&S_LUT_LE_SLOPE_SHIFT);
  m_children.push_back(&S_LUT_LO_SLOPE_SCALE);
  m_children.push_back(&S_LUT_LO_SLOPE_SHIFT);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_WIDTH);
  m_children.push_back(&D_DATA_CUBE_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_CHANNEL);
  m_children.push_back(&D_DST_BASE_ADDR_LOW);
  m_children.push_back(&D_DST_BASE_ADDR_HIGH);
  m_children.push_back(&D_DST_LINE_STRIDE);
  m_children.push_back(&D_DST_SURFACE_STRIDE);
  m_children.push_back(&D_DP_BS_CFG);
  m_children.push_back(&D_DP_BS_ALU_CFG);
  m_children.push_back(&D_DP_BS_ALU_SRC_VALUE);
  m_children.push_back(&D_DP_BS_MUL_CFG);
  m_children.push_back(&D_DP_BS_MUL_SRC_VALUE);
  m_children.push_back(&D_DP_BN_CFG);
  m_children.push_back(&D_DP_BN_ALU_CFG);
  m_children.push_back(&D_DP_BN_ALU_SRC_VALUE);
  m_children.push_back(&D_DP_BN_MUL_CFG);
  m_children.push_back(&D_DP_BN_MUL_SRC_VALUE);
  m_children.push_back(&D_DP_EW_CFG);
  m_children.push_back(&D_DP_EW_ALU_CFG);
  m_children.push_back(&D_DP_EW_ALU_SRC_VALUE);
  m_children.push_back(&D_DP_EW_ALU_CVT_OFFSET_VALUE);
  m_children.push_back(&D_DP_EW_ALU_CVT_SCALE_VALUE);
  m_children.push_back(&D_DP_EW_ALU_CVT_TRUNCATE_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CFG);
  m_children.push_back(&D_DP_EW_MUL_SRC_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CVT_OFFSET_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CVT_SCALE_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CVT_TRUNCATE_VALUE);
  m_children.push_back(&D_DP_EW_TRUNCATE_VALUE);
  m_children.push_back(&D_FEATURE_MODE_CFG);
  m_children.push_back(&D_DST_DMA_CFG);
  m_children.push_back(&D_DST_BATCH_STRIDE);
  m_children.push_back(&D_DATA_FORMAT);
  m_children.push_back(&D_CVT_OFFSET);
  m_children.push_back(&D_CVT_SCALE);
  m_children.push_back(&D_CVT_SHIFT);
  m_children.push_back(&D_STATUS);
  m_children.push_back(&D_STATUS_NAN_INPUT_NUM);
  m_children.push_back(&D_STATUS_INF_INPUT_NUM);
  m_children.push_back(&D_STATUS_NAN_OUTPUT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_WDMA_WRITE_STALL);
  m_children.push_back(&D_PERF_LUT_UFLOW);
  m_children.push_back(&D_PERF_LUT_OFLOW);
  m_children.push_back(&D_PERF_OUT_SATURATION);
  m_children.push_back(&D_PERF_LUT_HYBRID);
  m_children.push_back(&D_PERF_LUT_LE_HIT);
  m_children.push_back(&D_PERF_LUT_LO_HIT);
}

void  ordt_rset_NVDLA_SDP::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&S_LUT_ACCESS_CFG);
  m_children.push_back(&S_LUT_ACCESS_DATA);
  m_children.push_back(&S_LUT_CFG);
  m_children.push_back(&S_LUT_INFO);
  m_children.push_back(&S_LUT_LE_START);
  m_children.push_back(&S_LUT_LE_END);
  m_children.push_back(&S_LUT_LO_START);
  m_children.push_back(&S_LUT_LO_END);
  m_children.push_back(&S_LUT_LE_SLOPE_SCALE);
  m_children.push_back(&S_LUT_LE_SLOPE_SHIFT);
  m_children.push_back(&S_LUT_LO_SLOPE_SCALE);
  m_children.push_back(&S_LUT_LO_SLOPE_SHIFT);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_WIDTH);
  m_children.push_back(&D_DATA_CUBE_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_CHANNEL);
  m_children.push_back(&D_DST_BASE_ADDR_LOW);
  m_children.push_back(&D_DST_BASE_ADDR_HIGH);
  m_children.push_back(&D_DST_LINE_STRIDE);
  m_children.push_back(&D_DST_SURFACE_STRIDE);
  m_children.push_back(&D_DP_BS_CFG);
  m_children.push_back(&D_DP_BS_ALU_CFG);
  m_children.push_back(&D_DP_BS_ALU_SRC_VALUE);
  m_children.push_back(&D_DP_BS_MUL_CFG);
  m_children.push_back(&D_DP_BS_MUL_SRC_VALUE);
  m_children.push_back(&D_DP_BN_CFG);
  m_children.push_back(&D_DP_BN_ALU_CFG);
  m_children.push_back(&D_DP_BN_ALU_SRC_VALUE);
  m_children.push_back(&D_DP_BN_MUL_CFG);
  m_children.push_back(&D_DP_BN_MUL_SRC_VALUE);
  m_children.push_back(&D_DP_EW_CFG);
  m_children.push_back(&D_DP_EW_ALU_CFG);
  m_children.push_back(&D_DP_EW_ALU_SRC_VALUE);
  m_children.push_back(&D_DP_EW_ALU_CVT_OFFSET_VALUE);
  m_children.push_back(&D_DP_EW_ALU_CVT_SCALE_VALUE);
  m_children.push_back(&D_DP_EW_ALU_CVT_TRUNCATE_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CFG);
  m_children.push_back(&D_DP_EW_MUL_SRC_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CVT_OFFSET_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CVT_SCALE_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CVT_TRUNCATE_VALUE);
  m_children.push_back(&D_DP_EW_TRUNCATE_VALUE);
  m_children.push_back(&D_FEATURE_MODE_CFG);
  m_children.push_back(&D_DST_DMA_CFG);
  m_children.push_back(&D_DST_BATCH_STRIDE);
  m_children.push_back(&D_DATA_FORMAT);
  m_children.push_back(&D_CVT_OFFSET);
  m_children.push_back(&D_CVT_SCALE);
  m_children.push_back(&D_CVT_SHIFT);
  m_children.push_back(&D_STATUS);
  m_children.push_back(&D_STATUS_NAN_INPUT_NUM);
  m_children.push_back(&D_STATUS_INF_INPUT_NUM);
  m_children.push_back(&D_STATUS_NAN_OUTPUT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_WDMA_WRITE_STALL);
  m_children.push_back(&D_PERF_LUT_UFLOW);
  m_children.push_back(&D_PERF_LUT_OFLOW);
  m_children.push_back(&D_PERF_OUT_SATURATION);
  m_children.push_back(&D_PERF_LUT_HYBRID);
  m_children.push_back(&D_PERF_LUT_LE_HIT);
  m_children.push_back(&D_PERF_LUT_LO_HIT);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_S_STATUS methods ------------------

ordt_rg_NVDLA_PDP_RDMA_S_STATUS::ordt_rg_NVDLA_PDP_RDMA_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_PDP_RDMA_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_S_POINTER methods ------------------

ordt_rg_NVDLA_PDP_RDMA_S_POINTER::ordt_rg_NVDLA_PDP_RDMA_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_PDP_RDMA_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_OP_ENABLE::ordt_rg_NVDLA_PDP_RDMA_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH::ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CUBE_IN_WIDTH(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CUBE_IN_WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CUBE_IN_WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT::ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CUBE_IN_HEIGHT(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CUBE_IN_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CUBE_IN_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL::ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CUBE_IN_CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CUBE_IN_CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CUBE_IN_CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_FLYING_MODE methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_FLYING_MODE::ordt_rg_NVDLA_PDP_RDMA_D_FLYING_MODE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    FLYING_MODE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_FLYING_MODE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_FLYING_MODE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_FLYING_MODE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_FLYING_MODE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  FLYING_MODE.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_FLYING_MODE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_FLYING_MODE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_FLYING_MODE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_FLYING_MODE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  FLYING_MODE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW::ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH::ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE::ordt_rg_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE::ordt_rg_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_SRC_RAM_CFG methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_SRC_RAM_CFG::ordt_rg_NVDLA_PDP_RDMA_D_SRC_RAM_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_SRC_RAM_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_RAM_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_RAM_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_SRC_RAM_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_SRC_RAM_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_RAM_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_SRC_RAM_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_SRC_RAM_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_DATA_FORMAT methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_DATA_FORMAT::ordt_rg_NVDLA_PDP_RDMA_D_DATA_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    INPUT_DATA(0, 2, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_DATA_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_DATA_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  INPUT_DATA.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_DATA_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_DATA_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_DATA_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  INPUT_DATA.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG::ordt_rg_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SPLIT_NUM(0, 8, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SPLIT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SPLIT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG::ordt_rg_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    KERNEL_WIDTH(0, 4, 0x0, r_std, w_std),
    KERNEL_STRIDE_WIDTH(4, 4, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  KERNEL_WIDTH.write(wdata);
  KERNEL_STRIDE_WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  KERNEL_WIDTH.read(rdata);
  KERNEL_STRIDE_WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG::ordt_rg_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_WIDTH(0, 4, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN::ordt_rg_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PARTIAL_WIDTH_IN_FIRST(0, 10, 0x0, r_std, w_std),
    PARTIAL_WIDTH_IN_LAST(10, 10, 0x0, r_std, w_std),
    PARTIAL_WIDTH_IN_MID(20, 10, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PARTIAL_WIDTH_IN_FIRST.write(wdata);
  PARTIAL_WIDTH_IN_LAST.write(wdata);
  PARTIAL_WIDTH_IN_MID.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PARTIAL_WIDTH_IN_FIRST.read(rdata);
  PARTIAL_WIDTH_IN_LAST.read(rdata);
  PARTIAL_WIDTH_IN_MID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_PERF_ENABLE methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_PERF_ENABLE::ordt_rg_NVDLA_PDP_RDMA_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DMA_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_PERF_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_PERF_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_PERF_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_PERF_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DMA_EN.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_PERF_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_PERF_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_PERF_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_PERF_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DMA_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_PERF_READ_STALL methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_PERF_READ_STALL::ordt_rg_NVDLA_PDP_RDMA_D_PERF_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_READ_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_PERF_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_PERF_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_PERF_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_PERF_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_READ_STALL.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_PERF_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_PERF_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_PERF_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_PERF_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_READ_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_RDMA_D_CYA methods ------------------

ordt_rg_NVDLA_PDP_RDMA_D_CYA::ordt_rg_NVDLA_PDP_RDMA_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CYA(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_RDMA_D_CYA::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_RDMA_D_CYA at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_CYA\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_CYA::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CYA.write(wdata);
}

int  ordt_rg_NVDLA_PDP_RDMA_D_CYA::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_RDMA_D_CYA at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_RDMA_D_CYA\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_RDMA_D_CYA::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CYA.read(rdata);
}

// ------------------ ordt_rset_NVDLA_PDP_RDMA methods ------------------

ordt_rset_NVDLA_PDP_RDMA::ordt_rset_NVDLA_PDP_RDMA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    D_OP_ENABLE(_m_startaddress + 0x8, _m_startaddress + 0xb),
    D_DATA_CUBE_IN_WIDTH(_m_startaddress + 0xc, _m_startaddress + 0xf),
    D_DATA_CUBE_IN_HEIGHT(_m_startaddress + 0x10, _m_startaddress + 0x13),
    D_DATA_CUBE_IN_CHANNEL(_m_startaddress + 0x14, _m_startaddress + 0x17),
    D_FLYING_MODE(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    D_SRC_BASE_ADDR_LOW(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    D_SRC_BASE_ADDR_HIGH(_m_startaddress + 0x20, _m_startaddress + 0x23),
    D_SRC_LINE_STRIDE(_m_startaddress + 0x24, _m_startaddress + 0x27),
    D_SRC_SURFACE_STRIDE(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    D_SRC_RAM_CFG(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    D_DATA_FORMAT(_m_startaddress + 0x30, _m_startaddress + 0x33),
    D_OPERATION_MODE_CFG(_m_startaddress + 0x34, _m_startaddress + 0x37),
    D_POOLING_KERNEL_CFG(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    D_POOLING_PADDING_CFG(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    D_PARTIAL_WIDTH_IN(_m_startaddress + 0x40, _m_startaddress + 0x43),
    D_PERF_ENABLE(_m_startaddress + 0x44, _m_startaddress + 0x47),
    D_PERF_READ_STALL(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    D_CYA(_m_startaddress + 0x4c, _m_startaddress + 0x4f) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_IN_WIDTH);
  m_children.push_back(&D_DATA_CUBE_IN_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_IN_CHANNEL);
  m_children.push_back(&D_FLYING_MODE);
  m_children.push_back(&D_SRC_BASE_ADDR_LOW);
  m_children.push_back(&D_SRC_BASE_ADDR_HIGH);
  m_children.push_back(&D_SRC_LINE_STRIDE);
  m_children.push_back(&D_SRC_SURFACE_STRIDE);
  m_children.push_back(&D_SRC_RAM_CFG);
  m_children.push_back(&D_DATA_FORMAT);
  m_children.push_back(&D_OPERATION_MODE_CFG);
  m_children.push_back(&D_POOLING_KERNEL_CFG);
  m_children.push_back(&D_POOLING_PADDING_CFG);
  m_children.push_back(&D_PARTIAL_WIDTH_IN);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_READ_STALL);
  m_children.push_back(&D_CYA);
}

void  ordt_rset_NVDLA_PDP_RDMA::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_IN_WIDTH);
  m_children.push_back(&D_DATA_CUBE_IN_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_IN_CHANNEL);
  m_children.push_back(&D_FLYING_MODE);
  m_children.push_back(&D_SRC_BASE_ADDR_LOW);
  m_children.push_back(&D_SRC_BASE_ADDR_HIGH);
  m_children.push_back(&D_SRC_LINE_STRIDE);
  m_children.push_back(&D_SRC_SURFACE_STRIDE);
  m_children.push_back(&D_SRC_RAM_CFG);
  m_children.push_back(&D_DATA_FORMAT);
  m_children.push_back(&D_OPERATION_MODE_CFG);
  m_children.push_back(&D_POOLING_KERNEL_CFG);
  m_children.push_back(&D_POOLING_PADDING_CFG);
  m_children.push_back(&D_PARTIAL_WIDTH_IN);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_READ_STALL);
  m_children.push_back(&D_CYA);
}

// ------------------ ordt_rg_NVDLA_PDP_S_STATUS methods ------------------

ordt_rg_NVDLA_PDP_S_STATUS::ordt_rg_NVDLA_PDP_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_PDP_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_PDP_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_S_POINTER methods ------------------

ordt_rg_NVDLA_PDP_S_POINTER::ordt_rg_NVDLA_PDP_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_PDP_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_PDP_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_PDP_D_OP_ENABLE::ordt_rg_NVDLA_PDP_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH methods ------------------

ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH::ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CUBE_IN_WIDTH(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CUBE_IN_WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CUBE_IN_WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT methods ------------------

ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT::ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CUBE_IN_HEIGHT(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CUBE_IN_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CUBE_IN_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL methods ------------------

ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL::ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CUBE_IN_CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CUBE_IN_CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CUBE_IN_CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH methods ------------------

ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH::ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CUBE_OUT_WIDTH(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CUBE_OUT_WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CUBE_OUT_WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT methods ------------------

ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT::ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CUBE_OUT_HEIGHT(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CUBE_OUT_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CUBE_OUT_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL methods ------------------

ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL::ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CUBE_OUT_CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CUBE_OUT_CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CUBE_OUT_CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG::ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    POOLING_METHOD(0, 2, 0x0, r_std, w_std),
    FLYING_MODE(4, 1, 0x0, r_std, w_std),
    SPLIT_NUM(8, 8, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  POOLING_METHOD.write(wdata);
  FLYING_MODE.write(wdata);
  SPLIT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  POOLING_METHOD.read(rdata);
  FLYING_MODE.read(rdata);
  SPLIT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO methods ------------------

ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO::ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NAN_TO_ZERO(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NAN_TO_ZERO.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NAN_TO_ZERO.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN methods ------------------

ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN::ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PARTIAL_WIDTH_IN_FIRST(0, 10, 0x0, r_std, w_std),
    PARTIAL_WIDTH_IN_LAST(10, 10, 0x0, r_std, w_std),
    PARTIAL_WIDTH_IN_MID(20, 10, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PARTIAL_WIDTH_IN_FIRST.write(wdata);
  PARTIAL_WIDTH_IN_LAST.write(wdata);
  PARTIAL_WIDTH_IN_MID.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PARTIAL_WIDTH_IN_FIRST.read(rdata);
  PARTIAL_WIDTH_IN_LAST.read(rdata);
  PARTIAL_WIDTH_IN_MID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT methods ------------------

ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT::ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PARTIAL_WIDTH_OUT_FIRST(0, 10, 0x0, r_std, w_std),
    PARTIAL_WIDTH_OUT_LAST(10, 10, 0x0, r_std, w_std),
    PARTIAL_WIDTH_OUT_MID(20, 10, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PARTIAL_WIDTH_OUT_FIRST.write(wdata);
  PARTIAL_WIDTH_OUT_LAST.write(wdata);
  PARTIAL_WIDTH_OUT_MID.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PARTIAL_WIDTH_OUT_FIRST.read(rdata);
  PARTIAL_WIDTH_OUT_LAST.read(rdata);
  PARTIAL_WIDTH_OUT_MID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG::ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    KERNEL_WIDTH(0, 4, 0x0, r_std, w_std),
    KERNEL_HEIGHT(8, 4, 0x0, r_std, w_std),
    KERNEL_STRIDE_WIDTH(16, 4, 0x0, r_std, w_std),
    KERNEL_STRIDE_HEIGHT(20, 4, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  KERNEL_WIDTH.write(wdata);
  KERNEL_HEIGHT.write(wdata);
  KERNEL_STRIDE_WIDTH.write(wdata);
  KERNEL_STRIDE_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  KERNEL_WIDTH.read(rdata);
  KERNEL_HEIGHT.read(rdata);
  KERNEL_STRIDE_WIDTH.read(rdata);
  KERNEL_STRIDE_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH methods ------------------

ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH::ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RECIP_KERNEL_WIDTH(0, 17, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RECIP_KERNEL_WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RECIP_KERNEL_WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT methods ------------------

ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT::ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RECIP_KERNEL_HEIGHT(0, 17, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RECIP_KERNEL_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RECIP_KERNEL_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_LEFT(0, 3, 0x0, r_std, w_std),
    PAD_TOP(4, 3, 0x0, r_std, w_std),
    PAD_RIGHT(8, 3, 0x0, r_std, w_std),
    PAD_BOTTOM(12, 3, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_LEFT.write(wdata);
  PAD_TOP.write(wdata);
  PAD_RIGHT.write(wdata);
  PAD_BOTTOM.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_LEFT.read(rdata);
  PAD_TOP.read(rdata);
  PAD_RIGHT.read(rdata);
  PAD_BOTTOM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE_1X(0, 19, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE_1X.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE_1X.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE_2X(0, 19, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE_2X.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE_2X.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE_3X(0, 19, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE_3X.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE_3X.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE_4X(0, 19, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE_4X.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE_4X.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE_5X(0, 19, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE_5X.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE_5X.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE_6X(0, 19, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE_6X.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE_6X.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG::ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PAD_VALUE_7X(0, 19, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PAD_VALUE_7X.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PAD_VALUE_7X.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW::ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH::ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE::ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE::ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW::ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH::ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE::ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE::ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DST_RAM_CFG methods ------------------

ordt_rg_NVDLA_PDP_D_DST_RAM_CFG::ordt_rg_NVDLA_PDP_D_DST_RAM_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DST_RAM_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DST_RAM_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_RAM_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_RAM_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DST_RAM_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DST_RAM_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DST_RAM_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DST_RAM_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_DATA_FORMAT methods ------------------

ordt_rg_NVDLA_PDP_D_DATA_FORMAT::ordt_rg_NVDLA_PDP_D_DATA_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    INPUT_DATA(0, 2, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_DATA_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_DATA_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  INPUT_DATA.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_DATA_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_DATA_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_DATA_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_DATA_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  INPUT_DATA.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM methods ------------------

ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM::ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    INF_INPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  INF_INPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  INF_INPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM methods ------------------

ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM::ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NAN_INPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NAN_INPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NAN_INPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM methods ------------------

ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM::ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NAN_OUTPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NAN_OUTPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NAN_OUTPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_PERF_ENABLE methods ------------------

ordt_rg_NVDLA_PDP_D_PERF_ENABLE::ordt_rg_NVDLA_PDP_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DMA_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_PERF_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_PERF_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PERF_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PERF_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DMA_EN.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_PERF_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_PERF_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PERF_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PERF_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DMA_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL methods ------------------

ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL::ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_WRITE_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_WRITE_STALL.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_WRITE_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_PDP_D_CYA methods ------------------

ordt_rg_NVDLA_PDP_D_CYA::ordt_rg_NVDLA_PDP_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CYA(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_PDP_D_CYA::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_PDP_D_CYA at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_CYA\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_CYA::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CYA.write(wdata);
}

int  ordt_rg_NVDLA_PDP_D_CYA::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_PDP_D_CYA at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_PDP_D_CYA\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_PDP_D_CYA::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CYA.read(rdata);
}

// ------------------ ordt_rset_NVDLA_PDP methods ------------------

ordt_rset_NVDLA_PDP::ordt_rset_NVDLA_PDP(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    D_OP_ENABLE(_m_startaddress + 0x8, _m_startaddress + 0xb),
    D_DATA_CUBE_IN_WIDTH(_m_startaddress + 0xc, _m_startaddress + 0xf),
    D_DATA_CUBE_IN_HEIGHT(_m_startaddress + 0x10, _m_startaddress + 0x13),
    D_DATA_CUBE_IN_CHANNEL(_m_startaddress + 0x14, _m_startaddress + 0x17),
    D_DATA_CUBE_OUT_WIDTH(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    D_DATA_CUBE_OUT_HEIGHT(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    D_DATA_CUBE_OUT_CHANNEL(_m_startaddress + 0x20, _m_startaddress + 0x23),
    D_OPERATION_MODE_CFG(_m_startaddress + 0x24, _m_startaddress + 0x27),
    D_NAN_FLUSH_TO_ZERO(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    D_PARTIAL_WIDTH_IN(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    D_PARTIAL_WIDTH_OUT(_m_startaddress + 0x30, _m_startaddress + 0x33),
    D_POOLING_KERNEL_CFG(_m_startaddress + 0x34, _m_startaddress + 0x37),
    D_RECIP_KERNEL_WIDTH(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    D_RECIP_KERNEL_HEIGHT(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    D_POOLING_PADDING_CFG(_m_startaddress + 0x40, _m_startaddress + 0x43),
    D_POOLING_PADDING_VALUE_1_CFG(_m_startaddress + 0x44, _m_startaddress + 0x47),
    D_POOLING_PADDING_VALUE_2_CFG(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    D_POOLING_PADDING_VALUE_3_CFG(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    D_POOLING_PADDING_VALUE_4_CFG(_m_startaddress + 0x50, _m_startaddress + 0x53),
    D_POOLING_PADDING_VALUE_5_CFG(_m_startaddress + 0x54, _m_startaddress + 0x57),
    D_POOLING_PADDING_VALUE_6_CFG(_m_startaddress + 0x58, _m_startaddress + 0x5b),
    D_POOLING_PADDING_VALUE_7_CFG(_m_startaddress + 0x5c, _m_startaddress + 0x5f),
    D_SRC_BASE_ADDR_LOW(_m_startaddress + 0x60, _m_startaddress + 0x63),
    D_SRC_BASE_ADDR_HIGH(_m_startaddress + 0x64, _m_startaddress + 0x67),
    D_SRC_LINE_STRIDE(_m_startaddress + 0x68, _m_startaddress + 0x6b),
    D_SRC_SURFACE_STRIDE(_m_startaddress + 0x6c, _m_startaddress + 0x6f),
    D_DST_BASE_ADDR_LOW(_m_startaddress + 0x70, _m_startaddress + 0x73),
    D_DST_BASE_ADDR_HIGH(_m_startaddress + 0x74, _m_startaddress + 0x77),
    D_DST_LINE_STRIDE(_m_startaddress + 0x78, _m_startaddress + 0x7b),
    D_DST_SURFACE_STRIDE(_m_startaddress + 0x7c, _m_startaddress + 0x7f),
    D_DST_RAM_CFG(_m_startaddress + 0x80, _m_startaddress + 0x83),
    D_DATA_FORMAT(_m_startaddress + 0x84, _m_startaddress + 0x87),
    D_INF_INPUT_NUM(_m_startaddress + 0x88, _m_startaddress + 0x8b),
    D_NAN_INPUT_NUM(_m_startaddress + 0x8c, _m_startaddress + 0x8f),
    D_NAN_OUTPUT_NUM(_m_startaddress + 0x90, _m_startaddress + 0x93),
    D_PERF_ENABLE(_m_startaddress + 0x94, _m_startaddress + 0x97),
    D_PERF_WRITE_STALL(_m_startaddress + 0x98, _m_startaddress + 0x9b),
    D_CYA(_m_startaddress + 0x9c, _m_startaddress + 0x9f) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_IN_WIDTH);
  m_children.push_back(&D_DATA_CUBE_IN_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_IN_CHANNEL);
  m_children.push_back(&D_DATA_CUBE_OUT_WIDTH);
  m_children.push_back(&D_DATA_CUBE_OUT_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_OUT_CHANNEL);
  m_children.push_back(&D_OPERATION_MODE_CFG);
  m_children.push_back(&D_NAN_FLUSH_TO_ZERO);
  m_children.push_back(&D_PARTIAL_WIDTH_IN);
  m_children.push_back(&D_PARTIAL_WIDTH_OUT);
  m_children.push_back(&D_POOLING_KERNEL_CFG);
  m_children.push_back(&D_RECIP_KERNEL_WIDTH);
  m_children.push_back(&D_RECIP_KERNEL_HEIGHT);
  m_children.push_back(&D_POOLING_PADDING_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_1_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_2_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_3_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_4_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_5_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_6_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_7_CFG);
  m_children.push_back(&D_SRC_BASE_ADDR_LOW);
  m_children.push_back(&D_SRC_BASE_ADDR_HIGH);
  m_children.push_back(&D_SRC_LINE_STRIDE);
  m_children.push_back(&D_SRC_SURFACE_STRIDE);
  m_children.push_back(&D_DST_BASE_ADDR_LOW);
  m_children.push_back(&D_DST_BASE_ADDR_HIGH);
  m_children.push_back(&D_DST_LINE_STRIDE);
  m_children.push_back(&D_DST_SURFACE_STRIDE);
  m_children.push_back(&D_DST_RAM_CFG);
  m_children.push_back(&D_DATA_FORMAT);
  m_children.push_back(&D_INF_INPUT_NUM);
  m_children.push_back(&D_NAN_INPUT_NUM);
  m_children.push_back(&D_NAN_OUTPUT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_WRITE_STALL);
  m_children.push_back(&D_CYA);
}

void  ordt_rset_NVDLA_PDP::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_IN_WIDTH);
  m_children.push_back(&D_DATA_CUBE_IN_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_IN_CHANNEL);
  m_children.push_back(&D_DATA_CUBE_OUT_WIDTH);
  m_children.push_back(&D_DATA_CUBE_OUT_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_OUT_CHANNEL);
  m_children.push_back(&D_OPERATION_MODE_CFG);
  m_children.push_back(&D_NAN_FLUSH_TO_ZERO);
  m_children.push_back(&D_PARTIAL_WIDTH_IN);
  m_children.push_back(&D_PARTIAL_WIDTH_OUT);
  m_children.push_back(&D_POOLING_KERNEL_CFG);
  m_children.push_back(&D_RECIP_KERNEL_WIDTH);
  m_children.push_back(&D_RECIP_KERNEL_HEIGHT);
  m_children.push_back(&D_POOLING_PADDING_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_1_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_2_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_3_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_4_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_5_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_6_CFG);
  m_children.push_back(&D_POOLING_PADDING_VALUE_7_CFG);
  m_children.push_back(&D_SRC_BASE_ADDR_LOW);
  m_children.push_back(&D_SRC_BASE_ADDR_HIGH);
  m_children.push_back(&D_SRC_LINE_STRIDE);
  m_children.push_back(&D_SRC_SURFACE_STRIDE);
  m_children.push_back(&D_DST_BASE_ADDR_LOW);
  m_children.push_back(&D_DST_BASE_ADDR_HIGH);
  m_children.push_back(&D_DST_LINE_STRIDE);
  m_children.push_back(&D_DST_SURFACE_STRIDE);
  m_children.push_back(&D_DST_RAM_CFG);
  m_children.push_back(&D_DATA_FORMAT);
  m_children.push_back(&D_INF_INPUT_NUM);
  m_children.push_back(&D_NAN_INPUT_NUM);
  m_children.push_back(&D_NAN_OUTPUT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_WRITE_STALL);
  m_children.push_back(&D_CYA);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_S_STATUS methods ------------------

ordt_rg_NVDLA_CDP_RDMA_S_STATUS::ordt_rg_NVDLA_CDP_RDMA_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_RDMA_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_S_POINTER methods ------------------

ordt_rg_NVDLA_CDP_RDMA_S_POINTER::ordt_rg_NVDLA_CDP_RDMA_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_RDMA_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_CDP_RDMA_D_OP_ENABLE::ordt_rg_NVDLA_CDP_RDMA_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_RDMA_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH methods ------------------

ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH::ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WIDTH(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT methods ------------------

ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT::ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    HEIGHT(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL methods ------------------

ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL::ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW::ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH::ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE::ordt_rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE::ordt_rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG methods ------------------

ordt_rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG::ordt_rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN methods ------------------

ordt_rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN::ordt_rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_COMPRESSION_EN(0, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_COMPRESSION_EN.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_COMPRESSION_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_D_OPERATION_MODE methods ------------------

ordt_rg_NVDLA_CDP_RDMA_D_OPERATION_MODE::ordt_rg_NVDLA_CDP_RDMA_D_OPERATION_MODE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OPERATION_MODE(0, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_RDMA_D_OPERATION_MODE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_D_OPERATION_MODE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_OPERATION_MODE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_OPERATION_MODE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OPERATION_MODE.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_D_OPERATION_MODE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_D_OPERATION_MODE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_OPERATION_MODE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_OPERATION_MODE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OPERATION_MODE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_D_DATA_FORMAT methods ------------------

ordt_rg_NVDLA_CDP_RDMA_D_DATA_FORMAT::ordt_rg_NVDLA_CDP_RDMA_D_DATA_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    INPUT_DATA(0, 2, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_RDMA_D_DATA_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_DATA_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  INPUT_DATA.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_D_DATA_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_DATA_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_DATA_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  INPUT_DATA.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_D_PERF_ENABLE methods ------------------

ordt_rg_NVDLA_CDP_RDMA_D_PERF_ENABLE::ordt_rg_NVDLA_CDP_RDMA_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DMA_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_RDMA_D_PERF_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_D_PERF_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_PERF_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_PERF_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DMA_EN.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_D_PERF_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_D_PERF_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_PERF_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_PERF_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DMA_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL methods ------------------

ordt_rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL::ordt_rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_READ_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_READ_STALL.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_READ_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_RDMA_D_CYA methods ------------------

ordt_rg_NVDLA_CDP_RDMA_D_CYA::ordt_rg_NVDLA_CDP_RDMA_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CYA(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_RDMA_D_CYA::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_RDMA_D_CYA at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_CYA\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_CYA::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CYA.write(wdata);
}

int  ordt_rg_NVDLA_CDP_RDMA_D_CYA::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_RDMA_D_CYA at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_RDMA_D_CYA\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_RDMA_D_CYA::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CYA.read(rdata);
}

// ------------------ ordt_rset_NVDLA_CDP_RDMA methods ------------------

ordt_rset_NVDLA_CDP_RDMA::ordt_rset_NVDLA_CDP_RDMA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    D_OP_ENABLE(_m_startaddress + 0x8, _m_startaddress + 0xb),
    D_DATA_CUBE_WIDTH(_m_startaddress + 0xc, _m_startaddress + 0xf),
    D_DATA_CUBE_HEIGHT(_m_startaddress + 0x10, _m_startaddress + 0x13),
    D_DATA_CUBE_CHANNEL(_m_startaddress + 0x14, _m_startaddress + 0x17),
    D_SRC_BASE_ADDR_LOW(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    D_SRC_BASE_ADDR_HIGH(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    D_SRC_LINE_STRIDE(_m_startaddress + 0x20, _m_startaddress + 0x23),
    D_SRC_SURFACE_STRIDE(_m_startaddress + 0x24, _m_startaddress + 0x27),
    D_SRC_DMA_CFG(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    D_SRC_COMPRESSION_EN(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    D_OPERATION_MODE(_m_startaddress + 0x30, _m_startaddress + 0x33),
    D_DATA_FORMAT(_m_startaddress + 0x34, _m_startaddress + 0x37),
    D_PERF_ENABLE(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    D_PERF_READ_STALL(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    D_CYA(_m_startaddress + 0x40, _m_startaddress + 0x43) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_WIDTH);
  m_children.push_back(&D_DATA_CUBE_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_CHANNEL);
  m_children.push_back(&D_SRC_BASE_ADDR_LOW);
  m_children.push_back(&D_SRC_BASE_ADDR_HIGH);
  m_children.push_back(&D_SRC_LINE_STRIDE);
  m_children.push_back(&D_SRC_SURFACE_STRIDE);
  m_children.push_back(&D_SRC_DMA_CFG);
  m_children.push_back(&D_SRC_COMPRESSION_EN);
  m_children.push_back(&D_OPERATION_MODE);
  m_children.push_back(&D_DATA_FORMAT);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_READ_STALL);
  m_children.push_back(&D_CYA);
}

void  ordt_rset_NVDLA_CDP_RDMA::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_WIDTH);
  m_children.push_back(&D_DATA_CUBE_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_CHANNEL);
  m_children.push_back(&D_SRC_BASE_ADDR_LOW);
  m_children.push_back(&D_SRC_BASE_ADDR_HIGH);
  m_children.push_back(&D_SRC_LINE_STRIDE);
  m_children.push_back(&D_SRC_SURFACE_STRIDE);
  m_children.push_back(&D_SRC_DMA_CFG);
  m_children.push_back(&D_SRC_COMPRESSION_EN);
  m_children.push_back(&D_OPERATION_MODE);
  m_children.push_back(&D_DATA_FORMAT);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_READ_STALL);
  m_children.push_back(&D_CYA);
}

// ------------------ ordt_rg_NVDLA_CDP_S_STATUS methods ------------------

ordt_rg_NVDLA_CDP_S_STATUS::ordt_rg_NVDLA_CDP_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_POINTER methods ------------------

ordt_rg_NVDLA_CDP_S_POINTER::ordt_rg_NVDLA_CDP_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_ACCESS_CFG methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_ACCESS_CFG::ordt_rg_NVDLA_CDP_S_LUT_ACCESS_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_ADDR(0, 10, 0x0, r_std, w_std),
    LUT_TABLE_ID(16, 1, 0x0, r_std, w_std),
    LUT_ACCESS_TYPE(17, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_ACCESS_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_ACCESS_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_ACCESS_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_ACCESS_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_ADDR.write(wdata);
  LUT_TABLE_ID.write(wdata);
  LUT_ACCESS_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_ACCESS_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_ACCESS_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_ACCESS_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_ACCESS_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_ADDR.read(rdata);
  LUT_TABLE_ID.read(rdata);
  LUT_ACCESS_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_ACCESS_DATA methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_ACCESS_DATA::ordt_rg_NVDLA_CDP_S_LUT_ACCESS_DATA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_DATA(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_ACCESS_DATA::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_ACCESS_DATA at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_ACCESS_DATA\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_ACCESS_DATA::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_DATA.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_ACCESS_DATA::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_ACCESS_DATA at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_ACCESS_DATA\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_ACCESS_DATA::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_DATA.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_CFG methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_CFG::ordt_rg_NVDLA_CDP_S_LUT_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_FUNCTION(0, 1, 0x0, r_std, w_std),
    LUT_UFLOW_PRIORITY(4, 1, 0x0, r_std, w_std),
    LUT_OFLOW_PRIORITY(5, 1, 0x0, r_std, w_std),
    LUT_HYBRID_PRIORITY(6, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_FUNCTION.write(wdata);
  LUT_UFLOW_PRIORITY.write(wdata);
  LUT_OFLOW_PRIORITY.write(wdata);
  LUT_HYBRID_PRIORITY.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_FUNCTION.read(rdata);
  LUT_UFLOW_PRIORITY.read(rdata);
  LUT_OFLOW_PRIORITY.read(rdata);
  LUT_HYBRID_PRIORITY.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_INFO methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_INFO::ordt_rg_NVDLA_CDP_S_LUT_INFO(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_INDEX_OFFSET(0, 8, 0x0, r_std, w_std),
    LUT_LE_INDEX_SELECT(8, 8, 0x0, r_std, w_std),
    LUT_LO_INDEX_SELECT(16, 8, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_INFO::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_INFO at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_INFO\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_INFO::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_INDEX_OFFSET.write(wdata);
  LUT_LE_INDEX_SELECT.write(wdata);
  LUT_LO_INDEX_SELECT.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_INFO::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_INFO at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_INFO\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_INFO::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_INDEX_OFFSET.read(rdata);
  LUT_LE_INDEX_SELECT.read(rdata);
  LUT_LO_INDEX_SELECT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_LE_START_LOW methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_LE_START_LOW::ordt_rg_NVDLA_CDP_S_LUT_LE_START_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_START_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_LE_START_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_LE_START_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LE_START_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LE_START_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_START_LOW.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_LE_START_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_LE_START_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LE_START_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LE_START_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_START_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_LE_START_HIGH methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_LE_START_HIGH::ordt_rg_NVDLA_CDP_S_LUT_LE_START_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_START_HIGH(0, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_LE_START_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_LE_START_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LE_START_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LE_START_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_START_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_LE_START_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_LE_START_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LE_START_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LE_START_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_START_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_LE_END_LOW methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_LE_END_LOW::ordt_rg_NVDLA_CDP_S_LUT_LE_END_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_END_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_LE_END_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_LE_END_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LE_END_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LE_END_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_END_LOW.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_LE_END_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_LE_END_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LE_END_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LE_END_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_END_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_LE_END_HIGH methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_LE_END_HIGH::ordt_rg_NVDLA_CDP_S_LUT_LE_END_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_END_HIGH(0, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_LE_END_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_LE_END_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LE_END_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LE_END_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_END_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_LE_END_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_LE_END_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LE_END_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LE_END_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_END_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_LO_START_LOW methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_LO_START_LOW::ordt_rg_NVDLA_CDP_S_LUT_LO_START_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_START_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_LO_START_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_LO_START_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LO_START_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LO_START_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_START_LOW.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_LO_START_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_LO_START_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LO_START_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LO_START_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_START_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_LO_START_HIGH methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_LO_START_HIGH::ordt_rg_NVDLA_CDP_S_LUT_LO_START_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_START_HIGH(0, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_LO_START_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_LO_START_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LO_START_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LO_START_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_START_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_LO_START_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_LO_START_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LO_START_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LO_START_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_START_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_LO_END_LOW methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_LO_END_LOW::ordt_rg_NVDLA_CDP_S_LUT_LO_END_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_END_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_LO_END_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_LO_END_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LO_END_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LO_END_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_END_LOW.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_LO_END_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_LO_END_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LO_END_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LO_END_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_END_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_LO_END_HIGH methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_LO_END_HIGH::ordt_rg_NVDLA_CDP_S_LUT_LO_END_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_END_HIGH(0, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_LO_END_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_LO_END_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LO_END_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LO_END_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_END_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_LO_END_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_LO_END_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LO_END_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LO_END_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_END_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE::ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_SLOPE_UFLOW_SCALE(0, 16, 0x0, r_std, w_std),
    LUT_LE_SLOPE_OFLOW_SCALE(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_SLOPE_UFLOW_SCALE.write(wdata);
  LUT_LE_SLOPE_OFLOW_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_SLOPE_UFLOW_SCALE.read(rdata);
  LUT_LE_SLOPE_OFLOW_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT::ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_SLOPE_UFLOW_SHIFT(0, 5, 0x0, r_std, w_std),
    LUT_LE_SLOPE_OFLOW_SHIFT(5, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_SLOPE_UFLOW_SHIFT.write(wdata);
  LUT_LE_SLOPE_OFLOW_SHIFT.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_SLOPE_UFLOW_SHIFT.read(rdata);
  LUT_LE_SLOPE_OFLOW_SHIFT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE::ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_SLOPE_UFLOW_SCALE(0, 16, 0x0, r_std, w_std),
    LUT_LO_SLOPE_OFLOW_SCALE(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_SLOPE_UFLOW_SCALE.write(wdata);
  LUT_LO_SLOPE_OFLOW_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_SLOPE_UFLOW_SCALE.read(rdata);
  LUT_LO_SLOPE_OFLOW_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT methods ------------------

ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT::ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_SLOPE_UFLOW_SHIFT(0, 5, 0x0, r_std, w_std),
    LUT_LO_SLOPE_OFLOW_SHIFT(5, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_SLOPE_UFLOW_SHIFT.write(wdata);
  LUT_LO_SLOPE_OFLOW_SHIFT.write(wdata);
}

int  ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_SLOPE_UFLOW_SHIFT.read(rdata);
  LUT_LO_SLOPE_OFLOW_SHIFT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_CDP_D_OP_ENABLE::ordt_rg_NVDLA_CDP_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_FUNC_BYPASS methods ------------------

ordt_rg_NVDLA_CDP_D_FUNC_BYPASS::ordt_rg_NVDLA_CDP_D_FUNC_BYPASS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SQSUM_BYPASS(0, 1, 0x0, r_std, w_std),
    MUL_BYPASS(1, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_FUNC_BYPASS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_FUNC_BYPASS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_FUNC_BYPASS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_FUNC_BYPASS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SQSUM_BYPASS.write(wdata);
  MUL_BYPASS.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_FUNC_BYPASS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_FUNC_BYPASS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_FUNC_BYPASS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_FUNC_BYPASS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SQSUM_BYPASS.read(rdata);
  MUL_BYPASS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_LOW::ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_HIGH::ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_DST_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_CDP_D_DST_LINE_STRIDE::ordt_rg_NVDLA_CDP_D_DST_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_DST_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_DST_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DST_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DST_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_DST_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_DST_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DST_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DST_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_DST_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_CDP_D_DST_SURFACE_STRIDE::ordt_rg_NVDLA_CDP_D_DST_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_DST_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_DST_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DST_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DST_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_DST_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_DST_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DST_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DST_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_DST_DMA_CFG methods ------------------

ordt_rg_NVDLA_CDP_D_DST_DMA_CFG::ordt_rg_NVDLA_CDP_D_DST_DMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_DST_DMA_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_DST_DMA_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DST_DMA_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DST_DMA_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_DST_DMA_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_DST_DMA_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DST_DMA_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DST_DMA_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_DST_COMPRESSION_EN methods ------------------

ordt_rg_NVDLA_CDP_D_DST_COMPRESSION_EN::ordt_rg_NVDLA_CDP_D_DST_COMPRESSION_EN(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_COMPRESSION_EN(0, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_D_DST_COMPRESSION_EN::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_DST_COMPRESSION_EN at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DST_COMPRESSION_EN\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DST_COMPRESSION_EN::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_COMPRESSION_EN.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_DST_COMPRESSION_EN::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_DST_COMPRESSION_EN at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DST_COMPRESSION_EN\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DST_COMPRESSION_EN::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_COMPRESSION_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_DATA_FORMAT methods ------------------

ordt_rg_NVDLA_CDP_D_DATA_FORMAT::ordt_rg_NVDLA_CDP_D_DATA_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    INPUT_DATA_TYPE(0, 2, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_DATA_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_DATA_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DATA_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DATA_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  INPUT_DATA_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_DATA_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_DATA_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DATA_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DATA_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  INPUT_DATA_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO methods ------------------

ordt_rg_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO::ordt_rg_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NAN_TO_ZERO(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NAN_TO_ZERO.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NAN_TO_ZERO.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_LRN_CFG methods ------------------

ordt_rg_NVDLA_CDP_D_LRN_CFG::ordt_rg_NVDLA_CDP_D_LRN_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NORMALZ_LEN(0, 2, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_LRN_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_LRN_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_LRN_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_LRN_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NORMALZ_LEN.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_LRN_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_LRN_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_LRN_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_LRN_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NORMALZ_LEN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_DATIN_OFFSET methods ------------------

ordt_rg_NVDLA_CDP_D_DATIN_OFFSET::ordt_rg_NVDLA_CDP_D_DATIN_OFFSET(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATIN_OFFSET(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_DATIN_OFFSET::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_DATIN_OFFSET at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DATIN_OFFSET\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DATIN_OFFSET::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATIN_OFFSET.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_DATIN_OFFSET::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_DATIN_OFFSET at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DATIN_OFFSET\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DATIN_OFFSET::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATIN_OFFSET.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_DATIN_SCALE methods ------------------

ordt_rg_NVDLA_CDP_D_DATIN_SCALE::ordt_rg_NVDLA_CDP_D_DATIN_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATIN_SCALE(0, 16, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_DATIN_SCALE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_DATIN_SCALE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DATIN_SCALE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DATIN_SCALE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATIN_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_DATIN_SCALE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_DATIN_SCALE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DATIN_SCALE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DATIN_SCALE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATIN_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_DATIN_SHIFTER methods ------------------

ordt_rg_NVDLA_CDP_D_DATIN_SHIFTER::ordt_rg_NVDLA_CDP_D_DATIN_SHIFTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATIN_SHIFTER(0, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_DATIN_SHIFTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_DATIN_SHIFTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DATIN_SHIFTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DATIN_SHIFTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATIN_SHIFTER.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_DATIN_SHIFTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_DATIN_SHIFTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DATIN_SHIFTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DATIN_SHIFTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATIN_SHIFTER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_DATOUT_OFFSET methods ------------------

ordt_rg_NVDLA_CDP_D_DATOUT_OFFSET::ordt_rg_NVDLA_CDP_D_DATOUT_OFFSET(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATOUT_OFFSET(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_DATOUT_OFFSET::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_DATOUT_OFFSET at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DATOUT_OFFSET\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DATOUT_OFFSET::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATOUT_OFFSET.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_DATOUT_OFFSET::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_DATOUT_OFFSET at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DATOUT_OFFSET\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DATOUT_OFFSET::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATOUT_OFFSET.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_DATOUT_SCALE methods ------------------

ordt_rg_NVDLA_CDP_D_DATOUT_SCALE::ordt_rg_NVDLA_CDP_D_DATOUT_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATOUT_SCALE(0, 16, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_DATOUT_SCALE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_DATOUT_SCALE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DATOUT_SCALE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DATOUT_SCALE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATOUT_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_DATOUT_SCALE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_DATOUT_SCALE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DATOUT_SCALE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DATOUT_SCALE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATOUT_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_DATOUT_SHIFTER methods ------------------

ordt_rg_NVDLA_CDP_D_DATOUT_SHIFTER::ordt_rg_NVDLA_CDP_D_DATOUT_SHIFTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATOUT_SHIFTER(0, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_DATOUT_SHIFTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_DATOUT_SHIFTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DATOUT_SHIFTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DATOUT_SHIFTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATOUT_SHIFTER.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_DATOUT_SHIFTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_DATOUT_SHIFTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_DATOUT_SHIFTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_DATOUT_SHIFTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATOUT_SHIFTER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_NAN_INPUT_NUM methods ------------------

ordt_rg_NVDLA_CDP_D_NAN_INPUT_NUM::ordt_rg_NVDLA_CDP_D_NAN_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NAN_INPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_D_NAN_INPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_NAN_INPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_NAN_INPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_NAN_INPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NAN_INPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_NAN_INPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_NAN_INPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_NAN_INPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_NAN_INPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NAN_INPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_INF_INPUT_NUM methods ------------------

ordt_rg_NVDLA_CDP_D_INF_INPUT_NUM::ordt_rg_NVDLA_CDP_D_INF_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    INF_INPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_D_INF_INPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_INF_INPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_INF_INPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_INF_INPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  INF_INPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_INF_INPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_INF_INPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_INF_INPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_INF_INPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  INF_INPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_NAN_OUTPUT_NUM methods ------------------

ordt_rg_NVDLA_CDP_D_NAN_OUTPUT_NUM::ordt_rg_NVDLA_CDP_D_NAN_OUTPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NAN_OUTPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_D_NAN_OUTPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_NAN_OUTPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_NAN_OUTPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_NAN_OUTPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NAN_OUTPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_NAN_OUTPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_NAN_OUTPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_NAN_OUTPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_NAN_OUTPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NAN_OUTPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_OUT_SATURATION methods ------------------

ordt_rg_NVDLA_CDP_D_OUT_SATURATION::ordt_rg_NVDLA_CDP_D_OUT_SATURATION(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OUT_SATURATION(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_D_OUT_SATURATION::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_OUT_SATURATION at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_OUT_SATURATION\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_OUT_SATURATION::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OUT_SATURATION.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_OUT_SATURATION::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_OUT_SATURATION at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_OUT_SATURATION\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_OUT_SATURATION::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OUT_SATURATION.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_PERF_ENABLE methods ------------------

ordt_rg_NVDLA_CDP_D_PERF_ENABLE::ordt_rg_NVDLA_CDP_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DMA_EN(0, 1, 0x0, r_std, w_std),
    LUT_EN(1, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_PERF_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_PERF_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_PERF_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_PERF_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DMA_EN.write(wdata);
  LUT_EN.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_PERF_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_PERF_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_PERF_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_PERF_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DMA_EN.read(rdata);
  LUT_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_PERF_WRITE_STALL methods ------------------

ordt_rg_NVDLA_CDP_D_PERF_WRITE_STALL::ordt_rg_NVDLA_CDP_D_PERF_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_WRITE_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_D_PERF_WRITE_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_PERF_WRITE_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_PERF_WRITE_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_PERF_WRITE_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_WRITE_STALL.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_PERF_WRITE_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_PERF_WRITE_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_PERF_WRITE_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_PERF_WRITE_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_WRITE_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_PERF_LUT_UFLOW methods ------------------

ordt_rg_NVDLA_CDP_D_PERF_LUT_UFLOW::ordt_rg_NVDLA_CDP_D_PERF_LUT_UFLOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_LUT_UFLOW(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_D_PERF_LUT_UFLOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_PERF_LUT_UFLOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_PERF_LUT_UFLOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_PERF_LUT_UFLOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_LUT_UFLOW.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_PERF_LUT_UFLOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_PERF_LUT_UFLOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_PERF_LUT_UFLOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_PERF_LUT_UFLOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_LUT_UFLOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_PERF_LUT_OFLOW methods ------------------

ordt_rg_NVDLA_CDP_D_PERF_LUT_OFLOW::ordt_rg_NVDLA_CDP_D_PERF_LUT_OFLOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_LUT_OFLOW(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_D_PERF_LUT_OFLOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_PERF_LUT_OFLOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_PERF_LUT_OFLOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_PERF_LUT_OFLOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_LUT_OFLOW.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_PERF_LUT_OFLOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_PERF_LUT_OFLOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_PERF_LUT_OFLOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_PERF_LUT_OFLOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_LUT_OFLOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_PERF_LUT_HYBRID methods ------------------

ordt_rg_NVDLA_CDP_D_PERF_LUT_HYBRID::ordt_rg_NVDLA_CDP_D_PERF_LUT_HYBRID(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_LUT_HYBRID(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_D_PERF_LUT_HYBRID::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_PERF_LUT_HYBRID at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_PERF_LUT_HYBRID\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_PERF_LUT_HYBRID::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_LUT_HYBRID.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_PERF_LUT_HYBRID::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_PERF_LUT_HYBRID at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_PERF_LUT_HYBRID\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_PERF_LUT_HYBRID::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_LUT_HYBRID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_PERF_LUT_LE_HIT methods ------------------

ordt_rg_NVDLA_CDP_D_PERF_LUT_LE_HIT::ordt_rg_NVDLA_CDP_D_PERF_LUT_LE_HIT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_LUT_LE_HIT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_D_PERF_LUT_LE_HIT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_PERF_LUT_LE_HIT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_PERF_LUT_LE_HIT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_PERF_LUT_LE_HIT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_LUT_LE_HIT.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_PERF_LUT_LE_HIT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_PERF_LUT_LE_HIT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_PERF_LUT_LE_HIT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_PERF_LUT_LE_HIT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_LUT_LE_HIT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_PERF_LUT_LO_HIT methods ------------------

ordt_rg_NVDLA_CDP_D_PERF_LUT_LO_HIT::ordt_rg_NVDLA_CDP_D_PERF_LUT_LO_HIT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_LUT_LO_HIT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_CDP_D_PERF_LUT_LO_HIT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_PERF_LUT_LO_HIT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_PERF_LUT_LO_HIT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_PERF_LUT_LO_HIT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_LUT_LO_HIT.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_PERF_LUT_LO_HIT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_PERF_LUT_LO_HIT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_PERF_LUT_LO_HIT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_PERF_LUT_LO_HIT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_LUT_LO_HIT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CDP_D_CYA methods ------------------

ordt_rg_NVDLA_CDP_D_CYA::ordt_rg_NVDLA_CDP_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CYA(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_CDP_D_CYA::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CDP_D_CYA at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_CYA\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_CYA::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CYA.write(wdata);
}

int  ordt_rg_NVDLA_CDP_D_CYA::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CDP_D_CYA at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CDP_D_CYA\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CDP_D_CYA::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CYA.read(rdata);
}

// ------------------ ordt_rset_NVDLA_CDP methods ------------------

ordt_rset_NVDLA_CDP::ordt_rset_NVDLA_CDP(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    S_LUT_ACCESS_CFG(_m_startaddress + 0x8, _m_startaddress + 0xb),
    S_LUT_ACCESS_DATA(_m_startaddress + 0xc, _m_startaddress + 0xf),
    S_LUT_CFG(_m_startaddress + 0x10, _m_startaddress + 0x13),
    S_LUT_INFO(_m_startaddress + 0x14, _m_startaddress + 0x17),
    S_LUT_LE_START_LOW(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    S_LUT_LE_START_HIGH(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    S_LUT_LE_END_LOW(_m_startaddress + 0x20, _m_startaddress + 0x23),
    S_LUT_LE_END_HIGH(_m_startaddress + 0x24, _m_startaddress + 0x27),
    S_LUT_LO_START_LOW(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    S_LUT_LO_START_HIGH(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    S_LUT_LO_END_LOW(_m_startaddress + 0x30, _m_startaddress + 0x33),
    S_LUT_LO_END_HIGH(_m_startaddress + 0x34, _m_startaddress + 0x37),
    S_LUT_LE_SLOPE_SCALE(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    S_LUT_LE_SLOPE_SHIFT(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    S_LUT_LO_SLOPE_SCALE(_m_startaddress + 0x40, _m_startaddress + 0x43),
    S_LUT_LO_SLOPE_SHIFT(_m_startaddress + 0x44, _m_startaddress + 0x47),
    D_OP_ENABLE(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    D_FUNC_BYPASS(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    D_DST_BASE_ADDR_LOW(_m_startaddress + 0x50, _m_startaddress + 0x53),
    D_DST_BASE_ADDR_HIGH(_m_startaddress + 0x54, _m_startaddress + 0x57),
    D_DST_LINE_STRIDE(_m_startaddress + 0x58, _m_startaddress + 0x5b),
    D_DST_SURFACE_STRIDE(_m_startaddress + 0x5c, _m_startaddress + 0x5f),
    D_DST_DMA_CFG(_m_startaddress + 0x60, _m_startaddress + 0x63),
    D_DST_COMPRESSION_EN(_m_startaddress + 0x64, _m_startaddress + 0x67),
    D_DATA_FORMAT(_m_startaddress + 0x68, _m_startaddress + 0x6b),
    D_NAN_FLUSH_TO_ZERO(_m_startaddress + 0x6c, _m_startaddress + 0x6f),
    D_LRN_CFG(_m_startaddress + 0x70, _m_startaddress + 0x73),
    D_DATIN_OFFSET(_m_startaddress + 0x74, _m_startaddress + 0x77),
    D_DATIN_SCALE(_m_startaddress + 0x78, _m_startaddress + 0x7b),
    D_DATIN_SHIFTER(_m_startaddress + 0x7c, _m_startaddress + 0x7f),
    D_DATOUT_OFFSET(_m_startaddress + 0x80, _m_startaddress + 0x83),
    D_DATOUT_SCALE(_m_startaddress + 0x84, _m_startaddress + 0x87),
    D_DATOUT_SHIFTER(_m_startaddress + 0x88, _m_startaddress + 0x8b),
    D_NAN_INPUT_NUM(_m_startaddress + 0x8c, _m_startaddress + 0x8f),
    D_INF_INPUT_NUM(_m_startaddress + 0x90, _m_startaddress + 0x93),
    D_NAN_OUTPUT_NUM(_m_startaddress + 0x94, _m_startaddress + 0x97),
    D_OUT_SATURATION(_m_startaddress + 0x98, _m_startaddress + 0x9b),
    D_PERF_ENABLE(_m_startaddress + 0x9c, _m_startaddress + 0x9f),
    D_PERF_WRITE_STALL(_m_startaddress + 0xa0, _m_startaddress + 0xa3),
    D_PERF_LUT_UFLOW(_m_startaddress + 0xa4, _m_startaddress + 0xa7),
    D_PERF_LUT_OFLOW(_m_startaddress + 0xa8, _m_startaddress + 0xab),
    D_PERF_LUT_HYBRID(_m_startaddress + 0xac, _m_startaddress + 0xaf),
    D_PERF_LUT_LE_HIT(_m_startaddress + 0xb0, _m_startaddress + 0xb3),
    D_PERF_LUT_LO_HIT(_m_startaddress + 0xb4, _m_startaddress + 0xb7),
    D_CYA(_m_startaddress + 0xb8, _m_startaddress + 0xbb) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&S_LUT_ACCESS_CFG);
  m_children.push_back(&S_LUT_ACCESS_DATA);
  m_children.push_back(&S_LUT_CFG);
  m_children.push_back(&S_LUT_INFO);
  m_children.push_back(&S_LUT_LE_START_LOW);
  m_children.push_back(&S_LUT_LE_START_HIGH);
  m_children.push_back(&S_LUT_LE_END_LOW);
  m_children.push_back(&S_LUT_LE_END_HIGH);
  m_children.push_back(&S_LUT_LO_START_LOW);
  m_children.push_back(&S_LUT_LO_START_HIGH);
  m_children.push_back(&S_LUT_LO_END_LOW);
  m_children.push_back(&S_LUT_LO_END_HIGH);
  m_children.push_back(&S_LUT_LE_SLOPE_SCALE);
  m_children.push_back(&S_LUT_LE_SLOPE_SHIFT);
  m_children.push_back(&S_LUT_LO_SLOPE_SCALE);
  m_children.push_back(&S_LUT_LO_SLOPE_SHIFT);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_FUNC_BYPASS);
  m_children.push_back(&D_DST_BASE_ADDR_LOW);
  m_children.push_back(&D_DST_BASE_ADDR_HIGH);
  m_children.push_back(&D_DST_LINE_STRIDE);
  m_children.push_back(&D_DST_SURFACE_STRIDE);
  m_children.push_back(&D_DST_DMA_CFG);
  m_children.push_back(&D_DST_COMPRESSION_EN);
  m_children.push_back(&D_DATA_FORMAT);
  m_children.push_back(&D_NAN_FLUSH_TO_ZERO);
  m_children.push_back(&D_LRN_CFG);
  m_children.push_back(&D_DATIN_OFFSET);
  m_children.push_back(&D_DATIN_SCALE);
  m_children.push_back(&D_DATIN_SHIFTER);
  m_children.push_back(&D_DATOUT_OFFSET);
  m_children.push_back(&D_DATOUT_SCALE);
  m_children.push_back(&D_DATOUT_SHIFTER);
  m_children.push_back(&D_NAN_INPUT_NUM);
  m_children.push_back(&D_INF_INPUT_NUM);
  m_children.push_back(&D_NAN_OUTPUT_NUM);
  m_children.push_back(&D_OUT_SATURATION);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_WRITE_STALL);
  m_children.push_back(&D_PERF_LUT_UFLOW);
  m_children.push_back(&D_PERF_LUT_OFLOW);
  m_children.push_back(&D_PERF_LUT_HYBRID);
  m_children.push_back(&D_PERF_LUT_LE_HIT);
  m_children.push_back(&D_PERF_LUT_LO_HIT);
  m_children.push_back(&D_CYA);
}

void  ordt_rset_NVDLA_CDP::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&S_LUT_ACCESS_CFG);
  m_children.push_back(&S_LUT_ACCESS_DATA);
  m_children.push_back(&S_LUT_CFG);
  m_children.push_back(&S_LUT_INFO);
  m_children.push_back(&S_LUT_LE_START_LOW);
  m_children.push_back(&S_LUT_LE_START_HIGH);
  m_children.push_back(&S_LUT_LE_END_LOW);
  m_children.push_back(&S_LUT_LE_END_HIGH);
  m_children.push_back(&S_LUT_LO_START_LOW);
  m_children.push_back(&S_LUT_LO_START_HIGH);
  m_children.push_back(&S_LUT_LO_END_LOW);
  m_children.push_back(&S_LUT_LO_END_HIGH);
  m_children.push_back(&S_LUT_LE_SLOPE_SCALE);
  m_children.push_back(&S_LUT_LE_SLOPE_SHIFT);
  m_children.push_back(&S_LUT_LO_SLOPE_SCALE);
  m_children.push_back(&S_LUT_LO_SLOPE_SHIFT);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_FUNC_BYPASS);
  m_children.push_back(&D_DST_BASE_ADDR_LOW);
  m_children.push_back(&D_DST_BASE_ADDR_HIGH);
  m_children.push_back(&D_DST_LINE_STRIDE);
  m_children.push_back(&D_DST_SURFACE_STRIDE);
  m_children.push_back(&D_DST_DMA_CFG);
  m_children.push_back(&D_DST_COMPRESSION_EN);
  m_children.push_back(&D_DATA_FORMAT);
  m_children.push_back(&D_NAN_FLUSH_TO_ZERO);
  m_children.push_back(&D_LRN_CFG);
  m_children.push_back(&D_DATIN_OFFSET);
  m_children.push_back(&D_DATIN_SCALE);
  m_children.push_back(&D_DATIN_SHIFTER);
  m_children.push_back(&D_DATOUT_OFFSET);
  m_children.push_back(&D_DATOUT_SCALE);
  m_children.push_back(&D_DATOUT_SHIFTER);
  m_children.push_back(&D_NAN_INPUT_NUM);
  m_children.push_back(&D_INF_INPUT_NUM);
  m_children.push_back(&D_NAN_OUTPUT_NUM);
  m_children.push_back(&D_OUT_SATURATION);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_WRITE_STALL);
  m_children.push_back(&D_PERF_LUT_UFLOW);
  m_children.push_back(&D_PERF_LUT_OFLOW);
  m_children.push_back(&D_PERF_LUT_HYBRID);
  m_children.push_back(&D_PERF_LUT_LE_HIT);
  m_children.push_back(&D_PERF_LUT_LO_HIT);
  m_children.push_back(&D_CYA);
}

// ------------------ ordt_rg_NVDLA_GEC_FEATURE methods ------------------

ordt_rg_NVDLA_GEC_FEATURE::ordt_rg_NVDLA_GEC_FEATURE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NUM_ERR_SLICES(0, 6, 0x3, r_std, w_none),
    NUM_ERR(16, 16, 0x43, r_std, w_none) {
}

int  ordt_rg_NVDLA_GEC_FEATURE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_FEATURE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_FEATURE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_FEATURE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NUM_ERR_SLICES.write(wdata);
  NUM_ERR.write(wdata);
}

int  ordt_rg_NVDLA_GEC_FEATURE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_FEATURE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_FEATURE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_FEATURE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NUM_ERR_SLICES.read(rdata);
  NUM_ERR.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_SWRESET methods ------------------

ordt_rg_NVDLA_GEC_SWRESET::ordt_rg_NVDLA_GEC_SWRESET(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SWRST(0, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_SWRESET::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_SWRESET at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_SWRESET\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_SWRESET::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SWRST.write(wdata);
}

int  ordt_rg_NVDLA_GEC_SWRESET::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_SWRESET at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_SWRESET\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_SWRESET::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SWRST.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_MISSIONERR_TYPE methods ------------------

ordt_rg_NVDLA_GEC_MISSIONERR_TYPE::ordt_rg_NVDLA_GEC_MISSIONERR_TYPE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CODE(0, 6, 0x5, r_std, w_none) {
}

int  ordt_rg_NVDLA_GEC_MISSIONERR_TYPE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_MISSIONERR_TYPE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_MISSIONERR_TYPE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_MISSIONERR_TYPE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CODE.write(wdata);
}

int  ordt_rg_NVDLA_GEC_MISSIONERR_TYPE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_MISSIONERR_TYPE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_MISSIONERR_TYPE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_MISSIONERR_TYPE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CODE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE methods ------------------

ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE::ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    VALUE(0, 9, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  VALUE.write(wdata);
}

int  ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_MISSIONERR_INDEX methods ------------------

ordt_rg_NVDLA_GEC_MISSIONERR_INDEX::ordt_rg_NVDLA_GEC_MISSIONERR_INDEX(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    IDX(0, 7, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_MISSIONERR_INDEX::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_MISSIONERR_INDEX at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_MISSIONERR_INDEX\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_MISSIONERR_INDEX::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  IDX.write(wdata);
}

int  ordt_rg_NVDLA_GEC_MISSIONERR_INDEX::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_MISSIONERR_INDEX at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_MISSIONERR_INDEX\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_MISSIONERR_INDEX::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  IDX.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD methods ------------------

ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD::ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    COUNT(0, 8, 0xff, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  COUNT.write(wdata);
}

int  ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  COUNT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK methods ------------------

ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK::ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    VALUE(0, 8, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  VALUE.write(wdata);
}

int  ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE::ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x1, r_std, w_std),
    ERR1(1, 1, 0x1, r_std, w_std),
    ERR2(2, 1, 0x1, r_std, w_std),
    ERR3(3, 1, 0x1, r_std, w_std),
    ERR4(4, 1, 0x1, r_std, w_std),
    ERR5(5, 1, 0x1, r_std, w_std),
    ERR6(6, 1, 0x1, r_std, w_std),
    ERR7(7, 1, 0x1, r_std, w_std),
    ERR8(8, 1, 0x1, r_std, w_std),
    ERR9(9, 1, 0x1, r_std, w_std),
    ERR10(10, 1, 0x1, r_std, w_std),
    ERR11(11, 1, 0x1, r_std, w_std),
    ERR12(12, 1, 0x1, r_std, w_std),
    ERR13(13, 1, 0x1, r_std, w_std),
    ERR14(14, 1, 0x1, r_std, w_std),
    ERR15(15, 1, 0x1, r_std, w_std),
    ERR16(16, 1, 0x1, r_std, w_std),
    ERR17(17, 1, 0x1, r_std, w_std),
    ERR18(18, 1, 0x1, r_std, w_std),
    ERR19(19, 1, 0x1, r_std, w_std),
    ERR20(20, 1, 0x1, r_std, w_std),
    ERR21(21, 1, 0x1, r_std, w_std),
    ERR22(22, 1, 0x1, r_std, w_std),
    ERR23(23, 1, 0x1, r_std, w_std),
    ERR24(24, 1, 0x1, r_std, w_std),
    ERR25(25, 1, 0x1, r_std, w_std),
    ERR26(26, 1, 0x1, r_std, w_std),
    ERR27(27, 1, 0x1, r_std, w_std),
    ERR28(28, 1, 0x1, r_std, w_std),
    ERR29(29, 1, 0x1, r_std, w_std),
    ERR30(30, 1, 0x1, r_std, w_std),
    ERR31(31, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR9.write(wdata);
  ERR10.write(wdata);
  ERR11.write(wdata);
  ERR12.write(wdata);
  ERR13.write(wdata);
  ERR14.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR9.read(rdata);
  ERR10.read(rdata);
  ERR11.read(rdata);
  ERR12.read(rdata);
  ERR13.read(rdata);
  ERR14.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE::ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x0, r_none, w_std),
    ERR1(1, 1, 0x0, r_none, w_std),
    ERR2(2, 1, 0x0, r_none, w_std),
    ERR3(3, 1, 0x0, r_none, w_std),
    ERR4(4, 1, 0x0, r_none, w_std),
    ERR5(5, 1, 0x0, r_none, w_std),
    ERR6(6, 1, 0x0, r_none, w_std),
    ERR7(7, 1, 0x0, r_none, w_std),
    ERR8(8, 1, 0x0, r_none, w_std),
    ERR9(9, 1, 0x0, r_none, w_std),
    ERR10(10, 1, 0x0, r_none, w_std),
    ERR11(11, 1, 0x0, r_none, w_std),
    ERR12(12, 1, 0x0, r_none, w_std),
    ERR13(13, 1, 0x0, r_none, w_std),
    ERR14(14, 1, 0x0, r_none, w_std),
    ERR15(15, 1, 0x0, r_none, w_std),
    ERR16(16, 1, 0x0, r_none, w_std),
    ERR17(17, 1, 0x0, r_none, w_std),
    ERR18(18, 1, 0x0, r_none, w_std),
    ERR19(19, 1, 0x0, r_none, w_std),
    ERR20(20, 1, 0x0, r_none, w_std),
    ERR21(21, 1, 0x0, r_none, w_std),
    ERR22(22, 1, 0x0, r_none, w_std),
    ERR23(23, 1, 0x0, r_none, w_std),
    ERR24(24, 1, 0x0, r_none, w_std),
    ERR25(25, 1, 0x0, r_none, w_std),
    ERR26(26, 1, 0x0, r_none, w_std),
    ERR27(27, 1, 0x0, r_none, w_std),
    ERR28(28, 1, 0x0, r_none, w_std),
    ERR29(29, 1, 0x0, r_none, w_std),
    ERR30(30, 1, 0x0, r_none, w_std),
    ERR31(31, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR9.write(wdata);
  ERR10.write(wdata);
  ERR11.write(wdata);
  ERR12.write(wdata);
  ERR13.write(wdata);
  ERR14.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR9.read(rdata);
  ERR10.read(rdata);
  ERR11.read(rdata);
  ERR12.read(rdata);
  ERR13.read(rdata);
  ERR14.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS::ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x0, r_std, w_std),
    ERR1(1, 1, 0x0, r_std, w_std),
    ERR2(2, 1, 0x0, r_std, w_std),
    ERR3(3, 1, 0x0, r_std, w_std),
    ERR4(4, 1, 0x0, r_std, w_std),
    ERR5(5, 1, 0x0, r_std, w_std),
    ERR6(6, 1, 0x0, r_std, w_std),
    ERR7(7, 1, 0x0, r_std, w_std),
    ERR8(8, 1, 0x0, r_std, w_std),
    ERR9(9, 1, 0x0, r_std, w_std),
    ERR10(10, 1, 0x0, r_std, w_std),
    ERR11(11, 1, 0x0, r_std, w_std),
    ERR12(12, 1, 0x0, r_std, w_std),
    ERR13(13, 1, 0x0, r_std, w_std),
    ERR14(14, 1, 0x0, r_std, w_std),
    ERR15(15, 1, 0x0, r_std, w_std),
    ERR16(16, 1, 0x0, r_std, w_std),
    ERR17(17, 1, 0x0, r_std, w_std),
    ERR18(18, 1, 0x0, r_std, w_std),
    ERR19(19, 1, 0x0, r_std, w_std),
    ERR20(20, 1, 0x0, r_std, w_std),
    ERR21(21, 1, 0x0, r_std, w_std),
    ERR22(22, 1, 0x0, r_std, w_std),
    ERR23(23, 1, 0x0, r_std, w_std),
    ERR24(24, 1, 0x0, r_std, w_std),
    ERR25(25, 1, 0x0, r_std, w_std),
    ERR26(26, 1, 0x0, r_std, w_std),
    ERR27(27, 1, 0x0, r_std, w_std),
    ERR28(28, 1, 0x0, r_std, w_std),
    ERR29(29, 1, 0x0, r_std, w_std),
    ERR30(30, 1, 0x0, r_std, w_std),
    ERR31(31, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR9.write(wdata);
  ERR10.write(wdata);
  ERR11.write(wdata);
  ERR12.write(wdata);
  ERR13.write(wdata);
  ERR14.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR9.read(rdata);
  ERR10.read(rdata);
  ERR11.read(rdata);
  ERR12.read(rdata);
  ERR13.read(rdata);
  ERR14.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT::ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x0, r_std, w_std),
    ERR1(1, 1, 0x0, r_std, w_std),
    ERR2(2, 1, 0x0, r_std, w_std),
    ERR3(3, 1, 0x0, r_std, w_std),
    ERR4(4, 1, 0x0, r_std, w_std),
    ERR5(5, 1, 0x0, r_std, w_std),
    ERR6(6, 1, 0x0, r_std, w_std),
    ERR7(7, 1, 0x0, r_std, w_std),
    ERR8(8, 1, 0x0, r_std, w_std),
    ERR15(15, 1, 0x0, r_std, w_std),
    ERR16(16, 1, 0x0, r_std, w_std),
    ERR17(17, 1, 0x0, r_std, w_std),
    ERR18(18, 1, 0x0, r_std, w_std),
    ERR19(19, 1, 0x0, r_std, w_std),
    ERR20(20, 1, 0x0, r_std, w_std),
    ERR21(21, 1, 0x0, r_std, w_std),
    ERR22(22, 1, 0x0, r_std, w_std),
    ERR23(23, 1, 0x0, r_std, w_std),
    ERR24(24, 1, 0x0, r_std, w_std),
    ERR25(25, 1, 0x0, r_std, w_std),
    ERR26(26, 1, 0x0, r_std, w_std),
    ERR27(27, 1, 0x0, r_std, w_std),
    ERR28(28, 1, 0x0, r_std, w_std),
    ERR29(29, 1, 0x0, r_std, w_std),
    ERR30(30, 1, 0x0, r_std, w_std),
    ERR31(31, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE::ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x1, r_std, w_std),
    ERR1(1, 1, 0x1, r_std, w_std),
    ERR2(2, 1, 0x1, r_std, w_std),
    ERR3(3, 1, 0x1, r_std, w_std),
    ERR4(4, 1, 0x1, r_std, w_std),
    ERR5(5, 1, 0x1, r_std, w_std),
    ERR6(6, 1, 0x1, r_std, w_std),
    ERR7(7, 1, 0x1, r_std, w_std),
    ERR8(8, 1, 0x1, r_std, w_std),
    ERR9(9, 1, 0x1, r_std, w_std),
    ERR10(10, 1, 0x1, r_std, w_std),
    ERR11(11, 1, 0x1, r_std, w_std),
    ERR12(12, 1, 0x1, r_std, w_std),
    ERR13(13, 1, 0x1, r_std, w_std),
    ERR14(14, 1, 0x1, r_std, w_std),
    ERR15(15, 1, 0x1, r_std, w_std),
    ERR16(16, 1, 0x1, r_std, w_std),
    ERR17(17, 1, 0x1, r_std, w_std),
    ERR18(18, 1, 0x1, r_std, w_std),
    ERR19(19, 1, 0x1, r_std, w_std),
    ERR20(20, 1, 0x1, r_std, w_std),
    ERR21(21, 1, 0x1, r_std, w_std),
    ERR22(22, 1, 0x1, r_std, w_std),
    ERR23(23, 1, 0x1, r_std, w_std),
    ERR24(24, 1, 0x1, r_std, w_std),
    ERR25(25, 1, 0x1, r_std, w_std),
    ERR26(26, 1, 0x1, r_std, w_std),
    ERR27(27, 1, 0x1, r_std, w_std),
    ERR28(28, 1, 0x1, r_std, w_std),
    ERR29(29, 1, 0x1, r_std, w_std),
    ERR30(30, 1, 0x1, r_std, w_std),
    ERR31(31, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR9.write(wdata);
  ERR10.write(wdata);
  ERR11.write(wdata);
  ERR12.write(wdata);
  ERR13.write(wdata);
  ERR14.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR9.read(rdata);
  ERR10.read(rdata);
  ERR11.read(rdata);
  ERR12.read(rdata);
  ERR13.read(rdata);
  ERR14.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE::ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x0, r_none, w_std),
    ERR1(1, 1, 0x0, r_none, w_std),
    ERR2(2, 1, 0x0, r_none, w_std),
    ERR3(3, 1, 0x0, r_none, w_std),
    ERR4(4, 1, 0x0, r_none, w_std),
    ERR5(5, 1, 0x0, r_none, w_std),
    ERR6(6, 1, 0x0, r_none, w_std),
    ERR7(7, 1, 0x0, r_none, w_std),
    ERR8(8, 1, 0x0, r_none, w_std),
    ERR9(9, 1, 0x0, r_none, w_std),
    ERR10(10, 1, 0x0, r_none, w_std),
    ERR11(11, 1, 0x0, r_none, w_std),
    ERR12(12, 1, 0x0, r_none, w_std),
    ERR13(13, 1, 0x0, r_none, w_std),
    ERR14(14, 1, 0x0, r_none, w_std),
    ERR15(15, 1, 0x0, r_none, w_std),
    ERR16(16, 1, 0x0, r_none, w_std),
    ERR17(17, 1, 0x0, r_none, w_std),
    ERR18(18, 1, 0x0, r_none, w_std),
    ERR19(19, 1, 0x0, r_none, w_std),
    ERR20(20, 1, 0x0, r_none, w_std),
    ERR21(21, 1, 0x0, r_none, w_std),
    ERR22(22, 1, 0x0, r_none, w_std),
    ERR23(23, 1, 0x0, r_none, w_std),
    ERR24(24, 1, 0x0, r_none, w_std),
    ERR25(25, 1, 0x0, r_none, w_std),
    ERR26(26, 1, 0x0, r_none, w_std),
    ERR27(27, 1, 0x0, r_none, w_std),
    ERR28(28, 1, 0x0, r_none, w_std),
    ERR29(29, 1, 0x0, r_none, w_std),
    ERR30(30, 1, 0x0, r_none, w_std),
    ERR31(31, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR9.write(wdata);
  ERR10.write(wdata);
  ERR11.write(wdata);
  ERR12.write(wdata);
  ERR13.write(wdata);
  ERR14.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR9.read(rdata);
  ERR10.read(rdata);
  ERR11.read(rdata);
  ERR12.read(rdata);
  ERR13.read(rdata);
  ERR14.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS::ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x0, r_std, w_std),
    ERR1(1, 1, 0x0, r_std, w_std),
    ERR2(2, 1, 0x0, r_std, w_std),
    ERR3(3, 1, 0x0, r_std, w_std),
    ERR4(4, 1, 0x0, r_std, w_std),
    ERR5(5, 1, 0x0, r_std, w_std),
    ERR6(6, 1, 0x0, r_std, w_std),
    ERR7(7, 1, 0x0, r_std, w_std),
    ERR8(8, 1, 0x0, r_std, w_std),
    ERR9(9, 1, 0x0, r_std, w_std),
    ERR10(10, 1, 0x0, r_std, w_std),
    ERR11(11, 1, 0x0, r_std, w_std),
    ERR12(12, 1, 0x0, r_std, w_std),
    ERR13(13, 1, 0x0, r_std, w_std),
    ERR14(14, 1, 0x0, r_std, w_std),
    ERR15(15, 1, 0x0, r_std, w_std),
    ERR16(16, 1, 0x0, r_std, w_std),
    ERR17(17, 1, 0x0, r_std, w_std),
    ERR18(18, 1, 0x0, r_std, w_std),
    ERR19(19, 1, 0x0, r_std, w_std),
    ERR20(20, 1, 0x0, r_std, w_std),
    ERR21(21, 1, 0x0, r_std, w_std),
    ERR22(22, 1, 0x0, r_std, w_std),
    ERR23(23, 1, 0x0, r_std, w_std),
    ERR24(24, 1, 0x0, r_std, w_std),
    ERR25(25, 1, 0x0, r_std, w_std),
    ERR26(26, 1, 0x0, r_std, w_std),
    ERR27(27, 1, 0x0, r_std, w_std),
    ERR28(28, 1, 0x0, r_std, w_std),
    ERR29(29, 1, 0x0, r_std, w_std),
    ERR30(30, 1, 0x0, r_std, w_std),
    ERR31(31, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR9.write(wdata);
  ERR10.write(wdata);
  ERR11.write(wdata);
  ERR12.write(wdata);
  ERR13.write(wdata);
  ERR14.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR9.read(rdata);
  ERR10.read(rdata);
  ERR11.read(rdata);
  ERR12.read(rdata);
  ERR13.read(rdata);
  ERR14.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD::ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR0(0, 1, 0x0, r_none, w_std),
    ERR1(1, 1, 0x0, r_none, w_std),
    ERR2(2, 1, 0x0, r_none, w_std),
    ERR3(3, 1, 0x0, r_none, w_std),
    ERR4(4, 1, 0x0, r_none, w_std),
    ERR5(5, 1, 0x0, r_none, w_std),
    ERR6(6, 1, 0x0, r_none, w_std),
    ERR7(7, 1, 0x0, r_none, w_std),
    ERR8(8, 1, 0x0, r_none, w_std),
    ERR9(9, 1, 0x0, r_none, w_std),
    ERR10(10, 1, 0x0, r_none, w_std),
    ERR11(11, 1, 0x0, r_none, w_std),
    ERR12(12, 1, 0x0, r_none, w_std),
    ERR13(13, 1, 0x0, r_none, w_std),
    ERR14(14, 1, 0x0, r_none, w_std),
    ERR15(15, 1, 0x0, r_none, w_std),
    ERR16(16, 1, 0x0, r_none, w_std),
    ERR17(17, 1, 0x0, r_none, w_std),
    ERR18(18, 1, 0x0, r_none, w_std),
    ERR19(19, 1, 0x0, r_none, w_std),
    ERR20(20, 1, 0x0, r_none, w_std),
    ERR21(21, 1, 0x0, r_none, w_std),
    ERR22(22, 1, 0x0, r_none, w_std),
    ERR23(23, 1, 0x0, r_none, w_std),
    ERR24(24, 1, 0x0, r_none, w_std),
    ERR25(25, 1, 0x0, r_none, w_std),
    ERR26(26, 1, 0x0, r_none, w_std),
    ERR27(27, 1, 0x0, r_none, w_std),
    ERR28(28, 1, 0x0, r_none, w_std),
    ERR29(29, 1, 0x0, r_none, w_std),
    ERR30(30, 1, 0x0, r_none, w_std),
    ERR31(31, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR0.write(wdata);
  ERR1.write(wdata);
  ERR2.write(wdata);
  ERR3.write(wdata);
  ERR4.write(wdata);
  ERR5.write(wdata);
  ERR6.write(wdata);
  ERR7.write(wdata);
  ERR8.write(wdata);
  ERR9.write(wdata);
  ERR10.write(wdata);
  ERR11.write(wdata);
  ERR12.write(wdata);
  ERR13.write(wdata);
  ERR14.write(wdata);
  ERR15.write(wdata);
  ERR16.write(wdata);
  ERR17.write(wdata);
  ERR18.write(wdata);
  ERR19.write(wdata);
  ERR20.write(wdata);
  ERR21.write(wdata);
  ERR22.write(wdata);
  ERR23.write(wdata);
  ERR24.write(wdata);
  ERR25.write(wdata);
  ERR26.write(wdata);
  ERR27.write(wdata);
  ERR28.write(wdata);
  ERR29.write(wdata);
  ERR30.write(wdata);
  ERR31.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR0.read(rdata);
  ERR1.read(rdata);
  ERR2.read(rdata);
  ERR3.read(rdata);
  ERR4.read(rdata);
  ERR5.read(rdata);
  ERR6.read(rdata);
  ERR7.read(rdata);
  ERR8.read(rdata);
  ERR9.read(rdata);
  ERR10.read(rdata);
  ERR11.read(rdata);
  ERR12.read(rdata);
  ERR13.read(rdata);
  ERR14.read(rdata);
  ERR15.read(rdata);
  ERR16.read(rdata);
  ERR17.read(rdata);
  ERR18.read(rdata);
  ERR19.read(rdata);
  ERR20.read(rdata);
  ERR21.read(rdata);
  ERR22.read(rdata);
  ERR23.read(rdata);
  ERR24.read(rdata);
  ERR25.read(rdata);
  ERR26.read(rdata);
  ERR27.read(rdata);
  ERR28.read(rdata);
  ERR29.read(rdata);
  ERR30.read(rdata);
  ERR31.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE::ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x1, r_std, w_std),
    ERR33(1, 1, 0x1, r_std, w_std),
    ERR34(2, 1, 0x1, r_std, w_std),
    ERR35(3, 1, 0x1, r_std, w_std),
    ERR36(4, 1, 0x1, r_std, w_std),
    ERR37(5, 1, 0x1, r_std, w_std),
    ERR38(6, 1, 0x1, r_std, w_std),
    ERR39(7, 1, 0x1, r_std, w_std),
    ERR40(8, 1, 0x1, r_std, w_std),
    ERR41(9, 1, 0x1, r_std, w_std),
    ERR42(10, 1, 0x1, r_std, w_std),
    ERR43(11, 1, 0x1, r_std, w_std),
    ERR44(12, 1, 0x1, r_std, w_std),
    ERR45(13, 1, 0x1, r_std, w_std),
    ERR46(14, 1, 0x1, r_std, w_std),
    ERR47(15, 1, 0x1, r_std, w_std),
    ERR48(16, 1, 0x1, r_std, w_std),
    ERR49(17, 1, 0x1, r_std, w_std),
    ERR50(18, 1, 0x1, r_std, w_std),
    ERR51(19, 1, 0x1, r_std, w_std),
    ERR52(20, 1, 0x1, r_std, w_std),
    ERR53(21, 1, 0x1, r_std, w_std),
    ERR54(22, 1, 0x1, r_std, w_std),
    ERR55(23, 1, 0x1, r_std, w_std),
    ERR56(24, 1, 0x1, r_std, w_std),
    ERR57(25, 1, 0x1, r_std, w_std),
    ERR58(26, 1, 0x1, r_std, w_std),
    ERR59(27, 1, 0x1, r_std, w_std),
    ERR60(28, 1, 0x1, r_std, w_std),
    ERR61(29, 1, 0x1, r_std, w_std),
    ERR62(30, 1, 0x1, r_std, w_std),
    ERR63(31, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE::ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x0, r_none, w_std),
    ERR33(1, 1, 0x0, r_none, w_std),
    ERR34(2, 1, 0x0, r_none, w_std),
    ERR35(3, 1, 0x0, r_none, w_std),
    ERR36(4, 1, 0x0, r_none, w_std),
    ERR37(5, 1, 0x0, r_none, w_std),
    ERR38(6, 1, 0x0, r_none, w_std),
    ERR39(7, 1, 0x0, r_none, w_std),
    ERR40(8, 1, 0x0, r_none, w_std),
    ERR41(9, 1, 0x0, r_none, w_std),
    ERR42(10, 1, 0x0, r_none, w_std),
    ERR43(11, 1, 0x0, r_none, w_std),
    ERR44(12, 1, 0x0, r_none, w_std),
    ERR45(13, 1, 0x0, r_none, w_std),
    ERR46(14, 1, 0x0, r_none, w_std),
    ERR47(15, 1, 0x0, r_none, w_std),
    ERR48(16, 1, 0x0, r_none, w_std),
    ERR49(17, 1, 0x0, r_none, w_std),
    ERR50(18, 1, 0x0, r_none, w_std),
    ERR51(19, 1, 0x0, r_none, w_std),
    ERR52(20, 1, 0x0, r_none, w_std),
    ERR53(21, 1, 0x0, r_none, w_std),
    ERR54(22, 1, 0x0, r_none, w_std),
    ERR55(23, 1, 0x0, r_none, w_std),
    ERR56(24, 1, 0x0, r_none, w_std),
    ERR57(25, 1, 0x0, r_none, w_std),
    ERR58(26, 1, 0x0, r_none, w_std),
    ERR59(27, 1, 0x0, r_none, w_std),
    ERR60(28, 1, 0x0, r_none, w_std),
    ERR61(29, 1, 0x0, r_none, w_std),
    ERR62(30, 1, 0x0, r_none, w_std),
    ERR63(31, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS::ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x0, r_std, w_std),
    ERR33(1, 1, 0x0, r_std, w_std),
    ERR34(2, 1, 0x0, r_std, w_std),
    ERR35(3, 1, 0x0, r_std, w_std),
    ERR36(4, 1, 0x0, r_std, w_std),
    ERR37(5, 1, 0x0, r_std, w_std),
    ERR38(6, 1, 0x0, r_std, w_std),
    ERR39(7, 1, 0x0, r_std, w_std),
    ERR40(8, 1, 0x0, r_std, w_std),
    ERR41(9, 1, 0x0, r_std, w_std),
    ERR42(10, 1, 0x0, r_std, w_std),
    ERR43(11, 1, 0x0, r_std, w_std),
    ERR44(12, 1, 0x0, r_std, w_std),
    ERR45(13, 1, 0x0, r_std, w_std),
    ERR46(14, 1, 0x0, r_std, w_std),
    ERR47(15, 1, 0x0, r_std, w_std),
    ERR48(16, 1, 0x0, r_std, w_std),
    ERR49(17, 1, 0x0, r_std, w_std),
    ERR50(18, 1, 0x0, r_std, w_std),
    ERR51(19, 1, 0x0, r_std, w_std),
    ERR52(20, 1, 0x0, r_std, w_std),
    ERR53(21, 1, 0x0, r_std, w_std),
    ERR54(22, 1, 0x0, r_std, w_std),
    ERR55(23, 1, 0x0, r_std, w_std),
    ERR56(24, 1, 0x0, r_std, w_std),
    ERR57(25, 1, 0x0, r_std, w_std),
    ERR58(26, 1, 0x0, r_std, w_std),
    ERR59(27, 1, 0x0, r_std, w_std),
    ERR60(28, 1, 0x0, r_std, w_std),
    ERR61(29, 1, 0x0, r_std, w_std),
    ERR62(30, 1, 0x0, r_std, w_std),
    ERR63(31, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT::ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x0, r_std, w_std),
    ERR33(1, 1, 0x0, r_std, w_std),
    ERR34(2, 1, 0x0, r_std, w_std),
    ERR35(3, 1, 0x0, r_std, w_std),
    ERR36(4, 1, 0x0, r_std, w_std),
    ERR37(5, 1, 0x0, r_std, w_std),
    ERR38(6, 1, 0x0, r_std, w_std),
    ERR39(7, 1, 0x0, r_std, w_std),
    ERR40(8, 1, 0x0, r_std, w_std),
    ERR41(9, 1, 0x0, r_std, w_std),
    ERR42(10, 1, 0x0, r_std, w_std),
    ERR43(11, 1, 0x0, r_std, w_std),
    ERR44(12, 1, 0x0, r_std, w_std),
    ERR45(13, 1, 0x0, r_std, w_std),
    ERR46(14, 1, 0x0, r_std, w_std),
    ERR47(15, 1, 0x0, r_std, w_std),
    ERR48(16, 1, 0x0, r_std, w_std),
    ERR49(17, 1, 0x0, r_std, w_std),
    ERR50(18, 1, 0x0, r_std, w_std),
    ERR51(19, 1, 0x0, r_std, w_std),
    ERR52(20, 1, 0x0, r_std, w_std),
    ERR53(21, 1, 0x0, r_std, w_std),
    ERR54(22, 1, 0x0, r_std, w_std),
    ERR55(23, 1, 0x0, r_std, w_std),
    ERR56(24, 1, 0x0, r_std, w_std),
    ERR57(25, 1, 0x0, r_std, w_std),
    ERR58(26, 1, 0x0, r_std, w_std),
    ERR59(27, 1, 0x0, r_std, w_std),
    ERR60(28, 1, 0x0, r_std, w_std),
    ERR61(29, 1, 0x0, r_std, w_std),
    ERR62(30, 1, 0x0, r_std, w_std),
    ERR63(31, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE::ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x1, r_std, w_std),
    ERR33(1, 1, 0x1, r_std, w_std),
    ERR34(2, 1, 0x1, r_std, w_std),
    ERR35(3, 1, 0x1, r_std, w_std),
    ERR36(4, 1, 0x1, r_std, w_std),
    ERR37(5, 1, 0x1, r_std, w_std),
    ERR38(6, 1, 0x1, r_std, w_std),
    ERR39(7, 1, 0x1, r_std, w_std),
    ERR40(8, 1, 0x1, r_std, w_std),
    ERR41(9, 1, 0x1, r_std, w_std),
    ERR42(10, 1, 0x1, r_std, w_std),
    ERR43(11, 1, 0x1, r_std, w_std),
    ERR44(12, 1, 0x1, r_std, w_std),
    ERR45(13, 1, 0x1, r_std, w_std),
    ERR46(14, 1, 0x1, r_std, w_std),
    ERR47(15, 1, 0x1, r_std, w_std),
    ERR48(16, 1, 0x1, r_std, w_std),
    ERR49(17, 1, 0x1, r_std, w_std),
    ERR50(18, 1, 0x1, r_std, w_std),
    ERR51(19, 1, 0x1, r_std, w_std),
    ERR52(20, 1, 0x1, r_std, w_std),
    ERR53(21, 1, 0x1, r_std, w_std),
    ERR54(22, 1, 0x1, r_std, w_std),
    ERR55(23, 1, 0x1, r_std, w_std),
    ERR56(24, 1, 0x1, r_std, w_std),
    ERR57(25, 1, 0x1, r_std, w_std),
    ERR58(26, 1, 0x1, r_std, w_std),
    ERR59(27, 1, 0x1, r_std, w_std),
    ERR60(28, 1, 0x1, r_std, w_std),
    ERR61(29, 1, 0x1, r_std, w_std),
    ERR62(30, 1, 0x1, r_std, w_std),
    ERR63(31, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE::ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x0, r_none, w_std),
    ERR33(1, 1, 0x0, r_none, w_std),
    ERR34(2, 1, 0x0, r_none, w_std),
    ERR35(3, 1, 0x0, r_none, w_std),
    ERR36(4, 1, 0x0, r_none, w_std),
    ERR37(5, 1, 0x0, r_none, w_std),
    ERR38(6, 1, 0x0, r_none, w_std),
    ERR39(7, 1, 0x0, r_none, w_std),
    ERR40(8, 1, 0x0, r_none, w_std),
    ERR41(9, 1, 0x0, r_none, w_std),
    ERR42(10, 1, 0x0, r_none, w_std),
    ERR43(11, 1, 0x0, r_none, w_std),
    ERR44(12, 1, 0x0, r_none, w_std),
    ERR45(13, 1, 0x0, r_none, w_std),
    ERR46(14, 1, 0x0, r_none, w_std),
    ERR47(15, 1, 0x0, r_none, w_std),
    ERR48(16, 1, 0x0, r_none, w_std),
    ERR49(17, 1, 0x0, r_none, w_std),
    ERR50(18, 1, 0x0, r_none, w_std),
    ERR51(19, 1, 0x0, r_none, w_std),
    ERR52(20, 1, 0x0, r_none, w_std),
    ERR53(21, 1, 0x0, r_none, w_std),
    ERR54(22, 1, 0x0, r_none, w_std),
    ERR55(23, 1, 0x0, r_none, w_std),
    ERR56(24, 1, 0x0, r_none, w_std),
    ERR57(25, 1, 0x0, r_none, w_std),
    ERR58(26, 1, 0x0, r_none, w_std),
    ERR59(27, 1, 0x0, r_none, w_std),
    ERR60(28, 1, 0x0, r_none, w_std),
    ERR61(29, 1, 0x0, r_none, w_std),
    ERR62(30, 1, 0x0, r_none, w_std),
    ERR63(31, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS::ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x0, r_std, w_std),
    ERR33(1, 1, 0x0, r_std, w_std),
    ERR34(2, 1, 0x0, r_std, w_std),
    ERR35(3, 1, 0x0, r_std, w_std),
    ERR36(4, 1, 0x0, r_std, w_std),
    ERR37(5, 1, 0x0, r_std, w_std),
    ERR38(6, 1, 0x0, r_std, w_std),
    ERR39(7, 1, 0x0, r_std, w_std),
    ERR40(8, 1, 0x0, r_std, w_std),
    ERR41(9, 1, 0x0, r_std, w_std),
    ERR42(10, 1, 0x0, r_std, w_std),
    ERR43(11, 1, 0x0, r_std, w_std),
    ERR44(12, 1, 0x0, r_std, w_std),
    ERR45(13, 1, 0x0, r_std, w_std),
    ERR46(14, 1, 0x0, r_std, w_std),
    ERR47(15, 1, 0x0, r_std, w_std),
    ERR48(16, 1, 0x0, r_std, w_std),
    ERR49(17, 1, 0x0, r_std, w_std),
    ERR50(18, 1, 0x0, r_std, w_std),
    ERR51(19, 1, 0x0, r_std, w_std),
    ERR52(20, 1, 0x0, r_std, w_std),
    ERR53(21, 1, 0x0, r_std, w_std),
    ERR54(22, 1, 0x0, r_std, w_std),
    ERR55(23, 1, 0x0, r_std, w_std),
    ERR56(24, 1, 0x0, r_std, w_std),
    ERR57(25, 1, 0x0, r_std, w_std),
    ERR58(26, 1, 0x0, r_std, w_std),
    ERR59(27, 1, 0x0, r_std, w_std),
    ERR60(28, 1, 0x0, r_std, w_std),
    ERR61(29, 1, 0x0, r_std, w_std),
    ERR62(30, 1, 0x0, r_std, w_std),
    ERR63(31, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD::ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR32(0, 1, 0x0, r_none, w_std),
    ERR33(1, 1, 0x0, r_none, w_std),
    ERR34(2, 1, 0x0, r_none, w_std),
    ERR35(3, 1, 0x0, r_none, w_std),
    ERR36(4, 1, 0x0, r_none, w_std),
    ERR37(5, 1, 0x0, r_none, w_std),
    ERR38(6, 1, 0x0, r_none, w_std),
    ERR39(7, 1, 0x0, r_none, w_std),
    ERR40(8, 1, 0x0, r_none, w_std),
    ERR41(9, 1, 0x0, r_none, w_std),
    ERR42(10, 1, 0x0, r_none, w_std),
    ERR43(11, 1, 0x0, r_none, w_std),
    ERR44(12, 1, 0x0, r_none, w_std),
    ERR45(13, 1, 0x0, r_none, w_std),
    ERR46(14, 1, 0x0, r_none, w_std),
    ERR47(15, 1, 0x0, r_none, w_std),
    ERR48(16, 1, 0x0, r_none, w_std),
    ERR49(17, 1, 0x0, r_none, w_std),
    ERR50(18, 1, 0x0, r_none, w_std),
    ERR51(19, 1, 0x0, r_none, w_std),
    ERR52(20, 1, 0x0, r_none, w_std),
    ERR53(21, 1, 0x0, r_none, w_std),
    ERR54(22, 1, 0x0, r_none, w_std),
    ERR55(23, 1, 0x0, r_none, w_std),
    ERR56(24, 1, 0x0, r_none, w_std),
    ERR57(25, 1, 0x0, r_none, w_std),
    ERR58(26, 1, 0x0, r_none, w_std),
    ERR59(27, 1, 0x0, r_none, w_std),
    ERR60(28, 1, 0x0, r_none, w_std),
    ERR61(29, 1, 0x0, r_none, w_std),
    ERR62(30, 1, 0x0, r_none, w_std),
    ERR63(31, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR32.write(wdata);
  ERR33.write(wdata);
  ERR34.write(wdata);
  ERR35.write(wdata);
  ERR36.write(wdata);
  ERR37.write(wdata);
  ERR38.write(wdata);
  ERR39.write(wdata);
  ERR40.write(wdata);
  ERR41.write(wdata);
  ERR42.write(wdata);
  ERR43.write(wdata);
  ERR44.write(wdata);
  ERR45.write(wdata);
  ERR46.write(wdata);
  ERR47.write(wdata);
  ERR48.write(wdata);
  ERR49.write(wdata);
  ERR50.write(wdata);
  ERR51.write(wdata);
  ERR52.write(wdata);
  ERR53.write(wdata);
  ERR54.write(wdata);
  ERR55.write(wdata);
  ERR56.write(wdata);
  ERR57.write(wdata);
  ERR58.write(wdata);
  ERR59.write(wdata);
  ERR60.write(wdata);
  ERR61.write(wdata);
  ERR62.write(wdata);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR32.read(rdata);
  ERR33.read(rdata);
  ERR34.read(rdata);
  ERR35.read(rdata);
  ERR36.read(rdata);
  ERR37.read(rdata);
  ERR38.read(rdata);
  ERR39.read(rdata);
  ERR40.read(rdata);
  ERR41.read(rdata);
  ERR42.read(rdata);
  ERR43.read(rdata);
  ERR44.read(rdata);
  ERR45.read(rdata);
  ERR46.read(rdata);
  ERR47.read(rdata);
  ERR48.read(rdata);
  ERR49.read(rdata);
  ERR50.read(rdata);
  ERR51.read(rdata);
  ERR52.read(rdata);
  ERR53.read(rdata);
  ERR54.read(rdata);
  ERR55.read(rdata);
  ERR56.read(rdata);
  ERR57.read(rdata);
  ERR58.read(rdata);
  ERR59.read(rdata);
  ERR60.read(rdata);
  ERR61.read(rdata);
  ERR62.read(rdata);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS::ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR63(31, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR63.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR63.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE::ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x1, r_std, w_std),
    ERR65(1, 1, 0x1, r_std, w_std),
    ERR66(2, 1, 0x1, r_std, w_std),
    ERR67(3, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
  ERR66.write(wdata);
  ERR67.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
  ERR66.read(rdata);
  ERR67.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE::ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x0, r_none, w_std),
    ERR65(1, 1, 0x0, r_none, w_std),
    ERR66(2, 1, 0x0, r_none, w_std),
    ERR67(3, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
  ERR66.write(wdata);
  ERR67.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
  ERR66.read(rdata);
  ERR67.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS::ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x0, r_std, w_std),
    ERR65(1, 1, 0x0, r_std, w_std),
    ERR66(2, 1, 0x0, r_std, w_std),
    ERR67(3, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
  ERR66.write(wdata);
  ERR67.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
  ERR66.read(rdata);
  ERR67.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT::ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x0, r_std, w_std),
    ERR65(1, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE::ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x1, r_std, w_std),
    ERR65(1, 1, 0x1, r_std, w_std),
    ERR66(2, 1, 0x1, r_std, w_std),
    ERR67(3, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
  ERR66.write(wdata);
  ERR67.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
  ERR66.read(rdata);
  ERR67.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE::ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x0, r_none, w_std),
    ERR65(1, 1, 0x0, r_none, w_std),
    ERR66(2, 1, 0x0, r_none, w_std),
    ERR67(3, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
  ERR66.write(wdata);
  ERR67.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
  ERR66.read(rdata);
  ERR67.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS::ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x0, r_std, w_std),
    ERR65(1, 1, 0x0, r_std, w_std),
    ERR66(2, 1, 0x0, r_std, w_std),
    ERR67(3, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
  ERR66.write(wdata);
  ERR67.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
  ERR66.read(rdata);
  ERR67.read(rdata);
}

// ------------------ ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD methods ------------------

ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD::ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    ERR64(0, 1, 0x0, r_none, w_std),
    ERR65(1, 1, 0x0, r_none, w_std),
    ERR66(2, 1, 0x0, r_none, w_std),
    ERR67(3, 1, 0x0, r_none, w_std) {
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  ERR64.write(wdata);
  ERR65.write(wdata);
  ERR66.write(wdata);
  ERR67.write(wdata);
}

int  ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  ERR64.read(rdata);
  ERR65.read(rdata);
  ERR66.read(rdata);
  ERR67.read(rdata);
}

// ------------------ ordt_rset_NVDLA_GEC methods ------------------

ordt_rset_NVDLA_GEC::ordt_rset_NVDLA_GEC(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    FEATURE(_m_startaddress + 0x0, _m_startaddress + 0x3),
    SWRESET(_m_startaddress + 0x4, _m_startaddress + 0x7),
    MISSIONERR_TYPE(_m_startaddress + 0x8, _m_startaddress + 0xb),
    CURRENT_COUNTER_VALUE(_m_startaddress + 0xc, _m_startaddress + 0xf),
    MISSIONERR_INDEX(_m_startaddress + 0x14, _m_startaddress + 0x17),
    CORRECTABLE_THRESHOLD(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    MISSIONERR_INJECT_UNLOCK(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    ERRSLICE0_MISSIONERR_ENABLE(_m_startaddress + 0x30, _m_startaddress + 0x33),
    ERRSLICE0_MISSIONERR_FORCE(_m_startaddress + 0x34, _m_startaddress + 0x37),
    ERRSLICE0_MISSIONERR_STATUS(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    ERRSLICE0_MISSIONERR_INJECT(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    ERRSLICE0_LATENTERR_ENABLE(_m_startaddress + 0x40, _m_startaddress + 0x43),
    ERRSLICE0_LATENTERR_FORCE(_m_startaddress + 0x44, _m_startaddress + 0x47),
    ERRSLICE0_LATENTERR_STATUS(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    ERRSLICE0_COUNTER_RELOAD(_m_startaddress + 0x50, _m_startaddress + 0x53),
    ERRSLICE1_MISSIONERR_ENABLE(_m_startaddress + 0x60, _m_startaddress + 0x63),
    ERRSLICE1_MISSIONERR_FORCE(_m_startaddress + 0x64, _m_startaddress + 0x67),
    ERRSLICE1_MISSIONERR_STATUS(_m_startaddress + 0x68, _m_startaddress + 0x6b),
    ERRSLICE1_MISSIONERR_INJECT(_m_startaddress + 0x6c, _m_startaddress + 0x6f),
    ERRSLICE1_LATENTERR_ENABLE(_m_startaddress + 0x70, _m_startaddress + 0x73),
    ERRSLICE1_LATENTERR_FORCE(_m_startaddress + 0x74, _m_startaddress + 0x77),
    ERRSLICE1_LATENTERR_STATUS(_m_startaddress + 0x78, _m_startaddress + 0x7b),
    ERRSLICE1_COUNTER_RELOAD(_m_startaddress + 0x80, _m_startaddress + 0x83),
    ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS(_m_startaddress + 0x84, _m_startaddress + 0x87),
    ERRSLICE2_MISSIONERR_ENABLE(_m_startaddress + 0x90, _m_startaddress + 0x93),
    ERRSLICE2_MISSIONERR_FORCE(_m_startaddress + 0x94, _m_startaddress + 0x97),
    ERRSLICE2_MISSIONERR_STATUS(_m_startaddress + 0x98, _m_startaddress + 0x9b),
    ERRSLICE2_MISSIONERR_INJECT(_m_startaddress + 0x9c, _m_startaddress + 0x9f),
    ERRSLICE2_LATENTERR_ENABLE(_m_startaddress + 0xa0, _m_startaddress + 0xa3),
    ERRSLICE2_LATENTERR_FORCE(_m_startaddress + 0xa4, _m_startaddress + 0xa7),
    ERRSLICE2_LATENTERR_STATUS(_m_startaddress + 0xa8, _m_startaddress + 0xab),
    ERRSLICE2_COUNTER_RELOAD(_m_startaddress + 0xb0, _m_startaddress + 0xb3) {
  m_children.push_back(&FEATURE);
  m_children.push_back(&SWRESET);
  m_children.push_back(&MISSIONERR_TYPE);
  m_children.push_back(&CURRENT_COUNTER_VALUE);
  m_children.push_back(&MISSIONERR_INDEX);
  m_children.push_back(&CORRECTABLE_THRESHOLD);
  m_children.push_back(&MISSIONERR_INJECT_UNLOCK);
  m_children.push_back(&ERRSLICE0_MISSIONERR_ENABLE);
  m_children.push_back(&ERRSLICE0_MISSIONERR_FORCE);
  m_children.push_back(&ERRSLICE0_MISSIONERR_STATUS);
  m_children.push_back(&ERRSLICE0_MISSIONERR_INJECT);
  m_children.push_back(&ERRSLICE0_LATENTERR_ENABLE);
  m_children.push_back(&ERRSLICE0_LATENTERR_FORCE);
  m_children.push_back(&ERRSLICE0_LATENTERR_STATUS);
  m_children.push_back(&ERRSLICE0_COUNTER_RELOAD);
  m_children.push_back(&ERRSLICE1_MISSIONERR_ENABLE);
  m_children.push_back(&ERRSLICE1_MISSIONERR_FORCE);
  m_children.push_back(&ERRSLICE1_MISSIONERR_STATUS);
  m_children.push_back(&ERRSLICE1_MISSIONERR_INJECT);
  m_children.push_back(&ERRSLICE1_LATENTERR_ENABLE);
  m_children.push_back(&ERRSLICE1_LATENTERR_FORCE);
  m_children.push_back(&ERRSLICE1_LATENTERR_STATUS);
  m_children.push_back(&ERRSLICE1_COUNTER_RELOAD);
  m_children.push_back(&ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS);
  m_children.push_back(&ERRSLICE2_MISSIONERR_ENABLE);
  m_children.push_back(&ERRSLICE2_MISSIONERR_FORCE);
  m_children.push_back(&ERRSLICE2_MISSIONERR_STATUS);
  m_children.push_back(&ERRSLICE2_MISSIONERR_INJECT);
  m_children.push_back(&ERRSLICE2_LATENTERR_ENABLE);
  m_children.push_back(&ERRSLICE2_LATENTERR_FORCE);
  m_children.push_back(&ERRSLICE2_LATENTERR_STATUS);
  m_children.push_back(&ERRSLICE2_COUNTER_RELOAD);
}

void  ordt_rset_NVDLA_GEC::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&FEATURE);
  m_children.push_back(&SWRESET);
  m_children.push_back(&MISSIONERR_TYPE);
  m_children.push_back(&CURRENT_COUNTER_VALUE);
  m_children.push_back(&MISSIONERR_INDEX);
  m_children.push_back(&CORRECTABLE_THRESHOLD);
  m_children.push_back(&MISSIONERR_INJECT_UNLOCK);
  m_children.push_back(&ERRSLICE0_MISSIONERR_ENABLE);
  m_children.push_back(&ERRSLICE0_MISSIONERR_FORCE);
  m_children.push_back(&ERRSLICE0_MISSIONERR_STATUS);
  m_children.push_back(&ERRSLICE0_MISSIONERR_INJECT);
  m_children.push_back(&ERRSLICE0_LATENTERR_ENABLE);
  m_children.push_back(&ERRSLICE0_LATENTERR_FORCE);
  m_children.push_back(&ERRSLICE0_LATENTERR_STATUS);
  m_children.push_back(&ERRSLICE0_COUNTER_RELOAD);
  m_children.push_back(&ERRSLICE1_MISSIONERR_ENABLE);
  m_children.push_back(&ERRSLICE1_MISSIONERR_FORCE);
  m_children.push_back(&ERRSLICE1_MISSIONERR_STATUS);
  m_children.push_back(&ERRSLICE1_MISSIONERR_INJECT);
  m_children.push_back(&ERRSLICE1_LATENTERR_ENABLE);
  m_children.push_back(&ERRSLICE1_LATENTERR_FORCE);
  m_children.push_back(&ERRSLICE1_LATENTERR_STATUS);
  m_children.push_back(&ERRSLICE1_COUNTER_RELOAD);
  m_children.push_back(&ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS);
  m_children.push_back(&ERRSLICE2_MISSIONERR_ENABLE);
  m_children.push_back(&ERRSLICE2_MISSIONERR_FORCE);
  m_children.push_back(&ERRSLICE2_MISSIONERR_STATUS);
  m_children.push_back(&ERRSLICE2_MISSIONERR_INJECT);
  m_children.push_back(&ERRSLICE2_LATENTERR_ENABLE);
  m_children.push_back(&ERRSLICE2_LATENTERR_FORCE);
  m_children.push_back(&ERRSLICE2_LATENTERR_STATUS);
  m_children.push_back(&ERRSLICE2_COUNTER_RELOAD);
}

// ------------------ ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_0 methods ------------------

ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_0::ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RD_WEIGHT_BDMA(0, 8, 0x1, r_std, w_std),
    RD_WEIGHT_SDP(8, 8, 0x1, r_std, w_std),
    RD_WEIGHT_PDP(16, 8, 0x1, r_std, w_std),
    RD_WEIGHT_CDP(24, 8, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RD_WEIGHT_BDMA.write(wdata);
  RD_WEIGHT_SDP.write(wdata);
  RD_WEIGHT_PDP.write(wdata);
  RD_WEIGHT_CDP.write(wdata);
}

int  ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RD_WEIGHT_BDMA.read(rdata);
  RD_WEIGHT_SDP.read(rdata);
  RD_WEIGHT_PDP.read(rdata);
  RD_WEIGHT_CDP.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_1 methods ------------------

ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_1::ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RD_WEIGHT_SDP_B(0, 8, 0x1, r_std, w_std),
    RD_WEIGHT_SDP_N(8, 8, 0x1, r_std, w_std),
    RD_WEIGHT_SDP_E(16, 8, 0x1, r_std, w_std),
    RD_WEIGHT_CDMA_DAT(24, 8, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RD_WEIGHT_SDP_B.write(wdata);
  RD_WEIGHT_SDP_N.write(wdata);
  RD_WEIGHT_SDP_E.write(wdata);
  RD_WEIGHT_CDMA_DAT.write(wdata);
}

int  ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RD_WEIGHT_SDP_B.read(rdata);
  RD_WEIGHT_SDP_N.read(rdata);
  RD_WEIGHT_SDP_E.read(rdata);
  RD_WEIGHT_CDMA_DAT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_2 methods ------------------

ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_2::ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_2(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RD_WEIGHT_CDMA_WT(0, 8, 0x1, r_std, w_std),
    RD_WEIGHT_RBK(8, 8, 0x1, r_std, w_std),
    RD_WEIGHT_RSV_1(16, 8, 0x1, r_std, w_std),
    RD_WEIGHT_RSV_0(24, 8, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_2::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_2 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_2\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_2::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RD_WEIGHT_CDMA_WT.write(wdata);
  RD_WEIGHT_RBK.write(wdata);
  RD_WEIGHT_RSV_1.write(wdata);
  RD_WEIGHT_RSV_0.write(wdata);
}

int  ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_2::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_2 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_2\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_2::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RD_WEIGHT_CDMA_WT.read(rdata);
  RD_WEIGHT_RBK.read(rdata);
  RD_WEIGHT_RSV_1.read(rdata);
  RD_WEIGHT_RSV_0.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_0 methods ------------------

ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_0::ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WR_WEIGHT_BDMA(0, 8, 0x1, r_std, w_std),
    WR_WEIGHT_SDP(8, 8, 0x1, r_std, w_std),
    WR_WEIGHT_PDP(16, 8, 0x1, r_std, w_std),
    WR_WEIGHT_CDP(24, 8, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WR_WEIGHT_BDMA.write(wdata);
  WR_WEIGHT_SDP.write(wdata);
  WR_WEIGHT_PDP.write(wdata);
  WR_WEIGHT_CDP.write(wdata);
}

int  ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WR_WEIGHT_BDMA.read(rdata);
  WR_WEIGHT_SDP.read(rdata);
  WR_WEIGHT_PDP.read(rdata);
  WR_WEIGHT_CDP.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_1 methods ------------------

ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_1::ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WR_WEIGHT_RBK(0, 8, 0x1, r_std, w_std),
    WR_WEIGHT_RSV_2(8, 8, 0x1, r_std, w_std),
    WR_WEIGHT_RSV_1(16, 8, 0x1, r_std, w_std),
    WR_WEIGHT_RSV_0(24, 8, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WR_WEIGHT_RBK.write(wdata);
  WR_WEIGHT_RSV_2.write(wdata);
  WR_WEIGHT_RSV_1.write(wdata);
  WR_WEIGHT_RSV_0.write(wdata);
}

int  ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WR_WEIGHT_RBK.read(rdata);
  WR_WEIGHT_RSV_2.read(rdata);
  WR_WEIGHT_RSV_1.read(rdata);
  WR_WEIGHT_RSV_0.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CVIF_CFG_OUTSTANDING_CNT methods ------------------

ordt_rg_NVDLA_CVIF_CFG_OUTSTANDING_CNT::ordt_rg_NVDLA_CVIF_CFG_OUTSTANDING_CNT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RD_OS_CNT(0, 8, 0xff, r_std, w_std),
    WR_OS_CNT(8, 8, 0xff, r_std, w_std) {
}

int  ordt_rg_NVDLA_CVIF_CFG_OUTSTANDING_CNT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CVIF_CFG_OUTSTANDING_CNT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CVIF_CFG_OUTSTANDING_CNT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CVIF_CFG_OUTSTANDING_CNT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RD_OS_CNT.write(wdata);
  WR_OS_CNT.write(wdata);
}

int  ordt_rg_NVDLA_CVIF_CFG_OUTSTANDING_CNT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CVIF_CFG_OUTSTANDING_CNT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CVIF_CFG_OUTSTANDING_CNT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CVIF_CFG_OUTSTANDING_CNT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RD_OS_CNT.read(rdata);
  WR_OS_CNT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_CVIF_STATUS methods ------------------

ordt_rg_NVDLA_CVIF_STATUS::ordt_rg_NVDLA_CVIF_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    IDLE(8, 1, 0x1, r_std, w_none) {
}

int  ordt_rg_NVDLA_CVIF_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_CVIF_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_CVIF_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_CVIF_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  IDLE.write(wdata);
}

int  ordt_rg_NVDLA_CVIF_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_CVIF_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_CVIF_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_CVIF_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  IDLE.read(rdata);
}

// ------------------ ordt_rset_NVDLA_CVIF methods ------------------

ordt_rset_NVDLA_CVIF::ordt_rset_NVDLA_CVIF(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    CFG_RD_WEIGHT_0(_m_startaddress + 0x0, _m_startaddress + 0x3),
    CFG_RD_WEIGHT_1(_m_startaddress + 0x4, _m_startaddress + 0x7),
    CFG_RD_WEIGHT_2(_m_startaddress + 0x8, _m_startaddress + 0xb),
    CFG_WR_WEIGHT_0(_m_startaddress + 0xc, _m_startaddress + 0xf),
    CFG_WR_WEIGHT_1(_m_startaddress + 0x10, _m_startaddress + 0x13),
    CFG_OUTSTANDING_CNT(_m_startaddress + 0x14, _m_startaddress + 0x17),
    STATUS(_m_startaddress + 0x18, _m_startaddress + 0x1b) {
  m_children.push_back(&CFG_RD_WEIGHT_0);
  m_children.push_back(&CFG_RD_WEIGHT_1);
  m_children.push_back(&CFG_RD_WEIGHT_2);
  m_children.push_back(&CFG_WR_WEIGHT_0);
  m_children.push_back(&CFG_WR_WEIGHT_1);
  m_children.push_back(&CFG_OUTSTANDING_CNT);
  m_children.push_back(&STATUS);
}

void  ordt_rset_NVDLA_CVIF::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&CFG_RD_WEIGHT_0);
  m_children.push_back(&CFG_RD_WEIGHT_1);
  m_children.push_back(&CFG_RD_WEIGHT_2);
  m_children.push_back(&CFG_WR_WEIGHT_0);
  m_children.push_back(&CFG_WR_WEIGHT_1);
  m_children.push_back(&CFG_OUTSTANDING_CNT);
  m_children.push_back(&STATUS);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW methods ------------------

ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW::ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    V32(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  V32.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  V32.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH::ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    V8(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  V8.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  V8.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW methods ------------------

ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW::ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    V32(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  V32.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  V32.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH::ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    V8(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  V8.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  V8.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_LINE methods ------------------

ordt_rg_NVDLA_BDMA_CFG_LINE::ordt_rg_NVDLA_BDMA_CFG_LINE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SIZE(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_LINE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_LINE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LINE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LINE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SIZE.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_LINE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_LINE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LINE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LINE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SIZE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_CMD methods ------------------

ordt_rg_NVDLA_BDMA_CFG_CMD::ordt_rg_NVDLA_BDMA_CFG_CMD(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    SRC_RAM_TYPE(0, 1, 0x0, r_std, w_std),
    DST_RAM_TYPE(1, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_CMD::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_CMD at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_CMD\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_CMD::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  SRC_RAM_TYPE.write(wdata);
  DST_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_CMD::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_CMD at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_CMD\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_CMD::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  SRC_RAM_TYPE.read(rdata);
  DST_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT methods ------------------

ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT::ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NUMBER(0, 24, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NUMBER.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NUMBER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_SRC_LINE methods ------------------

ordt_rg_NVDLA_BDMA_CFG_SRC_LINE::ordt_rg_NVDLA_BDMA_CFG_SRC_LINE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_LINE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_SRC_LINE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_LINE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_LINE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_LINE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_SRC_LINE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_LINE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_LINE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_DST_LINE methods ------------------

ordt_rg_NVDLA_BDMA_CFG_DST_LINE::ordt_rg_NVDLA_BDMA_CFG_DST_LINE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_LINE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_DST_LINE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_LINE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_LINE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_LINE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_DST_LINE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_LINE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_LINE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT methods ------------------

ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT::ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    NUMBER(0, 24, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  NUMBER.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  NUMBER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_SRC_SURF methods ------------------

ordt_rg_NVDLA_BDMA_CFG_SRC_SURF::ordt_rg_NVDLA_BDMA_CFG_SRC_SURF(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_SURF::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_SRC_SURF at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_SURF\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_SURF::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_SRC_SURF::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_SRC_SURF at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_SRC_SURF\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_SRC_SURF::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_DST_SURF methods ------------------

ordt_rg_NVDLA_BDMA_CFG_DST_SURF::ordt_rg_NVDLA_BDMA_CFG_DST_SURF(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_SURF::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_DST_SURF at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_SURF\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_SURF::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_DST_SURF::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_DST_SURF at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_DST_SURF\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_DST_SURF::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_OP methods ------------------

ordt_rg_NVDLA_BDMA_CFG_OP::ordt_rg_NVDLA_BDMA_CFG_OP(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_OP::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_OP at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_OP\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_OP::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EN.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_OP::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_OP at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_OP\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_OP::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_LAUNCH0 methods ------------------

ordt_rg_NVDLA_BDMA_CFG_LAUNCH0::ordt_rg_NVDLA_BDMA_CFG_LAUNCH0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    GRP0_LAUNCH(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_LAUNCH0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LAUNCH0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  GRP0_LAUNCH.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_LAUNCH0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LAUNCH0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  GRP0_LAUNCH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_LAUNCH1 methods ------------------

ordt_rg_NVDLA_BDMA_CFG_LAUNCH1::ordt_rg_NVDLA_BDMA_CFG_LAUNCH1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    GRP1_LAUNCH(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_LAUNCH1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LAUNCH1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  GRP1_LAUNCH.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_LAUNCH1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_LAUNCH1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_LAUNCH1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  GRP1_LAUNCH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_CFG_STATUS methods ------------------

ordt_rg_NVDLA_BDMA_CFG_STATUS::ordt_rg_NVDLA_BDMA_CFG_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STALL_COUNT_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_BDMA_CFG_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_CFG_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STALL_COUNT_EN.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_CFG_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_CFG_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_CFG_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_CFG_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STALL_COUNT_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_STATUS methods ------------------

ordt_rg_NVDLA_BDMA_STATUS::ordt_rg_NVDLA_BDMA_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    FREE_SLOT(0, 8, 0x14, r_std, w_none),
    IDLE(8, 1, 0x1, r_std, w_none),
    GRP0_BUSY(9, 1, 0x0, r_std, w_none),
    GRP1_BUSY(10, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_BDMA_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  FREE_SLOT.write(wdata);
  IDLE.write(wdata);
  GRP0_BUSY.write(wdata);
  GRP1_BUSY.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  FREE_SLOT.read(rdata);
  IDLE.read(rdata);
  GRP0_BUSY.read(rdata);
  GRP1_BUSY.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL methods ------------------

ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL::ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    COUNT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  COUNT.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  COUNT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL methods ------------------

ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL::ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    COUNT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  COUNT.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  COUNT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL methods ------------------

ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL::ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    COUNT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  COUNT.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  COUNT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL methods ------------------

ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL::ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    COUNT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  COUNT.write(wdata);
}

int  ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  COUNT.read(rdata);
}

// ------------------ ordt_rset_NVDLA_BDMA methods ------------------

ordt_rset_NVDLA_BDMA::ordt_rset_NVDLA_BDMA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    CFG_SRC_ADDR_LOW(_m_startaddress + 0x0, _m_startaddress + 0x3),
    CFG_SRC_ADDR_HIGH(_m_startaddress + 0x4, _m_startaddress + 0x7),
    CFG_DST_ADDR_LOW(_m_startaddress + 0x8, _m_startaddress + 0xb),
    CFG_DST_ADDR_HIGH(_m_startaddress + 0xc, _m_startaddress + 0xf),
    CFG_LINE(_m_startaddress + 0x10, _m_startaddress + 0x13),
    CFG_CMD(_m_startaddress + 0x14, _m_startaddress + 0x17),
    CFG_LINE_REPEAT(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    CFG_SRC_LINE(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    CFG_DST_LINE(_m_startaddress + 0x20, _m_startaddress + 0x23),
    CFG_SURF_REPEAT(_m_startaddress + 0x24, _m_startaddress + 0x27),
    CFG_SRC_SURF(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    CFG_DST_SURF(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    CFG_OP(_m_startaddress + 0x30, _m_startaddress + 0x33),
    CFG_LAUNCH0(_m_startaddress + 0x34, _m_startaddress + 0x37),
    CFG_LAUNCH1(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    CFG_STATUS(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    STATUS(_m_startaddress + 0x40, _m_startaddress + 0x43),
    STATUS_GRP0_READ_STALL(_m_startaddress + 0x44, _m_startaddress + 0x47),
    STATUS_GRP0_WRITE_STALL(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    STATUS_GRP1_READ_STALL(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    STATUS_GRP1_WRITE_STALL(_m_startaddress + 0x50, _m_startaddress + 0x53) {
  m_children.push_back(&CFG_SRC_ADDR_LOW);
  m_children.push_back(&CFG_SRC_ADDR_HIGH);
  m_children.push_back(&CFG_DST_ADDR_LOW);
  m_children.push_back(&CFG_DST_ADDR_HIGH);
  m_children.push_back(&CFG_LINE);
  m_children.push_back(&CFG_CMD);
  m_children.push_back(&CFG_LINE_REPEAT);
  m_children.push_back(&CFG_SRC_LINE);
  m_children.push_back(&CFG_DST_LINE);
  m_children.push_back(&CFG_SURF_REPEAT);
  m_children.push_back(&CFG_SRC_SURF);
  m_children.push_back(&CFG_DST_SURF);
  m_children.push_back(&CFG_OP);
  m_children.push_back(&CFG_LAUNCH0);
  m_children.push_back(&CFG_LAUNCH1);
  m_children.push_back(&CFG_STATUS);
  m_children.push_back(&STATUS);
  m_children.push_back(&STATUS_GRP0_READ_STALL);
  m_children.push_back(&STATUS_GRP0_WRITE_STALL);
  m_children.push_back(&STATUS_GRP1_READ_STALL);
  m_children.push_back(&STATUS_GRP1_WRITE_STALL);
}

void  ordt_rset_NVDLA_BDMA::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&CFG_SRC_ADDR_LOW);
  m_children.push_back(&CFG_SRC_ADDR_HIGH);
  m_children.push_back(&CFG_DST_ADDR_LOW);
  m_children.push_back(&CFG_DST_ADDR_HIGH);
  m_children.push_back(&CFG_LINE);
  m_children.push_back(&CFG_CMD);
  m_children.push_back(&CFG_LINE_REPEAT);
  m_children.push_back(&CFG_SRC_LINE);
  m_children.push_back(&CFG_DST_LINE);
  m_children.push_back(&CFG_SURF_REPEAT);
  m_children.push_back(&CFG_SRC_SURF);
  m_children.push_back(&CFG_DST_SURF);
  m_children.push_back(&CFG_OP);
  m_children.push_back(&CFG_LAUNCH0);
  m_children.push_back(&CFG_LAUNCH1);
  m_children.push_back(&CFG_STATUS);
  m_children.push_back(&STATUS);
  m_children.push_back(&STATUS_GRP0_READ_STALL);
  m_children.push_back(&STATUS_GRP0_WRITE_STALL);
  m_children.push_back(&STATUS_GRP1_READ_STALL);
  m_children.push_back(&STATUS_GRP1_WRITE_STALL);
}

// ------------------ ordt_rg_NVDLA_RBK_S_STATUS methods ------------------

ordt_rg_NVDLA_RBK_S_STATUS::ordt_rg_NVDLA_RBK_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_RBK_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_RBK_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_S_POINTER methods ------------------

ordt_rg_NVDLA_RBK_S_POINTER::ordt_rg_NVDLA_RBK_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_RBK_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_RBK_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_RBK_D_OP_ENABLE::ordt_rg_NVDLA_RBK_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_MISC_CFG methods ------------------

ordt_rg_NVDLA_RBK_D_MISC_CFG::ordt_rg_NVDLA_RBK_D_MISC_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RUBIK_MODE(0, 2, 0x0, r_std, w_std),
    IN_PRECISION(8, 2, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_MISC_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_MISC_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_MISC_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_MISC_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RUBIK_MODE.write(wdata);
  IN_PRECISION.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_MISC_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_MISC_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_MISC_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_MISC_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RUBIK_MODE.read(rdata);
  IN_PRECISION.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE methods ------------------

ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE::ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0 methods ------------------

ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0::ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_WIDTH(0, 13, 0x0, r_std, w_std),
    DATAIN_HEIGHT(16, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_WIDTH.write(wdata);
  DATAIN_HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_WIDTH.read(rdata);
  DATAIN_HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1 methods ------------------

ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1::ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAIN_CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAIN_CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAIN_CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH::ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAIN_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAIN_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAIN_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW methods ------------------

ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW::ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAIN_ADDR_LOW(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAIN_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAIN_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE::ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAIN_LINE_STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAIN_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAIN_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE methods ------------------

ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE::ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAIN_SURF_STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAIN_SURF_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAIN_SURF_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE methods ------------------

ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE::ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAIN_PLANAR_STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAIN_PLANAR_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAIN_PLANAR_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE methods ------------------

ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE::ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAOUT_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAOUT_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAOUT_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1 methods ------------------

ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1::ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DATAOUT_CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DATAOUT_CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DATAOUT_CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH::ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAOUT_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAOUT_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAOUT_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW methods ------------------

ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW::ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAOUT_ADDR_LOW(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAOUT_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAOUT_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE::ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAOUT_LINE_STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAOUT_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAOUT_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0 methods ------------------

ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0::ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CONTRACT_STRIDE_0(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CONTRACT_STRIDE_0.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CONTRACT_STRIDE_0.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1 methods ------------------

ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1::ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CONTRACT_STRIDE_1(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1 at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CONTRACT_STRIDE_1.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1 at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CONTRACT_STRIDE_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE methods ------------------

ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE::ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAOUT_SURF_STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAOUT_SURF_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAOUT_SURF_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE methods ------------------

ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE::ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DAOUT_PLANAR_STRIDE(5, 27, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DAOUT_PLANAR_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DAOUT_PLANAR_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_DECONV_STRIDE methods ------------------

ordt_rg_NVDLA_RBK_D_DECONV_STRIDE::ordt_rg_NVDLA_RBK_D_DECONV_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DECONV_X_STRIDE(0, 5, 0x0, r_std, w_std),
    DECONV_Y_STRIDE(16, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_DECONV_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_DECONV_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DECONV_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DECONV_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DECONV_X_STRIDE.write(wdata);
  DECONV_Y_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_DECONV_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_DECONV_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_DECONV_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_DECONV_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DECONV_X_STRIDE.read(rdata);
  DECONV_Y_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_PERF_ENABLE methods ------------------

ordt_rg_NVDLA_RBK_D_PERF_ENABLE::ordt_rg_NVDLA_RBK_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_RBK_D_PERF_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_PERF_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_PERF_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_PERF_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_EN.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_PERF_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_PERF_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_PERF_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_PERF_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_PERF_READ_STALL methods ------------------

ordt_rg_NVDLA_RBK_D_PERF_READ_STALL::ordt_rg_NVDLA_RBK_D_PERF_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    RD_STALL_CNT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_RBK_D_PERF_READ_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_PERF_READ_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_PERF_READ_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_PERF_READ_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  RD_STALL_CNT.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_PERF_READ_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_PERF_READ_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_PERF_READ_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_PERF_READ_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  RD_STALL_CNT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL methods ------------------

ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL::ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WR_STALL_CNT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WR_STALL_CNT.write(wdata);
}

int  ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WR_STALL_CNT.read(rdata);
}

// ------------------ ordt_rset_NVDLA_RBK methods ------------------

ordt_rset_NVDLA_RBK::ordt_rset_NVDLA_RBK(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    D_OP_ENABLE(_m_startaddress + 0x8, _m_startaddress + 0xb),
    D_MISC_CFG(_m_startaddress + 0xc, _m_startaddress + 0xf),
    D_DAIN_RAM_TYPE(_m_startaddress + 0x10, _m_startaddress + 0x13),
    D_DATAIN_SIZE_0(_m_startaddress + 0x14, _m_startaddress + 0x17),
    D_DATAIN_SIZE_1(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    D_DAIN_ADDR_HIGH(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    D_DAIN_ADDR_LOW(_m_startaddress + 0x20, _m_startaddress + 0x23),
    D_DAIN_LINE_STRIDE(_m_startaddress + 0x24, _m_startaddress + 0x27),
    D_DAIN_SURF_STRIDE(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    D_DAIN_PLANAR_STRIDE(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    D_DAOUT_RAM_TYPE(_m_startaddress + 0x30, _m_startaddress + 0x33),
    D_DATAOUT_SIZE_1(_m_startaddress + 0x34, _m_startaddress + 0x37),
    D_DAOUT_ADDR_HIGH(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    D_DAOUT_ADDR_LOW(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    D_DAOUT_LINE_STRIDE(_m_startaddress + 0x40, _m_startaddress + 0x43),
    D_CONTRACT_STRIDE_0(_m_startaddress + 0x44, _m_startaddress + 0x47),
    D_CONTRACT_STRIDE_1(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    D_DAOUT_SURF_STRIDE(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    D_DAOUT_PLANAR_STRIDE(_m_startaddress + 0x50, _m_startaddress + 0x53),
    D_DECONV_STRIDE(_m_startaddress + 0x54, _m_startaddress + 0x57),
    D_PERF_ENABLE(_m_startaddress + 0x58, _m_startaddress + 0x5b),
    D_PERF_READ_STALL(_m_startaddress + 0x5c, _m_startaddress + 0x5f),
    D_PERF_WRITE_STALL(_m_startaddress + 0x60, _m_startaddress + 0x63) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
  m_children.push_back(&D_DAIN_RAM_TYPE);
  m_children.push_back(&D_DATAIN_SIZE_0);
  m_children.push_back(&D_DATAIN_SIZE_1);
  m_children.push_back(&D_DAIN_ADDR_HIGH);
  m_children.push_back(&D_DAIN_ADDR_LOW);
  m_children.push_back(&D_DAIN_LINE_STRIDE);
  m_children.push_back(&D_DAIN_SURF_STRIDE);
  m_children.push_back(&D_DAIN_PLANAR_STRIDE);
  m_children.push_back(&D_DAOUT_RAM_TYPE);
  m_children.push_back(&D_DATAOUT_SIZE_1);
  m_children.push_back(&D_DAOUT_ADDR_HIGH);
  m_children.push_back(&D_DAOUT_ADDR_LOW);
  m_children.push_back(&D_DAOUT_LINE_STRIDE);
  m_children.push_back(&D_CONTRACT_STRIDE_0);
  m_children.push_back(&D_CONTRACT_STRIDE_1);
  m_children.push_back(&D_DAOUT_SURF_STRIDE);
  m_children.push_back(&D_DAOUT_PLANAR_STRIDE);
  m_children.push_back(&D_DECONV_STRIDE);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_READ_STALL);
  m_children.push_back(&D_PERF_WRITE_STALL);
}

void  ordt_rset_NVDLA_RBK::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_MISC_CFG);
  m_children.push_back(&D_DAIN_RAM_TYPE);
  m_children.push_back(&D_DATAIN_SIZE_0);
  m_children.push_back(&D_DATAIN_SIZE_1);
  m_children.push_back(&D_DAIN_ADDR_HIGH);
  m_children.push_back(&D_DAIN_ADDR_LOW);
  m_children.push_back(&D_DAIN_LINE_STRIDE);
  m_children.push_back(&D_DAIN_SURF_STRIDE);
  m_children.push_back(&D_DAIN_PLANAR_STRIDE);
  m_children.push_back(&D_DAOUT_RAM_TYPE);
  m_children.push_back(&D_DATAOUT_SIZE_1);
  m_children.push_back(&D_DAOUT_ADDR_HIGH);
  m_children.push_back(&D_DAOUT_ADDR_LOW);
  m_children.push_back(&D_DAOUT_LINE_STRIDE);
  m_children.push_back(&D_CONTRACT_STRIDE_0);
  m_children.push_back(&D_CONTRACT_STRIDE_1);
  m_children.push_back(&D_DAOUT_SURF_STRIDE);
  m_children.push_back(&D_DAOUT_PLANAR_STRIDE);
  m_children.push_back(&D_DECONV_STRIDE);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_READ_STALL);
  m_children.push_back(&D_PERF_WRITE_STALL);
}

// ------------------ ordt_root methods ------------------

ordt_root::ordt_root()
  : ordt_root(0x0, 0x11063) {
}

ordt_root::ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    NVDLA_CFGROM(_m_startaddress + 0x0, _m_startaddress + 0x1ff),
    NVDLA_GLB(_m_startaddress + 0x1000, _m_startaddress + 0x100f),
    NVDLA_MCIF(_m_startaddress + 0x2000, _m_startaddress + 0x201f),
    NVDLA_CDMA(_m_startaddress + 0x3000, _m_startaddress + 0x30ff),
    NVDLA_CSC(_m_startaddress + 0x4000, _m_startaddress + 0x407f),
    NVDLA_CMAC_A(_m_startaddress + 0x5000, _m_startaddress + 0x500f),
    NVDLA_CMAC_B(_m_startaddress + 0x6000, _m_startaddress + 0x600f),
    NVDLA_CACC(_m_startaddress + 0x7000, _m_startaddress + 0x703f),
    NVDLA_SDP_RDMA(_m_startaddress + 0x8000, _m_startaddress + 0x80ff),
    NVDLA_SDP(_m_startaddress + 0x9000, _m_startaddress + 0x90ff),
    NVDLA_PDP_RDMA(_m_startaddress + 0xa000, _m_startaddress + 0xa07f),
    NVDLA_PDP(_m_startaddress + 0xb000, _m_startaddress + 0xb0ff),
    NVDLA_CDP_RDMA(_m_startaddress + 0xc000, _m_startaddress + 0xc07f),
    NVDLA_CDP(_m_startaddress + 0xd000, _m_startaddress + 0xd0ff),
    NVDLA_GEC(_m_startaddress + 0xe000, _m_startaddress + 0xe0ff),
    NVDLA_CVIF(_m_startaddress + 0xf000, _m_startaddress + 0xf01f),
    NVDLA_BDMA(_m_startaddress + 0x10000, _m_startaddress + 0x1007f),
    NVDLA_RBK(_m_startaddress + 0x11000, _m_startaddress + 0x1107f) {
  m_children.push_back(&NVDLA_CFGROM);
  m_children.push_back(&NVDLA_GLB);
  m_children.push_back(&NVDLA_MCIF);
  m_children.push_back(&NVDLA_CDMA);
  m_children.push_back(&NVDLA_CSC);
  m_children.push_back(&NVDLA_CMAC_A);
  m_children.push_back(&NVDLA_CMAC_B);
  m_children.push_back(&NVDLA_CACC);
  m_children.push_back(&NVDLA_SDP_RDMA);
  m_children.push_back(&NVDLA_SDP);
  m_children.push_back(&NVDLA_PDP_RDMA);
  m_children.push_back(&NVDLA_PDP);
  m_children.push_back(&NVDLA_CDP_RDMA);
  m_children.push_back(&NVDLA_CDP);
  m_children.push_back(&NVDLA_GEC);
  m_children.push_back(&NVDLA_CVIF);
  m_children.push_back(&NVDLA_BDMA);
  m_children.push_back(&NVDLA_RBK);
}

void  ordt_root::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&NVDLA_CFGROM);
  m_children.push_back(&NVDLA_GLB);
  m_children.push_back(&NVDLA_MCIF);
  m_children.push_back(&NVDLA_CDMA);
  m_children.push_back(&NVDLA_CSC);
  m_children.push_back(&NVDLA_CMAC_A);
  m_children.push_back(&NVDLA_CMAC_B);
  m_children.push_back(&NVDLA_CACC);
  m_children.push_back(&NVDLA_SDP_RDMA);
  m_children.push_back(&NVDLA_SDP);
  m_children.push_back(&NVDLA_PDP_RDMA);
  m_children.push_back(&NVDLA_PDP);
  m_children.push_back(&NVDLA_CDP_RDMA);
  m_children.push_back(&NVDLA_CDP);
  m_children.push_back(&NVDLA_GEC);
  m_children.push_back(&NVDLA_CVIF);
  m_children.push_back(&NVDLA_BDMA);
  m_children.push_back(&NVDLA_RBK);
}

