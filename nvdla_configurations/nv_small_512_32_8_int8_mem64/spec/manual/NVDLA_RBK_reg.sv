//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_RBK.rdl
//   Parms: opendla.parms
//   Date: Sat Feb 29 19:31:31 CET 2020
//

import uvm_pkg::*;
import ordt_uvm_reg_pkg::*;

// S_STATUS
class reg_addrmap_NVDLA_NVDLA_RBK_S_STATUS extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl STATUS_0;
  rand uvm_reg_field_rdl STATUS_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_S_STATUS");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.STATUS_0 = new("STATUS_0");
    this.STATUS_0.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_0.configure(this, 2, 0, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_0.add_def_property("spec_access", "r");
    this.STATUS_0.add_def_property("spec_sw_default", "0x0");
    this.STATUS_0.add_def_property("sw_default_mask", "0x0");
    this.STATUS_0.add_def_property("reset_mask", "0x3");
    this.STATUS_1 = new("STATUS_1");
    this.STATUS_1.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.STATUS_1.configure(this, 2, 16, "RO", 1, 2'h0, 1, 0, 0);
    this.STATUS_1.add_def_property("spec_access", "r");
    this.STATUS_1.add_def_property("spec_sw_default", "0x0");
    this.STATUS_1.add_def_property("sw_default_mask", "0x0");
    this.STATUS_1.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "STATUS_0"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "STATUS_1"}, 16, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_S_STATUS

// S_POINTER
class reg_addrmap_NVDLA_NVDLA_RBK_S_POINTER extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PRODUCER;
  rand uvm_reg_field_rdl CONSUMER;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_S_POINTER");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PRODUCER = new("PRODUCER");
    this.PRODUCER.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PRODUCER.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 0);
    this.PRODUCER.add_def_property("spec_access", "rw");
    this.PRODUCER.add_def_property("spec_sw_default", "0x0");
    this.PRODUCER.add_def_property("sw_default_mask", "0x0");
    this.PRODUCER.add_def_property("reset_mask", "0x1");
    this.CONSUMER = new("CONSUMER");
    this.CONSUMER.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.CONSUMER.configure(this, 1, 16, "RO", 1, 1'h0, 1, 0, 0);
    this.CONSUMER.add_def_property("spec_access", "r");
    this.CONSUMER.add_def_property("spec_sw_default", "0x0");
    this.CONSUMER.add_def_property("sw_default_mask", "0x0");
    this.CONSUMER.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PRODUCER"}, 0, 1);
    add_hdl_path_slice({rdl_reg_name, "CONSUMER"}, 16, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_S_POINTER

// D_OP_ENABLE
class reg_addrmap_NVDLA_NVDLA_RBK_D_OP_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl OP_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_OP_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.OP_EN = new("OP_EN");
    this.OP_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.OP_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.OP_EN.add_def_property("spec_access", "rwto");
    this.OP_EN.add_def_property("spec_sw_default", "0x0");
    this.OP_EN.add_def_property("sw_default_mask", "0x0");
    this.OP_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "OP_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_OP_ENABLE

// D_MISC_CFG
class reg_addrmap_NVDLA_NVDLA_RBK_D_MISC_CFG extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RUBIK_MODE;
  rand uvm_reg_field_rdl IN_PRECISION;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_MISC_CFG");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RUBIK_MODE = new("RUBIK_MODE");
    this.RUBIK_MODE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.RUBIK_MODE.configure(this, 2, 0, "RW", 0, 2'h0, 1, 1, 0);
    this.RUBIK_MODE.add_def_property("spec_access", "rw");
    this.RUBIK_MODE.add_def_property("spec_sw_default", "0x0");
    this.RUBIK_MODE.add_def_property("sw_default_mask", "0x0");
    this.RUBIK_MODE.add_def_property("reset_mask", "0x3");
    this.IN_PRECISION = new("IN_PRECISION");
    this.IN_PRECISION.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.IN_PRECISION.configure(this, 2, 8, "RW", 0, 2'h1, 1, 1, 0);
    this.IN_PRECISION.add_def_property("spec_access", "rw");
    this.IN_PRECISION.add_def_property("spec_sw_default", "0x0");
    this.IN_PRECISION.add_def_property("sw_default_mask", "0x0");
    this.IN_PRECISION.add_def_property("reset_mask", "0x3");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RUBIK_MODE"}, 0, 2);
    add_hdl_path_slice({rdl_reg_name, "IN_PRECISION"}, 8, 2);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_MISC_CFG

// D_DAIN_RAM_TYPE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_RAM_TYPE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_RAM_TYPE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_RAM_TYPE = new("DATAIN_RAM_TYPE");
    this.DATAIN_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DATAIN_RAM_TYPE.add_def_property("spec_access", "rw");
    this.DATAIN_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_RAM_TYPE

// D_DATAIN_SIZE_0
class reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_WIDTH;
  rand uvm_reg_field_rdl DATAIN_HEIGHT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_WIDTH = new("DATAIN_WIDTH");
    this.DATAIN_WIDTH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_WIDTH.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_WIDTH.add_def_property("spec_access", "rw");
    this.DATAIN_WIDTH.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_WIDTH.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_WIDTH.add_def_property("reset_mask", "0x1fff");
    this.DATAIN_HEIGHT = new("DATAIN_HEIGHT");
    this.DATAIN_HEIGHT.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_HEIGHT.configure(this, 13, 16, "RW", 0, 13'h0, 1, 1, 0);
    this.DATAIN_HEIGHT.add_def_property("spec_access", "rw");
    this.DATAIN_HEIGHT.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_HEIGHT.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_HEIGHT.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_WIDTH"}, 0, 13);
    add_hdl_path_slice({rdl_reg_name, "DATAIN_HEIGHT"}, 16, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_0

// D_DATAIN_SIZE_1
class reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAIN_CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAIN_CHANNEL = new("DATAIN_CHANNEL");
    this.DATAIN_CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAIN_CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.DATAIN_CHANNEL.add_def_property("spec_access", "rw");
    this.DATAIN_CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.DATAIN_CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.DATAIN_CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAIN_CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_1

// D_DAIN_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAIN_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAIN_ADDR_HIGH = new("DAIN_ADDR_HIGH");
    this.DAIN_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAIN_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DAIN_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.DAIN_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.DAIN_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.DAIN_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAIN_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_HIGH

// D_DAIN_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAIN_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAIN_ADDR_LOW = new("DAIN_ADDR_LOW");
    this.DAIN_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAIN_ADDR_LOW.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAIN_ADDR_LOW.add_def_property("spec_access", "rw");
    this.DAIN_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.DAIN_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.DAIN_ADDR_LOW.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAIN_ADDR_LOW"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_LOW

// D_DAIN_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAIN_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAIN_LINE_STRIDE = new("DAIN_LINE_STRIDE");
    this.DAIN_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAIN_LINE_STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAIN_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.DAIN_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DAIN_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DAIN_LINE_STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAIN_LINE_STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_LINE_STRIDE

// D_DAIN_SURF_STRIDE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_SURF_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAIN_SURF_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_SURF_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAIN_SURF_STRIDE = new("DAIN_SURF_STRIDE");
    this.DAIN_SURF_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAIN_SURF_STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAIN_SURF_STRIDE.add_def_property("spec_access", "rw");
    this.DAIN_SURF_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DAIN_SURF_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DAIN_SURF_STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAIN_SURF_STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_SURF_STRIDE

// D_DAIN_PLANAR_STRIDE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_PLANAR_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAIN_PLANAR_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_PLANAR_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAIN_PLANAR_STRIDE = new("DAIN_PLANAR_STRIDE");
    this.DAIN_PLANAR_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAIN_PLANAR_STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAIN_PLANAR_STRIDE.add_def_property("spec_access", "rw");
    this.DAIN_PLANAR_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DAIN_PLANAR_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DAIN_PLANAR_STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAIN_PLANAR_STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_PLANAR_STRIDE

// D_DAOUT_RAM_TYPE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_RAM_TYPE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAOUT_RAM_TYPE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_RAM_TYPE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAOUT_RAM_TYPE = new("DATAOUT_RAM_TYPE");
    this.DATAOUT_RAM_TYPE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAOUT_RAM_TYPE.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.DATAOUT_RAM_TYPE.add_def_property("spec_access", "rw");
    this.DATAOUT_RAM_TYPE.add_def_property("spec_sw_default", "0x0");
    this.DATAOUT_RAM_TYPE.add_def_property("sw_default_mask", "0x0");
    this.DATAOUT_RAM_TYPE.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAOUT_RAM_TYPE"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_RAM_TYPE

// D_DATAOUT_SIZE_1
class reg_addrmap_NVDLA_NVDLA_RBK_D_DATAOUT_SIZE_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DATAOUT_CHANNEL;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DATAOUT_SIZE_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DATAOUT_CHANNEL = new("DATAOUT_CHANNEL");
    this.DATAOUT_CHANNEL.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DATAOUT_CHANNEL.configure(this, 13, 0, "RW", 0, 13'h0, 1, 1, 1);
    this.DATAOUT_CHANNEL.add_def_property("spec_access", "rw");
    this.DATAOUT_CHANNEL.add_def_property("spec_sw_default", "0x0");
    this.DATAOUT_CHANNEL.add_def_property("sw_default_mask", "0x0");
    this.DATAOUT_CHANNEL.add_def_property("reset_mask", "0x1fff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DATAOUT_CHANNEL"}, 0, 13);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DATAOUT_SIZE_1

// D_DAOUT_ADDR_HIGH
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_HIGH extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAOUT_ADDR_HIGH;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_HIGH");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAOUT_ADDR_HIGH = new("DAOUT_ADDR_HIGH");
    this.DAOUT_ADDR_HIGH.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAOUT_ADDR_HIGH.configure(this, 32, 0, "RW", 0, 32'h0, 1, 1, 1);
    this.DAOUT_ADDR_HIGH.add_def_property("spec_access", "rw");
    this.DAOUT_ADDR_HIGH.add_def_property("spec_sw_default", "0x0");
    this.DAOUT_ADDR_HIGH.add_def_property("sw_default_mask", "0x0");
    this.DAOUT_ADDR_HIGH.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAOUT_ADDR_HIGH"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_HIGH

// D_DAOUT_ADDR_LOW
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_LOW extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAOUT_ADDR_LOW;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_LOW");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAOUT_ADDR_LOW = new("DAOUT_ADDR_LOW");
    this.DAOUT_ADDR_LOW.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAOUT_ADDR_LOW.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAOUT_ADDR_LOW.add_def_property("spec_access", "rw");
    this.DAOUT_ADDR_LOW.add_def_property("spec_sw_default", "0x0");
    this.DAOUT_ADDR_LOW.add_def_property("sw_default_mask", "0x0");
    this.DAOUT_ADDR_LOW.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAOUT_ADDR_LOW"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_LOW

// D_DAOUT_LINE_STRIDE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_LINE_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAOUT_LINE_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_LINE_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAOUT_LINE_STRIDE = new("DAOUT_LINE_STRIDE");
    this.DAOUT_LINE_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAOUT_LINE_STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAOUT_LINE_STRIDE.add_def_property("spec_access", "rw");
    this.DAOUT_LINE_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DAOUT_LINE_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DAOUT_LINE_STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAOUT_LINE_STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_LINE_STRIDE

// D_CONTRACT_STRIDE_0
class reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_0 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CONTRACT_STRIDE_0;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_0");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CONTRACT_STRIDE_0 = new("CONTRACT_STRIDE_0");
    this.CONTRACT_STRIDE_0.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONTRACT_STRIDE_0.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.CONTRACT_STRIDE_0.add_def_property("spec_access", "rw");
    this.CONTRACT_STRIDE_0.add_def_property("spec_sw_default", "0x0");
    this.CONTRACT_STRIDE_0.add_def_property("sw_default_mask", "0x0");
    this.CONTRACT_STRIDE_0.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CONTRACT_STRIDE_0"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_0

// D_CONTRACT_STRIDE_1
class reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_1 extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl CONTRACT_STRIDE_1;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_1");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.CONTRACT_STRIDE_1 = new("CONTRACT_STRIDE_1");
    this.CONTRACT_STRIDE_1.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.CONTRACT_STRIDE_1.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.CONTRACT_STRIDE_1.add_def_property("spec_access", "rw");
    this.CONTRACT_STRIDE_1.add_def_property("spec_sw_default", "0x0");
    this.CONTRACT_STRIDE_1.add_def_property("sw_default_mask", "0x0");
    this.CONTRACT_STRIDE_1.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "CONTRACT_STRIDE_1"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_1

// D_DAOUT_SURF_STRIDE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_SURF_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAOUT_SURF_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_SURF_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAOUT_SURF_STRIDE = new("DAOUT_SURF_STRIDE");
    this.DAOUT_SURF_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAOUT_SURF_STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAOUT_SURF_STRIDE.add_def_property("spec_access", "rw");
    this.DAOUT_SURF_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DAOUT_SURF_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DAOUT_SURF_STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAOUT_SURF_STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_SURF_STRIDE

// D_DAOUT_PLANAR_STRIDE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DAOUT_PLANAR_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DAOUT_PLANAR_STRIDE = new("DAOUT_PLANAR_STRIDE");
    this.DAOUT_PLANAR_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DAOUT_PLANAR_STRIDE.configure(this, 27, 5, "RW", 0, 27'h0, 1, 1, 1);
    this.DAOUT_PLANAR_STRIDE.add_def_property("spec_access", "rw");
    this.DAOUT_PLANAR_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DAOUT_PLANAR_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DAOUT_PLANAR_STRIDE.add_def_property("reset_mask", "0x7ffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DAOUT_PLANAR_STRIDE"}, 5, 27);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE

// D_DECONV_STRIDE
class reg_addrmap_NVDLA_NVDLA_RBK_D_DECONV_STRIDE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl DECONV_X_STRIDE;
  rand uvm_reg_field_rdl DECONV_Y_STRIDE;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_DECONV_STRIDE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.DECONV_X_STRIDE = new("DECONV_X_STRIDE");
    this.DECONV_X_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DECONV_X_STRIDE.configure(this, 5, 0, "RW", 0, 5'h0, 1, 1, 0);
    this.DECONV_X_STRIDE.add_def_property("spec_access", "rw");
    this.DECONV_X_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DECONV_X_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DECONV_X_STRIDE.add_def_property("reset_mask", "0x1f");
    this.DECONV_Y_STRIDE = new("DECONV_Y_STRIDE");
    this.DECONV_Y_STRIDE.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.DECONV_Y_STRIDE.configure(this, 5, 16, "RW", 0, 5'h0, 1, 1, 0);
    this.DECONV_Y_STRIDE.add_def_property("spec_access", "rw");
    this.DECONV_Y_STRIDE.add_def_property("spec_sw_default", "0x0");
    this.DECONV_Y_STRIDE.add_def_property("sw_default_mask", "0x0");
    this.DECONV_Y_STRIDE.add_def_property("reset_mask", "0x1f");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "DECONV_X_STRIDE"}, 0, 5);
    add_hdl_path_slice({rdl_reg_name, "DECONV_Y_STRIDE"}, 16, 5);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_DECONV_STRIDE

// D_PERF_ENABLE
class reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_ENABLE extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl PERF_EN;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_ENABLE");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.PERF_EN = new("PERF_EN");
    this.PERF_EN.set_rdl_access_info(1, 1, 1, 0, 0, 0);
    this.PERF_EN.configure(this, 1, 0, "RW", 0, 1'h0, 1, 1, 1);
    this.PERF_EN.add_def_property("spec_access", "rw");
    this.PERF_EN.add_def_property("spec_sw_default", "0x0");
    this.PERF_EN.add_def_property("sw_default_mask", "0x0");
    this.PERF_EN.add_def_property("reset_mask", "0x1");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "PERF_EN"}, 0, 1);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_ENABLE

// D_PERF_READ_STALL
class reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_READ_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl RD_STALL_CNT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_READ_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.RD_STALL_CNT = new("RD_STALL_CNT");
    this.RD_STALL_CNT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.RD_STALL_CNT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.RD_STALL_CNT.add_def_property("spec_access", "r");
    this.RD_STALL_CNT.add_def_property("spec_sw_default", "0x0");
    this.RD_STALL_CNT.add_def_property("sw_default_mask", "0x0");
    this.RD_STALL_CNT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "RD_STALL_CNT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_READ_STALL

// D_PERF_WRITE_STALL
class reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_WRITE_STALL extends uvm_reg_rdl;
  string m_rdl_tag;
  rand uvm_reg_field_rdl WR_STALL_CNT;
  
  function new(string name = "reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_WRITE_STALL");
    super.new(name, 32, UVM_NO_COVERAGE);
  endfunction: new
  
  virtual function void build();
    string rdl_reg_name;
    this.WR_STALL_CNT = new("WR_STALL_CNT");
    this.WR_STALL_CNT.set_rdl_access_info(1, 0, 0, 1, 0, 0);
    this.WR_STALL_CNT.configure(this, 32, 0, "RO", 1, 32'h0, 1, 0, 1);
    this.WR_STALL_CNT.add_def_property("spec_access", "r");
    this.WR_STALL_CNT.add_def_property("spec_sw_default", "0x0");
    this.WR_STALL_CNT.add_def_property("sw_default_mask", "0x0");
    this.WR_STALL_CNT.add_def_property("reset_mask", "0xffffffff");
    
    rdl_reg_name = get_rdl_name("rg_");
    add_hdl_path_slice({rdl_reg_name, "WR_STALL_CNT"}, 0, 32);
  endfunction: build
  
endclass : reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_WRITE_STALL

// Block NVDLA_RBK
class block_addrmap_NVDLA_NVDLA_RBK extends uvm_reg_block_rdl;
  rand reg_addrmap_NVDLA_NVDLA_RBK_S_STATUS S_STATUS;
  rand reg_addrmap_NVDLA_NVDLA_RBK_S_POINTER S_POINTER;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_OP_ENABLE D_OP_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_MISC_CFG D_MISC_CFG;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_RAM_TYPE D_DAIN_RAM_TYPE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_0 D_DATAIN_SIZE_0;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DATAIN_SIZE_1 D_DATAIN_SIZE_1;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_HIGH D_DAIN_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_ADDR_LOW D_DAIN_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_LINE_STRIDE D_DAIN_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_SURF_STRIDE D_DAIN_SURF_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAIN_PLANAR_STRIDE D_DAIN_PLANAR_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_RAM_TYPE D_DAOUT_RAM_TYPE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DATAOUT_SIZE_1 D_DATAOUT_SIZE_1;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_HIGH D_DAOUT_ADDR_HIGH;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_ADDR_LOW D_DAOUT_ADDR_LOW;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_LINE_STRIDE D_DAOUT_LINE_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_0 D_CONTRACT_STRIDE_0;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_CONTRACT_STRIDE_1 D_CONTRACT_STRIDE_1;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_SURF_STRIDE D_DAOUT_SURF_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE D_DAOUT_PLANAR_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_DECONV_STRIDE D_DECONV_STRIDE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_ENABLE D_PERF_ENABLE;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_READ_STALL D_PERF_READ_STALL;
  rand reg_addrmap_NVDLA_NVDLA_RBK_D_PERF_WRITE_STALL D_PERF_WRITE_STALL;
  
  function new(string name = "block_addrmap_NVDLA_NVDLA_RBK");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", 0, 4, UVM_LITTLE_ENDIAN, 1);
    this.S_STATUS = new("S_STATUS");
    this.S_STATUS.configure(this, null, "");
    this.S_STATUS.set_rdl_tag("S_STATUS_");
    this.S_STATUS.set_reg_test_info(0, 0, 32);
    this.S_STATUS.build();
    this.default_map.add_reg(this.S_STATUS, `UVM_REG_ADDR_WIDTH'h0, "RO", 0);
    this.S_POINTER = new("S_POINTER");
    this.S_POINTER.configure(this, null, "");
    this.S_POINTER.set_rdl_tag("S_POINTER_");
    this.S_POINTER.set_reg_test_info(0, 0, 0);
    this.S_POINTER.build();
    this.default_map.add_reg(this.S_POINTER, `UVM_REG_ADDR_WIDTH'h4, "RW", 0);
    this.D_OP_ENABLE = new("D_OP_ENABLE");
    this.D_OP_ENABLE.configure(this, null, "");
    this.D_OP_ENABLE.set_rdl_tag("D_OP_ENABLE_");
    this.D_OP_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_OP_ENABLE.build();
    this.default_map.add_reg(this.D_OP_ENABLE, `UVM_REG_ADDR_WIDTH'h8, "RW", 0);
    this.D_MISC_CFG = new("D_MISC_CFG");
    this.D_MISC_CFG.configure(this, null, "");
    this.D_MISC_CFG.set_rdl_tag("D_MISC_CFG_");
    this.D_MISC_CFG.set_reg_test_info(0, 0, 2);
    this.D_MISC_CFG.build();
    this.default_map.add_reg(this.D_MISC_CFG, `UVM_REG_ADDR_WIDTH'hc, "RW", 0);
    this.D_DAIN_RAM_TYPE = new("D_DAIN_RAM_TYPE");
    this.D_DAIN_RAM_TYPE.configure(this, null, "");
    this.D_DAIN_RAM_TYPE.set_rdl_tag("D_DAIN_RAM_TYPE_");
    this.D_DAIN_RAM_TYPE.set_reg_test_info(0, 0, 2);
    this.D_DAIN_RAM_TYPE.build();
    this.default_map.add_reg(this.D_DAIN_RAM_TYPE, `UVM_REG_ADDR_WIDTH'h10, "RW", 0);
    this.D_DATAIN_SIZE_0 = new("D_DATAIN_SIZE_0");
    this.D_DATAIN_SIZE_0.configure(this, null, "");
    this.D_DATAIN_SIZE_0.set_rdl_tag("D_DATAIN_SIZE_0_");
    this.D_DATAIN_SIZE_0.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_SIZE_0.build();
    this.default_map.add_reg(this.D_DATAIN_SIZE_0, `UVM_REG_ADDR_WIDTH'h14, "RW", 0);
    this.D_DATAIN_SIZE_1 = new("D_DATAIN_SIZE_1");
    this.D_DATAIN_SIZE_1.configure(this, null, "");
    this.D_DATAIN_SIZE_1.set_rdl_tag("D_DATAIN_SIZE_1_");
    this.D_DATAIN_SIZE_1.set_reg_test_info(0, 0, 2);
    this.D_DATAIN_SIZE_1.build();
    this.default_map.add_reg(this.D_DATAIN_SIZE_1, `UVM_REG_ADDR_WIDTH'h18, "RW", 0);
    this.D_DAIN_ADDR_HIGH = new("D_DAIN_ADDR_HIGH");
    this.D_DAIN_ADDR_HIGH.configure(this, null, "");
    this.D_DAIN_ADDR_HIGH.set_rdl_tag("D_DAIN_ADDR_HIGH_");
    this.D_DAIN_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_DAIN_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_DAIN_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h1c, "RW", 0);
    this.D_DAIN_ADDR_LOW = new("D_DAIN_ADDR_LOW");
    this.D_DAIN_ADDR_LOW.configure(this, null, "");
    this.D_DAIN_ADDR_LOW.set_rdl_tag("D_DAIN_ADDR_LOW_");
    this.D_DAIN_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_DAIN_ADDR_LOW.build();
    this.default_map.add_reg(this.D_DAIN_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h20, "RW", 0);
    this.D_DAIN_LINE_STRIDE = new("D_DAIN_LINE_STRIDE");
    this.D_DAIN_LINE_STRIDE.configure(this, null, "");
    this.D_DAIN_LINE_STRIDE.set_rdl_tag("D_DAIN_LINE_STRIDE_");
    this.D_DAIN_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DAIN_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_DAIN_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h24, "RW", 0);
    this.D_DAIN_SURF_STRIDE = new("D_DAIN_SURF_STRIDE");
    this.D_DAIN_SURF_STRIDE.configure(this, null, "");
    this.D_DAIN_SURF_STRIDE.set_rdl_tag("D_DAIN_SURF_STRIDE_");
    this.D_DAIN_SURF_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DAIN_SURF_STRIDE.build();
    this.default_map.add_reg(this.D_DAIN_SURF_STRIDE, `UVM_REG_ADDR_WIDTH'h28, "RW", 0);
    this.D_DAIN_PLANAR_STRIDE = new("D_DAIN_PLANAR_STRIDE");
    this.D_DAIN_PLANAR_STRIDE.configure(this, null, "");
    this.D_DAIN_PLANAR_STRIDE.set_rdl_tag("D_DAIN_PLANAR_STRIDE_");
    this.D_DAIN_PLANAR_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DAIN_PLANAR_STRIDE.build();
    this.default_map.add_reg(this.D_DAIN_PLANAR_STRIDE, `UVM_REG_ADDR_WIDTH'h2c, "RW", 0);
    this.D_DAOUT_RAM_TYPE = new("D_DAOUT_RAM_TYPE");
    this.D_DAOUT_RAM_TYPE.configure(this, null, "");
    this.D_DAOUT_RAM_TYPE.set_rdl_tag("D_DAOUT_RAM_TYPE_");
    this.D_DAOUT_RAM_TYPE.set_reg_test_info(0, 0, 2);
    this.D_DAOUT_RAM_TYPE.build();
    this.default_map.add_reg(this.D_DAOUT_RAM_TYPE, `UVM_REG_ADDR_WIDTH'h30, "RW", 0);
    this.D_DATAOUT_SIZE_1 = new("D_DATAOUT_SIZE_1");
    this.D_DATAOUT_SIZE_1.configure(this, null, "");
    this.D_DATAOUT_SIZE_1.set_rdl_tag("D_DATAOUT_SIZE_1_");
    this.D_DATAOUT_SIZE_1.set_reg_test_info(0, 0, 2);
    this.D_DATAOUT_SIZE_1.build();
    this.default_map.add_reg(this.D_DATAOUT_SIZE_1, `UVM_REG_ADDR_WIDTH'h34, "RW", 0);
    this.D_DAOUT_ADDR_HIGH = new("D_DAOUT_ADDR_HIGH");
    this.D_DAOUT_ADDR_HIGH.configure(this, null, "");
    this.D_DAOUT_ADDR_HIGH.set_rdl_tag("D_DAOUT_ADDR_HIGH_");
    this.D_DAOUT_ADDR_HIGH.set_reg_test_info(0, 0, 2);
    this.D_DAOUT_ADDR_HIGH.build();
    this.default_map.add_reg(this.D_DAOUT_ADDR_HIGH, `UVM_REG_ADDR_WIDTH'h38, "RW", 0);
    this.D_DAOUT_ADDR_LOW = new("D_DAOUT_ADDR_LOW");
    this.D_DAOUT_ADDR_LOW.configure(this, null, "");
    this.D_DAOUT_ADDR_LOW.set_rdl_tag("D_DAOUT_ADDR_LOW_");
    this.D_DAOUT_ADDR_LOW.set_reg_test_info(0, 0, 2);
    this.D_DAOUT_ADDR_LOW.build();
    this.default_map.add_reg(this.D_DAOUT_ADDR_LOW, `UVM_REG_ADDR_WIDTH'h3c, "RW", 0);
    this.D_DAOUT_LINE_STRIDE = new("D_DAOUT_LINE_STRIDE");
    this.D_DAOUT_LINE_STRIDE.configure(this, null, "");
    this.D_DAOUT_LINE_STRIDE.set_rdl_tag("D_DAOUT_LINE_STRIDE_");
    this.D_DAOUT_LINE_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DAOUT_LINE_STRIDE.build();
    this.default_map.add_reg(this.D_DAOUT_LINE_STRIDE, `UVM_REG_ADDR_WIDTH'h40, "RW", 0);
    this.D_CONTRACT_STRIDE_0 = new("D_CONTRACT_STRIDE_0");
    this.D_CONTRACT_STRIDE_0.configure(this, null, "");
    this.D_CONTRACT_STRIDE_0.set_rdl_tag("D_CONTRACT_STRIDE_0_");
    this.D_CONTRACT_STRIDE_0.set_reg_test_info(0, 0, 2);
    this.D_CONTRACT_STRIDE_0.build();
    this.default_map.add_reg(this.D_CONTRACT_STRIDE_0, `UVM_REG_ADDR_WIDTH'h44, "RW", 0);
    this.D_CONTRACT_STRIDE_1 = new("D_CONTRACT_STRIDE_1");
    this.D_CONTRACT_STRIDE_1.configure(this, null, "");
    this.D_CONTRACT_STRIDE_1.set_rdl_tag("D_CONTRACT_STRIDE_1_");
    this.D_CONTRACT_STRIDE_1.set_reg_test_info(0, 0, 2);
    this.D_CONTRACT_STRIDE_1.build();
    this.default_map.add_reg(this.D_CONTRACT_STRIDE_1, `UVM_REG_ADDR_WIDTH'h48, "RW", 0);
    this.D_DAOUT_SURF_STRIDE = new("D_DAOUT_SURF_STRIDE");
    this.D_DAOUT_SURF_STRIDE.configure(this, null, "");
    this.D_DAOUT_SURF_STRIDE.set_rdl_tag("D_DAOUT_SURF_STRIDE_");
    this.D_DAOUT_SURF_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DAOUT_SURF_STRIDE.build();
    this.default_map.add_reg(this.D_DAOUT_SURF_STRIDE, `UVM_REG_ADDR_WIDTH'h4c, "RW", 0);
    this.D_DAOUT_PLANAR_STRIDE = new("D_DAOUT_PLANAR_STRIDE");
    this.D_DAOUT_PLANAR_STRIDE.configure(this, null, "");
    this.D_DAOUT_PLANAR_STRIDE.set_rdl_tag("D_DAOUT_PLANAR_STRIDE_");
    this.D_DAOUT_PLANAR_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DAOUT_PLANAR_STRIDE.build();
    this.default_map.add_reg(this.D_DAOUT_PLANAR_STRIDE, `UVM_REG_ADDR_WIDTH'h50, "RW", 0);
    this.D_DECONV_STRIDE = new("D_DECONV_STRIDE");
    this.D_DECONV_STRIDE.configure(this, null, "");
    this.D_DECONV_STRIDE.set_rdl_tag("D_DECONV_STRIDE_");
    this.D_DECONV_STRIDE.set_reg_test_info(0, 0, 2);
    this.D_DECONV_STRIDE.build();
    this.default_map.add_reg(this.D_DECONV_STRIDE, `UVM_REG_ADDR_WIDTH'h54, "RW", 0);
    this.D_PERF_ENABLE = new("D_PERF_ENABLE");
    this.D_PERF_ENABLE.configure(this, null, "");
    this.D_PERF_ENABLE.set_rdl_tag("D_PERF_ENABLE_");
    this.D_PERF_ENABLE.set_reg_test_info(0, 0, 2);
    this.D_PERF_ENABLE.build();
    this.default_map.add_reg(this.D_PERF_ENABLE, `UVM_REG_ADDR_WIDTH'h58, "RW", 0);
    this.D_PERF_READ_STALL = new("D_PERF_READ_STALL");
    this.D_PERF_READ_STALL.configure(this, null, "");
    this.D_PERF_READ_STALL.set_rdl_tag("D_PERF_READ_STALL_");
    this.D_PERF_READ_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_READ_STALL.build();
    this.default_map.add_reg(this.D_PERF_READ_STALL, `UVM_REG_ADDR_WIDTH'h5c, "RO", 0);
    this.D_PERF_WRITE_STALL = new("D_PERF_WRITE_STALL");
    this.D_PERF_WRITE_STALL.configure(this, null, "");
    this.D_PERF_WRITE_STALL.set_rdl_tag("D_PERF_WRITE_STALL_");
    this.D_PERF_WRITE_STALL.set_reg_test_info(0, 0, 32);
    this.D_PERF_WRITE_STALL.build();
    this.default_map.add_reg(this.D_PERF_WRITE_STALL, `UVM_REG_ADDR_WIDTH'h60, "RO", 0);
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA_NVDLA_RBK)
endclass : block_addrmap_NVDLA_NVDLA_RBK

// Base block
class block_addrmap_NVDLA extends uvm_reg_block_rdl;
  rand block_addrmap_NVDLA_NVDLA_RBK NVDLA_RBK;
  
  function new(string name = "block_addrmap_NVDLA");
    super.new(name);
  endfunction: new
  
  virtual function void build();
    this.default_map = create_map("", `UVM_REG_ADDR_WIDTH'h0, 4, UVM_LITTLE_ENDIAN, 1);
    this.set_rdl_address_map(1);
    this.set_rdl_address_map_hdl_path({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.NVDLA_RBK = block_addrmap_NVDLA_NVDLA_RBK::type_id::create("NVDLA_RBK",, get_full_name());
    this.NVDLA_RBK.configure(this, "");
    this.NVDLA_RBK.set_rdl_tag("NVDLA_RBK_");
    this.NVDLA_RBK.build();
    this.default_map.add_submap(this.NVDLA_RBK.default_map, `UVM_REG_ADDR_WIDTH'h11000);
    set_hdl_path_root({`ADDRMAP_NVDLA_PIO_INSTANCE_PATH, ".pio_logic"});
    this.add_callbacks();
  endfunction: build
  
  `uvm_object_utils(block_addrmap_NVDLA)
endclass : block_addrmap_NVDLA
