//   Ordt 171103.01 autogenerated file 
//   Input: /mnt/d/uni/2019-2020/thesis/cogitantium/nvdla/hw/outdir/nv_small/spec/manual/opendla.rdl
//   Parms: opendla.parms
//   Date: Sat Feb 29 19:31:34 CET 2020
//

#ifndef __ORDT_PIO_HPP_INCLUDED__
#define __ORDT_PIO_HPP_INCLUDED__

#include <vector>
#include <iostream>
#include <memory>
#include <cstdint>
#include <algorithm>
#include <string>
#include <sstream>
#include <mutex>
#include <atomic>
#define quote(x) #x

enum ordt_read_mode_t : uint8_t {r_none, r_std, r_clr};
enum ordt_write_mode_t : uint8_t {w_none, w_std, w_1clr, w_1set};
class ordt_addr_elem {
  protected:
    uint64_t m_startaddress;
    uint64_t m_endaddress;
  public:
    ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata) = 0;
    virtual int read(const uint64_t &addr, ordt_data &rdata) = 0;
    bool containsAddress(const uint64_t &addr);
    bool isBelowAddress(const uint64_t &addr);
    bool isAboveAddress(const uint64_t &addr);
    bool hasStartAddress(const uint64_t &addr);
    virtual void update_child_ptrs();
};

class ordt_regset : public ordt_addr_elem {
  private:
    ordt_addr_elem* childElem;
    ordt_addr_elem* findAddrElem(const uint64_t &addr);
  protected:
    std::vector<ordt_addr_elem *>  m_children;
  public:
    ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
};


template<typename T>
class ordt_addr_elem_array : public std::vector<T>, public ordt_addr_elem {
  protected:
    std::vector<T> vec;
    uint64_t m_stride;
  public:
    ordt_addr_elem_array(uint64_t _m_startaddress, uint64_t _m_endaddress, int _reps, uint64_t _m_stride);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
};

template<typename T>
ordt_addr_elem_array<T>::ordt_addr_elem_array(uint64_t _m_startaddress, uint64_t _m_endaddress, int _reps, uint64_t _m_stride)
   : ordt_addr_elem(_m_startaddress, _m_endaddress + (_m_stride * _reps)), m_stride(_m_stride) {
   this->reserve(_reps);
   uint64_t el_startaddress = _m_startaddress;
   uint64_t el_endaddress = _m_endaddress;
   for(int idx=0; idx<_reps; idx++) {
      std::unique_ptr<T> new_elem(new T(el_startaddress, el_endaddress));
      this->push_back(*new_elem);
      this->back().update_child_ptrs();
      el_startaddress += _m_stride;
      el_endaddress += _m_stride;
   }
}

template<typename T>
int ordt_addr_elem_array<T>::write(const uint64_t &addr, const ordt_data &wdata) {
   if (this->containsAddress(addr)) {
      int idx = (addr - m_startaddress) / m_stride;
      if (idx < this->size()) return this->at(idx).write(addr, wdata);
   }
#ifdef ORDT_PIO_VERBOSE
   std::cout << "--> write to invalid address " << addr << " in arrayed regset\n";
#endif
   return 8;
}

template<typename T>
int ordt_addr_elem_array<T>::read(const uint64_t &addr, ordt_data &rdata) {
   if (this->containsAddress(addr)) {
      int idx = (addr - m_startaddress) / m_stride;
      if (idx < this->size()) return this->at(idx).read(addr, rdata);
   }
#ifdef ORDT_PIO_VERBOSE
   std::cout << "--> read to invalid address " << addr << " in arrayed regset\n";
#endif
   rdata.clear();
   return 8;
}

class ordt_reg : public ordt_addr_elem {
  public:
    std::mutex  m_mutex;
    ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress);
    ordt_reg(const ordt_reg &_old);
    virtual void write(const ordt_data &wdata);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void read(ordt_data &rdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
};


template<typename T>
class ordt_field {
  public:
    int lobit, size;
    T data;
    ordt_read_mode_t r_mode;
    ordt_write_mode_t w_mode;
    ordt_field(int _lobit, int _size, int _vsize, uint32_t _data, ordt_read_mode_t _r_mode, ordt_write_mode_t _w_mode);
    ordt_field(int _lobit, int _size, T _init_data, ordt_read_mode_t _r_mode, ordt_write_mode_t _w_mode);
    void write(const ordt_data &wdata);
    void read(ordt_data &rdata);
    void clear();
};

template<typename T>
ordt_field<T>::ordt_field(int _lobit, int _size, int _vsize, uint32_t _data, ordt_read_mode_t _r_mode, ordt_write_mode_t _w_mode)
   : lobit(_lobit), size(_size), data(_vsize, _data), r_mode(_r_mode), w_mode(_w_mode) {
}

template<typename T>
ordt_field<T>::ordt_field(int _lobit, int _size, T _init_data, ordt_read_mode_t _r_mode, ordt_write_mode_t _w_mode)
   : lobit(_lobit), size(_size), data(_init_data), r_mode(_r_mode), w_mode(_w_mode) {
}

template<typename T>
void ordt_field<T>::write(const ordt_data &wdata) {
   if (w_mode == w_std) wdata.get_slice(lobit, size, data);
   else if (w_mode == w_1set) {
      T mask_data;
      wdata.get_slice(lobit, size, mask_data);
      data = data | mask_data;
   }
   else if (w_mode == w_1clr) {
      T mask_data;
      wdata.get_slice(lobit, size, mask_data);
      data = data & ~mask_data;
   }
}

template<typename T>
void ordt_field<T>::read(ordt_data &rdata) {
   rdata.set_slice(lobit, size, data);
   if (r_mode == r_clr) clear();
}

template<typename T>
void ordt_field<T>::clear() {
    data = 0;
}

class ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION : public ordt_reg {
  public:
    ordt_field<uint32_t> HW_VERSION;
    ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> GLB_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CIF_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CIF_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CIF_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> CIF_BASE_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY : public ordt_reg {
  public:
    ordt_field<uint32_t> CIF_BASE_LATENCY;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX : public ordt_reg {
  public:
    ordt_field<uint32_t> BASE_BURST_LENGTH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CIF_BASE_MEM_ADDR_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_CBUF_BANK_NUM;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_CBUF_BANK_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_BASE_CBUF_BANK_DEPTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_IMAGE_IN_FORMATS_PACKED;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI : public ordt_reg {
  public:
    ordt_field<uint32_t> CDMA_IMAGE_IN_FORMATS_SEMI;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CBUF_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CBUF_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CBUF_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> CBUF_BASE_CBUF_BANK_NUM;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CBUF_BASE_CBUF_BANK_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CBUF_BASE_CBUF_BANK_DEPTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> CBUF_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_CBUF_BANK_NUM;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_CBUF_BANK_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_CBUF_BANK_DEPTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX : public ordt_reg {
  public:
    ordt_field<uint32_t> CSC_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_A_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> CMAC_B_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX : public ordt_reg {
  public:
    ordt_field<uint32_t> CACC_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_RDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_RDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_RDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_RDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_RDMA_BASE_SDP_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_BS_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_BN_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT : public ordt_reg {
  public:
    ordt_field<uint32_t> SDP_EW_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_RDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_RDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_RDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_RDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_RDMA_BASE_PDP_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT : public ordt_reg {
  public:
    ordt_field<uint32_t> PDP_BASE_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_RDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_RDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_RDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_RDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_RDMA_BASE_CDP_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT : public ordt_reg {
  public:
    ordt_field<uint32_t> CDP_BASE_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST : public ordt_reg {
  public:
    ordt_field<uint32_t> END_OF_LIST;
    ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_CFGROM : public ordt_regset {
  public:
    ordt_rg_NVDLA_CFGROM_CFGROM_HW_VERSION CFGROM_HW_VERSION;
    ordt_rg_NVDLA_CFGROM_CFGROM_GLB_DESC CFGROM_GLB_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_DESC CFGROM_CIF_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_INCOMPAT CFGROM_CIF_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_CAP_COMPAT CFGROM_CIF_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_WIDTH CFGROM_CIF_BASE_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_LATENCY CFGROM_CIF_BASE_LATENCY;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_BURST_LENGTH_MAX CFGROM_CIF_BASE_BURST_LENGTH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_CIF_BASE_MEM_ADDR_WIDTH CFGROM_CIF_BASE_MEM_ADDR_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_DESC CFGROM_CDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_INCOMPAT CFGROM_CDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_CAP_COMPAT CFGROM_CDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_FEATURE_TYPES CFGROM_CDMA_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_WEIGHT_TYPES CFGROM_CDMA_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_C CFGROM_CDMA_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_K CFGROM_CDMA_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_ATOMIC_M CFGROM_CDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_NUM CFGROM_CDMA_BASE_CBUF_BANK_NUM;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_WIDTH CFGROM_CDMA_BASE_CBUF_BANK_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_BASE_CBUF_BANK_DEPTH CFGROM_CDMA_BASE_CBUF_BANK_DEPTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_MULTI_BATCH_MAX CFGROM_CDMA_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED CFGROM_CDMA_IMAGE_IN_FORMATS_PACKED;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI CFGROM_CDMA_IMAGE_IN_FORMATS_SEMI;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_DESC CFGROM_CBUF_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_INCOMPAT CFGROM_CBUF_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_CAP_COMPAT CFGROM_CBUF_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_NUM CFGROM_CBUF_BASE_CBUF_BANK_NUM;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_WIDTH CFGROM_CBUF_BASE_CBUF_BANK_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CBUF_BANK_DEPTH CFGROM_CBUF_BASE_CBUF_BANK_DEPTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CBUF_BASE_CDMA_ID CFGROM_CBUF_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_DESC CFGROM_CSC_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_INCOMPAT CFGROM_CSC_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_CAP_COMPAT CFGROM_CSC_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_FEATURE_TYPES CFGROM_CSC_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_WEIGHT_TYPES CFGROM_CSC_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_C CFGROM_CSC_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_K CFGROM_CSC_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_ATOMIC_M CFGROM_CSC_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_NUM CFGROM_CSC_BASE_CBUF_BANK_NUM;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_WIDTH CFGROM_CSC_BASE_CBUF_BANK_WIDTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CBUF_BANK_DEPTH CFGROM_CSC_BASE_CBUF_BANK_DEPTH;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_BASE_CDMA_ID CFGROM_CSC_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CSC_MULTI_BATCH_MAX CFGROM_CSC_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_DESC CFGROM_CMAC_A_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_INCOMPAT CFGROM_CMAC_A_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_CAP_COMPAT CFGROM_CMAC_A_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_FEATURE_TYPES CFGROM_CMAC_A_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_WEIGHT_TYPES CFGROM_CMAC_A_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_C CFGROM_CMAC_A_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_ATOMIC_K CFGROM_CMAC_A_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_A_BASE_CDMA_ID CFGROM_CMAC_A_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_DESC CFGROM_CMAC_B_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_INCOMPAT CFGROM_CMAC_B_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_CAP_COMPAT CFGROM_CMAC_B_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_FEATURE_TYPES CFGROM_CMAC_B_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_WEIGHT_TYPES CFGROM_CMAC_B_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_C CFGROM_CMAC_B_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_ATOMIC_K CFGROM_CMAC_B_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CMAC_B_BASE_CDMA_ID CFGROM_CMAC_B_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_DESC CFGROM_CACC_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_INCOMPAT CFGROM_CACC_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_CAP_COMPAT CFGROM_CACC_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_FEATURE_TYPES CFGROM_CACC_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_WEIGHT_TYPES CFGROM_CACC_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_C CFGROM_CACC_BASE_ATOMIC_C;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_ATOMIC_K CFGROM_CACC_BASE_ATOMIC_K;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_BASE_CDMA_ID CFGROM_CACC_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CACC_MULTI_BATCH_MAX CFGROM_CACC_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_DESC CFGROM_SDP_RDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_INCOMPAT CFGROM_SDP_RDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_CAP_COMPAT CFGROM_SDP_RDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_ATOMIC_M CFGROM_SDP_RDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_RDMA_BASE_SDP_ID CFGROM_SDP_RDMA_BASE_SDP_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_DESC CFGROM_SDP_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_INCOMPAT CFGROM_SDP_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_CAP_COMPAT CFGROM_SDP_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_FEATURE_TYPES CFGROM_SDP_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_WEIGHT_TYPES CFGROM_SDP_BASE_WEIGHT_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BASE_CDMA_ID CFGROM_SDP_BASE_CDMA_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_MULTI_BATCH_MAX CFGROM_SDP_MULTI_BATCH_MAX;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BS_THROUGHPUT CFGROM_SDP_BS_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_BN_THROUGHPUT CFGROM_SDP_BN_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_SDP_EW_THROUGHPUT CFGROM_SDP_EW_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_DESC CFGROM_PDP_RDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_INCOMPAT CFGROM_PDP_RDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_CAP_COMPAT CFGROM_PDP_RDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_ATOMIC_M CFGROM_PDP_RDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_RDMA_BASE_PDP_ID CFGROM_PDP_RDMA_BASE_PDP_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_DESC CFGROM_PDP_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_INCOMPAT CFGROM_PDP_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_CAP_COMPAT CFGROM_PDP_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_FEATURE_TYPES CFGROM_PDP_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_PDP_BASE_THROUGHPUT CFGROM_PDP_BASE_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_DESC CFGROM_CDP_RDMA_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_INCOMPAT CFGROM_CDP_RDMA_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_CAP_COMPAT CFGROM_CDP_RDMA_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_ATOMIC_M CFGROM_CDP_RDMA_BASE_ATOMIC_M;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_RDMA_BASE_CDP_ID CFGROM_CDP_RDMA_BASE_CDP_ID;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_DESC CFGROM_CDP_DESC;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_INCOMPAT CFGROM_CDP_CAP_INCOMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_CAP_COMPAT CFGROM_CDP_CAP_COMPAT;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_FEATURE_TYPES CFGROM_CDP_BASE_FEATURE_TYPES;
    ordt_rg_NVDLA_CFGROM_CFGROM_CDP_BASE_THROUGHPUT CFGROM_CDP_BASE_THROUGHPUT;
    ordt_rg_NVDLA_CFGROM_CFGROM_END_OF_LIST CFGROM_END_OF_LIST;
    ordt_rset_NVDLA_CFGROM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_GLB_S_NVDLA_HW_VERSION : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> MAJOR;
    ordt_field<uint32_t> MINOR;
    ordt_rg_NVDLA_GLB_S_NVDLA_HW_VERSION(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GLB_S_INTR_MASK : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> SDP_DONE_MASK0;
    ordt_field<uint_fast8_t> SDP_DONE_MASK1;
    ordt_field<uint_fast8_t> CDP_DONE_MASK0;
    ordt_field<uint_fast8_t> CDP_DONE_MASK1;
    ordt_field<uint_fast8_t> PDP_DONE_MASK0;
    ordt_field<uint_fast8_t> PDP_DONE_MASK1;
    ordt_field<uint_fast8_t> BDMA_DONE_MASK0;
    ordt_field<uint_fast8_t> BDMA_DONE_MASK1;
    ordt_field<uint_fast8_t> RUBIK_DONE_MASK0;
    ordt_field<uint_fast8_t> RUBIK_DONE_MASK1;
    ordt_field<uint_fast8_t> CDMA_DAT_DONE_MASK0;
    ordt_field<uint_fast8_t> CDMA_DAT_DONE_MASK1;
    ordt_field<uint_fast8_t> CDMA_WT_DONE_MASK0;
    ordt_field<uint_fast8_t> CDMA_WT_DONE_MASK1;
    ordt_field<uint_fast8_t> CACC_DONE_MASK0;
    ordt_field<uint_fast8_t> CACC_DONE_MASK1;
    ordt_rg_NVDLA_GLB_S_INTR_MASK(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GLB_S_INTR_SET : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> SDP_DONE_SET0;
    ordt_field<uint_fast8_t> SDP_DONE_SET1;
    ordt_field<uint_fast8_t> CDP_DONE_SET0;
    ordt_field<uint_fast8_t> CDP_DONE_SET1;
    ordt_field<uint_fast8_t> PDP_DONE_SET0;
    ordt_field<uint_fast8_t> PDP_DONE_SET1;
    ordt_field<uint_fast8_t> BDMA_DONE_SET0;
    ordt_field<uint_fast8_t> BDMA_DONE_SET1;
    ordt_field<uint_fast8_t> RUBIK_DONE_SET0;
    ordt_field<uint_fast8_t> RUBIK_DONE_SET1;
    ordt_field<uint_fast8_t> CDMA_DAT_DONE_SET0;
    ordt_field<uint_fast8_t> CDMA_DAT_DONE_SET1;
    ordt_field<uint_fast8_t> CDMA_WT_DONE_SET0;
    ordt_field<uint_fast8_t> CDMA_WT_DONE_SET1;
    ordt_field<uint_fast8_t> CACC_DONE_SET0;
    ordt_field<uint_fast8_t> CACC_DONE_SET1;
    ordt_rg_NVDLA_GLB_S_INTR_SET(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GLB_S_INTR_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> SDP_DONE_STATUS0;
    ordt_field<uint_fast8_t> SDP_DONE_STATUS1;
    ordt_field<uint_fast8_t> CDP_DONE_STATUS0;
    ordt_field<uint_fast8_t> CDP_DONE_STATUS1;
    ordt_field<uint_fast8_t> PDP_DONE_STATUS0;
    ordt_field<uint_fast8_t> PDP_DONE_STATUS1;
    ordt_field<uint_fast8_t> BDMA_DONE_STATUS0;
    ordt_field<uint_fast8_t> BDMA_DONE_STATUS1;
    ordt_field<uint_fast8_t> RUBIK_DONE_STATUS0;
    ordt_field<uint_fast8_t> RUBIK_DONE_STATUS1;
    ordt_field<uint_fast8_t> CDMA_DAT_DONE_STATUS0;
    ordt_field<uint_fast8_t> CDMA_DAT_DONE_STATUS1;
    ordt_field<uint_fast8_t> CDMA_WT_DONE_STATUS0;
    ordt_field<uint_fast8_t> CDMA_WT_DONE_STATUS1;
    ordt_field<uint_fast8_t> CACC_DONE_STATUS0;
    ordt_field<uint_fast8_t> CACC_DONE_STATUS1;
    ordt_rg_NVDLA_GLB_S_INTR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_GLB : public ordt_regset {
  public:
    ordt_rg_NVDLA_GLB_S_NVDLA_HW_VERSION S_NVDLA_HW_VERSION;
    ordt_rg_NVDLA_GLB_S_INTR_MASK S_INTR_MASK;
    ordt_rg_NVDLA_GLB_S_INTR_SET S_INTR_SET;
    ordt_rg_NVDLA_GLB_S_INTR_STATUS S_INTR_STATUS;
    ordt_rset_NVDLA_GLB(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_0 : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> RD_WEIGHT_BDMA;
    ordt_field<uint_fast8_t> RD_WEIGHT_SDP;
    ordt_field<uint_fast8_t> RD_WEIGHT_PDP;
    ordt_field<uint_fast8_t> RD_WEIGHT_CDP;
    ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_1 : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> RD_WEIGHT_SDP_B;
    ordt_field<uint_fast8_t> RD_WEIGHT_SDP_N;
    ordt_field<uint_fast8_t> RD_WEIGHT_SDP_E;
    ordt_field<uint_fast8_t> RD_WEIGHT_CDMA_DAT;
    ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_2 : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> RD_WEIGHT_CDMA_WT;
    ordt_field<uint_fast8_t> RD_WEIGHT_RBK;
    ordt_field<uint_fast8_t> RD_WEIGHT_RSV_1;
    ordt_field<uint_fast8_t> RD_WEIGHT_RSV_0;
    ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_2(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_0 : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> WR_WEIGHT_BDMA;
    ordt_field<uint_fast8_t> WR_WEIGHT_SDP;
    ordt_field<uint_fast8_t> WR_WEIGHT_PDP;
    ordt_field<uint_fast8_t> WR_WEIGHT_CDP;
    ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_1 : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> WR_WEIGHT_RBK;
    ordt_field<uint_fast8_t> WR_WEIGHT_RSV_2;
    ordt_field<uint_fast8_t> WR_WEIGHT_RSV_1;
    ordt_field<uint_fast8_t> WR_WEIGHT_RSV_0;
    ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_MCIF_CFG_OUTSTANDING_CNT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> RD_OS_CNT;
    ordt_field<uint_fast8_t> WR_OS_CNT;
    ordt_rg_NVDLA_MCIF_CFG_OUTSTANDING_CNT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_MCIF_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> IDLE;
    ordt_rg_NVDLA_MCIF_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_MCIF : public ordt_regset {
  public:
    ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_0 CFG_RD_WEIGHT_0;
    ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_1 CFG_RD_WEIGHT_1;
    ordt_rg_NVDLA_MCIF_CFG_RD_WEIGHT_2 CFG_RD_WEIGHT_2;
    ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_0 CFG_WR_WEIGHT_0;
    ordt_rg_NVDLA_MCIF_CFG_WR_WEIGHT_1 CFG_WR_WEIGHT_1;
    ordt_rg_NVDLA_MCIF_CFG_OUTSTANDING_CNT CFG_OUTSTANDING_CNT;
    ordt_rg_NVDLA_MCIF_STATUS STATUS;
    ordt_rset_NVDLA_MCIF(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_CDMA_S_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> STATUS_0;
    ordt_field<uint_fast8_t> STATUS_1;
    ordt_rg_NVDLA_CDMA_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_S_POINTER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PRODUCER;
    ordt_field<uint_fast8_t> CONSUMER;
    ordt_rg_NVDLA_CDMA_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_S_ARBITER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ARB_WEIGHT;
    ordt_field<uint_fast8_t> ARB_WMB;
    ordt_rg_NVDLA_CDMA_S_ARBITER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> FLUSH_DONE;
    ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_OP_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> OP_EN;
    ordt_rg_NVDLA_CDMA_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_MISC_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> CONV_MODE;
    ordt_field<uint_fast8_t> IN_PRECISION;
    ordt_field<uint_fast8_t> PROC_PRECISION;
    ordt_field<uint_fast8_t> DATA_REUSE;
    ordt_field<uint_fast8_t> WEIGHT_REUSE;
    ordt_field<uint_fast8_t> SKIP_DATA_RLS;
    ordt_field<uint_fast8_t> SKIP_WEIGHT_RLS;
    ordt_rg_NVDLA_CDMA_D_MISC_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DATAIN_FORMAT;
    ordt_field<uint_fast8_t> PIXEL_FORMAT;
    ordt_field<uint_fast8_t> PIXEL_MAPPING;
    ordt_field<uint_fast8_t> PIXEL_SIGN_OVERRIDE;
    ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAIN_WIDTH;
    ordt_field<uint32_t> DATAIN_HEIGHT;
    ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAIN_CHANNEL;
    ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAIN_WIDTH_EXT;
    ordt_field<uint32_t> DATAIN_HEIGHT_EXT;
    ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PIXEL_X_OFFSET;
    ordt_field<uint_fast8_t> PIXEL_Y_OFFSET;
    ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DATAIN_RAM_TYPE;
    ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAIN_ADDR_HIGH_0;
    ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAIN_ADDR_LOW_0;
    ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAIN_ADDR_HIGH_1;
    ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAIN_ADDR_LOW_1;
    ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_LINE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> LINE_STRIDE;
    ordt_rg_NVDLA_CDMA_D_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> UV_LINE_STRIDE;
    ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_SURF_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> SURF_STRIDE;
    ordt_rg_NVDLA_CDMA_D_SURF_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_DAIN_MAP : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> LINE_PACKED;
    ordt_field<uint_fast8_t> SURF_PACKED;
    ordt_rg_NVDLA_CDMA_D_DAIN_MAP(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG : public ordt_reg {
  public:
    ordt_field<uint32_t> RSV_PER_LINE;
    ordt_field<uint32_t> RSV_PER_UV_LINE;
    ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> RSV_HEIGHT;
    ordt_field<uint_fast8_t> RSV_Y_INDEX;
    ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> BATCHES;
    ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> BATCH_STRIDE;
    ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE : public ordt_reg {
  public:
    ordt_field<uint32_t> ENTRIES;
    ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN : public ordt_reg {
  public:
    ordt_field<uint32_t> GRAINS;
    ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> WEIGHT_FORMAT;
    ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0 : public ordt_reg {
  public:
    ordt_field<uint32_t> BYTE_PER_KERNEL;
    ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1 : public ordt_reg {
  public:
    ordt_field<uint32_t> WEIGHT_KERNEL;
    ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> WEIGHT_RAM_TYPE;
    ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> WEIGHT_ADDR_HIGH;
    ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> WEIGHT_ADDR_LOW;
    ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES : public ordt_reg {
  public:
    ordt_field<uint32_t> WEIGHT_BYTES;
    ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> WGS_ADDR_HIGH;
    ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> WGS_ADDR_LOW;
    ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> WMB_ADDR_HIGH;
    ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> WMB_ADDR_LOW;
    ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_WMB_BYTES : public ordt_reg {
  public:
    ordt_field<uint32_t> WMB_BYTES;
    ordt_rg_NVDLA_CDMA_D_WMB_BYTES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> MEAN_FORMAT;
    ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0 : public ordt_reg {
  public:
    ordt_field<uint32_t> MEAN_RY;
    ordt_field<uint32_t> MEAN_GU;
    ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1 : public ordt_reg {
  public:
    ordt_field<uint32_t> MEAN_BV;
    ordt_field<uint32_t> MEAN_AX;
    ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_CVT_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> CVT_EN;
    ordt_field<uint_fast8_t> CVT_TRUNCATE;
    ordt_rg_NVDLA_CDMA_D_CVT_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_CVT_OFFSET : public ordt_reg {
  public:
    ordt_field<uint32_t> CVT_OFFSET;
    ordt_rg_NVDLA_CDMA_D_CVT_OFFSET(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_CVT_SCALE : public ordt_reg {
  public:
    ordt_field<uint32_t> CVT_SCALE;
    ordt_rg_NVDLA_CDMA_D_CVT_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_CONV_STRIDE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> CONV_X_STRIDE;
    ordt_field<uint_fast8_t> CONV_Y_STRIDE;
    ordt_rg_NVDLA_CDMA_D_CONV_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_ZERO_PADDING : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PAD_LEFT;
    ordt_field<uint_fast8_t> PAD_RIGHT;
    ordt_field<uint_fast8_t> PAD_TOP;
    ordt_field<uint_fast8_t> PAD_BOTTOM;
    ordt_rg_NVDLA_CDMA_D_ZERO_PADDING(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE : public ordt_reg {
  public:
    ordt_field<uint32_t> PAD_VALUE;
    ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_BANK : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DATA_BANK;
    ordt_field<uint_fast8_t> WEIGHT_BANK;
    ordt_rg_NVDLA_CDMA_D_BANK(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> NAN_TO_ZERO;
    ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> NAN_DATA_NUM;
    ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> NAN_WEIGHT_NUM;
    ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> INF_DATA_NUM;
    ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> INF_WEIGHT_NUM;
    ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_PERF_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DMA_EN;
    ordt_rg_NVDLA_CDMA_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> DAT_RD_STALL;
    ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> WT_RD_STALL;
    ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY : public ordt_reg {
  public:
    ordt_field<uint32_t> DAT_RD_LATENCY;
    ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY : public ordt_reg {
  public:
    ordt_field<uint32_t> WT_RD_LATENCY;
    ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDMA_D_CYA : public ordt_reg {
  public:
    ordt_field<uint32_t> CYA;
    ordt_rg_NVDLA_CDMA_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_CDMA : public ordt_regset {
  public:
    ordt_rg_NVDLA_CDMA_S_STATUS S_STATUS;
    ordt_rg_NVDLA_CDMA_S_POINTER S_POINTER;
    ordt_rg_NVDLA_CDMA_S_ARBITER S_ARBITER;
    ordt_rg_NVDLA_CDMA_S_CBUF_FLUSH_STATUS S_CBUF_FLUSH_STATUS;
    ordt_rg_NVDLA_CDMA_D_OP_ENABLE D_OP_ENABLE;
    ordt_rg_NVDLA_CDMA_D_MISC_CFG D_MISC_CFG;
    ordt_rg_NVDLA_CDMA_D_DATAIN_FORMAT D_DATAIN_FORMAT;
    ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_0 D_DATAIN_SIZE_0;
    ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_1 D_DATAIN_SIZE_1;
    ordt_rg_NVDLA_CDMA_D_DATAIN_SIZE_EXT_0 D_DATAIN_SIZE_EXT_0;
    ordt_rg_NVDLA_CDMA_D_PIXEL_OFFSET D_PIXEL_OFFSET;
    ordt_rg_NVDLA_CDMA_D_DAIN_RAM_TYPE D_DAIN_RAM_TYPE;
    ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_0 D_DAIN_ADDR_HIGH_0;
    ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_0 D_DAIN_ADDR_LOW_0;
    ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_HIGH_1 D_DAIN_ADDR_HIGH_1;
    ordt_rg_NVDLA_CDMA_D_DAIN_ADDR_LOW_1 D_DAIN_ADDR_LOW_1;
    ordt_rg_NVDLA_CDMA_D_LINE_STRIDE D_LINE_STRIDE;
    ordt_rg_NVDLA_CDMA_D_LINE_UV_STRIDE D_LINE_UV_STRIDE;
    ordt_rg_NVDLA_CDMA_D_SURF_STRIDE D_SURF_STRIDE;
    ordt_rg_NVDLA_CDMA_D_DAIN_MAP D_DAIN_MAP;
    ordt_rg_NVDLA_CDMA_D_RESERVED_X_CFG D_RESERVED_X_CFG;
    ordt_rg_NVDLA_CDMA_D_RESERVED_Y_CFG D_RESERVED_Y_CFG;
    ordt_rg_NVDLA_CDMA_D_BATCH_NUMBER D_BATCH_NUMBER;
    ordt_rg_NVDLA_CDMA_D_BATCH_STRIDE D_BATCH_STRIDE;
    ordt_rg_NVDLA_CDMA_D_ENTRY_PER_SLICE D_ENTRY_PER_SLICE;
    ordt_rg_NVDLA_CDMA_D_FETCH_GRAIN D_FETCH_GRAIN;
    ordt_rg_NVDLA_CDMA_D_WEIGHT_FORMAT D_WEIGHT_FORMAT;
    ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_0 D_WEIGHT_SIZE_0;
    ordt_rg_NVDLA_CDMA_D_WEIGHT_SIZE_1 D_WEIGHT_SIZE_1;
    ordt_rg_NVDLA_CDMA_D_WEIGHT_RAM_TYPE D_WEIGHT_RAM_TYPE;
    ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_HIGH D_WEIGHT_ADDR_HIGH;
    ordt_rg_NVDLA_CDMA_D_WEIGHT_ADDR_LOW D_WEIGHT_ADDR_LOW;
    ordt_rg_NVDLA_CDMA_D_WEIGHT_BYTES D_WEIGHT_BYTES;
    ordt_rg_NVDLA_CDMA_D_WGS_ADDR_HIGH D_WGS_ADDR_HIGH;
    ordt_rg_NVDLA_CDMA_D_WGS_ADDR_LOW D_WGS_ADDR_LOW;
    ordt_rg_NVDLA_CDMA_D_WMB_ADDR_HIGH D_WMB_ADDR_HIGH;
    ordt_rg_NVDLA_CDMA_D_WMB_ADDR_LOW D_WMB_ADDR_LOW;
    ordt_rg_NVDLA_CDMA_D_WMB_BYTES D_WMB_BYTES;
    ordt_rg_NVDLA_CDMA_D_MEAN_FORMAT D_MEAN_FORMAT;
    ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_0 D_MEAN_GLOBAL_0;
    ordt_rg_NVDLA_CDMA_D_MEAN_GLOBAL_1 D_MEAN_GLOBAL_1;
    ordt_rg_NVDLA_CDMA_D_CVT_CFG D_CVT_CFG;
    ordt_rg_NVDLA_CDMA_D_CVT_OFFSET D_CVT_OFFSET;
    ordt_rg_NVDLA_CDMA_D_CVT_SCALE D_CVT_SCALE;
    ordt_rg_NVDLA_CDMA_D_CONV_STRIDE D_CONV_STRIDE;
    ordt_rg_NVDLA_CDMA_D_ZERO_PADDING D_ZERO_PADDING;
    ordt_rg_NVDLA_CDMA_D_ZERO_PADDING_VALUE D_ZERO_PADDING_VALUE;
    ordt_rg_NVDLA_CDMA_D_BANK D_BANK;
    ordt_rg_NVDLA_CDMA_D_NAN_FLUSH_TO_ZERO D_NAN_FLUSH_TO_ZERO;
    ordt_rg_NVDLA_CDMA_D_NAN_INPUT_DATA_NUM D_NAN_INPUT_DATA_NUM;
    ordt_rg_NVDLA_CDMA_D_NAN_INPUT_WEIGHT_NUM D_NAN_INPUT_WEIGHT_NUM;
    ordt_rg_NVDLA_CDMA_D_INF_INPUT_DATA_NUM D_INF_INPUT_DATA_NUM;
    ordt_rg_NVDLA_CDMA_D_INF_INPUT_WEIGHT_NUM D_INF_INPUT_WEIGHT_NUM;
    ordt_rg_NVDLA_CDMA_D_PERF_ENABLE D_PERF_ENABLE;
    ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_STALL D_PERF_DAT_READ_STALL;
    ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_STALL D_PERF_WT_READ_STALL;
    ordt_rg_NVDLA_CDMA_D_PERF_DAT_READ_LATENCY D_PERF_DAT_READ_LATENCY;
    ordt_rg_NVDLA_CDMA_D_PERF_WT_READ_LATENCY D_PERF_WT_READ_LATENCY;
    ordt_rg_NVDLA_CDMA_D_CYA D_CYA;
    ordt_rset_NVDLA_CDMA(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_CSC_S_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> STATUS_0;
    ordt_field<uint_fast8_t> STATUS_1;
    ordt_rg_NVDLA_CSC_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_S_POINTER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PRODUCER;
    ordt_field<uint_fast8_t> CONSUMER;
    ordt_rg_NVDLA_CSC_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_OP_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> OP_EN;
    ordt_rg_NVDLA_CSC_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_MISC_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> CONV_MODE;
    ordt_field<uint_fast8_t> IN_PRECISION;
    ordt_field<uint_fast8_t> PROC_PRECISION;
    ordt_field<uint_fast8_t> DATA_REUSE;
    ordt_field<uint_fast8_t> WEIGHT_REUSE;
    ordt_field<uint_fast8_t> SKIP_DATA_RLS;
    ordt_field<uint_fast8_t> SKIP_WEIGHT_RLS;
    ordt_rg_NVDLA_CSC_D_MISC_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DATAIN_FORMAT;
    ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAIN_WIDTH_EXT;
    ordt_field<uint32_t> DATAIN_HEIGHT_EXT;
    ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAIN_CHANNEL_EXT;
    ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_BATCH_NUMBER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> BATCHES;
    ordt_rg_NVDLA_CSC_D_BATCH_NUMBER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> Y_EXTENSION;
    ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE : public ordt_reg {
  public:
    ordt_field<uint32_t> ENTRIES;
    ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> WEIGHT_FORMAT;
    ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0 : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> WEIGHT_WIDTH_EXT;
    ordt_field<uint_fast8_t> WEIGHT_HEIGHT_EXT;
    ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1 : public ordt_reg {
  public:
    ordt_field<uint32_t> WEIGHT_CHANNEL_EXT;
    ordt_field<uint32_t> WEIGHT_KERNEL;
    ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES : public ordt_reg {
  public:
    ordt_field<uint32_t> WEIGHT_BYTES;
    ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_WMB_BYTES : public ordt_reg {
  public:
    ordt_field<uint32_t> WMB_BYTES;
    ordt_rg_NVDLA_CSC_D_WMB_BYTES(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAOUT_WIDTH;
    ordt_field<uint32_t> DATAOUT_HEIGHT;
    ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAOUT_CHANNEL;
    ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_ATOMICS : public ordt_reg {
  public:
    ordt_field<uint32_t> ATOMICS;
    ordt_rg_NVDLA_CSC_D_ATOMICS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_RELEASE : public ordt_reg {
  public:
    ordt_field<uint32_t> RLS_SLICES;
    ordt_rg_NVDLA_CSC_D_RELEASE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> CONV_X_STRIDE_EXT;
    ordt_field<uint_fast8_t> CONV_Y_STRIDE_EXT;
    ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_DILATION_EXT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> X_DILATION_EXT;
    ordt_field<uint_fast8_t> Y_DILATION_EXT;
    ordt_rg_NVDLA_CSC_D_DILATION_EXT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_ZERO_PADDING : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PAD_LEFT;
    ordt_field<uint_fast8_t> PAD_TOP;
    ordt_rg_NVDLA_CSC_D_ZERO_PADDING(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE : public ordt_reg {
  public:
    ordt_field<uint32_t> PAD_VALUE;
    ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_BANK : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DATA_BANK;
    ordt_field<uint_fast8_t> WEIGHT_BANK;
    ordt_rg_NVDLA_CSC_D_BANK(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_PRA_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PRA_TRUNCATE;
    ordt_rg_NVDLA_CSC_D_PRA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CSC_D_CYA : public ordt_reg {
  public:
    ordt_field<uint32_t> CYA;
    ordt_rg_NVDLA_CSC_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_CSC : public ordt_regset {
  public:
    ordt_rg_NVDLA_CSC_S_STATUS S_STATUS;
    ordt_rg_NVDLA_CSC_S_POINTER S_POINTER;
    ordt_rg_NVDLA_CSC_D_OP_ENABLE D_OP_ENABLE;
    ordt_rg_NVDLA_CSC_D_MISC_CFG D_MISC_CFG;
    ordt_rg_NVDLA_CSC_D_DATAIN_FORMAT D_DATAIN_FORMAT;
    ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_0 D_DATAIN_SIZE_EXT_0;
    ordt_rg_NVDLA_CSC_D_DATAIN_SIZE_EXT_1 D_DATAIN_SIZE_EXT_1;
    ordt_rg_NVDLA_CSC_D_BATCH_NUMBER D_BATCH_NUMBER;
    ordt_rg_NVDLA_CSC_D_POST_Y_EXTENSION D_POST_Y_EXTENSION;
    ordt_rg_NVDLA_CSC_D_ENTRY_PER_SLICE D_ENTRY_PER_SLICE;
    ordt_rg_NVDLA_CSC_D_WEIGHT_FORMAT D_WEIGHT_FORMAT;
    ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_0 D_WEIGHT_SIZE_EXT_0;
    ordt_rg_NVDLA_CSC_D_WEIGHT_SIZE_EXT_1 D_WEIGHT_SIZE_EXT_1;
    ordt_rg_NVDLA_CSC_D_WEIGHT_BYTES D_WEIGHT_BYTES;
    ordt_rg_NVDLA_CSC_D_WMB_BYTES D_WMB_BYTES;
    ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_0 D_DATAOUT_SIZE_0;
    ordt_rg_NVDLA_CSC_D_DATAOUT_SIZE_1 D_DATAOUT_SIZE_1;
    ordt_rg_NVDLA_CSC_D_ATOMICS D_ATOMICS;
    ordt_rg_NVDLA_CSC_D_RELEASE D_RELEASE;
    ordt_rg_NVDLA_CSC_D_CONV_STRIDE_EXT D_CONV_STRIDE_EXT;
    ordt_rg_NVDLA_CSC_D_DILATION_EXT D_DILATION_EXT;
    ordt_rg_NVDLA_CSC_D_ZERO_PADDING D_ZERO_PADDING;
    ordt_rg_NVDLA_CSC_D_ZERO_PADDING_VALUE D_ZERO_PADDING_VALUE;
    ordt_rg_NVDLA_CSC_D_BANK D_BANK;
    ordt_rg_NVDLA_CSC_D_PRA_CFG D_PRA_CFG;
    ordt_rg_NVDLA_CSC_D_CYA D_CYA;
    ordt_rset_NVDLA_CSC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_CMAC_A_S_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> STATUS_0;
    ordt_field<uint_fast8_t> STATUS_1;
    ordt_rg_NVDLA_CMAC_A_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CMAC_A_S_POINTER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PRODUCER;
    ordt_field<uint_fast8_t> CONSUMER;
    ordt_rg_NVDLA_CMAC_A_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CMAC_A_D_OP_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> OP_EN;
    ordt_rg_NVDLA_CMAC_A_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CMAC_A_D_MISC_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> CONV_MODE;
    ordt_field<uint_fast8_t> PROC_PRECISION;
    ordt_rg_NVDLA_CMAC_A_D_MISC_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_CMAC_A : public ordt_regset {
  public:
    ordt_rg_NVDLA_CMAC_A_S_STATUS S_STATUS;
    ordt_rg_NVDLA_CMAC_A_S_POINTER S_POINTER;
    ordt_rg_NVDLA_CMAC_A_D_OP_ENABLE D_OP_ENABLE;
    ordt_rg_NVDLA_CMAC_A_D_MISC_CFG D_MISC_CFG;
    ordt_rset_NVDLA_CMAC_A(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_CMAC_B_S_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> STATUS_0;
    ordt_field<uint_fast8_t> STATUS_1;
    ordt_rg_NVDLA_CMAC_B_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CMAC_B_S_POINTER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PRODUCER;
    ordt_field<uint_fast8_t> CONSUMER;
    ordt_rg_NVDLA_CMAC_B_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CMAC_B_D_OP_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> OP_EN;
    ordt_rg_NVDLA_CMAC_B_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CMAC_B_D_MISC_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> CONV_MODE;
    ordt_field<uint_fast8_t> PROC_PRECISION;
    ordt_rg_NVDLA_CMAC_B_D_MISC_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_CMAC_B : public ordt_regset {
  public:
    ordt_rg_NVDLA_CMAC_B_S_STATUS S_STATUS;
    ordt_rg_NVDLA_CMAC_B_S_POINTER S_POINTER;
    ordt_rg_NVDLA_CMAC_B_D_OP_ENABLE D_OP_ENABLE;
    ordt_rg_NVDLA_CMAC_B_D_MISC_CFG D_MISC_CFG;
    ordt_rset_NVDLA_CMAC_B(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_CACC_S_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> STATUS_0;
    ordt_field<uint_fast8_t> STATUS_1;
    ordt_rg_NVDLA_CACC_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CACC_S_POINTER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PRODUCER;
    ordt_field<uint_fast8_t> CONSUMER;
    ordt_rg_NVDLA_CACC_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CACC_D_OP_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> OP_EN;
    ordt_rg_NVDLA_CACC_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CACC_D_MISC_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> CONV_MODE;
    ordt_field<uint_fast8_t> PROC_PRECISION;
    ordt_rg_NVDLA_CACC_D_MISC_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_0 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAOUT_WIDTH;
    ordt_field<uint32_t> DATAOUT_HEIGHT;
    ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_1 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAOUT_CHANNEL;
    ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CACC_D_DATAOUT_ADDR : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAOUT_ADDR;
    ordt_rg_NVDLA_CACC_D_DATAOUT_ADDR(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CACC_D_BATCH_NUMBER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> BATCHES;
    ordt_rg_NVDLA_CACC_D_BATCH_NUMBER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CACC_D_LINE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> LINE_STRIDE;
    ordt_rg_NVDLA_CACC_D_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CACC_D_SURF_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> SURF_STRIDE;
    ordt_rg_NVDLA_CACC_D_SURF_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CACC_D_DATAOUT_MAP : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> LINE_PACKED;
    ordt_field<uint_fast8_t> SURF_PACKED;
    ordt_rg_NVDLA_CACC_D_DATAOUT_MAP(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CACC_D_CLIP_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> CLIP_TRUNCATE;
    ordt_rg_NVDLA_CACC_D_CLIP_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CACC_D_OUT_SATURATION : public ordt_reg {
  public:
    ordt_field<uint32_t> SAT_COUNT;
    ordt_rg_NVDLA_CACC_D_OUT_SATURATION(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CACC_D_CYA : public ordt_reg {
  public:
    ordt_field<uint32_t> CYA;
    ordt_rg_NVDLA_CACC_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_CACC : public ordt_regset {
  public:
    ordt_rg_NVDLA_CACC_S_STATUS S_STATUS;
    ordt_rg_NVDLA_CACC_S_POINTER S_POINTER;
    ordt_rg_NVDLA_CACC_D_OP_ENABLE D_OP_ENABLE;
    ordt_rg_NVDLA_CACC_D_MISC_CFG D_MISC_CFG;
    ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_0 D_DATAOUT_SIZE_0;
    ordt_rg_NVDLA_CACC_D_DATAOUT_SIZE_1 D_DATAOUT_SIZE_1;
    ordt_rg_NVDLA_CACC_D_DATAOUT_ADDR D_DATAOUT_ADDR;
    ordt_rg_NVDLA_CACC_D_BATCH_NUMBER D_BATCH_NUMBER;
    ordt_rg_NVDLA_CACC_D_LINE_STRIDE D_LINE_STRIDE;
    ordt_rg_NVDLA_CACC_D_SURF_STRIDE D_SURF_STRIDE;
    ordt_rg_NVDLA_CACC_D_DATAOUT_MAP D_DATAOUT_MAP;
    ordt_rg_NVDLA_CACC_D_CLIP_CFG D_CLIP_CFG;
    ordt_rg_NVDLA_CACC_D_OUT_SATURATION D_OUT_SATURATION;
    ordt_rg_NVDLA_CACC_D_CYA D_CYA;
    ordt_rset_NVDLA_CACC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_SDP_RDMA_S_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> STATUS_0;
    ordt_field<uint_fast8_t> STATUS_1;
    ordt_rg_NVDLA_SDP_RDMA_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_S_POINTER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PRODUCER;
    ordt_field<uint_fast8_t> CONSUMER;
    ordt_rg_NVDLA_SDP_RDMA_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> OP_EN;
    ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH : public ordt_reg {
  public:
    ordt_field<uint32_t> WIDTH;
    ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT : public ordt_reg {
  public:
    ordt_field<uint32_t> HEIGHT;
    ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL : public ordt_reg {
  public:
    ordt_field<uint32_t> CHANNEL;
    ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_BASE_ADDR_LOW;
    ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_LINE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_SURFACE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> BRDMA_DISABLE;
    ordt_field<uint_fast8_t> BRDMA_DATA_USE;
    ordt_field<uint_fast8_t> BRDMA_DATA_SIZE;
    ordt_field<uint_fast8_t> BRDMA_DATA_MODE;
    ordt_field<uint_fast8_t> BRDMA_RAM_TYPE;
    ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> BS_BASE_ADDR_LOW;
    ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> BS_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> BS_LINE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> BS_SURFACE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> BS_BATCH_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> NRDMA_DISABLE;
    ordt_field<uint_fast8_t> NRDMA_DATA_USE;
    ordt_field<uint_fast8_t> NRDMA_DATA_SIZE;
    ordt_field<uint_fast8_t> NRDMA_DATA_MODE;
    ordt_field<uint_fast8_t> NRDMA_RAM_TYPE;
    ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> BN_BASE_ADDR_LOW;
    ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> BN_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> BN_LINE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> BN_SURFACE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> BN_BATCH_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERDMA_DISABLE;
    ordt_field<uint_fast8_t> ERDMA_DATA_USE;
    ordt_field<uint_fast8_t> ERDMA_DATA_SIZE;
    ordt_field<uint_fast8_t> ERDMA_DATA_MODE;
    ordt_field<uint_fast8_t> ERDMA_RAM_TYPE;
    ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> EW_BASE_ADDR_LOW;
    ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> EW_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> EW_LINE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> EW_SURFACE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> EW_BATCH_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> FLYING_MODE;
    ordt_field<uint_fast8_t> WINOGRAD;
    ordt_field<uint_fast8_t> IN_PRECISION;
    ordt_field<uint_fast8_t> PROC_PRECISION;
    ordt_field<uint_fast8_t> OUT_PRECISION;
    ordt_field<uint_fast8_t> BATCH_NUMBER;
    ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> SRC_RAM_TYPE;
    ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> STATUS_NAN_INPUT_NUM;
    ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> STATUS_INF_INPUT_NUM;
    ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PERF_DMA_EN;
    ordt_field<uint_fast8_t> PERF_NAN_INF_COUNT_EN;
    ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> MRDMA_STALL;
    ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> BRDMA_STALL;
    ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> NRDMA_STALL;
    ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> ERDMA_STALL;
    ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_SDP_RDMA : public ordt_regset {
  public:
    ordt_rg_NVDLA_SDP_RDMA_S_STATUS S_STATUS;
    ordt_rg_NVDLA_SDP_RDMA_S_POINTER S_POINTER;
    ordt_rg_NVDLA_SDP_RDMA_D_OP_ENABLE D_OP_ENABLE;
    ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_WIDTH D_DATA_CUBE_WIDTH;
    ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_HEIGHT D_DATA_CUBE_HEIGHT;
    ordt_rg_NVDLA_SDP_RDMA_D_DATA_CUBE_CHANNEL D_DATA_CUBE_CHANNEL;
    ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_LOW D_SRC_BASE_ADDR_LOW;
    ordt_rg_NVDLA_SDP_RDMA_D_SRC_BASE_ADDR_HIGH D_SRC_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_SDP_RDMA_D_SRC_LINE_STRIDE D_SRC_LINE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_SRC_SURFACE_STRIDE D_SRC_SURFACE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_BRDMA_CFG D_BRDMA_CFG;
    ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_LOW D_BS_BASE_ADDR_LOW;
    ordt_rg_NVDLA_SDP_RDMA_D_BS_BASE_ADDR_HIGH D_BS_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_SDP_RDMA_D_BS_LINE_STRIDE D_BS_LINE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_BS_SURFACE_STRIDE D_BS_SURFACE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_BS_BATCH_STRIDE D_BS_BATCH_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_NRDMA_CFG D_NRDMA_CFG;
    ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_LOW D_BN_BASE_ADDR_LOW;
    ordt_rg_NVDLA_SDP_RDMA_D_BN_BASE_ADDR_HIGH D_BN_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_SDP_RDMA_D_BN_LINE_STRIDE D_BN_LINE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_BN_SURFACE_STRIDE D_BN_SURFACE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_BN_BATCH_STRIDE D_BN_BATCH_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_ERDMA_CFG D_ERDMA_CFG;
    ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_LOW D_EW_BASE_ADDR_LOW;
    ordt_rg_NVDLA_SDP_RDMA_D_EW_BASE_ADDR_HIGH D_EW_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_SDP_RDMA_D_EW_LINE_STRIDE D_EW_LINE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_EW_SURFACE_STRIDE D_EW_SURFACE_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_EW_BATCH_STRIDE D_EW_BATCH_STRIDE;
    ordt_rg_NVDLA_SDP_RDMA_D_FEATURE_MODE_CFG D_FEATURE_MODE_CFG;
    ordt_rg_NVDLA_SDP_RDMA_D_SRC_DMA_CFG D_SRC_DMA_CFG;
    ordt_rg_NVDLA_SDP_RDMA_D_STATUS_NAN_INPUT_NUM D_STATUS_NAN_INPUT_NUM;
    ordt_rg_NVDLA_SDP_RDMA_D_STATUS_INF_INPUT_NUM D_STATUS_INF_INPUT_NUM;
    ordt_rg_NVDLA_SDP_RDMA_D_PERF_ENABLE D_PERF_ENABLE;
    ordt_rg_NVDLA_SDP_RDMA_D_PERF_MRDMA_READ_STALL D_PERF_MRDMA_READ_STALL;
    ordt_rg_NVDLA_SDP_RDMA_D_PERF_BRDMA_READ_STALL D_PERF_BRDMA_READ_STALL;
    ordt_rg_NVDLA_SDP_RDMA_D_PERF_NRDMA_READ_STALL D_PERF_NRDMA_READ_STALL;
    ordt_rg_NVDLA_SDP_RDMA_D_PERF_ERDMA_READ_STALL D_PERF_ERDMA_READ_STALL;
    ordt_rset_NVDLA_SDP_RDMA(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_SDP_S_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> STATUS_0;
    ordt_field<uint_fast8_t> STATUS_1;
    ordt_rg_NVDLA_SDP_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_S_POINTER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PRODUCER;
    ordt_field<uint_fast8_t> CONSUMER;
    ordt_rg_NVDLA_SDP_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_ADDR;
    ordt_field<uint_fast8_t> LUT_TABLE_ID;
    ordt_field<uint_fast8_t> LUT_ACCESS_TYPE;
    ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_DATA;
    ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_S_LUT_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> LUT_LE_FUNCTION;
    ordt_field<uint_fast8_t> LUT_UFLOW_PRIORITY;
    ordt_field<uint_fast8_t> LUT_OFLOW_PRIORITY;
    ordt_field<uint_fast8_t> LUT_HYBRID_PRIORITY;
    ordt_rg_NVDLA_SDP_S_LUT_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_S_LUT_INFO : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> LUT_LE_INDEX_OFFSET;
    ordt_field<uint_fast8_t> LUT_LE_INDEX_SELECT;
    ordt_field<uint_fast8_t> LUT_LO_INDEX_SELECT;
    ordt_rg_NVDLA_SDP_S_LUT_INFO(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_S_LUT_LE_START : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_LE_START;
    ordt_rg_NVDLA_SDP_S_LUT_LE_START(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_S_LUT_LE_END : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_LE_END;
    ordt_rg_NVDLA_SDP_S_LUT_LE_END(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_S_LUT_LO_START : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_LO_START;
    ordt_rg_NVDLA_SDP_S_LUT_LO_START(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_S_LUT_LO_END : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_LO_END;
    ordt_rg_NVDLA_SDP_S_LUT_LO_END(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_LE_SLOPE_UFLOW_SCALE;
    ordt_field<uint32_t> LUT_LE_SLOPE_OFLOW_SCALE;
    ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> LUT_LE_SLOPE_UFLOW_SHIFT;
    ordt_field<uint_fast8_t> LUT_LE_SLOPE_OFLOW_SHIFT;
    ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_LO_SLOPE_UFLOW_SCALE;
    ordt_field<uint32_t> LUT_LO_SLOPE_OFLOW_SCALE;
    ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> LUT_LO_SLOPE_UFLOW_SHIFT;
    ordt_field<uint_fast8_t> LUT_LO_SLOPE_OFLOW_SHIFT;
    ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_OP_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> OP_EN;
    ordt_rg_NVDLA_SDP_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH : public ordt_reg {
  public:
    ordt_field<uint32_t> WIDTH;
    ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT : public ordt_reg {
  public:
    ordt_field<uint32_t> HEIGHT;
    ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL : public ordt_reg {
  public:
    ordt_field<uint32_t> CHANNEL;
    ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> DST_BASE_ADDR_LOW;
    ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> DST_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> DST_LINE_STRIDE;
    ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> DST_SURFACE_STRIDE;
    ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_BS_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> BS_BYPASS;
    ordt_field<uint_fast8_t> BS_ALU_BYPASS;
    ordt_field<uint_fast8_t> BS_ALU_ALGO;
    ordt_field<uint_fast8_t> BS_MUL_BYPASS;
    ordt_field<uint_fast8_t> BS_MUL_PRELU;
    ordt_field<uint_fast8_t> BS_RELU_BYPASS;
    ordt_rg_NVDLA_SDP_D_DP_BS_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> BS_ALU_SRC;
    ordt_field<uint_fast8_t> BS_ALU_SHIFT_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE : public ordt_reg {
  public:
    ordt_field<uint32_t> BS_ALU_OPERAND;
    ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> BS_MUL_SRC;
    ordt_field<uint_fast8_t> BS_MUL_SHIFT_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE : public ordt_reg {
  public:
    ordt_field<uint32_t> BS_MUL_OPERAND;
    ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_BN_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> BN_BYPASS;
    ordt_field<uint_fast8_t> BN_ALU_BYPASS;
    ordt_field<uint_fast8_t> BN_ALU_ALGO;
    ordt_field<uint_fast8_t> BN_MUL_BYPASS;
    ordt_field<uint_fast8_t> BN_MUL_PRELU;
    ordt_field<uint_fast8_t> BN_RELU_BYPASS;
    ordt_rg_NVDLA_SDP_D_DP_BN_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> BN_ALU_SRC;
    ordt_field<uint_fast8_t> BN_ALU_SHIFT_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE : public ordt_reg {
  public:
    ordt_field<uint32_t> BN_ALU_OPERAND;
    ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> BN_MUL_SRC;
    ordt_field<uint_fast8_t> BN_MUL_SHIFT_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE : public ordt_reg {
  public:
    ordt_field<uint32_t> BN_MUL_OPERAND;
    ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_EW_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> EW_BYPASS;
    ordt_field<uint_fast8_t> EW_ALU_BYPASS;
    ordt_field<uint_fast8_t> EW_ALU_ALGO;
    ordt_field<uint_fast8_t> EW_MUL_BYPASS;
    ordt_field<uint_fast8_t> EW_MUL_PRELU;
    ordt_field<uint_fast8_t> EW_LUT_BYPASS;
    ordt_rg_NVDLA_SDP_D_DP_EW_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> EW_ALU_SRC;
    ordt_field<uint_fast8_t> EW_ALU_CVT_BYPASS;
    ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE : public ordt_reg {
  public:
    ordt_field<uint32_t> EW_ALU_OPERAND;
    ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE : public ordt_reg {
  public:
    ordt_field<uint32_t> EW_ALU_CVT_OFFSET;
    ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE : public ordt_reg {
  public:
    ordt_field<uint32_t> EW_ALU_CVT_SCALE;
    ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> EW_ALU_CVT_TRUNCATE;
    ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> EW_MUL_SRC;
    ordt_field<uint_fast8_t> EW_MUL_CVT_BYPASS;
    ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE : public ordt_reg {
  public:
    ordt_field<uint32_t> EW_MUL_OPERAND;
    ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE : public ordt_reg {
  public:
    ordt_field<uint32_t> EW_MUL_CVT_OFFSET;
    ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE : public ordt_reg {
  public:
    ordt_field<uint32_t> EW_MUL_CVT_SCALE;
    ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> EW_MUL_CVT_TRUNCATE;
    ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE : public ordt_reg {
  public:
    ordt_field<uint32_t> EW_TRUNCATE;
    ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> FLYING_MODE;
    ordt_field<uint_fast8_t> OUTPUT_DST;
    ordt_field<uint_fast8_t> WINOGRAD;
    ordt_field<uint_fast8_t> NAN_TO_ZERO;
    ordt_field<uint_fast8_t> BATCH_NUMBER;
    ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DST_DMA_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DST_RAM_TYPE;
    ordt_rg_NVDLA_SDP_D_DST_DMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> DST_BATCH_STRIDE;
    ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_DATA_FORMAT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PROC_PRECISION;
    ordt_field<uint_fast8_t> OUT_PRECISION;
    ordt_rg_NVDLA_SDP_D_DATA_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_CVT_OFFSET : public ordt_reg {
  public:
    ordt_field<uint32_t> CVT_OFFSET;
    ordt_rg_NVDLA_SDP_D_CVT_OFFSET(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_CVT_SCALE : public ordt_reg {
  public:
    ordt_field<uint32_t> CVT_SCALE;
    ordt_rg_NVDLA_SDP_D_CVT_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_CVT_SHIFT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> CVT_SHIFT;
    ordt_rg_NVDLA_SDP_D_CVT_SHIFT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> STATUS_UNEQUAL;
    ordt_rg_NVDLA_SDP_D_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> STATUS_NAN_INPUT_NUM;
    ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> STATUS_INF_INPUT_NUM;
    ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> STATUS_NAN_OUTPUT_NUM;
    ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_PERF_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PERF_DMA_EN;
    ordt_field<uint_fast8_t> PERF_LUT_EN;
    ordt_field<uint_fast8_t> PERF_SAT_EN;
    ordt_field<uint_fast8_t> PERF_NAN_INF_COUNT_EN;
    ordt_rg_NVDLA_SDP_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> WDMA_STALL;
    ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_UFLOW;
    ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_OFLOW;
    ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION : public ordt_reg {
  public:
    ordt_field<uint32_t> OUT_SATURATION;
    ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_HYBRID;
    ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_LE_HIT;
    ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_LO_HIT;
    ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_SDP : public ordt_regset {
  public:
    ordt_rg_NVDLA_SDP_S_STATUS S_STATUS;
    ordt_rg_NVDLA_SDP_S_POINTER S_POINTER;
    ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG S_LUT_ACCESS_CFG;
    ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA S_LUT_ACCESS_DATA;
    ordt_rg_NVDLA_SDP_S_LUT_CFG S_LUT_CFG;
    ordt_rg_NVDLA_SDP_S_LUT_INFO S_LUT_INFO;
    ordt_rg_NVDLA_SDP_S_LUT_LE_START S_LUT_LE_START;
    ordt_rg_NVDLA_SDP_S_LUT_LE_END S_LUT_LE_END;
    ordt_rg_NVDLA_SDP_S_LUT_LO_START S_LUT_LO_START;
    ordt_rg_NVDLA_SDP_S_LUT_LO_END S_LUT_LO_END;
    ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE S_LUT_LE_SLOPE_SCALE;
    ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT S_LUT_LE_SLOPE_SHIFT;
    ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE S_LUT_LO_SLOPE_SCALE;
    ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT S_LUT_LO_SLOPE_SHIFT;
    ordt_rg_NVDLA_SDP_D_OP_ENABLE D_OP_ENABLE;
    ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH D_DATA_CUBE_WIDTH;
    ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT D_DATA_CUBE_HEIGHT;
    ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL D_DATA_CUBE_CHANNEL;
    ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW D_DST_BASE_ADDR_LOW;
    ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH D_DST_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE D_DST_LINE_STRIDE;
    ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE D_DST_SURFACE_STRIDE;
    ordt_rg_NVDLA_SDP_D_DP_BS_CFG D_DP_BS_CFG;
    ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG D_DP_BS_ALU_CFG;
    ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE D_DP_BS_ALU_SRC_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG D_DP_BS_MUL_CFG;
    ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE D_DP_BS_MUL_SRC_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_BN_CFG D_DP_BN_CFG;
    ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG D_DP_BN_ALU_CFG;
    ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE D_DP_BN_ALU_SRC_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG D_DP_BN_MUL_CFG;
    ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE D_DP_BN_MUL_SRC_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_EW_CFG D_DP_EW_CFG;
    ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG D_DP_EW_ALU_CFG;
    ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE D_DP_EW_ALU_SRC_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE D_DP_EW_ALU_CVT_OFFSET_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE D_DP_EW_ALU_CVT_SCALE_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE D_DP_EW_ALU_CVT_TRUNCATE_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG D_DP_EW_MUL_CFG;
    ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE D_DP_EW_MUL_SRC_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE D_DP_EW_MUL_CVT_OFFSET_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE D_DP_EW_MUL_CVT_SCALE_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE D_DP_EW_MUL_CVT_TRUNCATE_VALUE;
    ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE D_DP_EW_TRUNCATE_VALUE;
    ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG D_FEATURE_MODE_CFG;
    ordt_rg_NVDLA_SDP_D_DST_DMA_CFG D_DST_DMA_CFG;
    ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE D_DST_BATCH_STRIDE;
    ordt_rg_NVDLA_SDP_D_DATA_FORMAT D_DATA_FORMAT;
    ordt_rg_NVDLA_SDP_D_CVT_OFFSET D_CVT_OFFSET;
    ordt_rg_NVDLA_SDP_D_CVT_SCALE D_CVT_SCALE;
    ordt_rg_NVDLA_SDP_D_CVT_SHIFT D_CVT_SHIFT;
    ordt_rg_NVDLA_SDP_D_STATUS D_STATUS;
    ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM D_STATUS_NAN_INPUT_NUM;
    ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM D_STATUS_INF_INPUT_NUM;
    ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM D_STATUS_NAN_OUTPUT_NUM;
    ordt_rg_NVDLA_SDP_D_PERF_ENABLE D_PERF_ENABLE;
    ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL D_PERF_WDMA_WRITE_STALL;
    ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW D_PERF_LUT_UFLOW;
    ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW D_PERF_LUT_OFLOW;
    ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION D_PERF_OUT_SATURATION;
    ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID D_PERF_LUT_HYBRID;
    ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT D_PERF_LUT_LE_HIT;
    ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT D_PERF_LUT_LO_HIT;
    ordt_rset_NVDLA_SDP(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_PDP_RDMA_S_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> STATUS_0;
    ordt_field<uint_fast8_t> STATUS_1;
    ordt_rg_NVDLA_PDP_RDMA_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_S_POINTER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PRODUCER;
    ordt_field<uint_fast8_t> CONSUMER;
    ordt_rg_NVDLA_PDP_RDMA_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_OP_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> OP_EN;
    ordt_rg_NVDLA_PDP_RDMA_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CUBE_IN_WIDTH;
    ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT : public ordt_reg {
  public:
    ordt_field<uint32_t> CUBE_IN_HEIGHT;
    ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL : public ordt_reg {
  public:
    ordt_field<uint32_t> CUBE_IN_CHANNEL;
    ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_FLYING_MODE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> FLYING_MODE;
    ordt_rg_NVDLA_PDP_RDMA_D_FLYING_MODE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_BASE_ADDR_LOW;
    ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_LINE_STRIDE;
    ordt_rg_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_SURFACE_STRIDE;
    ordt_rg_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_SRC_RAM_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> SRC_RAM_TYPE;
    ordt_rg_NVDLA_PDP_RDMA_D_SRC_RAM_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_DATA_FORMAT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> INPUT_DATA;
    ordt_rg_NVDLA_PDP_RDMA_D_DATA_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> SPLIT_NUM;
    ordt_rg_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> KERNEL_WIDTH;
    ordt_field<uint_fast8_t> KERNEL_STRIDE_WIDTH;
    ordt_rg_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PAD_WIDTH;
    ordt_rg_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN : public ordt_reg {
  public:
    ordt_field<uint32_t> PARTIAL_WIDTH_IN_FIRST;
    ordt_field<uint32_t> PARTIAL_WIDTH_IN_LAST;
    ordt_field<uint32_t> PARTIAL_WIDTH_IN_MID;
    ordt_rg_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_PERF_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DMA_EN;
    ordt_rg_NVDLA_PDP_RDMA_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_PERF_READ_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> PERF_READ_STALL;
    ordt_rg_NVDLA_PDP_RDMA_D_PERF_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_RDMA_D_CYA : public ordt_reg {
  public:
    ordt_field<uint32_t> CYA;
    ordt_rg_NVDLA_PDP_RDMA_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_PDP_RDMA : public ordt_regset {
  public:
    ordt_rg_NVDLA_PDP_RDMA_S_STATUS S_STATUS;
    ordt_rg_NVDLA_PDP_RDMA_S_POINTER S_POINTER;
    ordt_rg_NVDLA_PDP_RDMA_D_OP_ENABLE D_OP_ENABLE;
    ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_WIDTH D_DATA_CUBE_IN_WIDTH;
    ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_HEIGHT D_DATA_CUBE_IN_HEIGHT;
    ordt_rg_NVDLA_PDP_RDMA_D_DATA_CUBE_IN_CHANNEL D_DATA_CUBE_IN_CHANNEL;
    ordt_rg_NVDLA_PDP_RDMA_D_FLYING_MODE D_FLYING_MODE;
    ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_LOW D_SRC_BASE_ADDR_LOW;
    ordt_rg_NVDLA_PDP_RDMA_D_SRC_BASE_ADDR_HIGH D_SRC_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_PDP_RDMA_D_SRC_LINE_STRIDE D_SRC_LINE_STRIDE;
    ordt_rg_NVDLA_PDP_RDMA_D_SRC_SURFACE_STRIDE D_SRC_SURFACE_STRIDE;
    ordt_rg_NVDLA_PDP_RDMA_D_SRC_RAM_CFG D_SRC_RAM_CFG;
    ordt_rg_NVDLA_PDP_RDMA_D_DATA_FORMAT D_DATA_FORMAT;
    ordt_rg_NVDLA_PDP_RDMA_D_OPERATION_MODE_CFG D_OPERATION_MODE_CFG;
    ordt_rg_NVDLA_PDP_RDMA_D_POOLING_KERNEL_CFG D_POOLING_KERNEL_CFG;
    ordt_rg_NVDLA_PDP_RDMA_D_POOLING_PADDING_CFG D_POOLING_PADDING_CFG;
    ordt_rg_NVDLA_PDP_RDMA_D_PARTIAL_WIDTH_IN D_PARTIAL_WIDTH_IN;
    ordt_rg_NVDLA_PDP_RDMA_D_PERF_ENABLE D_PERF_ENABLE;
    ordt_rg_NVDLA_PDP_RDMA_D_PERF_READ_STALL D_PERF_READ_STALL;
    ordt_rg_NVDLA_PDP_RDMA_D_CYA D_CYA;
    ordt_rset_NVDLA_PDP_RDMA(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_PDP_S_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> STATUS_0;
    ordt_field<uint_fast8_t> STATUS_1;
    ordt_rg_NVDLA_PDP_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_S_POINTER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PRODUCER;
    ordt_field<uint_fast8_t> CONSUMER;
    ordt_rg_NVDLA_PDP_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_OP_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> OP_EN;
    ordt_rg_NVDLA_PDP_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CUBE_IN_WIDTH;
    ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT : public ordt_reg {
  public:
    ordt_field<uint32_t> CUBE_IN_HEIGHT;
    ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL : public ordt_reg {
  public:
    ordt_field<uint32_t> CUBE_IN_CHANNEL;
    ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH : public ordt_reg {
  public:
    ordt_field<uint32_t> CUBE_OUT_WIDTH;
    ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT : public ordt_reg {
  public:
    ordt_field<uint32_t> CUBE_OUT_HEIGHT;
    ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL : public ordt_reg {
  public:
    ordt_field<uint32_t> CUBE_OUT_CHANNEL;
    ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> POOLING_METHOD;
    ordt_field<uint_fast8_t> FLYING_MODE;
    ordt_field<uint_fast8_t> SPLIT_NUM;
    ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> NAN_TO_ZERO;
    ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN : public ordt_reg {
  public:
    ordt_field<uint32_t> PARTIAL_WIDTH_IN_FIRST;
    ordt_field<uint32_t> PARTIAL_WIDTH_IN_LAST;
    ordt_field<uint32_t> PARTIAL_WIDTH_IN_MID;
    ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT : public ordt_reg {
  public:
    ordt_field<uint32_t> PARTIAL_WIDTH_OUT_FIRST;
    ordt_field<uint32_t> PARTIAL_WIDTH_OUT_LAST;
    ordt_field<uint32_t> PARTIAL_WIDTH_OUT_MID;
    ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> KERNEL_WIDTH;
    ordt_field<uint_fast8_t> KERNEL_HEIGHT;
    ordt_field<uint_fast8_t> KERNEL_STRIDE_WIDTH;
    ordt_field<uint_fast8_t> KERNEL_STRIDE_HEIGHT;
    ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH : public ordt_reg {
  public:
    ordt_field<uint32_t> RECIP_KERNEL_WIDTH;
    ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT : public ordt_reg {
  public:
    ordt_field<uint32_t> RECIP_KERNEL_HEIGHT;
    ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PAD_LEFT;
    ordt_field<uint_fast8_t> PAD_TOP;
    ordt_field<uint_fast8_t> PAD_RIGHT;
    ordt_field<uint_fast8_t> PAD_BOTTOM;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG : public ordt_reg {
  public:
    ordt_field<uint32_t> PAD_VALUE_1X;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG : public ordt_reg {
  public:
    ordt_field<uint32_t> PAD_VALUE_2X;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG : public ordt_reg {
  public:
    ordt_field<uint32_t> PAD_VALUE_3X;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG : public ordt_reg {
  public:
    ordt_field<uint32_t> PAD_VALUE_4X;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG : public ordt_reg {
  public:
    ordt_field<uint32_t> PAD_VALUE_5X;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG : public ordt_reg {
  public:
    ordt_field<uint32_t> PAD_VALUE_6X;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG : public ordt_reg {
  public:
    ordt_field<uint32_t> PAD_VALUE_7X;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_BASE_ADDR_LOW;
    ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_LINE_STRIDE;
    ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_SURFACE_STRIDE;
    ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> DST_BASE_ADDR_LOW;
    ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> DST_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> DST_LINE_STRIDE;
    ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> DST_SURFACE_STRIDE;
    ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_DST_RAM_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DST_RAM_TYPE;
    ordt_rg_NVDLA_PDP_D_DST_RAM_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_DATA_FORMAT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> INPUT_DATA;
    ordt_rg_NVDLA_PDP_D_DATA_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> INF_INPUT_NUM;
    ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> NAN_INPUT_NUM;
    ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> NAN_OUTPUT_NUM;
    ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_PERF_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DMA_EN;
    ordt_rg_NVDLA_PDP_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> PERF_WRITE_STALL;
    ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_PDP_D_CYA : public ordt_reg {
  public:
    ordt_field<uint32_t> CYA;
    ordt_rg_NVDLA_PDP_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_PDP : public ordt_regset {
  public:
    ordt_rg_NVDLA_PDP_S_STATUS S_STATUS;
    ordt_rg_NVDLA_PDP_S_POINTER S_POINTER;
    ordt_rg_NVDLA_PDP_D_OP_ENABLE D_OP_ENABLE;
    ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_WIDTH D_DATA_CUBE_IN_WIDTH;
    ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_HEIGHT D_DATA_CUBE_IN_HEIGHT;
    ordt_rg_NVDLA_PDP_D_DATA_CUBE_IN_CHANNEL D_DATA_CUBE_IN_CHANNEL;
    ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_WIDTH D_DATA_CUBE_OUT_WIDTH;
    ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_HEIGHT D_DATA_CUBE_OUT_HEIGHT;
    ordt_rg_NVDLA_PDP_D_DATA_CUBE_OUT_CHANNEL D_DATA_CUBE_OUT_CHANNEL;
    ordt_rg_NVDLA_PDP_D_OPERATION_MODE_CFG D_OPERATION_MODE_CFG;
    ordt_rg_NVDLA_PDP_D_NAN_FLUSH_TO_ZERO D_NAN_FLUSH_TO_ZERO;
    ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_IN D_PARTIAL_WIDTH_IN;
    ordt_rg_NVDLA_PDP_D_PARTIAL_WIDTH_OUT D_PARTIAL_WIDTH_OUT;
    ordt_rg_NVDLA_PDP_D_POOLING_KERNEL_CFG D_POOLING_KERNEL_CFG;
    ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_WIDTH D_RECIP_KERNEL_WIDTH;
    ordt_rg_NVDLA_PDP_D_RECIP_KERNEL_HEIGHT D_RECIP_KERNEL_HEIGHT;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_CFG D_POOLING_PADDING_CFG;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_1_CFG D_POOLING_PADDING_VALUE_1_CFG;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_2_CFG D_POOLING_PADDING_VALUE_2_CFG;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_3_CFG D_POOLING_PADDING_VALUE_3_CFG;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_4_CFG D_POOLING_PADDING_VALUE_4_CFG;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_5_CFG D_POOLING_PADDING_VALUE_5_CFG;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_6_CFG D_POOLING_PADDING_VALUE_6_CFG;
    ordt_rg_NVDLA_PDP_D_POOLING_PADDING_VALUE_7_CFG D_POOLING_PADDING_VALUE_7_CFG;
    ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_LOW D_SRC_BASE_ADDR_LOW;
    ordt_rg_NVDLA_PDP_D_SRC_BASE_ADDR_HIGH D_SRC_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_PDP_D_SRC_LINE_STRIDE D_SRC_LINE_STRIDE;
    ordt_rg_NVDLA_PDP_D_SRC_SURFACE_STRIDE D_SRC_SURFACE_STRIDE;
    ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_LOW D_DST_BASE_ADDR_LOW;
    ordt_rg_NVDLA_PDP_D_DST_BASE_ADDR_HIGH D_DST_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_PDP_D_DST_LINE_STRIDE D_DST_LINE_STRIDE;
    ordt_rg_NVDLA_PDP_D_DST_SURFACE_STRIDE D_DST_SURFACE_STRIDE;
    ordt_rg_NVDLA_PDP_D_DST_RAM_CFG D_DST_RAM_CFG;
    ordt_rg_NVDLA_PDP_D_DATA_FORMAT D_DATA_FORMAT;
    ordt_rg_NVDLA_PDP_D_INF_INPUT_NUM D_INF_INPUT_NUM;
    ordt_rg_NVDLA_PDP_D_NAN_INPUT_NUM D_NAN_INPUT_NUM;
    ordt_rg_NVDLA_PDP_D_NAN_OUTPUT_NUM D_NAN_OUTPUT_NUM;
    ordt_rg_NVDLA_PDP_D_PERF_ENABLE D_PERF_ENABLE;
    ordt_rg_NVDLA_PDP_D_PERF_WRITE_STALL D_PERF_WRITE_STALL;
    ordt_rg_NVDLA_PDP_D_CYA D_CYA;
    ordt_rset_NVDLA_PDP(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_CDP_RDMA_S_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> STATUS_0;
    ordt_field<uint_fast8_t> STATUS_1;
    ordt_rg_NVDLA_CDP_RDMA_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_S_POINTER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PRODUCER;
    ordt_field<uint_fast8_t> CONSUMER;
    ordt_rg_NVDLA_CDP_RDMA_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_D_OP_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> OP_EN;
    ordt_rg_NVDLA_CDP_RDMA_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH : public ordt_reg {
  public:
    ordt_field<uint32_t> WIDTH;
    ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT : public ordt_reg {
  public:
    ordt_field<uint32_t> HEIGHT;
    ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL : public ordt_reg {
  public:
    ordt_field<uint32_t> CHANNEL;
    ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_BASE_ADDR_LOW;
    ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_LINE_STRIDE;
    ordt_rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> SRC_SURFACE_STRIDE;
    ordt_rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> SRC_RAM_TYPE;
    ordt_rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> SRC_COMPRESSION_EN;
    ordt_rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_D_OPERATION_MODE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> OPERATION_MODE;
    ordt_rg_NVDLA_CDP_RDMA_D_OPERATION_MODE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_D_DATA_FORMAT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> INPUT_DATA;
    ordt_rg_NVDLA_CDP_RDMA_D_DATA_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_D_PERF_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DMA_EN;
    ordt_rg_NVDLA_CDP_RDMA_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> PERF_READ_STALL;
    ordt_rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_RDMA_D_CYA : public ordt_reg {
  public:
    ordt_field<uint32_t> CYA;
    ordt_rg_NVDLA_CDP_RDMA_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_CDP_RDMA : public ordt_regset {
  public:
    ordt_rg_NVDLA_CDP_RDMA_S_STATUS S_STATUS;
    ordt_rg_NVDLA_CDP_RDMA_S_POINTER S_POINTER;
    ordt_rg_NVDLA_CDP_RDMA_D_OP_ENABLE D_OP_ENABLE;
    ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH D_DATA_CUBE_WIDTH;
    ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT D_DATA_CUBE_HEIGHT;
    ordt_rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL D_DATA_CUBE_CHANNEL;
    ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW D_SRC_BASE_ADDR_LOW;
    ordt_rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH D_SRC_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE D_SRC_LINE_STRIDE;
    ordt_rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE D_SRC_SURFACE_STRIDE;
    ordt_rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG D_SRC_DMA_CFG;
    ordt_rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN D_SRC_COMPRESSION_EN;
    ordt_rg_NVDLA_CDP_RDMA_D_OPERATION_MODE D_OPERATION_MODE;
    ordt_rg_NVDLA_CDP_RDMA_D_DATA_FORMAT D_DATA_FORMAT;
    ordt_rg_NVDLA_CDP_RDMA_D_PERF_ENABLE D_PERF_ENABLE;
    ordt_rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL D_PERF_READ_STALL;
    ordt_rg_NVDLA_CDP_RDMA_D_CYA D_CYA;
    ordt_rset_NVDLA_CDP_RDMA(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_CDP_S_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> STATUS_0;
    ordt_field<uint_fast8_t> STATUS_1;
    ordt_rg_NVDLA_CDP_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_POINTER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PRODUCER;
    ordt_field<uint_fast8_t> CONSUMER;
    ordt_rg_NVDLA_CDP_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_ACCESS_CFG : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_ADDR;
    ordt_field<uint_fast8_t> LUT_TABLE_ID;
    ordt_field<uint_fast8_t> LUT_ACCESS_TYPE;
    ordt_rg_NVDLA_CDP_S_LUT_ACCESS_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_ACCESS_DATA : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_DATA;
    ordt_rg_NVDLA_CDP_S_LUT_ACCESS_DATA(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> LUT_LE_FUNCTION;
    ordt_field<uint_fast8_t> LUT_UFLOW_PRIORITY;
    ordt_field<uint_fast8_t> LUT_OFLOW_PRIORITY;
    ordt_field<uint_fast8_t> LUT_HYBRID_PRIORITY;
    ordt_rg_NVDLA_CDP_S_LUT_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_INFO : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> LUT_LE_INDEX_OFFSET;
    ordt_field<uint_fast8_t> LUT_LE_INDEX_SELECT;
    ordt_field<uint_fast8_t> LUT_LO_INDEX_SELECT;
    ordt_rg_NVDLA_CDP_S_LUT_INFO(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_LE_START_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_LE_START_LOW;
    ordt_rg_NVDLA_CDP_S_LUT_LE_START_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_LE_START_HIGH : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> LUT_LE_START_HIGH;
    ordt_rg_NVDLA_CDP_S_LUT_LE_START_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_LE_END_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_LE_END_LOW;
    ordt_rg_NVDLA_CDP_S_LUT_LE_END_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_LE_END_HIGH : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> LUT_LE_END_HIGH;
    ordt_rg_NVDLA_CDP_S_LUT_LE_END_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_LO_START_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_LO_START_LOW;
    ordt_rg_NVDLA_CDP_S_LUT_LO_START_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_LO_START_HIGH : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> LUT_LO_START_HIGH;
    ordt_rg_NVDLA_CDP_S_LUT_LO_START_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_LO_END_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_LO_END_LOW;
    ordt_rg_NVDLA_CDP_S_LUT_LO_END_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_LO_END_HIGH : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> LUT_LO_END_HIGH;
    ordt_rg_NVDLA_CDP_S_LUT_LO_END_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_LE_SLOPE_UFLOW_SCALE;
    ordt_field<uint32_t> LUT_LE_SLOPE_OFLOW_SCALE;
    ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> LUT_LE_SLOPE_UFLOW_SHIFT;
    ordt_field<uint_fast8_t> LUT_LE_SLOPE_OFLOW_SHIFT;
    ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE : public ordt_reg {
  public:
    ordt_field<uint32_t> LUT_LO_SLOPE_UFLOW_SCALE;
    ordt_field<uint32_t> LUT_LO_SLOPE_OFLOW_SCALE;
    ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> LUT_LO_SLOPE_UFLOW_SHIFT;
    ordt_field<uint_fast8_t> LUT_LO_SLOPE_OFLOW_SHIFT;
    ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_OP_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> OP_EN;
    ordt_rg_NVDLA_CDP_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_FUNC_BYPASS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> SQSUM_BYPASS;
    ordt_field<uint_fast8_t> MUL_BYPASS;
    ordt_rg_NVDLA_CDP_D_FUNC_BYPASS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> DST_BASE_ADDR_LOW;
    ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> DST_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_DST_LINE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> DST_LINE_STRIDE;
    ordt_rg_NVDLA_CDP_D_DST_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_DST_SURFACE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> DST_SURFACE_STRIDE;
    ordt_rg_NVDLA_CDP_D_DST_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_DST_DMA_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DST_RAM_TYPE;
    ordt_rg_NVDLA_CDP_D_DST_DMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_DST_COMPRESSION_EN : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DST_COMPRESSION_EN;
    ordt_rg_NVDLA_CDP_D_DST_COMPRESSION_EN(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_DATA_FORMAT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> INPUT_DATA_TYPE;
    ordt_rg_NVDLA_CDP_D_DATA_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> NAN_TO_ZERO;
    ordt_rg_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_LRN_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> NORMALZ_LEN;
    ordt_rg_NVDLA_CDP_D_LRN_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_DATIN_OFFSET : public ordt_reg {
  public:
    ordt_field<uint32_t> DATIN_OFFSET;
    ordt_rg_NVDLA_CDP_D_DATIN_OFFSET(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_DATIN_SCALE : public ordt_reg {
  public:
    ordt_field<uint32_t> DATIN_SCALE;
    ordt_rg_NVDLA_CDP_D_DATIN_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_DATIN_SHIFTER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DATIN_SHIFTER;
    ordt_rg_NVDLA_CDP_D_DATIN_SHIFTER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_DATOUT_OFFSET : public ordt_reg {
  public:
    ordt_field<uint32_t> DATOUT_OFFSET;
    ordt_rg_NVDLA_CDP_D_DATOUT_OFFSET(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_DATOUT_SCALE : public ordt_reg {
  public:
    ordt_field<uint32_t> DATOUT_SCALE;
    ordt_rg_NVDLA_CDP_D_DATOUT_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_DATOUT_SHIFTER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DATOUT_SHIFTER;
    ordt_rg_NVDLA_CDP_D_DATOUT_SHIFTER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_NAN_INPUT_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> NAN_INPUT_NUM;
    ordt_rg_NVDLA_CDP_D_NAN_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_INF_INPUT_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> INF_INPUT_NUM;
    ordt_rg_NVDLA_CDP_D_INF_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_NAN_OUTPUT_NUM : public ordt_reg {
  public:
    ordt_field<uint32_t> NAN_OUTPUT_NUM;
    ordt_rg_NVDLA_CDP_D_NAN_OUTPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_OUT_SATURATION : public ordt_reg {
  public:
    ordt_field<uint32_t> OUT_SATURATION;
    ordt_rg_NVDLA_CDP_D_OUT_SATURATION(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_PERF_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DMA_EN;
    ordt_field<uint_fast8_t> LUT_EN;
    ordt_rg_NVDLA_CDP_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_PERF_WRITE_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> PERF_WRITE_STALL;
    ordt_rg_NVDLA_CDP_D_PERF_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_PERF_LUT_UFLOW : public ordt_reg {
  public:
    ordt_field<uint32_t> PERF_LUT_UFLOW;
    ordt_rg_NVDLA_CDP_D_PERF_LUT_UFLOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_PERF_LUT_OFLOW : public ordt_reg {
  public:
    ordt_field<uint32_t> PERF_LUT_OFLOW;
    ordt_rg_NVDLA_CDP_D_PERF_LUT_OFLOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_PERF_LUT_HYBRID : public ordt_reg {
  public:
    ordt_field<uint32_t> PERF_LUT_HYBRID;
    ordt_rg_NVDLA_CDP_D_PERF_LUT_HYBRID(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_PERF_LUT_LE_HIT : public ordt_reg {
  public:
    ordt_field<uint32_t> PERF_LUT_LE_HIT;
    ordt_rg_NVDLA_CDP_D_PERF_LUT_LE_HIT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_PERF_LUT_LO_HIT : public ordt_reg {
  public:
    ordt_field<uint32_t> PERF_LUT_LO_HIT;
    ordt_rg_NVDLA_CDP_D_PERF_LUT_LO_HIT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CDP_D_CYA : public ordt_reg {
  public:
    ordt_field<uint32_t> CYA;
    ordt_rg_NVDLA_CDP_D_CYA(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_CDP : public ordt_regset {
  public:
    ordt_rg_NVDLA_CDP_S_STATUS S_STATUS;
    ordt_rg_NVDLA_CDP_S_POINTER S_POINTER;
    ordt_rg_NVDLA_CDP_S_LUT_ACCESS_CFG S_LUT_ACCESS_CFG;
    ordt_rg_NVDLA_CDP_S_LUT_ACCESS_DATA S_LUT_ACCESS_DATA;
    ordt_rg_NVDLA_CDP_S_LUT_CFG S_LUT_CFG;
    ordt_rg_NVDLA_CDP_S_LUT_INFO S_LUT_INFO;
    ordt_rg_NVDLA_CDP_S_LUT_LE_START_LOW S_LUT_LE_START_LOW;
    ordt_rg_NVDLA_CDP_S_LUT_LE_START_HIGH S_LUT_LE_START_HIGH;
    ordt_rg_NVDLA_CDP_S_LUT_LE_END_LOW S_LUT_LE_END_LOW;
    ordt_rg_NVDLA_CDP_S_LUT_LE_END_HIGH S_LUT_LE_END_HIGH;
    ordt_rg_NVDLA_CDP_S_LUT_LO_START_LOW S_LUT_LO_START_LOW;
    ordt_rg_NVDLA_CDP_S_LUT_LO_START_HIGH S_LUT_LO_START_HIGH;
    ordt_rg_NVDLA_CDP_S_LUT_LO_END_LOW S_LUT_LO_END_LOW;
    ordt_rg_NVDLA_CDP_S_LUT_LO_END_HIGH S_LUT_LO_END_HIGH;
    ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SCALE S_LUT_LE_SLOPE_SCALE;
    ordt_rg_NVDLA_CDP_S_LUT_LE_SLOPE_SHIFT S_LUT_LE_SLOPE_SHIFT;
    ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SCALE S_LUT_LO_SLOPE_SCALE;
    ordt_rg_NVDLA_CDP_S_LUT_LO_SLOPE_SHIFT S_LUT_LO_SLOPE_SHIFT;
    ordt_rg_NVDLA_CDP_D_OP_ENABLE D_OP_ENABLE;
    ordt_rg_NVDLA_CDP_D_FUNC_BYPASS D_FUNC_BYPASS;
    ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_LOW D_DST_BASE_ADDR_LOW;
    ordt_rg_NVDLA_CDP_D_DST_BASE_ADDR_HIGH D_DST_BASE_ADDR_HIGH;
    ordt_rg_NVDLA_CDP_D_DST_LINE_STRIDE D_DST_LINE_STRIDE;
    ordt_rg_NVDLA_CDP_D_DST_SURFACE_STRIDE D_DST_SURFACE_STRIDE;
    ordt_rg_NVDLA_CDP_D_DST_DMA_CFG D_DST_DMA_CFG;
    ordt_rg_NVDLA_CDP_D_DST_COMPRESSION_EN D_DST_COMPRESSION_EN;
    ordt_rg_NVDLA_CDP_D_DATA_FORMAT D_DATA_FORMAT;
    ordt_rg_NVDLA_CDP_D_NAN_FLUSH_TO_ZERO D_NAN_FLUSH_TO_ZERO;
    ordt_rg_NVDLA_CDP_D_LRN_CFG D_LRN_CFG;
    ordt_rg_NVDLA_CDP_D_DATIN_OFFSET D_DATIN_OFFSET;
    ordt_rg_NVDLA_CDP_D_DATIN_SCALE D_DATIN_SCALE;
    ordt_rg_NVDLA_CDP_D_DATIN_SHIFTER D_DATIN_SHIFTER;
    ordt_rg_NVDLA_CDP_D_DATOUT_OFFSET D_DATOUT_OFFSET;
    ordt_rg_NVDLA_CDP_D_DATOUT_SCALE D_DATOUT_SCALE;
    ordt_rg_NVDLA_CDP_D_DATOUT_SHIFTER D_DATOUT_SHIFTER;
    ordt_rg_NVDLA_CDP_D_NAN_INPUT_NUM D_NAN_INPUT_NUM;
    ordt_rg_NVDLA_CDP_D_INF_INPUT_NUM D_INF_INPUT_NUM;
    ordt_rg_NVDLA_CDP_D_NAN_OUTPUT_NUM D_NAN_OUTPUT_NUM;
    ordt_rg_NVDLA_CDP_D_OUT_SATURATION D_OUT_SATURATION;
    ordt_rg_NVDLA_CDP_D_PERF_ENABLE D_PERF_ENABLE;
    ordt_rg_NVDLA_CDP_D_PERF_WRITE_STALL D_PERF_WRITE_STALL;
    ordt_rg_NVDLA_CDP_D_PERF_LUT_UFLOW D_PERF_LUT_UFLOW;
    ordt_rg_NVDLA_CDP_D_PERF_LUT_OFLOW D_PERF_LUT_OFLOW;
    ordt_rg_NVDLA_CDP_D_PERF_LUT_HYBRID D_PERF_LUT_HYBRID;
    ordt_rg_NVDLA_CDP_D_PERF_LUT_LE_HIT D_PERF_LUT_LE_HIT;
    ordt_rg_NVDLA_CDP_D_PERF_LUT_LO_HIT D_PERF_LUT_LO_HIT;
    ordt_rg_NVDLA_CDP_D_CYA D_CYA;
    ordt_rset_NVDLA_CDP(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_GEC_FEATURE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> NUM_ERR_SLICES;
    ordt_field<uint32_t> NUM_ERR;
    ordt_rg_NVDLA_GEC_FEATURE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_SWRESET : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> SWRST;
    ordt_rg_NVDLA_GEC_SWRESET(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_MISSIONERR_TYPE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> CODE;
    ordt_rg_NVDLA_GEC_MISSIONERR_TYPE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE : public ordt_reg {
  public:
    ordt_field<uint32_t> VALUE;
    ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_MISSIONERR_INDEX : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> IDX;
    ordt_rg_NVDLA_GEC_MISSIONERR_INDEX(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> COUNT;
    ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> VALUE;
    ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR0;
    ordt_field<uint_fast8_t> ERR1;
    ordt_field<uint_fast8_t> ERR2;
    ordt_field<uint_fast8_t> ERR3;
    ordt_field<uint_fast8_t> ERR4;
    ordt_field<uint_fast8_t> ERR5;
    ordt_field<uint_fast8_t> ERR6;
    ordt_field<uint_fast8_t> ERR7;
    ordt_field<uint_fast8_t> ERR8;
    ordt_field<uint_fast8_t> ERR9;
    ordt_field<uint_fast8_t> ERR10;
    ordt_field<uint_fast8_t> ERR11;
    ordt_field<uint_fast8_t> ERR12;
    ordt_field<uint_fast8_t> ERR13;
    ordt_field<uint_fast8_t> ERR14;
    ordt_field<uint_fast8_t> ERR15;
    ordt_field<uint_fast8_t> ERR16;
    ordt_field<uint_fast8_t> ERR17;
    ordt_field<uint_fast8_t> ERR18;
    ordt_field<uint_fast8_t> ERR19;
    ordt_field<uint_fast8_t> ERR20;
    ordt_field<uint_fast8_t> ERR21;
    ordt_field<uint_fast8_t> ERR22;
    ordt_field<uint_fast8_t> ERR23;
    ordt_field<uint_fast8_t> ERR24;
    ordt_field<uint_fast8_t> ERR25;
    ordt_field<uint_fast8_t> ERR26;
    ordt_field<uint_fast8_t> ERR27;
    ordt_field<uint_fast8_t> ERR28;
    ordt_field<uint_fast8_t> ERR29;
    ordt_field<uint_fast8_t> ERR30;
    ordt_field<uint_fast8_t> ERR31;
    ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR0;
    ordt_field<uint_fast8_t> ERR1;
    ordt_field<uint_fast8_t> ERR2;
    ordt_field<uint_fast8_t> ERR3;
    ordt_field<uint_fast8_t> ERR4;
    ordt_field<uint_fast8_t> ERR5;
    ordt_field<uint_fast8_t> ERR6;
    ordt_field<uint_fast8_t> ERR7;
    ordt_field<uint_fast8_t> ERR8;
    ordt_field<uint_fast8_t> ERR9;
    ordt_field<uint_fast8_t> ERR10;
    ordt_field<uint_fast8_t> ERR11;
    ordt_field<uint_fast8_t> ERR12;
    ordt_field<uint_fast8_t> ERR13;
    ordt_field<uint_fast8_t> ERR14;
    ordt_field<uint_fast8_t> ERR15;
    ordt_field<uint_fast8_t> ERR16;
    ordt_field<uint_fast8_t> ERR17;
    ordt_field<uint_fast8_t> ERR18;
    ordt_field<uint_fast8_t> ERR19;
    ordt_field<uint_fast8_t> ERR20;
    ordt_field<uint_fast8_t> ERR21;
    ordt_field<uint_fast8_t> ERR22;
    ordt_field<uint_fast8_t> ERR23;
    ordt_field<uint_fast8_t> ERR24;
    ordt_field<uint_fast8_t> ERR25;
    ordt_field<uint_fast8_t> ERR26;
    ordt_field<uint_fast8_t> ERR27;
    ordt_field<uint_fast8_t> ERR28;
    ordt_field<uint_fast8_t> ERR29;
    ordt_field<uint_fast8_t> ERR30;
    ordt_field<uint_fast8_t> ERR31;
    ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR0;
    ordt_field<uint_fast8_t> ERR1;
    ordt_field<uint_fast8_t> ERR2;
    ordt_field<uint_fast8_t> ERR3;
    ordt_field<uint_fast8_t> ERR4;
    ordt_field<uint_fast8_t> ERR5;
    ordt_field<uint_fast8_t> ERR6;
    ordt_field<uint_fast8_t> ERR7;
    ordt_field<uint_fast8_t> ERR8;
    ordt_field<uint_fast8_t> ERR9;
    ordt_field<uint_fast8_t> ERR10;
    ordt_field<uint_fast8_t> ERR11;
    ordt_field<uint_fast8_t> ERR12;
    ordt_field<uint_fast8_t> ERR13;
    ordt_field<uint_fast8_t> ERR14;
    ordt_field<uint_fast8_t> ERR15;
    ordt_field<uint_fast8_t> ERR16;
    ordt_field<uint_fast8_t> ERR17;
    ordt_field<uint_fast8_t> ERR18;
    ordt_field<uint_fast8_t> ERR19;
    ordt_field<uint_fast8_t> ERR20;
    ordt_field<uint_fast8_t> ERR21;
    ordt_field<uint_fast8_t> ERR22;
    ordt_field<uint_fast8_t> ERR23;
    ordt_field<uint_fast8_t> ERR24;
    ordt_field<uint_fast8_t> ERR25;
    ordt_field<uint_fast8_t> ERR26;
    ordt_field<uint_fast8_t> ERR27;
    ordt_field<uint_fast8_t> ERR28;
    ordt_field<uint_fast8_t> ERR29;
    ordt_field<uint_fast8_t> ERR30;
    ordt_field<uint_fast8_t> ERR31;
    ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR0;
    ordt_field<uint_fast8_t> ERR1;
    ordt_field<uint_fast8_t> ERR2;
    ordt_field<uint_fast8_t> ERR3;
    ordt_field<uint_fast8_t> ERR4;
    ordt_field<uint_fast8_t> ERR5;
    ordt_field<uint_fast8_t> ERR6;
    ordt_field<uint_fast8_t> ERR7;
    ordt_field<uint_fast8_t> ERR8;
    ordt_field<uint_fast8_t> ERR15;
    ordt_field<uint_fast8_t> ERR16;
    ordt_field<uint_fast8_t> ERR17;
    ordt_field<uint_fast8_t> ERR18;
    ordt_field<uint_fast8_t> ERR19;
    ordt_field<uint_fast8_t> ERR20;
    ordt_field<uint_fast8_t> ERR21;
    ordt_field<uint_fast8_t> ERR22;
    ordt_field<uint_fast8_t> ERR23;
    ordt_field<uint_fast8_t> ERR24;
    ordt_field<uint_fast8_t> ERR25;
    ordt_field<uint_fast8_t> ERR26;
    ordt_field<uint_fast8_t> ERR27;
    ordt_field<uint_fast8_t> ERR28;
    ordt_field<uint_fast8_t> ERR29;
    ordt_field<uint_fast8_t> ERR30;
    ordt_field<uint_fast8_t> ERR31;
    ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR0;
    ordt_field<uint_fast8_t> ERR1;
    ordt_field<uint_fast8_t> ERR2;
    ordt_field<uint_fast8_t> ERR3;
    ordt_field<uint_fast8_t> ERR4;
    ordt_field<uint_fast8_t> ERR5;
    ordt_field<uint_fast8_t> ERR6;
    ordt_field<uint_fast8_t> ERR7;
    ordt_field<uint_fast8_t> ERR8;
    ordt_field<uint_fast8_t> ERR9;
    ordt_field<uint_fast8_t> ERR10;
    ordt_field<uint_fast8_t> ERR11;
    ordt_field<uint_fast8_t> ERR12;
    ordt_field<uint_fast8_t> ERR13;
    ordt_field<uint_fast8_t> ERR14;
    ordt_field<uint_fast8_t> ERR15;
    ordt_field<uint_fast8_t> ERR16;
    ordt_field<uint_fast8_t> ERR17;
    ordt_field<uint_fast8_t> ERR18;
    ordt_field<uint_fast8_t> ERR19;
    ordt_field<uint_fast8_t> ERR20;
    ordt_field<uint_fast8_t> ERR21;
    ordt_field<uint_fast8_t> ERR22;
    ordt_field<uint_fast8_t> ERR23;
    ordt_field<uint_fast8_t> ERR24;
    ordt_field<uint_fast8_t> ERR25;
    ordt_field<uint_fast8_t> ERR26;
    ordt_field<uint_fast8_t> ERR27;
    ordt_field<uint_fast8_t> ERR28;
    ordt_field<uint_fast8_t> ERR29;
    ordt_field<uint_fast8_t> ERR30;
    ordt_field<uint_fast8_t> ERR31;
    ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR0;
    ordt_field<uint_fast8_t> ERR1;
    ordt_field<uint_fast8_t> ERR2;
    ordt_field<uint_fast8_t> ERR3;
    ordt_field<uint_fast8_t> ERR4;
    ordt_field<uint_fast8_t> ERR5;
    ordt_field<uint_fast8_t> ERR6;
    ordt_field<uint_fast8_t> ERR7;
    ordt_field<uint_fast8_t> ERR8;
    ordt_field<uint_fast8_t> ERR9;
    ordt_field<uint_fast8_t> ERR10;
    ordt_field<uint_fast8_t> ERR11;
    ordt_field<uint_fast8_t> ERR12;
    ordt_field<uint_fast8_t> ERR13;
    ordt_field<uint_fast8_t> ERR14;
    ordt_field<uint_fast8_t> ERR15;
    ordt_field<uint_fast8_t> ERR16;
    ordt_field<uint_fast8_t> ERR17;
    ordt_field<uint_fast8_t> ERR18;
    ordt_field<uint_fast8_t> ERR19;
    ordt_field<uint_fast8_t> ERR20;
    ordt_field<uint_fast8_t> ERR21;
    ordt_field<uint_fast8_t> ERR22;
    ordt_field<uint_fast8_t> ERR23;
    ordt_field<uint_fast8_t> ERR24;
    ordt_field<uint_fast8_t> ERR25;
    ordt_field<uint_fast8_t> ERR26;
    ordt_field<uint_fast8_t> ERR27;
    ordt_field<uint_fast8_t> ERR28;
    ordt_field<uint_fast8_t> ERR29;
    ordt_field<uint_fast8_t> ERR30;
    ordt_field<uint_fast8_t> ERR31;
    ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR0;
    ordt_field<uint_fast8_t> ERR1;
    ordt_field<uint_fast8_t> ERR2;
    ordt_field<uint_fast8_t> ERR3;
    ordt_field<uint_fast8_t> ERR4;
    ordt_field<uint_fast8_t> ERR5;
    ordt_field<uint_fast8_t> ERR6;
    ordt_field<uint_fast8_t> ERR7;
    ordt_field<uint_fast8_t> ERR8;
    ordt_field<uint_fast8_t> ERR9;
    ordt_field<uint_fast8_t> ERR10;
    ordt_field<uint_fast8_t> ERR11;
    ordt_field<uint_fast8_t> ERR12;
    ordt_field<uint_fast8_t> ERR13;
    ordt_field<uint_fast8_t> ERR14;
    ordt_field<uint_fast8_t> ERR15;
    ordt_field<uint_fast8_t> ERR16;
    ordt_field<uint_fast8_t> ERR17;
    ordt_field<uint_fast8_t> ERR18;
    ordt_field<uint_fast8_t> ERR19;
    ordt_field<uint_fast8_t> ERR20;
    ordt_field<uint_fast8_t> ERR21;
    ordt_field<uint_fast8_t> ERR22;
    ordt_field<uint_fast8_t> ERR23;
    ordt_field<uint_fast8_t> ERR24;
    ordt_field<uint_fast8_t> ERR25;
    ordt_field<uint_fast8_t> ERR26;
    ordt_field<uint_fast8_t> ERR27;
    ordt_field<uint_fast8_t> ERR28;
    ordt_field<uint_fast8_t> ERR29;
    ordt_field<uint_fast8_t> ERR30;
    ordt_field<uint_fast8_t> ERR31;
    ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR0;
    ordt_field<uint_fast8_t> ERR1;
    ordt_field<uint_fast8_t> ERR2;
    ordt_field<uint_fast8_t> ERR3;
    ordt_field<uint_fast8_t> ERR4;
    ordt_field<uint_fast8_t> ERR5;
    ordt_field<uint_fast8_t> ERR6;
    ordt_field<uint_fast8_t> ERR7;
    ordt_field<uint_fast8_t> ERR8;
    ordt_field<uint_fast8_t> ERR9;
    ordt_field<uint_fast8_t> ERR10;
    ordt_field<uint_fast8_t> ERR11;
    ordt_field<uint_fast8_t> ERR12;
    ordt_field<uint_fast8_t> ERR13;
    ordt_field<uint_fast8_t> ERR14;
    ordt_field<uint_fast8_t> ERR15;
    ordt_field<uint_fast8_t> ERR16;
    ordt_field<uint_fast8_t> ERR17;
    ordt_field<uint_fast8_t> ERR18;
    ordt_field<uint_fast8_t> ERR19;
    ordt_field<uint_fast8_t> ERR20;
    ordt_field<uint_fast8_t> ERR21;
    ordt_field<uint_fast8_t> ERR22;
    ordt_field<uint_fast8_t> ERR23;
    ordt_field<uint_fast8_t> ERR24;
    ordt_field<uint_fast8_t> ERR25;
    ordt_field<uint_fast8_t> ERR26;
    ordt_field<uint_fast8_t> ERR27;
    ordt_field<uint_fast8_t> ERR28;
    ordt_field<uint_fast8_t> ERR29;
    ordt_field<uint_fast8_t> ERR30;
    ordt_field<uint_fast8_t> ERR31;
    ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR32;
    ordt_field<uint_fast8_t> ERR33;
    ordt_field<uint_fast8_t> ERR34;
    ordt_field<uint_fast8_t> ERR35;
    ordt_field<uint_fast8_t> ERR36;
    ordt_field<uint_fast8_t> ERR37;
    ordt_field<uint_fast8_t> ERR38;
    ordt_field<uint_fast8_t> ERR39;
    ordt_field<uint_fast8_t> ERR40;
    ordt_field<uint_fast8_t> ERR41;
    ordt_field<uint_fast8_t> ERR42;
    ordt_field<uint_fast8_t> ERR43;
    ordt_field<uint_fast8_t> ERR44;
    ordt_field<uint_fast8_t> ERR45;
    ordt_field<uint_fast8_t> ERR46;
    ordt_field<uint_fast8_t> ERR47;
    ordt_field<uint_fast8_t> ERR48;
    ordt_field<uint_fast8_t> ERR49;
    ordt_field<uint_fast8_t> ERR50;
    ordt_field<uint_fast8_t> ERR51;
    ordt_field<uint_fast8_t> ERR52;
    ordt_field<uint_fast8_t> ERR53;
    ordt_field<uint_fast8_t> ERR54;
    ordt_field<uint_fast8_t> ERR55;
    ordt_field<uint_fast8_t> ERR56;
    ordt_field<uint_fast8_t> ERR57;
    ordt_field<uint_fast8_t> ERR58;
    ordt_field<uint_fast8_t> ERR59;
    ordt_field<uint_fast8_t> ERR60;
    ordt_field<uint_fast8_t> ERR61;
    ordt_field<uint_fast8_t> ERR62;
    ordt_field<uint_fast8_t> ERR63;
    ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR32;
    ordt_field<uint_fast8_t> ERR33;
    ordt_field<uint_fast8_t> ERR34;
    ordt_field<uint_fast8_t> ERR35;
    ordt_field<uint_fast8_t> ERR36;
    ordt_field<uint_fast8_t> ERR37;
    ordt_field<uint_fast8_t> ERR38;
    ordt_field<uint_fast8_t> ERR39;
    ordt_field<uint_fast8_t> ERR40;
    ordt_field<uint_fast8_t> ERR41;
    ordt_field<uint_fast8_t> ERR42;
    ordt_field<uint_fast8_t> ERR43;
    ordt_field<uint_fast8_t> ERR44;
    ordt_field<uint_fast8_t> ERR45;
    ordt_field<uint_fast8_t> ERR46;
    ordt_field<uint_fast8_t> ERR47;
    ordt_field<uint_fast8_t> ERR48;
    ordt_field<uint_fast8_t> ERR49;
    ordt_field<uint_fast8_t> ERR50;
    ordt_field<uint_fast8_t> ERR51;
    ordt_field<uint_fast8_t> ERR52;
    ordt_field<uint_fast8_t> ERR53;
    ordt_field<uint_fast8_t> ERR54;
    ordt_field<uint_fast8_t> ERR55;
    ordt_field<uint_fast8_t> ERR56;
    ordt_field<uint_fast8_t> ERR57;
    ordt_field<uint_fast8_t> ERR58;
    ordt_field<uint_fast8_t> ERR59;
    ordt_field<uint_fast8_t> ERR60;
    ordt_field<uint_fast8_t> ERR61;
    ordt_field<uint_fast8_t> ERR62;
    ordt_field<uint_fast8_t> ERR63;
    ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR32;
    ordt_field<uint_fast8_t> ERR33;
    ordt_field<uint_fast8_t> ERR34;
    ordt_field<uint_fast8_t> ERR35;
    ordt_field<uint_fast8_t> ERR36;
    ordt_field<uint_fast8_t> ERR37;
    ordt_field<uint_fast8_t> ERR38;
    ordt_field<uint_fast8_t> ERR39;
    ordt_field<uint_fast8_t> ERR40;
    ordt_field<uint_fast8_t> ERR41;
    ordt_field<uint_fast8_t> ERR42;
    ordt_field<uint_fast8_t> ERR43;
    ordt_field<uint_fast8_t> ERR44;
    ordt_field<uint_fast8_t> ERR45;
    ordt_field<uint_fast8_t> ERR46;
    ordt_field<uint_fast8_t> ERR47;
    ordt_field<uint_fast8_t> ERR48;
    ordt_field<uint_fast8_t> ERR49;
    ordt_field<uint_fast8_t> ERR50;
    ordt_field<uint_fast8_t> ERR51;
    ordt_field<uint_fast8_t> ERR52;
    ordt_field<uint_fast8_t> ERR53;
    ordt_field<uint_fast8_t> ERR54;
    ordt_field<uint_fast8_t> ERR55;
    ordt_field<uint_fast8_t> ERR56;
    ordt_field<uint_fast8_t> ERR57;
    ordt_field<uint_fast8_t> ERR58;
    ordt_field<uint_fast8_t> ERR59;
    ordt_field<uint_fast8_t> ERR60;
    ordt_field<uint_fast8_t> ERR61;
    ordt_field<uint_fast8_t> ERR62;
    ordt_field<uint_fast8_t> ERR63;
    ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR32;
    ordt_field<uint_fast8_t> ERR33;
    ordt_field<uint_fast8_t> ERR34;
    ordt_field<uint_fast8_t> ERR35;
    ordt_field<uint_fast8_t> ERR36;
    ordt_field<uint_fast8_t> ERR37;
    ordt_field<uint_fast8_t> ERR38;
    ordt_field<uint_fast8_t> ERR39;
    ordt_field<uint_fast8_t> ERR40;
    ordt_field<uint_fast8_t> ERR41;
    ordt_field<uint_fast8_t> ERR42;
    ordt_field<uint_fast8_t> ERR43;
    ordt_field<uint_fast8_t> ERR44;
    ordt_field<uint_fast8_t> ERR45;
    ordt_field<uint_fast8_t> ERR46;
    ordt_field<uint_fast8_t> ERR47;
    ordt_field<uint_fast8_t> ERR48;
    ordt_field<uint_fast8_t> ERR49;
    ordt_field<uint_fast8_t> ERR50;
    ordt_field<uint_fast8_t> ERR51;
    ordt_field<uint_fast8_t> ERR52;
    ordt_field<uint_fast8_t> ERR53;
    ordt_field<uint_fast8_t> ERR54;
    ordt_field<uint_fast8_t> ERR55;
    ordt_field<uint_fast8_t> ERR56;
    ordt_field<uint_fast8_t> ERR57;
    ordt_field<uint_fast8_t> ERR58;
    ordt_field<uint_fast8_t> ERR59;
    ordt_field<uint_fast8_t> ERR60;
    ordt_field<uint_fast8_t> ERR61;
    ordt_field<uint_fast8_t> ERR62;
    ordt_field<uint_fast8_t> ERR63;
    ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR32;
    ordt_field<uint_fast8_t> ERR33;
    ordt_field<uint_fast8_t> ERR34;
    ordt_field<uint_fast8_t> ERR35;
    ordt_field<uint_fast8_t> ERR36;
    ordt_field<uint_fast8_t> ERR37;
    ordt_field<uint_fast8_t> ERR38;
    ordt_field<uint_fast8_t> ERR39;
    ordt_field<uint_fast8_t> ERR40;
    ordt_field<uint_fast8_t> ERR41;
    ordt_field<uint_fast8_t> ERR42;
    ordt_field<uint_fast8_t> ERR43;
    ordt_field<uint_fast8_t> ERR44;
    ordt_field<uint_fast8_t> ERR45;
    ordt_field<uint_fast8_t> ERR46;
    ordt_field<uint_fast8_t> ERR47;
    ordt_field<uint_fast8_t> ERR48;
    ordt_field<uint_fast8_t> ERR49;
    ordt_field<uint_fast8_t> ERR50;
    ordt_field<uint_fast8_t> ERR51;
    ordt_field<uint_fast8_t> ERR52;
    ordt_field<uint_fast8_t> ERR53;
    ordt_field<uint_fast8_t> ERR54;
    ordt_field<uint_fast8_t> ERR55;
    ordt_field<uint_fast8_t> ERR56;
    ordt_field<uint_fast8_t> ERR57;
    ordt_field<uint_fast8_t> ERR58;
    ordt_field<uint_fast8_t> ERR59;
    ordt_field<uint_fast8_t> ERR60;
    ordt_field<uint_fast8_t> ERR61;
    ordt_field<uint_fast8_t> ERR62;
    ordt_field<uint_fast8_t> ERR63;
    ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR32;
    ordt_field<uint_fast8_t> ERR33;
    ordt_field<uint_fast8_t> ERR34;
    ordt_field<uint_fast8_t> ERR35;
    ordt_field<uint_fast8_t> ERR36;
    ordt_field<uint_fast8_t> ERR37;
    ordt_field<uint_fast8_t> ERR38;
    ordt_field<uint_fast8_t> ERR39;
    ordt_field<uint_fast8_t> ERR40;
    ordt_field<uint_fast8_t> ERR41;
    ordt_field<uint_fast8_t> ERR42;
    ordt_field<uint_fast8_t> ERR43;
    ordt_field<uint_fast8_t> ERR44;
    ordt_field<uint_fast8_t> ERR45;
    ordt_field<uint_fast8_t> ERR46;
    ordt_field<uint_fast8_t> ERR47;
    ordt_field<uint_fast8_t> ERR48;
    ordt_field<uint_fast8_t> ERR49;
    ordt_field<uint_fast8_t> ERR50;
    ordt_field<uint_fast8_t> ERR51;
    ordt_field<uint_fast8_t> ERR52;
    ordt_field<uint_fast8_t> ERR53;
    ordt_field<uint_fast8_t> ERR54;
    ordt_field<uint_fast8_t> ERR55;
    ordt_field<uint_fast8_t> ERR56;
    ordt_field<uint_fast8_t> ERR57;
    ordt_field<uint_fast8_t> ERR58;
    ordt_field<uint_fast8_t> ERR59;
    ordt_field<uint_fast8_t> ERR60;
    ordt_field<uint_fast8_t> ERR61;
    ordt_field<uint_fast8_t> ERR62;
    ordt_field<uint_fast8_t> ERR63;
    ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR32;
    ordt_field<uint_fast8_t> ERR33;
    ordt_field<uint_fast8_t> ERR34;
    ordt_field<uint_fast8_t> ERR35;
    ordt_field<uint_fast8_t> ERR36;
    ordt_field<uint_fast8_t> ERR37;
    ordt_field<uint_fast8_t> ERR38;
    ordt_field<uint_fast8_t> ERR39;
    ordt_field<uint_fast8_t> ERR40;
    ordt_field<uint_fast8_t> ERR41;
    ordt_field<uint_fast8_t> ERR42;
    ordt_field<uint_fast8_t> ERR43;
    ordt_field<uint_fast8_t> ERR44;
    ordt_field<uint_fast8_t> ERR45;
    ordt_field<uint_fast8_t> ERR46;
    ordt_field<uint_fast8_t> ERR47;
    ordt_field<uint_fast8_t> ERR48;
    ordt_field<uint_fast8_t> ERR49;
    ordt_field<uint_fast8_t> ERR50;
    ordt_field<uint_fast8_t> ERR51;
    ordt_field<uint_fast8_t> ERR52;
    ordt_field<uint_fast8_t> ERR53;
    ordt_field<uint_fast8_t> ERR54;
    ordt_field<uint_fast8_t> ERR55;
    ordt_field<uint_fast8_t> ERR56;
    ordt_field<uint_fast8_t> ERR57;
    ordt_field<uint_fast8_t> ERR58;
    ordt_field<uint_fast8_t> ERR59;
    ordt_field<uint_fast8_t> ERR60;
    ordt_field<uint_fast8_t> ERR61;
    ordt_field<uint_fast8_t> ERR62;
    ordt_field<uint_fast8_t> ERR63;
    ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR32;
    ordt_field<uint_fast8_t> ERR33;
    ordt_field<uint_fast8_t> ERR34;
    ordt_field<uint_fast8_t> ERR35;
    ordt_field<uint_fast8_t> ERR36;
    ordt_field<uint_fast8_t> ERR37;
    ordt_field<uint_fast8_t> ERR38;
    ordt_field<uint_fast8_t> ERR39;
    ordt_field<uint_fast8_t> ERR40;
    ordt_field<uint_fast8_t> ERR41;
    ordt_field<uint_fast8_t> ERR42;
    ordt_field<uint_fast8_t> ERR43;
    ordt_field<uint_fast8_t> ERR44;
    ordt_field<uint_fast8_t> ERR45;
    ordt_field<uint_fast8_t> ERR46;
    ordt_field<uint_fast8_t> ERR47;
    ordt_field<uint_fast8_t> ERR48;
    ordt_field<uint_fast8_t> ERR49;
    ordt_field<uint_fast8_t> ERR50;
    ordt_field<uint_fast8_t> ERR51;
    ordt_field<uint_fast8_t> ERR52;
    ordt_field<uint_fast8_t> ERR53;
    ordt_field<uint_fast8_t> ERR54;
    ordt_field<uint_fast8_t> ERR55;
    ordt_field<uint_fast8_t> ERR56;
    ordt_field<uint_fast8_t> ERR57;
    ordt_field<uint_fast8_t> ERR58;
    ordt_field<uint_fast8_t> ERR59;
    ordt_field<uint_fast8_t> ERR60;
    ordt_field<uint_fast8_t> ERR61;
    ordt_field<uint_fast8_t> ERR62;
    ordt_field<uint_fast8_t> ERR63;
    ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR63;
    ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR64;
    ordt_field<uint_fast8_t> ERR65;
    ordt_field<uint_fast8_t> ERR66;
    ordt_field<uint_fast8_t> ERR67;
    ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR64;
    ordt_field<uint_fast8_t> ERR65;
    ordt_field<uint_fast8_t> ERR66;
    ordt_field<uint_fast8_t> ERR67;
    ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR64;
    ordt_field<uint_fast8_t> ERR65;
    ordt_field<uint_fast8_t> ERR66;
    ordt_field<uint_fast8_t> ERR67;
    ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR64;
    ordt_field<uint_fast8_t> ERR65;
    ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR64;
    ordt_field<uint_fast8_t> ERR65;
    ordt_field<uint_fast8_t> ERR66;
    ordt_field<uint_fast8_t> ERR67;
    ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR64;
    ordt_field<uint_fast8_t> ERR65;
    ordt_field<uint_fast8_t> ERR66;
    ordt_field<uint_fast8_t> ERR67;
    ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR64;
    ordt_field<uint_fast8_t> ERR65;
    ordt_field<uint_fast8_t> ERR66;
    ordt_field<uint_fast8_t> ERR67;
    ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> ERR64;
    ordt_field<uint_fast8_t> ERR65;
    ordt_field<uint_fast8_t> ERR66;
    ordt_field<uint_fast8_t> ERR67;
    ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_GEC : public ordt_regset {
  public:
    ordt_rg_NVDLA_GEC_FEATURE FEATURE;
    ordt_rg_NVDLA_GEC_SWRESET SWRESET;
    ordt_rg_NVDLA_GEC_MISSIONERR_TYPE MISSIONERR_TYPE;
    ordt_rg_NVDLA_GEC_CURRENT_COUNTER_VALUE CURRENT_COUNTER_VALUE;
    ordt_rg_NVDLA_GEC_MISSIONERR_INDEX MISSIONERR_INDEX;
    ordt_rg_NVDLA_GEC_CORRECTABLE_THRESHOLD CORRECTABLE_THRESHOLD;
    ordt_rg_NVDLA_GEC_MISSIONERR_INJECT_UNLOCK MISSIONERR_INJECT_UNLOCK;
    ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_ENABLE ERRSLICE0_MISSIONERR_ENABLE;
    ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_FORCE ERRSLICE0_MISSIONERR_FORCE;
    ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_STATUS ERRSLICE0_MISSIONERR_STATUS;
    ordt_rg_NVDLA_GEC_ERRSLICE0_MISSIONERR_INJECT ERRSLICE0_MISSIONERR_INJECT;
    ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_ENABLE ERRSLICE0_LATENTERR_ENABLE;
    ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_FORCE ERRSLICE0_LATENTERR_FORCE;
    ordt_rg_NVDLA_GEC_ERRSLICE0_LATENTERR_STATUS ERRSLICE0_LATENTERR_STATUS;
    ordt_rg_NVDLA_GEC_ERRSLICE0_COUNTER_RELOAD ERRSLICE0_COUNTER_RELOAD;
    ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ENABLE ERRSLICE1_MISSIONERR_ENABLE;
    ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_FORCE ERRSLICE1_MISSIONERR_FORCE;
    ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_STATUS ERRSLICE1_MISSIONERR_STATUS;
    ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_INJECT ERRSLICE1_MISSIONERR_INJECT;
    ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_ENABLE ERRSLICE1_LATENTERR_ENABLE;
    ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_FORCE ERRSLICE1_LATENTERR_FORCE;
    ordt_rg_NVDLA_GEC_ERRSLICE1_LATENTERR_STATUS ERRSLICE1_LATENTERR_STATUS;
    ordt_rg_NVDLA_GEC_ERRSLICE1_COUNTER_RELOAD ERRSLICE1_COUNTER_RELOAD;
    ordt_rg_NVDLA_GEC_ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS ERRSLICE1_MISSIONERR_ECC_CORRECTION_DIS;
    ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_ENABLE ERRSLICE2_MISSIONERR_ENABLE;
    ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_FORCE ERRSLICE2_MISSIONERR_FORCE;
    ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_STATUS ERRSLICE2_MISSIONERR_STATUS;
    ordt_rg_NVDLA_GEC_ERRSLICE2_MISSIONERR_INJECT ERRSLICE2_MISSIONERR_INJECT;
    ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_ENABLE ERRSLICE2_LATENTERR_ENABLE;
    ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_FORCE ERRSLICE2_LATENTERR_FORCE;
    ordt_rg_NVDLA_GEC_ERRSLICE2_LATENTERR_STATUS ERRSLICE2_LATENTERR_STATUS;
    ordt_rg_NVDLA_GEC_ERRSLICE2_COUNTER_RELOAD ERRSLICE2_COUNTER_RELOAD;
    ordt_rset_NVDLA_GEC(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_0 : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> RD_WEIGHT_BDMA;
    ordt_field<uint_fast8_t> RD_WEIGHT_SDP;
    ordt_field<uint_fast8_t> RD_WEIGHT_PDP;
    ordt_field<uint_fast8_t> RD_WEIGHT_CDP;
    ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_1 : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> RD_WEIGHT_SDP_B;
    ordt_field<uint_fast8_t> RD_WEIGHT_SDP_N;
    ordt_field<uint_fast8_t> RD_WEIGHT_SDP_E;
    ordt_field<uint_fast8_t> RD_WEIGHT_CDMA_DAT;
    ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_2 : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> RD_WEIGHT_CDMA_WT;
    ordt_field<uint_fast8_t> RD_WEIGHT_RBK;
    ordt_field<uint_fast8_t> RD_WEIGHT_RSV_1;
    ordt_field<uint_fast8_t> RD_WEIGHT_RSV_0;
    ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_2(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_0 : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> WR_WEIGHT_BDMA;
    ordt_field<uint_fast8_t> WR_WEIGHT_SDP;
    ordt_field<uint_fast8_t> WR_WEIGHT_PDP;
    ordt_field<uint_fast8_t> WR_WEIGHT_CDP;
    ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_1 : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> WR_WEIGHT_RBK;
    ordt_field<uint_fast8_t> WR_WEIGHT_RSV_2;
    ordt_field<uint_fast8_t> WR_WEIGHT_RSV_1;
    ordt_field<uint_fast8_t> WR_WEIGHT_RSV_0;
    ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CVIF_CFG_OUTSTANDING_CNT : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> RD_OS_CNT;
    ordt_field<uint_fast8_t> WR_OS_CNT;
    ordt_rg_NVDLA_CVIF_CFG_OUTSTANDING_CNT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_CVIF_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> IDLE;
    ordt_rg_NVDLA_CVIF_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_CVIF : public ordt_regset {
  public:
    ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_0 CFG_RD_WEIGHT_0;
    ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_1 CFG_RD_WEIGHT_1;
    ordt_rg_NVDLA_CVIF_CFG_RD_WEIGHT_2 CFG_RD_WEIGHT_2;
    ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_0 CFG_WR_WEIGHT_0;
    ordt_rg_NVDLA_CVIF_CFG_WR_WEIGHT_1 CFG_WR_WEIGHT_1;
    ordt_rg_NVDLA_CVIF_CFG_OUTSTANDING_CNT CFG_OUTSTANDING_CNT;
    ordt_rg_NVDLA_CVIF_STATUS STATUS;
    ordt_rset_NVDLA_CVIF(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> V32;
    ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> V8;
    ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> V32;
    ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> V8;
    ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_CFG_LINE : public ordt_reg {
  public:
    ordt_field<uint32_t> SIZE;
    ordt_rg_NVDLA_BDMA_CFG_LINE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_CFG_CMD : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> SRC_RAM_TYPE;
    ordt_field<uint_fast8_t> DST_RAM_TYPE;
    ordt_rg_NVDLA_BDMA_CFG_CMD(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT : public ordt_reg {
  public:
    ordt_field<uint32_t> NUMBER;
    ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_CFG_SRC_LINE : public ordt_reg {
  public:
    ordt_field<uint32_t> STRIDE;
    ordt_rg_NVDLA_BDMA_CFG_SRC_LINE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_CFG_DST_LINE : public ordt_reg {
  public:
    ordt_field<uint32_t> STRIDE;
    ordt_rg_NVDLA_BDMA_CFG_DST_LINE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT : public ordt_reg {
  public:
    ordt_field<uint32_t> NUMBER;
    ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_CFG_SRC_SURF : public ordt_reg {
  public:
    ordt_field<uint32_t> STRIDE;
    ordt_rg_NVDLA_BDMA_CFG_SRC_SURF(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_CFG_DST_SURF : public ordt_reg {
  public:
    ordt_field<uint32_t> STRIDE;
    ordt_rg_NVDLA_BDMA_CFG_DST_SURF(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_CFG_OP : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> EN;
    ordt_rg_NVDLA_BDMA_CFG_OP(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_CFG_LAUNCH0 : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> GRP0_LAUNCH;
    ordt_rg_NVDLA_BDMA_CFG_LAUNCH0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_CFG_LAUNCH1 : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> GRP1_LAUNCH;
    ordt_rg_NVDLA_BDMA_CFG_LAUNCH1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_CFG_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> STALL_COUNT_EN;
    ordt_rg_NVDLA_BDMA_CFG_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> FREE_SLOT;
    ordt_field<uint_fast8_t> IDLE;
    ordt_field<uint_fast8_t> GRP0_BUSY;
    ordt_field<uint_fast8_t> GRP1_BUSY;
    ordt_rg_NVDLA_BDMA_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> COUNT;
    ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> COUNT;
    ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> COUNT;
    ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> COUNT;
    ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_BDMA : public ordt_regset {
  public:
    ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_LOW CFG_SRC_ADDR_LOW;
    ordt_rg_NVDLA_BDMA_CFG_SRC_ADDR_HIGH CFG_SRC_ADDR_HIGH;
    ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_LOW CFG_DST_ADDR_LOW;
    ordt_rg_NVDLA_BDMA_CFG_DST_ADDR_HIGH CFG_DST_ADDR_HIGH;
    ordt_rg_NVDLA_BDMA_CFG_LINE CFG_LINE;
    ordt_rg_NVDLA_BDMA_CFG_CMD CFG_CMD;
    ordt_rg_NVDLA_BDMA_CFG_LINE_REPEAT CFG_LINE_REPEAT;
    ordt_rg_NVDLA_BDMA_CFG_SRC_LINE CFG_SRC_LINE;
    ordt_rg_NVDLA_BDMA_CFG_DST_LINE CFG_DST_LINE;
    ordt_rg_NVDLA_BDMA_CFG_SURF_REPEAT CFG_SURF_REPEAT;
    ordt_rg_NVDLA_BDMA_CFG_SRC_SURF CFG_SRC_SURF;
    ordt_rg_NVDLA_BDMA_CFG_DST_SURF CFG_DST_SURF;
    ordt_rg_NVDLA_BDMA_CFG_OP CFG_OP;
    ordt_rg_NVDLA_BDMA_CFG_LAUNCH0 CFG_LAUNCH0;
    ordt_rg_NVDLA_BDMA_CFG_LAUNCH1 CFG_LAUNCH1;
    ordt_rg_NVDLA_BDMA_CFG_STATUS CFG_STATUS;
    ordt_rg_NVDLA_BDMA_STATUS STATUS;
    ordt_rg_NVDLA_BDMA_STATUS_GRP0_READ_STALL STATUS_GRP0_READ_STALL;
    ordt_rg_NVDLA_BDMA_STATUS_GRP0_WRITE_STALL STATUS_GRP0_WRITE_STALL;
    ordt_rg_NVDLA_BDMA_STATUS_GRP1_READ_STALL STATUS_GRP1_READ_STALL;
    ordt_rg_NVDLA_BDMA_STATUS_GRP1_WRITE_STALL STATUS_GRP1_WRITE_STALL;
    ordt_rset_NVDLA_BDMA(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_rg_NVDLA_RBK_S_STATUS : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> STATUS_0;
    ordt_field<uint_fast8_t> STATUS_1;
    ordt_rg_NVDLA_RBK_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_S_POINTER : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PRODUCER;
    ordt_field<uint_fast8_t> CONSUMER;
    ordt_rg_NVDLA_RBK_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_OP_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> OP_EN;
    ordt_rg_NVDLA_RBK_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_MISC_CFG : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> RUBIK_MODE;
    ordt_field<uint_fast8_t> IN_PRECISION;
    ordt_rg_NVDLA_RBK_D_MISC_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DATAIN_RAM_TYPE;
    ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAIN_WIDTH;
    ordt_field<uint32_t> DATAIN_HEIGHT;
    ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAIN_CHANNEL;
    ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> DAIN_ADDR_HIGH;
    ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> DAIN_ADDR_LOW;
    ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> DAIN_LINE_STRIDE;
    ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> DAIN_SURF_STRIDE;
    ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> DAIN_PLANAR_STRIDE;
    ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DATAOUT_RAM_TYPE;
    ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1 : public ordt_reg {
  public:
    ordt_field<uint32_t> DATAOUT_CHANNEL;
    ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH : public ordt_reg {
  public:
    ordt_field<uint32_t> DAOUT_ADDR_HIGH;
    ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW : public ordt_reg {
  public:
    ordt_field<uint32_t> DAOUT_ADDR_LOW;
    ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> DAOUT_LINE_STRIDE;
    ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0 : public ordt_reg {
  public:
    ordt_field<uint32_t> CONTRACT_STRIDE_0;
    ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1 : public ordt_reg {
  public:
    ordt_field<uint32_t> CONTRACT_STRIDE_1;
    ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> DAOUT_SURF_STRIDE;
    ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE : public ordt_reg {
  public:
    ordt_field<uint32_t> DAOUT_PLANAR_STRIDE;
    ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_DECONV_STRIDE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> DECONV_X_STRIDE;
    ordt_field<uint_fast8_t> DECONV_Y_STRIDE;
    ordt_rg_NVDLA_RBK_D_DECONV_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_PERF_ENABLE : public ordt_reg {
  public:
    ordt_field<uint_fast8_t> PERF_EN;
    ordt_rg_NVDLA_RBK_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_PERF_READ_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> RD_STALL_CNT;
    ordt_rg_NVDLA_RBK_D_PERF_READ_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL : public ordt_reg {
  public:
    ordt_field<uint32_t> WR_STALL_CNT;
    ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual int write(const uint64_t &addr, const ordt_data &wdata);
    virtual void write(const ordt_data &wdata);
    virtual int read(const uint64_t &addr, ordt_data &rdata);
    virtual void read(ordt_data &rdata);
};

class ordt_rset_NVDLA_RBK : public ordt_regset {
  public:
    ordt_rg_NVDLA_RBK_S_STATUS S_STATUS;
    ordt_rg_NVDLA_RBK_S_POINTER S_POINTER;
    ordt_rg_NVDLA_RBK_D_OP_ENABLE D_OP_ENABLE;
    ordt_rg_NVDLA_RBK_D_MISC_CFG D_MISC_CFG;
    ordt_rg_NVDLA_RBK_D_DAIN_RAM_TYPE D_DAIN_RAM_TYPE;
    ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_0 D_DATAIN_SIZE_0;
    ordt_rg_NVDLA_RBK_D_DATAIN_SIZE_1 D_DATAIN_SIZE_1;
    ordt_rg_NVDLA_RBK_D_DAIN_ADDR_HIGH D_DAIN_ADDR_HIGH;
    ordt_rg_NVDLA_RBK_D_DAIN_ADDR_LOW D_DAIN_ADDR_LOW;
    ordt_rg_NVDLA_RBK_D_DAIN_LINE_STRIDE D_DAIN_LINE_STRIDE;
    ordt_rg_NVDLA_RBK_D_DAIN_SURF_STRIDE D_DAIN_SURF_STRIDE;
    ordt_rg_NVDLA_RBK_D_DAIN_PLANAR_STRIDE D_DAIN_PLANAR_STRIDE;
    ordt_rg_NVDLA_RBK_D_DAOUT_RAM_TYPE D_DAOUT_RAM_TYPE;
    ordt_rg_NVDLA_RBK_D_DATAOUT_SIZE_1 D_DATAOUT_SIZE_1;
    ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_HIGH D_DAOUT_ADDR_HIGH;
    ordt_rg_NVDLA_RBK_D_DAOUT_ADDR_LOW D_DAOUT_ADDR_LOW;
    ordt_rg_NVDLA_RBK_D_DAOUT_LINE_STRIDE D_DAOUT_LINE_STRIDE;
    ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_0 D_CONTRACT_STRIDE_0;
    ordt_rg_NVDLA_RBK_D_CONTRACT_STRIDE_1 D_CONTRACT_STRIDE_1;
    ordt_rg_NVDLA_RBK_D_DAOUT_SURF_STRIDE D_DAOUT_SURF_STRIDE;
    ordt_rg_NVDLA_RBK_D_DAOUT_PLANAR_STRIDE D_DAOUT_PLANAR_STRIDE;
    ordt_rg_NVDLA_RBK_D_DECONV_STRIDE D_DECONV_STRIDE;
    ordt_rg_NVDLA_RBK_D_PERF_ENABLE D_PERF_ENABLE;
    ordt_rg_NVDLA_RBK_D_PERF_READ_STALL D_PERF_READ_STALL;
    ordt_rg_NVDLA_RBK_D_PERF_WRITE_STALL D_PERF_WRITE_STALL;
    ordt_rset_NVDLA_RBK(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

class ordt_root : public ordt_regset {
  public:
    ordt_rset_NVDLA_CFGROM NVDLA_CFGROM;
    ordt_rset_NVDLA_GLB NVDLA_GLB;
    ordt_rset_NVDLA_MCIF NVDLA_MCIF;
    ordt_rset_NVDLA_CDMA NVDLA_CDMA;
    ordt_rset_NVDLA_CSC NVDLA_CSC;
    ordt_rset_NVDLA_CMAC_A NVDLA_CMAC_A;
    ordt_rset_NVDLA_CMAC_B NVDLA_CMAC_B;
    ordt_rset_NVDLA_CACC NVDLA_CACC;
    ordt_rset_NVDLA_SDP_RDMA NVDLA_SDP_RDMA;
    ordt_rset_NVDLA_SDP NVDLA_SDP;
    ordt_rset_NVDLA_PDP_RDMA NVDLA_PDP_RDMA;
    ordt_rset_NVDLA_PDP NVDLA_PDP;
    ordt_rset_NVDLA_CDP_RDMA NVDLA_CDP_RDMA;
    ordt_rset_NVDLA_CDP NVDLA_CDP;
    ordt_rset_NVDLA_GEC NVDLA_GEC;
    ordt_rset_NVDLA_CVIF NVDLA_CVIF;
    ordt_rset_NVDLA_BDMA NVDLA_BDMA;
    ordt_rset_NVDLA_RBK NVDLA_RBK;
    ordt_root();
    ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress);
    virtual void update_child_ptrs();
};

#endif // __ORDT_PIO_HPP_INCLUDED__
