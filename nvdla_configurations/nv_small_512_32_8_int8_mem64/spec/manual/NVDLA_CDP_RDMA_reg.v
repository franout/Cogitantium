//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_CDP_RDMA.rdl
//   Parms: opendla.parms
//   Date: Sat Feb 29 19:31:23 CET 2020
//

//
//---------- module addrmap_NVDLA_jrdl_logic
//
module addrmap_NVDLA_jrdl_logic
(
  clk,
  reset,
  d2l_NVDLA_CDP_RDMA_S_STATUS_w,
  d2l_NVDLA_CDP_RDMA_S_STATUS_we,
  d2l_NVDLA_CDP_RDMA_S_STATUS_re,
  d2l_NVDLA_CDP_RDMA_S_POINTER_w,
  d2l_NVDLA_CDP_RDMA_S_POINTER_we,
  d2l_NVDLA_CDP_RDMA_S_POINTER_re,
  d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_w,
  d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_we,
  d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_re,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_w,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_we,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_re,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_w,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_we,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_re,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_w,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_we,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_re,
  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_w,
  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_we,
  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_re,
  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_w,
  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_we,
  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_re,
  d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_w,
  d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_we,
  d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_re,
  d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_w,
  d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_we,
  d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_re,
  d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_w,
  d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_we,
  d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_re,
  d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_w,
  d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_we,
  d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_re,
  d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_w,
  d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_we,
  d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_re,
  d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_w,
  d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_we,
  d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_re,
  d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_w,
  d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_we,
  d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_re,
  d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_w,
  d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_we,
  d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_re,
  d2l_NVDLA_CDP_RDMA_D_CYA_w,
  d2l_NVDLA_CDP_RDMA_D_CYA_we,
  d2l_NVDLA_CDP_RDMA_D_CYA_re,
  h2l_NVDLA_CDP_RDMA_S_STATUS_STATUS_0_w,
  h2l_NVDLA_CDP_RDMA_S_STATUS_STATUS_1_w,
  h2l_NVDLA_CDP_RDMA_S_POINTER_CONSUMER_w,
  h2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_PERF_READ_STALL_w,

  l2d_NVDLA_CDP_RDMA_S_STATUS_r,
  l2d_NVDLA_CDP_RDMA_S_POINTER_r,
  l2d_NVDLA_CDP_RDMA_D_OP_ENABLE_r,
  l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_r,
  l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_r,
  l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_r,
  l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_r,
  l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_r,
  l2d_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_r,
  l2d_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_r,
  l2d_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_r,
  l2d_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_r,
  l2d_NVDLA_CDP_RDMA_D_OPERATION_MODE_r,
  l2d_NVDLA_CDP_RDMA_D_DATA_FORMAT_r,
  l2d_NVDLA_CDP_RDMA_D_PERF_ENABLE_r,
  l2d_NVDLA_CDP_RDMA_D_PERF_READ_STALL_r,
  l2d_NVDLA_CDP_RDMA_D_CYA_r,
  l2h_NVDLA_CDP_RDMA_S_POINTER_PRODUCER_r,
  l2h_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN_r,
  l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH_r,
  l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT_r,
  l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL_r,
  l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW_r,
  l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH_r,
  l2h_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE_r,
  l2h_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE_r,
  l2h_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE_r,
  l2h_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_SRC_COMPRESSION_EN_r,
  l2h_NVDLA_CDP_RDMA_D_OPERATION_MODE_OPERATION_MODE_r,
  l2h_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA_r,
  l2h_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN_r,
  l2h_NVDLA_CDP_RDMA_D_CYA_CYA_r );

  //------- inputs
  input    clk;
  input    reset;
  input     [31:0] d2l_NVDLA_CDP_RDMA_S_STATUS_w;
  input    d2l_NVDLA_CDP_RDMA_S_STATUS_we;
  input    d2l_NVDLA_CDP_RDMA_S_STATUS_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_S_POINTER_w;
  input    d2l_NVDLA_CDP_RDMA_S_POINTER_we;
  input    d2l_NVDLA_CDP_RDMA_S_POINTER_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_w;
  input    d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_we;
  input    d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_w;
  input    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_we;
  input    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_w;
  input    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_we;
  input    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_w;
  input    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_we;
  input    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_w;
  input    d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_we;
  input    d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_w;
  input    d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_we;
  input    d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_w;
  input    d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_we;
  input    d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_w;
  input    d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_we;
  input    d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_w;
  input    d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_we;
  input    d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_w;
  input    d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_we;
  input    d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_w;
  input    d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_we;
  input    d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_w;
  input    d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_we;
  input    d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_w;
  input    d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_we;
  input    d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_w;
  input    d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_we;
  input    d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_re;
  input     [31:0] d2l_NVDLA_CDP_RDMA_D_CYA_w;
  input    d2l_NVDLA_CDP_RDMA_D_CYA_we;
  input    d2l_NVDLA_CDP_RDMA_D_CYA_re;
  input     [1:0] h2l_NVDLA_CDP_RDMA_S_STATUS_STATUS_0_w;
  input     [1:0] h2l_NVDLA_CDP_RDMA_S_STATUS_STATUS_1_w;
  input    h2l_NVDLA_CDP_RDMA_S_POINTER_CONSUMER_w;
  input     [31:0] h2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_PERF_READ_STALL_w;

  //------- outputs
  output     [31:0] l2d_NVDLA_CDP_RDMA_S_STATUS_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_S_POINTER_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_D_OP_ENABLE_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_D_OPERATION_MODE_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_FORMAT_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_D_PERF_ENABLE_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_D_PERF_READ_STALL_r;
  output     [31:0] l2d_NVDLA_CDP_RDMA_D_CYA_r;
  output    l2h_NVDLA_CDP_RDMA_S_POINTER_PRODUCER_r;
  output    l2h_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN_r;
  output     [12:0] l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH_r;
  output     [12:0] l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT_r;
  output     [12:0] l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL_r;
  output     [31:0] l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW_r;
  output     [31:0] l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH_r;
  output     [31:0] l2h_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE_r;
  output     [31:0] l2h_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE_r;
  output    l2h_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE_r;
  output    l2h_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_SRC_COMPRESSION_EN_r;
  output     [1:0] l2h_NVDLA_CDP_RDMA_D_OPERATION_MODE_OPERATION_MODE_r;
  output     [1:0] l2h_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA_r;
  output    l2h_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN_r;
  output     [31:0] l2h_NVDLA_CDP_RDMA_D_CYA_CYA_r;


  //------- wire defines
  wire  rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_SRC_COMPRESSION_EN;
  wire   [1:0] rg_NVDLA_CDP_RDMA_D_OPERATION_MODE_OPERATION_MODE;
  
  //------- reg defines
  reg   [1:0] rg_NVDLA_CDP_RDMA_S_STATUS_STATUS_0;
  reg   [1:0] rg_NVDLA_CDP_RDMA_S_STATUS_STATUS_1;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_S_STATUS_r;
  reg  rg_NVDLA_CDP_RDMA_S_POINTER_PRODUCER;
  reg  reg_NVDLA_CDP_RDMA_S_POINTER_PRODUCER_next;
  reg  l2h_NVDLA_CDP_RDMA_S_POINTER_PRODUCER_r;
  reg  rg_NVDLA_CDP_RDMA_S_POINTER_CONSUMER;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_S_POINTER_r;
  reg  rg_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN;
  reg  reg_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN_next;
  reg  l2h_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN_r;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_D_OP_ENABLE_r;
  reg   [12:0] rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH;
  reg   [12:0] reg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH_next;
  reg   [12:0] l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH_r;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_r;
  reg   [12:0] rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT;
  reg   [12:0] reg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT_next;
  reg   [12:0] l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT_r;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_r;
  reg   [12:0] rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL;
  reg   [12:0] reg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL_next;
  reg   [12:0] l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL_r;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_r;
  reg   [31:0] rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW;
  reg   [31:0] reg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW_next;
  reg   [31:0] l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW_r;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_r;
  reg   [31:0] rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH;
  reg   [31:0] reg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH_next;
  reg   [31:0] l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH_r;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_r;
  reg   [31:0] rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE;
  reg   [31:0] reg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE_next;
  reg   [31:0] l2h_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE_r;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_r;
  reg   [31:0] rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE;
  reg   [31:0] reg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE_next;
  reg   [31:0] l2h_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE_r;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_r;
  reg  rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE;
  reg  reg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE_next;
  reg  l2h_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE_r;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_r;
  reg  l2h_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_SRC_COMPRESSION_EN_r;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_r;
  reg   [1:0] l2h_NVDLA_CDP_RDMA_D_OPERATION_MODE_OPERATION_MODE_r;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_D_OPERATION_MODE_r;
  reg   [1:0] rg_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA;
  reg   [1:0] reg_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA_next;
  reg   [1:0] l2h_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA_r;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_FORMAT_r;
  reg  rg_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN;
  reg  reg_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN_next;
  reg  l2h_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN_r;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_D_PERF_ENABLE_r;
  reg   [31:0] rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL_PERF_READ_STALL;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_D_PERF_READ_STALL_r;
  reg   [31:0] rg_NVDLA_CDP_RDMA_D_CYA_CYA;
  reg   [31:0] reg_NVDLA_CDP_RDMA_D_CYA_CYA_next;
  reg   [31:0] l2h_NVDLA_CDP_RDMA_D_CYA_CYA_r;
  reg   [31:0] l2d_NVDLA_CDP_RDMA_D_CYA_r;
  
  
  //------- assigns
  assign  rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_SRC_COMPRESSION_EN = 1'h0;
  assign  rg_NVDLA_CDP_RDMA_D_OPERATION_MODE_OPERATION_MODE = 2'h0;
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_CYA
  always @ (*) begin
    reg_NVDLA_CDP_RDMA_D_CYA_CYA_next = rg_NVDLA_CDP_RDMA_D_CYA_CYA;
    l2h_NVDLA_CDP_RDMA_D_CYA_CYA_r = rg_NVDLA_CDP_RDMA_D_CYA_CYA;
    if (d2l_NVDLA_CDP_RDMA_D_CYA_we) reg_NVDLA_CDP_RDMA_D_CYA_CYA_next = d2l_NVDLA_CDP_RDMA_D_CYA_w;
  end
  
  //------- reg assigns for NVDLA_CDP_RDMA_D_CYA
  always @ (posedge clk) begin
    if (reset) begin
      rg_NVDLA_CDP_RDMA_D_CYA_CYA <= #1 32'h0;
    end
    else begin
      rg_NVDLA_CDP_RDMA_D_CYA_CYA <= #1  reg_NVDLA_CDP_RDMA_D_CYA_CYA_next;
    end
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW
  always @ (*) begin
    reg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW_next = rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW;
    l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW_r = rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW;
    if (d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_we) reg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW_next = d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_w;
  end
  
  //------- reg assigns for NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW
  always @ (posedge clk) begin
    if (reset) begin
      rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW <= #1 32'h0;
    end
    else begin
      rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW <= #1  reg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW_next;
    end
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_S_POINTER
  always @ (*) begin
    reg_NVDLA_CDP_RDMA_S_POINTER_PRODUCER_next = rg_NVDLA_CDP_RDMA_S_POINTER_PRODUCER;
    l2h_NVDLA_CDP_RDMA_S_POINTER_PRODUCER_r = rg_NVDLA_CDP_RDMA_S_POINTER_PRODUCER;
    rg_NVDLA_CDP_RDMA_S_POINTER_CONSUMER =  h2l_NVDLA_CDP_RDMA_S_POINTER_CONSUMER_w;
    if (d2l_NVDLA_CDP_RDMA_S_POINTER_we) reg_NVDLA_CDP_RDMA_S_POINTER_PRODUCER_next = d2l_NVDLA_CDP_RDMA_S_POINTER_w [0] ;
  end
  
  //------- reg assigns for NVDLA_CDP_RDMA_S_POINTER
  always @ (posedge clk) begin
    if (reset) begin
      rg_NVDLA_CDP_RDMA_S_POINTER_PRODUCER <= #1 1'h0;
    end
    else begin
      rg_NVDLA_CDP_RDMA_S_POINTER_PRODUCER <= #1  reg_NVDLA_CDP_RDMA_S_POINTER_PRODUCER_next;
    end
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_r = 32'b0;
    l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_r [12:0]  = rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_S_STATUS
  always @ (*) begin
    rg_NVDLA_CDP_RDMA_S_STATUS_STATUS_0 =  h2l_NVDLA_CDP_RDMA_S_STATUS_STATUS_0_w;
    rg_NVDLA_CDP_RDMA_S_STATUS_STATUS_1 =  h2l_NVDLA_CDP_RDMA_S_STATUS_STATUS_1_w;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_OP_ENABLE (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_D_OP_ENABLE_r = 32'b0;
    l2d_NVDLA_CDP_RDMA_D_OP_ENABLE_r [0]  = rg_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_OPERATION_MODE (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_D_OPERATION_MODE_r = 32'b0;
    l2d_NVDLA_CDP_RDMA_D_OPERATION_MODE_r [1:0]  = rg_NVDLA_CDP_RDMA_D_OPERATION_MODE_OPERATION_MODE;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_PERF_ENABLE (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_D_PERF_ENABLE_r = 32'b0;
    l2d_NVDLA_CDP_RDMA_D_PERF_ENABLE_r [0]  = rg_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_S_STATUS (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_S_STATUS_r = 32'b0;
    l2d_NVDLA_CDP_RDMA_S_STATUS_r [1:0]  = rg_NVDLA_CDP_RDMA_S_STATUS_STATUS_0;
    l2d_NVDLA_CDP_RDMA_S_STATUS_r [17:16]  = rg_NVDLA_CDP_RDMA_S_STATUS_STATUS_1;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_SRC_DMA_CFG
  always @ (*) begin
    reg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE_next = rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE;
    l2h_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE_r = rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE;
    if (d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_we) reg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE_next = d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_w [0] ;
  end
  
  //------- reg assigns for NVDLA_CDP_RDMA_D_SRC_DMA_CFG
  always @ (posedge clk) begin
    if (reset) begin
      rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE <= #1 1'h0;
    end
    else begin
      rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE <= #1  reg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE_next;
    end
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_r = rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_PERF_READ_STALL (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_D_PERF_READ_STALL_r = rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL_PERF_READ_STALL;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_r = 32'b0;
    l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_r [12:0]  = rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT
  always @ (*) begin
    reg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT_next = rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT;
    l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT_r = rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT;
    if (d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_we) reg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT_next = d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_w [12:0] ;
  end
  
  //------- reg assigns for NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT
  always @ (posedge clk) begin
    if (reset) begin
      rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT <= #1 13'h0;
    end
    else begin
      rg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT <= #1  reg_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT_next;
    end
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_r = rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_DATA_FORMAT (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_D_DATA_FORMAT_r = 32'b0;
    l2d_NVDLA_CDP_RDMA_D_DATA_FORMAT_r [1:0]  = rg_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN
  always @ (*) begin
    l2h_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_SRC_COMPRESSION_EN_r = rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_SRC_COMPRESSION_EN;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_SRC_DMA_CFG (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_r = 32'b0;
    l2d_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_r [0]  = rg_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_r = rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_PERF_READ_STALL
  always @ (*) begin
    rg_NVDLA_CDP_RDMA_D_PERF_READ_STALL_PERF_READ_STALL =  h2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_PERF_READ_STALL_w;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH
  always @ (*) begin
    reg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH_next = rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH;
    l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH_r = rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH;
    if (d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_we) reg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH_next = d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_w;
  end
  
  //------- reg assigns for NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH
  always @ (posedge clk) begin
    if (reset) begin
      rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH <= #1 32'h0;
    end
    else begin
      rg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH <= #1  reg_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH_next;
    end
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_S_POINTER (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_S_POINTER_r = 32'b0;
    l2d_NVDLA_CDP_RDMA_S_POINTER_r [0]  = rg_NVDLA_CDP_RDMA_S_POINTER_PRODUCER;
    l2d_NVDLA_CDP_RDMA_S_POINTER_r [16]  = rg_NVDLA_CDP_RDMA_S_POINTER_CONSUMER;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_OPERATION_MODE
  always @ (*) begin
    l2h_NVDLA_CDP_RDMA_D_OPERATION_MODE_OPERATION_MODE_r = rg_NVDLA_CDP_RDMA_D_OPERATION_MODE_OPERATION_MODE;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_PERF_ENABLE
  always @ (*) begin
    reg_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN_next = rg_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN;
    l2h_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN_r = rg_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN;
    if (d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_we) reg_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN_next = d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_w [0] ;
  end
  
  //------- reg assigns for NVDLA_CDP_RDMA_D_PERF_ENABLE
  always @ (posedge clk) begin
    if (reset) begin
      rg_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN <= #1 1'h0;
    end
    else begin
      rg_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN <= #1  reg_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN_next;
    end
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_OP_ENABLE
  always @ (*) begin
    reg_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN_next = rg_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN;
    l2h_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN_r = rg_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN;
    if (d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_we) reg_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN_next = d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_w [0] ;
  end
  
  //------- reg assigns for NVDLA_CDP_RDMA_D_OP_ENABLE
  always @ (posedge clk) begin
    if (reset) begin
      rg_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN <= #1 1'h0;
    end
    else begin
      rg_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN <= #1  reg_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN_next;
    end
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_r = 32'b0;
    l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_r [12:0]  = rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_DATA_FORMAT
  always @ (*) begin
    reg_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA_next = rg_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA;
    l2h_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA_r = rg_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA;
    if (d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_we) reg_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA_next = d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_w [1:0] ;
  end
  
  //------- reg assigns for NVDLA_CDP_RDMA_D_DATA_FORMAT
  always @ (posedge clk) begin
    if (reset) begin
      rg_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA <= #1 2'h0;
    end
    else begin
      rg_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA <= #1  reg_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA_next;
    end
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE
  always @ (*) begin
    reg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE_next = rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE;
    l2h_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE_r = rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE;
    if (d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_we) reg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE_next = d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_w;
  end
  
  //------- reg assigns for NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE
  always @ (posedge clk) begin
    if (reset) begin
      rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE <= #1 32'h0;
    end
    else begin
      rg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE <= #1  reg_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE_next;
    end
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE
  always @ (*) begin
    reg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE_next = rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE;
    l2h_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE_r = rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE;
    if (d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_we) reg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE_next = d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_w;
  end
  
  //------- reg assigns for NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE
  always @ (posedge clk) begin
    if (reset) begin
      rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE <= #1 32'h0;
    end
    else begin
      rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE <= #1  reg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE_next;
    end
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH
  always @ (*) begin
    reg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH_next = rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH;
    l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH_r = rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH;
    if (d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_we) reg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH_next = d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_w [12:0] ;
  end
  
  //------- reg assigns for NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH
  always @ (posedge clk) begin
    if (reset) begin
      rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH <= #1 13'h0;
    end
    else begin
      rg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH <= #1  reg_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH_next;
    end
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_CYA (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_D_CYA_r = rg_NVDLA_CDP_RDMA_D_CYA_CYA;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL
  always @ (*) begin
    reg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL_next = rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL;
    l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL_r = rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL;
    if (d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_we) reg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL_next = d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_w [12:0] ;
  end
  
  //------- reg assigns for NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL
  always @ (posedge clk) begin
    if (reset) begin
      rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL <= #1 13'h0;
    end
    else begin
      rg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL <= #1  reg_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL_next;
    end
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_r = 32'b0;
    l2d_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_r [0]  = rg_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_SRC_COMPRESSION_EN;
  end
  
  //------- combinatorial assigns for NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE (pio read data)
  always @ (*) begin
    l2d_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_r = rg_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE;
  end
  
endmodule

//
//---------- module addrmap_NVDLA_jrdl_decode
//
module addrmap_NVDLA_jrdl_decode
(
  clk,
  reset,
  leaf_dec_wr_data,
  leaf_dec_addr,
  leaf_dec_block_sel,
  leaf_dec_valid,
  leaf_dec_wr_dvld,
  leaf_dec_cycle,
  leaf_dec_wr_width,
  l2d_NVDLA_CDP_RDMA_S_STATUS_r,
  l2d_NVDLA_CDP_RDMA_S_POINTER_r,
  l2d_NVDLA_CDP_RDMA_D_OP_ENABLE_r,
  l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_r,
  l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_r,
  l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_r,
  l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_r,
  l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_r,
  l2d_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_r,
  l2d_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_r,
  l2d_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_r,
  l2d_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_r,
  l2d_NVDLA_CDP_RDMA_D_OPERATION_MODE_r,
  l2d_NVDLA_CDP_RDMA_D_DATA_FORMAT_r,
  l2d_NVDLA_CDP_RDMA_D_PERF_ENABLE_r,
  l2d_NVDLA_CDP_RDMA_D_PERF_READ_STALL_r,
  l2d_NVDLA_CDP_RDMA_D_CYA_r,

  dec_leaf_rd_data,
  dec_leaf_ack,
  dec_leaf_nack,
  dec_leaf_accept,
  dec_leaf_reject,
  dec_leaf_retry_atomic,
  dec_leaf_data_width,
  d2l_NVDLA_CDP_RDMA_S_STATUS_w,
  d2l_NVDLA_CDP_RDMA_S_STATUS_we,
  d2l_NVDLA_CDP_RDMA_S_STATUS_re,
  d2l_NVDLA_CDP_RDMA_S_POINTER_w,
  d2l_NVDLA_CDP_RDMA_S_POINTER_we,
  d2l_NVDLA_CDP_RDMA_S_POINTER_re,
  d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_w,
  d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_we,
  d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_re,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_w,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_we,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_re,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_w,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_we,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_re,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_w,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_we,
  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_re,
  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_w,
  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_we,
  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_re,
  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_w,
  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_we,
  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_re,
  d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_w,
  d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_we,
  d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_re,
  d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_w,
  d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_we,
  d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_re,
  d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_w,
  d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_we,
  d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_re,
  d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_w,
  d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_we,
  d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_re,
  d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_w,
  d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_we,
  d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_re,
  d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_w,
  d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_we,
  d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_re,
  d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_w,
  d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_we,
  d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_re,
  d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_w,
  d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_we,
  d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_re,
  d2l_NVDLA_CDP_RDMA_D_CYA_w,
  d2l_NVDLA_CDP_RDMA_D_CYA_we,
  d2l_NVDLA_CDP_RDMA_D_CYA_re );

  //------- inputs
  input    clk;
  input    reset;
  input     [31:0] leaf_dec_wr_data;
  input     [39:0] leaf_dec_addr;
  input    leaf_dec_block_sel;
  input    leaf_dec_valid;
  input    leaf_dec_wr_dvld;
  input     [1:0] leaf_dec_cycle;
  input     [2:0] leaf_dec_wr_width;
  input     [31:0] l2d_NVDLA_CDP_RDMA_S_STATUS_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_S_POINTER_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_D_OP_ENABLE_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_D_OPERATION_MODE_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_FORMAT_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_D_PERF_ENABLE_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_D_PERF_READ_STALL_r;
  input     [31:0] l2d_NVDLA_CDP_RDMA_D_CYA_r;

  //------- outputs
  output     [31:0] dec_leaf_rd_data;
  output    dec_leaf_ack;
  output    dec_leaf_nack;
  output    dec_leaf_accept;
  output    dec_leaf_reject;
  output    dec_leaf_retry_atomic;
  output     [2:0] dec_leaf_data_width;
  output     [31:0] d2l_NVDLA_CDP_RDMA_S_STATUS_w;
  output    d2l_NVDLA_CDP_RDMA_S_STATUS_we;
  output    d2l_NVDLA_CDP_RDMA_S_STATUS_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_S_POINTER_w;
  output    d2l_NVDLA_CDP_RDMA_S_POINTER_we;
  output    d2l_NVDLA_CDP_RDMA_S_POINTER_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_w;
  output    d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_we;
  output    d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_w;
  output    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_we;
  output    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_w;
  output    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_we;
  output    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_w;
  output    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_we;
  output    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_w;
  output    d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_we;
  output    d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_w;
  output    d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_we;
  output    d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_w;
  output    d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_we;
  output    d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_w;
  output    d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_we;
  output    d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_w;
  output    d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_we;
  output    d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_w;
  output    d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_we;
  output    d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_w;
  output    d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_we;
  output    d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_w;
  output    d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_we;
  output    d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_w;
  output    d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_we;
  output    d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_w;
  output    d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_we;
  output    d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_re;
  output     [31:0] d2l_NVDLA_CDP_RDMA_D_CYA_w;
  output    d2l_NVDLA_CDP_RDMA_D_CYA_we;
  output    d2l_NVDLA_CDP_RDMA_D_CYA_re;


  //------- wire defines
  wire   [31:0] pio_dec_write_data;
  wire   [15:2] pio_dec_address;
  wire  pio_dec_read;
  wire  pio_dec_write;
  wire   [39:0] block_sel_addr;
  wire  block_sel;
  wire  leaf_dec_valid_active;
  wire  leaf_dec_wr_dvld_active;
  
  //------- reg defines
  reg   [31:0] d2l_NVDLA_CDP_RDMA_S_STATUS_w;
  reg  d2l_NVDLA_CDP_RDMA_S_STATUS_we;
  reg  d2l_NVDLA_CDP_RDMA_S_STATUS_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_S_POINTER_w;
  reg  d2l_NVDLA_CDP_RDMA_S_POINTER_we;
  reg  d2l_NVDLA_CDP_RDMA_S_POINTER_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_w;
  reg  d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_we;
  reg  d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_w;
  reg  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_we;
  reg  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_w;
  reg  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_we;
  reg  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_w;
  reg  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_we;
  reg  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_w;
  reg  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_we;
  reg  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_w;
  reg  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_we;
  reg  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_w;
  reg  d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_we;
  reg  d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_w;
  reg  d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_we;
  reg  d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_w;
  reg  d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_we;
  reg  d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_w;
  reg  d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_we;
  reg  d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_w;
  reg  d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_we;
  reg  d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_w;
  reg  d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_we;
  reg  d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_w;
  reg  d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_we;
  reg  d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_w;
  reg  d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_we;
  reg  d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_re;
  reg   [31:0] d2l_NVDLA_CDP_RDMA_D_CYA_w;
  reg  d2l_NVDLA_CDP_RDMA_D_CYA_we;
  reg  d2l_NVDLA_CDP_RDMA_D_CYA_re;
  reg  leaf_dec_valid_hld1;
  reg  leaf_dec_valid_hld1_next;
  reg  leaf_dec_wr_dvld_hld1;
  reg  leaf_dec_wr_dvld_hld1_next;
  reg  pio_write_active;
  reg  pio_read_active;
  reg   [15:2] pio_dec_address_d1;
  reg   [31:0] pio_dec_write_data_d1;
  reg   [31:0] dec_pio_read_data;
  reg   [31:0] dec_pio_read_data_d1;
  reg  dec_pio_ack;
  reg  dec_pio_nack;
  reg  dec_pio_ack_next;
  reg  dec_pio_nack_next;
  reg  pio_internal_ack;
  reg  pio_internal_nack;
  reg  pio_external_ack;
  reg  pio_external_nack;
  reg  pio_external_ack_next;
  reg  pio_external_nack_next;
  reg  pio_no_acks;
  reg  pio_activate_write;
  reg  pio_activate_read;
  reg   [31:0] dec_pio_read_data_next;
  reg  external_transaction_active;
  
  
  //------- assigns
  assign  pio_dec_write_data = leaf_dec_wr_data;
  assign  dec_leaf_rd_data = dec_pio_read_data;
  assign  dec_leaf_ack = dec_pio_ack;
  assign  dec_leaf_nack = dec_pio_nack;
  assign  pio_dec_address = leaf_dec_addr [15:2] ;
  assign  block_sel_addr = 40'h0;
  assign  block_sel = leaf_dec_block_sel;
  assign  leaf_dec_wr_dvld_active = leaf_dec_wr_dvld | leaf_dec_wr_dvld_hld1;
  assign  leaf_dec_valid_active = leaf_dec_valid | leaf_dec_valid_hld1;
  assign  dec_leaf_accept = leaf_dec_valid & block_sel;
  assign  dec_leaf_reject = leaf_dec_valid & ~block_sel;
  assign  pio_dec_read = block_sel & leaf_dec_valid_active & (leaf_dec_cycle == 2'b10);
  assign  pio_dec_write = block_sel & leaf_dec_wr_dvld_active & (leaf_dec_cycle[1] == 1'b0);
  assign  dec_leaf_retry_atomic = 1'b0;
  assign  dec_leaf_data_width = 3'b0;
  
  //------- combinatorial assigns for pio read data
  always @ (*) begin
    dec_pio_read_data = dec_pio_read_data_d1;
  end
  
  //------- reg assigns for pio read data
  always @ (posedge clk) begin
    if (reset) begin
      dec_pio_read_data_d1 <= #1  32'b0;
    end
    else begin
      dec_pio_read_data_d1 <= #1 dec_pio_read_data_next;
    end
  end
  
  //------- reg assigns for pio i/f
  always @ (posedge clk) begin
    if (reset) begin
      pio_write_active <= #1  1'b0;
      pio_read_active <= #1  1'b0;
    end
    else begin
      pio_write_active <= #1  pio_write_active ? pio_no_acks : pio_activate_write;
      pio_read_active <= #1  pio_read_active ? pio_no_acks : pio_activate_read;
      pio_dec_address_d1 <= #1   pio_dec_address;
      pio_dec_write_data_d1 <= #1  pio_dec_write_data;
    end
  end
  
  //------- combinatorial assigns for leaf i/f
  always @ (*) begin
    leaf_dec_valid_hld1_next = leaf_dec_valid | leaf_dec_valid_hld1;
    if (dec_pio_ack_next | dec_pio_nack_next) leaf_dec_valid_hld1_next = 1'b0;
    leaf_dec_wr_dvld_hld1_next = leaf_dec_wr_dvld | leaf_dec_wr_dvld_hld1;
    if (dec_pio_ack_next | dec_pio_nack_next | leaf_dec_valid) leaf_dec_wr_dvld_hld1_next = 1'b0;
  end
  
  //------- reg assigns for leaf i/f
  always @ (posedge clk) begin
    if (reset) begin
      leaf_dec_valid_hld1 <= #1  1'b0;
      leaf_dec_wr_dvld_hld1 <= #1  1'b0;
    end
    else begin
      leaf_dec_valid_hld1 <= #1 leaf_dec_valid_hld1_next;
      leaf_dec_wr_dvld_hld1 <= #1 leaf_dec_wr_dvld_hld1_next;
    end
  end
  
  //------- combinatorial assigns for pio ack/nack
  always @ (*) begin
    pio_internal_nack = (pio_read_active | pio_write_active) & ~pio_internal_ack & ~external_transaction_active;
    dec_pio_ack_next = (pio_internal_ack | (pio_external_ack_next & external_transaction_active));
    dec_pio_nack_next = (pio_internal_nack | (pio_external_nack_next & external_transaction_active));
    pio_no_acks = ~(dec_pio_ack | dec_pio_nack | pio_external_ack | pio_external_nack);
    pio_activate_write = (pio_dec_write & ~(dec_pio_ack | dec_pio_nack));
    pio_activate_read = (pio_dec_read & ~(dec_pio_ack | dec_pio_nack));
  end
  
  //------- reg assigns for pio ack/nack
  always @ (posedge clk) begin
    if (reset) begin
      dec_pio_ack <= #1 1'b0;
      dec_pio_nack <= #1 1'b0;
      pio_external_ack <= #1  1'b0;
      pio_external_nack <= #1  1'b0;
    end
    else begin
      dec_pio_ack <= #1 dec_pio_ack ? 1'b0 : dec_pio_ack_next;
      dec_pio_nack <= #1 dec_pio_nack ? 1'b0 : dec_pio_nack_next;
      pio_external_ack <= #1 pio_external_ack_next;
      pio_external_nack <= #1 pio_external_nack_next;
    end
  end
  
  
  //------- address decode
  always @ (*) begin
    pio_internal_ack = 1'b0;
    external_transaction_active = 1'b0;
    pio_external_ack_next = 1'b0;
    pio_external_nack_next = 1'b0;
    dec_pio_read_data_next = 32'b0;
    
    d2l_NVDLA_CDP_RDMA_S_STATUS_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_S_STATUS_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_S_STATUS_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_S_POINTER_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_S_POINTER_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_S_POINTER_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_re = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_CYA_w = pio_dec_write_data_d1  [31:0] ;
    d2l_NVDLA_CDP_RDMA_D_CYA_we = 1'b0;
    d2l_NVDLA_CDP_RDMA_D_CYA_re = 1'b0;
    
    casez(pio_dec_address_d1)
    //  Register: NVDLA_CDP_RDMA.S_STATUS     Address: 0xc000     External: false
    14'b11000000000000:
      begin
        d2l_NVDLA_CDP_RDMA_S_STATUS_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_S_STATUS_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_S_STATUS_r;
      end
    //  Register: NVDLA_CDP_RDMA.S_POINTER     Address: 0xc004     External: false
    14'b11000000000001:
      begin
        d2l_NVDLA_CDP_RDMA_S_POINTER_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_S_POINTER_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_S_POINTER_r;
      end
    //  Register: NVDLA_CDP_RDMA.D_OP_ENABLE     Address: 0xc008     External: false
    14'b11000000000010:
      begin
        d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_D_OP_ENABLE_r;
      end
    //  Register: NVDLA_CDP_RDMA.D_DATA_CUBE_WIDTH     Address: 0xc00c     External: false
    14'b11000000000011:
      begin
        d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_r;
      end
    //  Register: NVDLA_CDP_RDMA.D_DATA_CUBE_HEIGHT     Address: 0xc010     External: false
    14'b11000000000100:
      begin
        d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_r;
      end
    //  Register: NVDLA_CDP_RDMA.D_DATA_CUBE_CHANNEL     Address: 0xc014     External: false
    14'b11000000000101:
      begin
        d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_r;
      end
    //  Register: NVDLA_CDP_RDMA.D_SRC_BASE_ADDR_LOW     Address: 0xc018     External: false
    14'b11000000000110:
      begin
        d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_r;
      end
    //  Register: NVDLA_CDP_RDMA.D_SRC_BASE_ADDR_HIGH     Address: 0xc01c     External: false
    14'b11000000000111:
      begin
        d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_r;
      end
    //  Register: NVDLA_CDP_RDMA.D_SRC_LINE_STRIDE     Address: 0xc020     External: false
    14'b11000000001000:
      begin
        d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_r;
      end
    //  Register: NVDLA_CDP_RDMA.D_SRC_SURFACE_STRIDE     Address: 0xc024     External: false
    14'b11000000001001:
      begin
        d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_r;
      end
    //  Register: NVDLA_CDP_RDMA.D_SRC_DMA_CFG     Address: 0xc028     External: false
    14'b11000000001010:
      begin
        d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_r;
      end
    //  Register: NVDLA_CDP_RDMA.D_SRC_COMPRESSION_EN     Address: 0xc02c     External: false
    14'b11000000001011:
      begin
        d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_r;
      end
    //  Register: NVDLA_CDP_RDMA.D_OPERATION_MODE     Address: 0xc030     External: false
    14'b11000000001100:
      begin
        d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_D_OPERATION_MODE_r;
      end
    //  Register: NVDLA_CDP_RDMA.D_DATA_FORMAT     Address: 0xc034     External: false
    14'b11000000001101:
      begin
        d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_D_DATA_FORMAT_r;
      end
    //  Register: NVDLA_CDP_RDMA.D_PERF_ENABLE     Address: 0xc038     External: false
    14'b11000000001110:
      begin
        d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_D_PERF_ENABLE_r;
      end
    //  Register: NVDLA_CDP_RDMA.D_PERF_READ_STALL     Address: 0xc03c     External: false
    14'b11000000001111:
      begin
        d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_D_PERF_READ_STALL_r;
      end
    //  Register: NVDLA_CDP_RDMA.D_CYA     Address: 0xc040     External: false
    14'b11000000010000:
      begin
        d2l_NVDLA_CDP_RDMA_D_CYA_we = pio_write_active & ~dec_pio_ack;
        d2l_NVDLA_CDP_RDMA_D_CYA_re = pio_read_active & ~dec_pio_ack;
        pio_internal_ack =  pio_read_active | pio_write_active;
        dec_pio_read_data_next  [31:0]  = l2d_NVDLA_CDP_RDMA_D_CYA_r;
      end
    endcase
  end
  
endmodule

//
//---------- module addrmap_NVDLA_pio
//
module addrmap_NVDLA_pio
(
  clk,
  reset,
  h2l_NVDLA_CDP_RDMA_S_STATUS_STATUS_0_w,
  h2l_NVDLA_CDP_RDMA_S_STATUS_STATUS_1_w,
  h2l_NVDLA_CDP_RDMA_S_POINTER_CONSUMER_w,
  h2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_PERF_READ_STALL_w,
  leaf_dec_wr_data,
  leaf_dec_addr,
  leaf_dec_block_sel,
  leaf_dec_valid,
  leaf_dec_wr_dvld,
  leaf_dec_cycle,
  leaf_dec_wr_width,

  l2h_NVDLA_CDP_RDMA_S_POINTER_PRODUCER_r,
  l2h_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN_r,
  l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH_r,
  l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT_r,
  l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL_r,
  l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW_r,
  l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH_r,
  l2h_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE_r,
  l2h_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE_r,
  l2h_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE_r,
  l2h_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_SRC_COMPRESSION_EN_r,
  l2h_NVDLA_CDP_RDMA_D_OPERATION_MODE_OPERATION_MODE_r,
  l2h_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA_r,
  l2h_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN_r,
  l2h_NVDLA_CDP_RDMA_D_CYA_CYA_r,
  dec_leaf_rd_data,
  dec_leaf_ack,
  dec_leaf_nack,
  dec_leaf_accept,
  dec_leaf_reject,
  dec_leaf_retry_atomic,
  dec_leaf_data_width );

  //------- inputs
  input    clk;
  input    reset;
  input     [1:0] h2l_NVDLA_CDP_RDMA_S_STATUS_STATUS_0_w;
  input     [1:0] h2l_NVDLA_CDP_RDMA_S_STATUS_STATUS_1_w;
  input    h2l_NVDLA_CDP_RDMA_S_POINTER_CONSUMER_w;
  input     [31:0] h2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_PERF_READ_STALL_w;
  input     [31:0] leaf_dec_wr_data;
  input     [39:0] leaf_dec_addr;
  input    leaf_dec_block_sel;
  input    leaf_dec_valid;
  input    leaf_dec_wr_dvld;
  input     [1:0] leaf_dec_cycle;
  input     [2:0] leaf_dec_wr_width;

  //------- outputs
  output    l2h_NVDLA_CDP_RDMA_S_POINTER_PRODUCER_r;
  output    l2h_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN_r;
  output     [12:0] l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH_r;
  output     [12:0] l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT_r;
  output     [12:0] l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL_r;
  output     [31:0] l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW_r;
  output     [31:0] l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH_r;
  output     [31:0] l2h_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE_r;
  output     [31:0] l2h_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE_r;
  output    l2h_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE_r;
  output    l2h_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_SRC_COMPRESSION_EN_r;
  output     [1:0] l2h_NVDLA_CDP_RDMA_D_OPERATION_MODE_OPERATION_MODE_r;
  output     [1:0] l2h_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA_r;
  output    l2h_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN_r;
  output     [31:0] l2h_NVDLA_CDP_RDMA_D_CYA_CYA_r;
  output     [31:0] dec_leaf_rd_data;
  output    dec_leaf_ack;
  output    dec_leaf_nack;
  output    dec_leaf_accept;
  output    dec_leaf_reject;
  output    dec_leaf_retry_atomic;
  output     [2:0] dec_leaf_data_width;


  //------- wire defines
  wire   [31:0] d2l_NVDLA_CDP_RDMA_S_STATUS_w;
  wire  d2l_NVDLA_CDP_RDMA_S_STATUS_we;
  wire  d2l_NVDLA_CDP_RDMA_S_STATUS_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_S_POINTER_w;
  wire  d2l_NVDLA_CDP_RDMA_S_POINTER_we;
  wire  d2l_NVDLA_CDP_RDMA_S_POINTER_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_w;
  wire  d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_we;
  wire  d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_w;
  wire  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_we;
  wire  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_w;
  wire  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_we;
  wire  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_w;
  wire  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_we;
  wire  d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_w;
  wire  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_we;
  wire  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_w;
  wire  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_we;
  wire  d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_w;
  wire  d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_we;
  wire  d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_w;
  wire  d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_we;
  wire  d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_w;
  wire  d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_we;
  wire  d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_w;
  wire  d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_we;
  wire  d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_w;
  wire  d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_we;
  wire  d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_w;
  wire  d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_we;
  wire  d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_w;
  wire  d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_we;
  wire  d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_w;
  wire  d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_we;
  wire  d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_re;
  wire   [31:0] d2l_NVDLA_CDP_RDMA_D_CYA_w;
  wire  d2l_NVDLA_CDP_RDMA_D_CYA_we;
  wire  d2l_NVDLA_CDP_RDMA_D_CYA_re;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_S_STATUS_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_S_POINTER_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_D_OP_ENABLE_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_D_OPERATION_MODE_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_D_DATA_FORMAT_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_D_PERF_ENABLE_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_D_PERF_READ_STALL_r;
  wire   [31:0] l2d_NVDLA_CDP_RDMA_D_CYA_r;
  
  
  addrmap_NVDLA_jrdl_decode pio_decode (
    .clk(clk),
    .reset(reset),
    .leaf_dec_wr_data(leaf_dec_wr_data),
    .leaf_dec_addr(leaf_dec_addr),
    .leaf_dec_block_sel(leaf_dec_block_sel),
    .leaf_dec_valid(leaf_dec_valid),
    .leaf_dec_wr_dvld(leaf_dec_wr_dvld),
    .leaf_dec_cycle(leaf_dec_cycle),
    .leaf_dec_wr_width(leaf_dec_wr_width),
    .l2d_NVDLA_CDP_RDMA_S_STATUS_r(l2d_NVDLA_CDP_RDMA_S_STATUS_r),
    .l2d_NVDLA_CDP_RDMA_S_POINTER_r(l2d_NVDLA_CDP_RDMA_S_POINTER_r),
    .l2d_NVDLA_CDP_RDMA_D_OP_ENABLE_r(l2d_NVDLA_CDP_RDMA_D_OP_ENABLE_r),
    .l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_r(l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_r),
    .l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_r(l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_r),
    .l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_r(l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_r),
    .l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_r(l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_r),
    .l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_r(l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_r),
    .l2d_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_r(l2d_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_r),
    .l2d_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_r(l2d_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_r),
    .l2d_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_r(l2d_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_r),
    .l2d_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_r(l2d_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_r),
    .l2d_NVDLA_CDP_RDMA_D_OPERATION_MODE_r(l2d_NVDLA_CDP_RDMA_D_OPERATION_MODE_r),
    .l2d_NVDLA_CDP_RDMA_D_DATA_FORMAT_r(l2d_NVDLA_CDP_RDMA_D_DATA_FORMAT_r),
    .l2d_NVDLA_CDP_RDMA_D_PERF_ENABLE_r(l2d_NVDLA_CDP_RDMA_D_PERF_ENABLE_r),
    .l2d_NVDLA_CDP_RDMA_D_PERF_READ_STALL_r(l2d_NVDLA_CDP_RDMA_D_PERF_READ_STALL_r),
    .l2d_NVDLA_CDP_RDMA_D_CYA_r(l2d_NVDLA_CDP_RDMA_D_CYA_r),
    .dec_leaf_rd_data(dec_leaf_rd_data),
    .dec_leaf_ack(dec_leaf_ack),
    .dec_leaf_nack(dec_leaf_nack),
    .dec_leaf_accept(dec_leaf_accept),
    .dec_leaf_reject(dec_leaf_reject),
    .dec_leaf_retry_atomic(dec_leaf_retry_atomic),
    .dec_leaf_data_width(dec_leaf_data_width),
    .d2l_NVDLA_CDP_RDMA_S_STATUS_w(d2l_NVDLA_CDP_RDMA_S_STATUS_w),
    .d2l_NVDLA_CDP_RDMA_S_STATUS_we(d2l_NVDLA_CDP_RDMA_S_STATUS_we),
    .d2l_NVDLA_CDP_RDMA_S_STATUS_re(d2l_NVDLA_CDP_RDMA_S_STATUS_re),
    .d2l_NVDLA_CDP_RDMA_S_POINTER_w(d2l_NVDLA_CDP_RDMA_S_POINTER_w),
    .d2l_NVDLA_CDP_RDMA_S_POINTER_we(d2l_NVDLA_CDP_RDMA_S_POINTER_we),
    .d2l_NVDLA_CDP_RDMA_S_POINTER_re(d2l_NVDLA_CDP_RDMA_S_POINTER_re),
    .d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_w(d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_w),
    .d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_we(d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_we),
    .d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_re(d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_re),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_w(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_w),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_we(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_we),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_re(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_re),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_w(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_w),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_we(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_we),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_re(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_re),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_w(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_w),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_we(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_we),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_re(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_re),
    .d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_w(d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_w),
    .d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_we(d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_we),
    .d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_re(d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_re),
    .d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_w(d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_w),
    .d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_we(d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_we),
    .d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_re(d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_re),
    .d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_w(d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_w),
    .d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_we(d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_we),
    .d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_re(d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_re),
    .d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_w(d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_w),
    .d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_we(d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_we),
    .d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_re(d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_re),
    .d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_w(d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_w),
    .d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_we(d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_we),
    .d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_re(d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_re),
    .d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_w(d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_w),
    .d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_we(d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_we),
    .d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_re(d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_re),
    .d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_w(d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_w),
    .d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_we(d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_we),
    .d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_re(d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_re),
    .d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_w(d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_w),
    .d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_we(d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_we),
    .d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_re(d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_re),
    .d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_w(d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_w),
    .d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_we(d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_we),
    .d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_re(d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_re),
    .d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_w(d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_w),
    .d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_we(d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_we),
    .d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_re(d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_re),
    .d2l_NVDLA_CDP_RDMA_D_CYA_w(d2l_NVDLA_CDP_RDMA_D_CYA_w),
    .d2l_NVDLA_CDP_RDMA_D_CYA_we(d2l_NVDLA_CDP_RDMA_D_CYA_we),
    .d2l_NVDLA_CDP_RDMA_D_CYA_re(d2l_NVDLA_CDP_RDMA_D_CYA_re) );
    
  addrmap_NVDLA_jrdl_logic pio_logic (
    .clk(clk),
    .reset(reset),
    .d2l_NVDLA_CDP_RDMA_S_STATUS_w(d2l_NVDLA_CDP_RDMA_S_STATUS_w),
    .d2l_NVDLA_CDP_RDMA_S_STATUS_we(d2l_NVDLA_CDP_RDMA_S_STATUS_we),
    .d2l_NVDLA_CDP_RDMA_S_STATUS_re(d2l_NVDLA_CDP_RDMA_S_STATUS_re),
    .d2l_NVDLA_CDP_RDMA_S_POINTER_w(d2l_NVDLA_CDP_RDMA_S_POINTER_w),
    .d2l_NVDLA_CDP_RDMA_S_POINTER_we(d2l_NVDLA_CDP_RDMA_S_POINTER_we),
    .d2l_NVDLA_CDP_RDMA_S_POINTER_re(d2l_NVDLA_CDP_RDMA_S_POINTER_re),
    .d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_w(d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_w),
    .d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_we(d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_we),
    .d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_re(d2l_NVDLA_CDP_RDMA_D_OP_ENABLE_re),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_w(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_w),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_we(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_we),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_re(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_re),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_w(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_w),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_we(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_we),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_re(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_re),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_w(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_w),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_we(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_we),
    .d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_re(d2l_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_re),
    .d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_w(d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_w),
    .d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_we(d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_we),
    .d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_re(d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_re),
    .d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_w(d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_w),
    .d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_we(d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_we),
    .d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_re(d2l_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_re),
    .d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_w(d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_w),
    .d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_we(d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_we),
    .d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_re(d2l_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_re),
    .d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_w(d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_w),
    .d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_we(d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_we),
    .d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_re(d2l_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_re),
    .d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_w(d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_w),
    .d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_we(d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_we),
    .d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_re(d2l_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_re),
    .d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_w(d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_w),
    .d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_we(d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_we),
    .d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_re(d2l_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_re),
    .d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_w(d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_w),
    .d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_we(d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_we),
    .d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_re(d2l_NVDLA_CDP_RDMA_D_OPERATION_MODE_re),
    .d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_w(d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_w),
    .d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_we(d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_we),
    .d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_re(d2l_NVDLA_CDP_RDMA_D_DATA_FORMAT_re),
    .d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_w(d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_w),
    .d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_we(d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_we),
    .d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_re(d2l_NVDLA_CDP_RDMA_D_PERF_ENABLE_re),
    .d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_w(d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_w),
    .d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_we(d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_we),
    .d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_re(d2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_re),
    .d2l_NVDLA_CDP_RDMA_D_CYA_w(d2l_NVDLA_CDP_RDMA_D_CYA_w),
    .d2l_NVDLA_CDP_RDMA_D_CYA_we(d2l_NVDLA_CDP_RDMA_D_CYA_we),
    .d2l_NVDLA_CDP_RDMA_D_CYA_re(d2l_NVDLA_CDP_RDMA_D_CYA_re),
    .h2l_NVDLA_CDP_RDMA_S_STATUS_STATUS_0_w(h2l_NVDLA_CDP_RDMA_S_STATUS_STATUS_0_w),
    .h2l_NVDLA_CDP_RDMA_S_STATUS_STATUS_1_w(h2l_NVDLA_CDP_RDMA_S_STATUS_STATUS_1_w),
    .h2l_NVDLA_CDP_RDMA_S_POINTER_CONSUMER_w(h2l_NVDLA_CDP_RDMA_S_POINTER_CONSUMER_w),
    .h2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_PERF_READ_STALL_w(h2l_NVDLA_CDP_RDMA_D_PERF_READ_STALL_PERF_READ_STALL_w),
    .l2d_NVDLA_CDP_RDMA_S_STATUS_r(l2d_NVDLA_CDP_RDMA_S_STATUS_r),
    .l2d_NVDLA_CDP_RDMA_S_POINTER_r(l2d_NVDLA_CDP_RDMA_S_POINTER_r),
    .l2d_NVDLA_CDP_RDMA_D_OP_ENABLE_r(l2d_NVDLA_CDP_RDMA_D_OP_ENABLE_r),
    .l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_r(l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_r),
    .l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_r(l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_r),
    .l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_r(l2d_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_r),
    .l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_r(l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_r),
    .l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_r(l2d_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_r),
    .l2d_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_r(l2d_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_r),
    .l2d_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_r(l2d_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_r),
    .l2d_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_r(l2d_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_r),
    .l2d_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_r(l2d_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_r),
    .l2d_NVDLA_CDP_RDMA_D_OPERATION_MODE_r(l2d_NVDLA_CDP_RDMA_D_OPERATION_MODE_r),
    .l2d_NVDLA_CDP_RDMA_D_DATA_FORMAT_r(l2d_NVDLA_CDP_RDMA_D_DATA_FORMAT_r),
    .l2d_NVDLA_CDP_RDMA_D_PERF_ENABLE_r(l2d_NVDLA_CDP_RDMA_D_PERF_ENABLE_r),
    .l2d_NVDLA_CDP_RDMA_D_PERF_READ_STALL_r(l2d_NVDLA_CDP_RDMA_D_PERF_READ_STALL_r),
    .l2d_NVDLA_CDP_RDMA_D_CYA_r(l2d_NVDLA_CDP_RDMA_D_CYA_r),
    .l2h_NVDLA_CDP_RDMA_S_POINTER_PRODUCER_r(l2h_NVDLA_CDP_RDMA_S_POINTER_PRODUCER_r),
    .l2h_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN_r(l2h_NVDLA_CDP_RDMA_D_OP_ENABLE_OP_EN_r),
    .l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH_r(l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_WIDTH_WIDTH_r),
    .l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT_r(l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_HEIGHT_HEIGHT_r),
    .l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL_r(l2h_NVDLA_CDP_RDMA_D_DATA_CUBE_CHANNEL_CHANNEL_r),
    .l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW_r(l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_LOW_SRC_BASE_ADDR_LOW_r),
    .l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH_r(l2h_NVDLA_CDP_RDMA_D_SRC_BASE_ADDR_HIGH_SRC_BASE_ADDR_HIGH_r),
    .l2h_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE_r(l2h_NVDLA_CDP_RDMA_D_SRC_LINE_STRIDE_SRC_LINE_STRIDE_r),
    .l2h_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE_r(l2h_NVDLA_CDP_RDMA_D_SRC_SURFACE_STRIDE_SRC_SURFACE_STRIDE_r),
    .l2h_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE_r(l2h_NVDLA_CDP_RDMA_D_SRC_DMA_CFG_SRC_RAM_TYPE_r),
    .l2h_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_SRC_COMPRESSION_EN_r(l2h_NVDLA_CDP_RDMA_D_SRC_COMPRESSION_EN_SRC_COMPRESSION_EN_r),
    .l2h_NVDLA_CDP_RDMA_D_OPERATION_MODE_OPERATION_MODE_r(l2h_NVDLA_CDP_RDMA_D_OPERATION_MODE_OPERATION_MODE_r),
    .l2h_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA_r(l2h_NVDLA_CDP_RDMA_D_DATA_FORMAT_INPUT_DATA_r),
    .l2h_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN_r(l2h_NVDLA_CDP_RDMA_D_PERF_ENABLE_DMA_EN_r),
    .l2h_NVDLA_CDP_RDMA_D_CYA_CYA_r(l2h_NVDLA_CDP_RDMA_D_CYA_CYA_r) );
    
endmodule

