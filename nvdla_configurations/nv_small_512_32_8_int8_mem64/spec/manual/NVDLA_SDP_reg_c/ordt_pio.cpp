//   Ordt 171103.01 autogenerated file 
//   Input: NVDLA_SDP.rdl
//   Parms: opendla.parms
//   Date: Sat Feb 29 19:31:20 CET 2020
//

#include "ordt_pio_common.hpp"
#include "ordt_pio.hpp"

// ------------------ ordt_addr_elem methods ------------------

ordt_addr_elem::ordt_addr_elem(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : m_startaddress(_m_startaddress),
    m_endaddress(_m_endaddress) {
}

bool  ordt_addr_elem::containsAddress(const uint64_t &addr) {
  return ((addr >= m_startaddress) && (addr <= m_endaddress));
}

bool  ordt_addr_elem::isBelowAddress(const uint64_t &addr) {
  return (addr > m_endaddress);
}

bool  ordt_addr_elem::isAboveAddress(const uint64_t &addr) {
  return (addr < m_startaddress);
}

bool  ordt_addr_elem::hasStartAddress(const uint64_t &addr) {
  return (addr == m_startaddress);
}

void  ordt_addr_elem::update_child_ptrs() {
}

// ------------------ ordt_regset methods ------------------

ordt_addr_elem*  ordt_regset::findAddrElem(const uint64_t &addr) {
  int lo = 0;
  int hi = m_children.size()-1;
  int mid = 0;
  while (lo <= hi) {
     mid = (lo + hi) / 2;
     if (m_children[mid]->containsAddress(addr)) {
        //outElem = m_children[mid];
        return m_children[mid];
     }
     else if (m_children[mid]->isAboveAddress(addr))
        hi = mid - 1;
     else
        lo = mid + 1;
  }
  return nullptr;
}

ordt_regset::ordt_regset(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

int  ordt_regset::write(const uint64_t &addr, const ordt_data &wdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->write(addr, wdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in regset\n";
  #endif
     return 8;
}

int  ordt_regset::read(const uint64_t &addr, ordt_data &rdata) {
     if (this->containsAddress(addr)) {
        childElem = this->findAddrElem(addr);
        if (childElem != nullptr) { return childElem->read(addr, rdata); }
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in regset\n";
  #endif
     rdata.clear();
     return 8;
}

// ------------------ ordt_reg methods ------------------

ordt_reg::ordt_reg(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_addr_elem(_m_startaddress, _m_endaddress) {
}

ordt_reg::ordt_reg(const ordt_reg &_old)
  : ordt_addr_elem(_old),
    m_mutex() {
}

void  ordt_reg::write(const ordt_data &wdata) {
}

int  ordt_reg::write(const uint64_t &addr, const ordt_data &wdata) {
     return 0;
}

void  ordt_reg::read(ordt_data &rdata) {
}

int  ordt_reg::read(const uint64_t &addr, ordt_data &rdata) {
     return 0;
}

// ------------------ ordt_rg_NVDLA_SDP_S_STATUS methods ------------------

ordt_rg_NVDLA_SDP_S_STATUS::ordt_rg_NVDLA_SDP_S_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_0(0, 2, 0x0, r_std, w_none),
    STATUS_1(16, 2, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_S_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_0.write(wdata);
  STATUS_1.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_0.read(rdata);
  STATUS_1.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_POINTER methods ------------------

ordt_rg_NVDLA_SDP_S_POINTER::ordt_rg_NVDLA_SDP_S_POINTER(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PRODUCER(0, 1, 0x0, r_std, w_std),
    CONSUMER(16, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_S_POINTER::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_POINTER at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_POINTER\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_POINTER::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PRODUCER.write(wdata);
  CONSUMER.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_POINTER::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_POINTER at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_POINTER\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_POINTER::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PRODUCER.read(rdata);
  CONSUMER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG::ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_ADDR(0, 10, 0x0, r_std, w_std),
    LUT_TABLE_ID(16, 1, 0x0, r_std, w_std),
    LUT_ACCESS_TYPE(17, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_ADDR.write(wdata);
  LUT_TABLE_ID.write(wdata);
  LUT_ACCESS_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_ADDR.read(rdata);
  LUT_TABLE_ID.read(rdata);
  LUT_ACCESS_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA::ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_DATA(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_DATA.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_ACCESS_DATA::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_DATA.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_CFG methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_CFG::ordt_rg_NVDLA_SDP_S_LUT_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_FUNCTION(0, 1, 0x0, r_std, w_std),
    LUT_UFLOW_PRIORITY(4, 1, 0x0, r_std, w_std),
    LUT_OFLOW_PRIORITY(5, 1, 0x0, r_std, w_std),
    LUT_HYBRID_PRIORITY(6, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_FUNCTION.write(wdata);
  LUT_UFLOW_PRIORITY.write(wdata);
  LUT_OFLOW_PRIORITY.write(wdata);
  LUT_HYBRID_PRIORITY.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_FUNCTION.read(rdata);
  LUT_UFLOW_PRIORITY.read(rdata);
  LUT_OFLOW_PRIORITY.read(rdata);
  LUT_HYBRID_PRIORITY.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_INFO methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_INFO::ordt_rg_NVDLA_SDP_S_LUT_INFO(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_INDEX_OFFSET(0, 8, 0x0, r_std, w_std),
    LUT_LE_INDEX_SELECT(8, 8, 0x0, r_std, w_std),
    LUT_LO_INDEX_SELECT(16, 8, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_INFO::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_INFO at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_INFO\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_INFO::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_INDEX_OFFSET.write(wdata);
  LUT_LE_INDEX_SELECT.write(wdata);
  LUT_LO_INDEX_SELECT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_INFO::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_INFO at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_INFO\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_INFO::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_INDEX_OFFSET.read(rdata);
  LUT_LE_INDEX_SELECT.read(rdata);
  LUT_LO_INDEX_SELECT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LE_START methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LE_START::ordt_rg_NVDLA_SDP_S_LUT_LE_START(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_START(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_START::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LE_START at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_START\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_START::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_START.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_START::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LE_START at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_START\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_START::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_START.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LE_END methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LE_END::ordt_rg_NVDLA_SDP_S_LUT_LE_END(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_END(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_END::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LE_END at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_END\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_END::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_END.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_END::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LE_END at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_END\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_END::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_END.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LO_START methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LO_START::ordt_rg_NVDLA_SDP_S_LUT_LO_START(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_START(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_START::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LO_START at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_START\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_START::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_START.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_START::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LO_START at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_START\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_START::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_START.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LO_END methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LO_END::ordt_rg_NVDLA_SDP_S_LUT_LO_END(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_END(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_END::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LO_END at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_END\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_END::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_END.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_END::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LO_END at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_END\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_END::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_END.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE::ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_SLOPE_UFLOW_SCALE(0, 16, 0x0, r_std, w_std),
    LUT_LE_SLOPE_OFLOW_SCALE(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_SLOPE_UFLOW_SCALE.write(wdata);
  LUT_LE_SLOPE_OFLOW_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SCALE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_SLOPE_UFLOW_SCALE.read(rdata);
  LUT_LE_SLOPE_OFLOW_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT::ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_SLOPE_UFLOW_SHIFT(0, 5, 0x0, r_std, w_std),
    LUT_LE_SLOPE_OFLOW_SHIFT(5, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_SLOPE_UFLOW_SHIFT.write(wdata);
  LUT_LE_SLOPE_OFLOW_SHIFT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LE_SLOPE_SHIFT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_SLOPE_UFLOW_SHIFT.read(rdata);
  LUT_LE_SLOPE_OFLOW_SHIFT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE::ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_SLOPE_UFLOW_SCALE(0, 16, 0x0, r_std, w_std),
    LUT_LO_SLOPE_OFLOW_SCALE(16, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_SLOPE_UFLOW_SCALE.write(wdata);
  LUT_LO_SLOPE_OFLOW_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SCALE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_SLOPE_UFLOW_SCALE.read(rdata);
  LUT_LO_SLOPE_OFLOW_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT methods ------------------

ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT::ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_SLOPE_UFLOW_SHIFT(0, 5, 0x0, r_std, w_std),
    LUT_LO_SLOPE_OFLOW_SHIFT(5, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_SLOPE_UFLOW_SHIFT.write(wdata);
  LUT_LO_SLOPE_OFLOW_SHIFT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_S_LUT_LO_SLOPE_SHIFT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_SLOPE_UFLOW_SHIFT.read(rdata);
  LUT_LO_SLOPE_OFLOW_SHIFT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_OP_ENABLE methods ------------------

ordt_rg_NVDLA_SDP_D_OP_ENABLE::ordt_rg_NVDLA_SDP_D_OP_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OP_EN(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_OP_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_OP_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_OP_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_OP_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OP_EN.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_OP_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_OP_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_OP_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_OP_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OP_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH methods ------------------

ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH::ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WIDTH(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WIDTH.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_CUBE_WIDTH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WIDTH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT methods ------------------

ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT::ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    HEIGHT(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  HEIGHT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_CUBE_HEIGHT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  HEIGHT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL methods ------------------

ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL::ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CHANNEL(0, 13, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CHANNEL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_CUBE_CHANNEL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CHANNEL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW methods ------------------

ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW::ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_BASE_ADDR_LOW(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_BASE_ADDR_LOW.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_LOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_BASE_ADDR_LOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH methods ------------------

ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH::ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_BASE_ADDR_HIGH(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_BASE_ADDR_HIGH.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_BASE_ADDR_HIGH::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_BASE_ADDR_HIGH.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE::ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_LINE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_LINE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_LINE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_LINE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE::ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_SURFACE_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_SURFACE_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_SURFACE_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_SURFACE_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BS_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BS_CFG::ordt_rg_NVDLA_SDP_D_DP_BS_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_BYPASS(0, 1, 0x1, r_std, w_std),
    BS_ALU_BYPASS(1, 1, 0x1, r_std, w_std),
    BS_ALU_ALGO(2, 2, 0x0, r_std, w_std),
    BS_MUL_BYPASS(4, 1, 0x1, r_std, w_std),
    BS_MUL_PRELU(5, 1, 0x1, r_std, w_std),
    BS_RELU_BYPASS(6, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BS_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_BYPASS.write(wdata);
  BS_ALU_BYPASS.write(wdata);
  BS_ALU_ALGO.write(wdata);
  BS_MUL_BYPASS.write(wdata);
  BS_MUL_PRELU.write(wdata);
  BS_RELU_BYPASS.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BS_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_BYPASS.read(rdata);
  BS_ALU_BYPASS.read(rdata);
  BS_ALU_ALGO.read(rdata);
  BS_MUL_BYPASS.read(rdata);
  BS_MUL_PRELU.read(rdata);
  BS_RELU_BYPASS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG::ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_ALU_SRC(0, 1, 0x0, r_std, w_std),
    BS_ALU_SHIFT_VALUE(8, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_ALU_SRC.write(wdata);
  BS_ALU_SHIFT_VALUE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_ALU_SRC.read(rdata);
  BS_ALU_SHIFT_VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE::ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_ALU_OPERAND(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_ALU_OPERAND.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_ALU_SRC_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_ALU_OPERAND.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG::ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_MUL_SRC(0, 1, 0x0, r_std, w_std),
    BS_MUL_SHIFT_VALUE(8, 8, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_MUL_SRC.write(wdata);
  BS_MUL_SHIFT_VALUE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_MUL_SRC.read(rdata);
  BS_MUL_SHIFT_VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE::ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BS_MUL_OPERAND(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BS_MUL_OPERAND.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BS_MUL_SRC_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BS_MUL_OPERAND.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BN_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BN_CFG::ordt_rg_NVDLA_SDP_D_DP_BN_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_BYPASS(0, 1, 0x1, r_std, w_std),
    BN_ALU_BYPASS(1, 1, 0x1, r_std, w_std),
    BN_ALU_ALGO(2, 2, 0x0, r_std, w_std),
    BN_MUL_BYPASS(4, 1, 0x1, r_std, w_std),
    BN_MUL_PRELU(5, 1, 0x0, r_std, w_std),
    BN_RELU_BYPASS(6, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BN_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_BYPASS.write(wdata);
  BN_ALU_BYPASS.write(wdata);
  BN_ALU_ALGO.write(wdata);
  BN_MUL_BYPASS.write(wdata);
  BN_MUL_PRELU.write(wdata);
  BN_RELU_BYPASS.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BN_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_BYPASS.read(rdata);
  BN_ALU_BYPASS.read(rdata);
  BN_ALU_ALGO.read(rdata);
  BN_MUL_BYPASS.read(rdata);
  BN_MUL_PRELU.read(rdata);
  BN_RELU_BYPASS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG::ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_ALU_SRC(0, 1, 0x0, r_std, w_std),
    BN_ALU_SHIFT_VALUE(8, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_ALU_SRC.write(wdata);
  BN_ALU_SHIFT_VALUE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_ALU_SRC.read(rdata);
  BN_ALU_SHIFT_VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE::ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_ALU_OPERAND(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_ALU_OPERAND.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_ALU_SRC_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_ALU_OPERAND.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG::ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_MUL_SRC(0, 1, 0x0, r_std, w_std),
    BN_MUL_SHIFT_VALUE(8, 8, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_MUL_SRC.write(wdata);
  BN_MUL_SHIFT_VALUE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_MUL_SRC.read(rdata);
  BN_MUL_SHIFT_VALUE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE::ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    BN_MUL_OPERAND(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  BN_MUL_OPERAND.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_BN_MUL_SRC_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  BN_MUL_OPERAND.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_CFG::ordt_rg_NVDLA_SDP_D_DP_EW_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_BYPASS(0, 1, 0x1, r_std, w_std),
    EW_ALU_BYPASS(1, 1, 0x1, r_std, w_std),
    EW_ALU_ALGO(2, 2, 0x0, r_std, w_std),
    EW_MUL_BYPASS(4, 1, 0x1, r_std, w_std),
    EW_MUL_PRELU(5, 1, 0x0, r_std, w_std),
    EW_LUT_BYPASS(6, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_BYPASS.write(wdata);
  EW_ALU_BYPASS.write(wdata);
  EW_ALU_ALGO.write(wdata);
  EW_MUL_BYPASS.write(wdata);
  EW_MUL_PRELU.write(wdata);
  EW_LUT_BYPASS.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_BYPASS.read(rdata);
  EW_ALU_BYPASS.read(rdata);
  EW_ALU_ALGO.read(rdata);
  EW_MUL_BYPASS.read(rdata);
  EW_MUL_PRELU.read(rdata);
  EW_LUT_BYPASS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG::ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_ALU_SRC(0, 1, 0x0, r_std, w_std),
    EW_ALU_CVT_BYPASS(1, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_ALU_SRC.write(wdata);
  EW_ALU_CVT_BYPASS.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_ALU_SRC.read(rdata);
  EW_ALU_CVT_BYPASS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_ALU_OPERAND(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_ALU_OPERAND.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_SRC_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_ALU_OPERAND.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_ALU_CVT_OFFSET(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_ALU_CVT_OFFSET.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_OFFSET_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_ALU_CVT_OFFSET.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_ALU_CVT_SCALE(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_ALU_CVT_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_SCALE_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_ALU_CVT_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_ALU_CVT_TRUNCATE(0, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_ALU_CVT_TRUNCATE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_ALU_CVT_TRUNCATE_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_ALU_CVT_TRUNCATE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG::ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_MUL_SRC(0, 1, 0x0, r_std, w_std),
    EW_MUL_CVT_BYPASS(1, 1, 0x1, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_MUL_SRC.write(wdata);
  EW_MUL_CVT_BYPASS.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_MUL_SRC.read(rdata);
  EW_MUL_CVT_BYPASS.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_MUL_OPERAND(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_MUL_OPERAND.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_SRC_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_MUL_OPERAND.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_MUL_CVT_OFFSET(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_MUL_CVT_OFFSET.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_OFFSET_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_MUL_CVT_OFFSET.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_MUL_CVT_SCALE(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_MUL_CVT_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_SCALE_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_MUL_CVT_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_MUL_CVT_TRUNCATE(0, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_MUL_CVT_TRUNCATE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_MUL_CVT_TRUNCATE_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_MUL_CVT_TRUNCATE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE methods ------------------

ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE::ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    EW_TRUNCATE(0, 10, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  EW_TRUNCATE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DP_EW_TRUNCATE_VALUE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  EW_TRUNCATE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG::ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    FLYING_MODE(0, 1, 0x0, r_std, w_std),
    OUTPUT_DST(1, 1, 0x0, r_std, w_std),
    WINOGRAD(2, 1, 0x0, r_std, w_std),
    NAN_TO_ZERO(3, 1, 0x0, r_std, w_std),
    BATCH_NUMBER(8, 5, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  FLYING_MODE.write(wdata);
  OUTPUT_DST.write(wdata);
  WINOGRAD.write(wdata);
  NAN_TO_ZERO.write(wdata);
  BATCH_NUMBER.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_FEATURE_MODE_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  FLYING_MODE.read(rdata);
  OUTPUT_DST.read(rdata);
  WINOGRAD.read(rdata);
  NAN_TO_ZERO.read(rdata);
  BATCH_NUMBER.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DST_DMA_CFG methods ------------------

ordt_rg_NVDLA_SDP_D_DST_DMA_CFG::ordt_rg_NVDLA_SDP_D_DST_DMA_CFG(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_RAM_TYPE(0, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DST_DMA_CFG::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DST_DMA_CFG at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_DMA_CFG\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_DMA_CFG::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_RAM_TYPE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DST_DMA_CFG::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DST_DMA_CFG at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_DMA_CFG\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_DMA_CFG::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_RAM_TYPE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE methods ------------------

ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE::ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    DST_BATCH_STRIDE(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  DST_BATCH_STRIDE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DST_BATCH_STRIDE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  DST_BATCH_STRIDE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_DATA_FORMAT methods ------------------

ordt_rg_NVDLA_SDP_D_DATA_FORMAT::ordt_rg_NVDLA_SDP_D_DATA_FORMAT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PROC_PRECISION(0, 2, 0x0, r_std, w_std),
    OUT_PRECISION(2, 2, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_DATA_FORMAT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_DATA_FORMAT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_FORMAT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_FORMAT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PROC_PRECISION.write(wdata);
  OUT_PRECISION.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_DATA_FORMAT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_DATA_FORMAT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_DATA_FORMAT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_DATA_FORMAT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PROC_PRECISION.read(rdata);
  OUT_PRECISION.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_CVT_OFFSET methods ------------------

ordt_rg_NVDLA_SDP_D_CVT_OFFSET::ordt_rg_NVDLA_SDP_D_CVT_OFFSET(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CVT_OFFSET(0, 32, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_CVT_OFFSET::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_CVT_OFFSET at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_CVT_OFFSET\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_CVT_OFFSET::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CVT_OFFSET.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_CVT_OFFSET::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_CVT_OFFSET at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_CVT_OFFSET\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_CVT_OFFSET::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CVT_OFFSET.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_CVT_SCALE methods ------------------

ordt_rg_NVDLA_SDP_D_CVT_SCALE::ordt_rg_NVDLA_SDP_D_CVT_SCALE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CVT_SCALE(0, 16, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_CVT_SCALE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_CVT_SCALE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_CVT_SCALE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_CVT_SCALE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CVT_SCALE.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_CVT_SCALE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_CVT_SCALE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_CVT_SCALE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_CVT_SCALE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CVT_SCALE.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_CVT_SHIFT methods ------------------

ordt_rg_NVDLA_SDP_D_CVT_SHIFT::ordt_rg_NVDLA_SDP_D_CVT_SHIFT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    CVT_SHIFT(0, 6, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_CVT_SHIFT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_CVT_SHIFT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_CVT_SHIFT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_CVT_SHIFT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  CVT_SHIFT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_CVT_SHIFT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_CVT_SHIFT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_CVT_SHIFT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_CVT_SHIFT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  CVT_SHIFT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_STATUS methods ------------------

ordt_rg_NVDLA_SDP_D_STATUS::ordt_rg_NVDLA_SDP_D_STATUS(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_UNEQUAL(0, 1, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_STATUS::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_STATUS at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_UNEQUAL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_STATUS::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_STATUS at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_UNEQUAL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM methods ------------------

ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM::ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_NAN_INPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_NAN_INPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS_NAN_INPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_NAN_INPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM methods ------------------

ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM::ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_INF_INPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_INF_INPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS_INF_INPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_INF_INPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM methods ------------------

ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM::ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    STATUS_NAN_OUTPUT_NUM(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  STATUS_NAN_OUTPUT_NUM.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_STATUS_NAN_OUTPUT_NUM::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  STATUS_NAN_OUTPUT_NUM.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_ENABLE methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_ENABLE::ordt_rg_NVDLA_SDP_D_PERF_ENABLE(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    PERF_DMA_EN(0, 1, 0x0, r_std, w_std),
    PERF_LUT_EN(1, 1, 0x0, r_std, w_std),
    PERF_SAT_EN(2, 1, 0x0, r_std, w_std),
    PERF_NAN_INF_COUNT_EN(3, 1, 0x0, r_std, w_std) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_ENABLE::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_ENABLE at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_ENABLE\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_ENABLE::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  PERF_DMA_EN.write(wdata);
  PERF_LUT_EN.write(wdata);
  PERF_SAT_EN.write(wdata);
  PERF_NAN_INF_COUNT_EN.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_ENABLE::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_ENABLE at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_ENABLE\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_ENABLE::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  PERF_DMA_EN.read(rdata);
  PERF_LUT_EN.read(rdata);
  PERF_SAT_EN.read(rdata);
  PERF_NAN_INF_COUNT_EN.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL::ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    WDMA_STALL(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  WDMA_STALL.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_WDMA_WRITE_STALL::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  WDMA_STALL.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW::ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_UFLOW(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_UFLOW.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_UFLOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_UFLOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW::ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_OFLOW(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_OFLOW.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_OFLOW::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_OFLOW.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION::ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    OUT_SATURATION(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  OUT_SATURATION.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_OUT_SATURATION::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  OUT_SATURATION.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID::ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_HYBRID(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_HYBRID.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_HYBRID::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_HYBRID.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT::ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LE_HIT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LE_HIT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_LE_HIT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LE_HIT.read(rdata);
}

// ------------------ ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT methods ------------------

ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT::ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_reg(_m_startaddress, _m_endaddress),
    LUT_LO_HIT(0, 32, 0x0, r_std, w_none) {
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT::write(const uint64_t &addr, const ordt_data &wdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT at addr="<< addr << ", data=" << wdata.to_string() << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->write(wdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> write to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT\n";
  #endif
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT::write(const ordt_data &wdata) {
  std::lock_guard<std::mutex> m_guard(m_mutex);
  LUT_LO_HIT.write(wdata);
}

int  ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT::read(const uint64_t &addr, ordt_data &rdata) {
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read of reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT at addr="<< addr << "\n";
  #endif
     if (this->hasStartAddress(addr)) {
        this->read(rdata);
        return 0;
     }
  #ifdef ORDT_PIO_VERBOSE
     std::cout << "--> read to invalid address " << addr << " in reg ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT\n";
  #endif
     rdata.clear();
     return 8;
}

void  ordt_rg_NVDLA_SDP_D_PERF_LUT_LO_HIT::read(ordt_data &rdata) {
  rdata.clear();
  for (int widx=0; widx<((m_endaddress - m_startaddress + 1)/4); widx++) rdata.push_back(0);
  LUT_LO_HIT.read(rdata);
}

// ------------------ ordt_rset_NVDLA_SDP methods ------------------

ordt_rset_NVDLA_SDP::ordt_rset_NVDLA_SDP(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    S_STATUS(_m_startaddress + 0x0, _m_startaddress + 0x3),
    S_POINTER(_m_startaddress + 0x4, _m_startaddress + 0x7),
    S_LUT_ACCESS_CFG(_m_startaddress + 0x8, _m_startaddress + 0xb),
    S_LUT_ACCESS_DATA(_m_startaddress + 0xc, _m_startaddress + 0xf),
    S_LUT_CFG(_m_startaddress + 0x10, _m_startaddress + 0x13),
    S_LUT_INFO(_m_startaddress + 0x14, _m_startaddress + 0x17),
    S_LUT_LE_START(_m_startaddress + 0x18, _m_startaddress + 0x1b),
    S_LUT_LE_END(_m_startaddress + 0x1c, _m_startaddress + 0x1f),
    S_LUT_LO_START(_m_startaddress + 0x20, _m_startaddress + 0x23),
    S_LUT_LO_END(_m_startaddress + 0x24, _m_startaddress + 0x27),
    S_LUT_LE_SLOPE_SCALE(_m_startaddress + 0x28, _m_startaddress + 0x2b),
    S_LUT_LE_SLOPE_SHIFT(_m_startaddress + 0x2c, _m_startaddress + 0x2f),
    S_LUT_LO_SLOPE_SCALE(_m_startaddress + 0x30, _m_startaddress + 0x33),
    S_LUT_LO_SLOPE_SHIFT(_m_startaddress + 0x34, _m_startaddress + 0x37),
    D_OP_ENABLE(_m_startaddress + 0x38, _m_startaddress + 0x3b),
    D_DATA_CUBE_WIDTH(_m_startaddress + 0x3c, _m_startaddress + 0x3f),
    D_DATA_CUBE_HEIGHT(_m_startaddress + 0x40, _m_startaddress + 0x43),
    D_DATA_CUBE_CHANNEL(_m_startaddress + 0x44, _m_startaddress + 0x47),
    D_DST_BASE_ADDR_LOW(_m_startaddress + 0x48, _m_startaddress + 0x4b),
    D_DST_BASE_ADDR_HIGH(_m_startaddress + 0x4c, _m_startaddress + 0x4f),
    D_DST_LINE_STRIDE(_m_startaddress + 0x50, _m_startaddress + 0x53),
    D_DST_SURFACE_STRIDE(_m_startaddress + 0x54, _m_startaddress + 0x57),
    D_DP_BS_CFG(_m_startaddress + 0x58, _m_startaddress + 0x5b),
    D_DP_BS_ALU_CFG(_m_startaddress + 0x5c, _m_startaddress + 0x5f),
    D_DP_BS_ALU_SRC_VALUE(_m_startaddress + 0x60, _m_startaddress + 0x63),
    D_DP_BS_MUL_CFG(_m_startaddress + 0x64, _m_startaddress + 0x67),
    D_DP_BS_MUL_SRC_VALUE(_m_startaddress + 0x68, _m_startaddress + 0x6b),
    D_DP_BN_CFG(_m_startaddress + 0x6c, _m_startaddress + 0x6f),
    D_DP_BN_ALU_CFG(_m_startaddress + 0x70, _m_startaddress + 0x73),
    D_DP_BN_ALU_SRC_VALUE(_m_startaddress + 0x74, _m_startaddress + 0x77),
    D_DP_BN_MUL_CFG(_m_startaddress + 0x78, _m_startaddress + 0x7b),
    D_DP_BN_MUL_SRC_VALUE(_m_startaddress + 0x7c, _m_startaddress + 0x7f),
    D_DP_EW_CFG(_m_startaddress + 0x80, _m_startaddress + 0x83),
    D_DP_EW_ALU_CFG(_m_startaddress + 0x84, _m_startaddress + 0x87),
    D_DP_EW_ALU_SRC_VALUE(_m_startaddress + 0x88, _m_startaddress + 0x8b),
    D_DP_EW_ALU_CVT_OFFSET_VALUE(_m_startaddress + 0x8c, _m_startaddress + 0x8f),
    D_DP_EW_ALU_CVT_SCALE_VALUE(_m_startaddress + 0x90, _m_startaddress + 0x93),
    D_DP_EW_ALU_CVT_TRUNCATE_VALUE(_m_startaddress + 0x94, _m_startaddress + 0x97),
    D_DP_EW_MUL_CFG(_m_startaddress + 0x98, _m_startaddress + 0x9b),
    D_DP_EW_MUL_SRC_VALUE(_m_startaddress + 0x9c, _m_startaddress + 0x9f),
    D_DP_EW_MUL_CVT_OFFSET_VALUE(_m_startaddress + 0xa0, _m_startaddress + 0xa3),
    D_DP_EW_MUL_CVT_SCALE_VALUE(_m_startaddress + 0xa4, _m_startaddress + 0xa7),
    D_DP_EW_MUL_CVT_TRUNCATE_VALUE(_m_startaddress + 0xa8, _m_startaddress + 0xab),
    D_DP_EW_TRUNCATE_VALUE(_m_startaddress + 0xac, _m_startaddress + 0xaf),
    D_FEATURE_MODE_CFG(_m_startaddress + 0xb0, _m_startaddress + 0xb3),
    D_DST_DMA_CFG(_m_startaddress + 0xb4, _m_startaddress + 0xb7),
    D_DST_BATCH_STRIDE(_m_startaddress + 0xb8, _m_startaddress + 0xbb),
    D_DATA_FORMAT(_m_startaddress + 0xbc, _m_startaddress + 0xbf),
    D_CVT_OFFSET(_m_startaddress + 0xc0, _m_startaddress + 0xc3),
    D_CVT_SCALE(_m_startaddress + 0xc4, _m_startaddress + 0xc7),
    D_CVT_SHIFT(_m_startaddress + 0xc8, _m_startaddress + 0xcb),
    D_STATUS(_m_startaddress + 0xcc, _m_startaddress + 0xcf),
    D_STATUS_NAN_INPUT_NUM(_m_startaddress + 0xd0, _m_startaddress + 0xd3),
    D_STATUS_INF_INPUT_NUM(_m_startaddress + 0xd4, _m_startaddress + 0xd7),
    D_STATUS_NAN_OUTPUT_NUM(_m_startaddress + 0xd8, _m_startaddress + 0xdb),
    D_PERF_ENABLE(_m_startaddress + 0xdc, _m_startaddress + 0xdf),
    D_PERF_WDMA_WRITE_STALL(_m_startaddress + 0xe0, _m_startaddress + 0xe3),
    D_PERF_LUT_UFLOW(_m_startaddress + 0xe4, _m_startaddress + 0xe7),
    D_PERF_LUT_OFLOW(_m_startaddress + 0xe8, _m_startaddress + 0xeb),
    D_PERF_OUT_SATURATION(_m_startaddress + 0xec, _m_startaddress + 0xef),
    D_PERF_LUT_HYBRID(_m_startaddress + 0xf0, _m_startaddress + 0xf3),
    D_PERF_LUT_LE_HIT(_m_startaddress + 0xf4, _m_startaddress + 0xf7),
    D_PERF_LUT_LO_HIT(_m_startaddress + 0xf8, _m_startaddress + 0xfb) {
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&S_LUT_ACCESS_CFG);
  m_children.push_back(&S_LUT_ACCESS_DATA);
  m_children.push_back(&S_LUT_CFG);
  m_children.push_back(&S_LUT_INFO);
  m_children.push_back(&S_LUT_LE_START);
  m_children.push_back(&S_LUT_LE_END);
  m_children.push_back(&S_LUT_LO_START);
  m_children.push_back(&S_LUT_LO_END);
  m_children.push_back(&S_LUT_LE_SLOPE_SCALE);
  m_children.push_back(&S_LUT_LE_SLOPE_SHIFT);
  m_children.push_back(&S_LUT_LO_SLOPE_SCALE);
  m_children.push_back(&S_LUT_LO_SLOPE_SHIFT);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_WIDTH);
  m_children.push_back(&D_DATA_CUBE_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_CHANNEL);
  m_children.push_back(&D_DST_BASE_ADDR_LOW);
  m_children.push_back(&D_DST_BASE_ADDR_HIGH);
  m_children.push_back(&D_DST_LINE_STRIDE);
  m_children.push_back(&D_DST_SURFACE_STRIDE);
  m_children.push_back(&D_DP_BS_CFG);
  m_children.push_back(&D_DP_BS_ALU_CFG);
  m_children.push_back(&D_DP_BS_ALU_SRC_VALUE);
  m_children.push_back(&D_DP_BS_MUL_CFG);
  m_children.push_back(&D_DP_BS_MUL_SRC_VALUE);
  m_children.push_back(&D_DP_BN_CFG);
  m_children.push_back(&D_DP_BN_ALU_CFG);
  m_children.push_back(&D_DP_BN_ALU_SRC_VALUE);
  m_children.push_back(&D_DP_BN_MUL_CFG);
  m_children.push_back(&D_DP_BN_MUL_SRC_VALUE);
  m_children.push_back(&D_DP_EW_CFG);
  m_children.push_back(&D_DP_EW_ALU_CFG);
  m_children.push_back(&D_DP_EW_ALU_SRC_VALUE);
  m_children.push_back(&D_DP_EW_ALU_CVT_OFFSET_VALUE);
  m_children.push_back(&D_DP_EW_ALU_CVT_SCALE_VALUE);
  m_children.push_back(&D_DP_EW_ALU_CVT_TRUNCATE_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CFG);
  m_children.push_back(&D_DP_EW_MUL_SRC_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CVT_OFFSET_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CVT_SCALE_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CVT_TRUNCATE_VALUE);
  m_children.push_back(&D_DP_EW_TRUNCATE_VALUE);
  m_children.push_back(&D_FEATURE_MODE_CFG);
  m_children.push_back(&D_DST_DMA_CFG);
  m_children.push_back(&D_DST_BATCH_STRIDE);
  m_children.push_back(&D_DATA_FORMAT);
  m_children.push_back(&D_CVT_OFFSET);
  m_children.push_back(&D_CVT_SCALE);
  m_children.push_back(&D_CVT_SHIFT);
  m_children.push_back(&D_STATUS);
  m_children.push_back(&D_STATUS_NAN_INPUT_NUM);
  m_children.push_back(&D_STATUS_INF_INPUT_NUM);
  m_children.push_back(&D_STATUS_NAN_OUTPUT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_WDMA_WRITE_STALL);
  m_children.push_back(&D_PERF_LUT_UFLOW);
  m_children.push_back(&D_PERF_LUT_OFLOW);
  m_children.push_back(&D_PERF_OUT_SATURATION);
  m_children.push_back(&D_PERF_LUT_HYBRID);
  m_children.push_back(&D_PERF_LUT_LE_HIT);
  m_children.push_back(&D_PERF_LUT_LO_HIT);
}

void  ordt_rset_NVDLA_SDP::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&S_STATUS);
  m_children.push_back(&S_POINTER);
  m_children.push_back(&S_LUT_ACCESS_CFG);
  m_children.push_back(&S_LUT_ACCESS_DATA);
  m_children.push_back(&S_LUT_CFG);
  m_children.push_back(&S_LUT_INFO);
  m_children.push_back(&S_LUT_LE_START);
  m_children.push_back(&S_LUT_LE_END);
  m_children.push_back(&S_LUT_LO_START);
  m_children.push_back(&S_LUT_LO_END);
  m_children.push_back(&S_LUT_LE_SLOPE_SCALE);
  m_children.push_back(&S_LUT_LE_SLOPE_SHIFT);
  m_children.push_back(&S_LUT_LO_SLOPE_SCALE);
  m_children.push_back(&S_LUT_LO_SLOPE_SHIFT);
  m_children.push_back(&D_OP_ENABLE);
  m_children.push_back(&D_DATA_CUBE_WIDTH);
  m_children.push_back(&D_DATA_CUBE_HEIGHT);
  m_children.push_back(&D_DATA_CUBE_CHANNEL);
  m_children.push_back(&D_DST_BASE_ADDR_LOW);
  m_children.push_back(&D_DST_BASE_ADDR_HIGH);
  m_children.push_back(&D_DST_LINE_STRIDE);
  m_children.push_back(&D_DST_SURFACE_STRIDE);
  m_children.push_back(&D_DP_BS_CFG);
  m_children.push_back(&D_DP_BS_ALU_CFG);
  m_children.push_back(&D_DP_BS_ALU_SRC_VALUE);
  m_children.push_back(&D_DP_BS_MUL_CFG);
  m_children.push_back(&D_DP_BS_MUL_SRC_VALUE);
  m_children.push_back(&D_DP_BN_CFG);
  m_children.push_back(&D_DP_BN_ALU_CFG);
  m_children.push_back(&D_DP_BN_ALU_SRC_VALUE);
  m_children.push_back(&D_DP_BN_MUL_CFG);
  m_children.push_back(&D_DP_BN_MUL_SRC_VALUE);
  m_children.push_back(&D_DP_EW_CFG);
  m_children.push_back(&D_DP_EW_ALU_CFG);
  m_children.push_back(&D_DP_EW_ALU_SRC_VALUE);
  m_children.push_back(&D_DP_EW_ALU_CVT_OFFSET_VALUE);
  m_children.push_back(&D_DP_EW_ALU_CVT_SCALE_VALUE);
  m_children.push_back(&D_DP_EW_ALU_CVT_TRUNCATE_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CFG);
  m_children.push_back(&D_DP_EW_MUL_SRC_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CVT_OFFSET_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CVT_SCALE_VALUE);
  m_children.push_back(&D_DP_EW_MUL_CVT_TRUNCATE_VALUE);
  m_children.push_back(&D_DP_EW_TRUNCATE_VALUE);
  m_children.push_back(&D_FEATURE_MODE_CFG);
  m_children.push_back(&D_DST_DMA_CFG);
  m_children.push_back(&D_DST_BATCH_STRIDE);
  m_children.push_back(&D_DATA_FORMAT);
  m_children.push_back(&D_CVT_OFFSET);
  m_children.push_back(&D_CVT_SCALE);
  m_children.push_back(&D_CVT_SHIFT);
  m_children.push_back(&D_STATUS);
  m_children.push_back(&D_STATUS_NAN_INPUT_NUM);
  m_children.push_back(&D_STATUS_INF_INPUT_NUM);
  m_children.push_back(&D_STATUS_NAN_OUTPUT_NUM);
  m_children.push_back(&D_PERF_ENABLE);
  m_children.push_back(&D_PERF_WDMA_WRITE_STALL);
  m_children.push_back(&D_PERF_LUT_UFLOW);
  m_children.push_back(&D_PERF_LUT_OFLOW);
  m_children.push_back(&D_PERF_OUT_SATURATION);
  m_children.push_back(&D_PERF_LUT_HYBRID);
  m_children.push_back(&D_PERF_LUT_LE_HIT);
  m_children.push_back(&D_PERF_LUT_LO_HIT);
}

// ------------------ ordt_root methods ------------------

ordt_root::ordt_root()
  : ordt_root(0x0, 0x90fb) {
}

ordt_root::ordt_root(uint64_t _m_startaddress, uint64_t _m_endaddress)
  : ordt_regset(_m_startaddress, _m_endaddress),
    NVDLA_SDP(_m_startaddress + 0x9000, _m_startaddress + 0x90ff) {
  m_children.push_back(&NVDLA_SDP);
}

void  ordt_root::update_child_ptrs() {
  m_children.clear();
  m_children.push_back(&NVDLA_SDP);
}

