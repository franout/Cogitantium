#!/bin/usr/python3
from pynq import Overlay
from pynq import MMIO
from pynq import allocate
from pynq.lib import dma
from pynq import Xlnk
import time
_use_test_vector=True
######################################### 
############ MEMORY MAP #################
#########################################
BASE_ADDRESS_ACCELERATOR=0x43C00000
ADDRESS_RANGE_ACCELERATOR=0x10000

# address reg offset 
CTRL =0x0000
STATUS =0x0004
IARG_RQT_EN =0x0010
OARG_RQT_EN =0x0014
CMD =0x0028 
OARG_LENGTH_MODE =0x003C 
ISCALAR_FIFO_RST =0x0040 
OSCALAR_FIFO_RST =0x0044 
ISCALAR_RQT_EN =0x0048 
OSCALAR_RQT_EN =0x004C 
ISCALAR0_DATA =0x0080 
ISCALAR1_DATA =0x0084 
ISCALAR2_DATA =0x0088 
ISCALAR3_DATA =0x008C 
ISCALAR4_DATA =0x0090 
ISCALAR5_DATA =0x0094 
ISCALAR6_DATA =0x0098 
ISCALAR7_DATA =0x009C
ISCALAR8_DATA =0x00A0
ISCALAR9_DATA =0x00A4
ISCALAR10_DATA=0x00A8
ISCALAR11_DATA =0x00AC
ISCALAR12_DATA =0x00B0
ISCALAR13_DATA =0x00B4
ISCALAR14_DATA =0x00B8
ISCALAR15_DATA =0x00BC
OSCALAR0_DATA =0x00C0
OSCALAR1_DATA =0x00C4
OSCALAR2_DATA =0x00C8
OSCALAR3_DATA =0x00CC
OSCALAR4_DATA =0x00D0
OSCALAR5_DATA =0x00D4
OSCALAR6_DATA =0x00D8
OSCALAR7_DATA =0x00DC
IARG0_STATUS =0x0100
IARG1_STATUS =0x0104
IARG2_STATUS =0x0108
IARG3_STATUS =0x010C
IARG4_STATUS =0x0110
IARG5_STATUS =0x0114
IARG6_STATUS =0x0118
IARG7_STATUS =0x011C
OARG0_STATUS =0x0140
OARG1_STATUS =0x0144
OARG2_STATUS =0x0148
OARG3_STATUS =0x014C
OARG4_STATUS =0x0150
OARG5_STATUS =0x0154
OARG6_STATUS =0x0158
OARG7_STATUS =0x015C
ISCALAR0_STATUS =0x0180
ISCALAR1_STATUS =0x0184
ISCALAR2_STATUS =0x0188
ISCALAR3_STATUS =0x018C
ISCALAR4_STATUS =0x0190 
ISCALAR5_STATUS =0x0194 
ISCALAR6_STATUS =0x0198 
ISCALAR7_STATUS =0x019C 
ISCALAR8_STATUS =0x01A0 
ISCALAR9_STATUS =0x01A4 
ISCALAR10_STATUS =0x01A8 
ISCALAR11_STATUS =0x01AC 
ISCALAR12_STATUS =0x01B0 
ISCALAR13_STATUS =0x01B4 
ISCALAR14_STATUS =0x01B8 
ISCALAR15_STATUS =0x01BC 
OSCALAR0_STATUS =0x01C0 
OSCALAR1_STATUS =0x01C4 
OSCALAR2_STATUS =0x01C8 
OSCALAR3_STATUS =0x01CC 
OSCALAR4_STATUS =0x01D0 
OSCALAR5_STATUS =0x01D4 
OSCALAR6_STATUS =0x01D8 
OSCALAR7_STATUS =0x01DC 
OSCALAR8_STATUS =0x01E0 
OSCALAR9_STATUS =0x01E4 
OSCALAR10_STATUS =0x01E8 
OSCALAR11_STATUS =0x01EC 
OSCALAR12_STATUS =0x01F0 
OSCALAR13_STATUS =0x01F4 
OSCALAR14_STATUS =0x01F8 
OSCALAR15_STATUS =0x01FC 
OARG0_LENGTH =0x0200 
OARG1_LENGTH =0x0204 
OARG2_LENGTH =0x0208 
OARG3_LENGTH =0x020C 
OARG4_LENGTH =0x0210 
OARG5_LENGTH =0x0214 
OARG6_LENGTH =0x0218 
OARG7_LENGTH =0x021C 
OARG0_TDEST =0x0240 
OARG1_TDEST =0x0244 
OARG2_TDEST =0x0248 
OARG3_TDEST =0x024C 
OARG4_TDEST =0x0250 
OARG5_TDEST =0x0254 
OARG6_TDEST =0x0258 
OARG7_TDEST =0x025C 
BASE_ADDRESS_INTC=0x40800000
ADDRESS_RANGE_INTC=0x10000


BASE_ADDRESS_DMA_INFIFO=0x40400000
ADDRESS_RANGE_DMA_INFIFO=0x10000
BASE_ADDRESS_DMA_WM=0x40410000
ADDRESS_RANGE_DMA_WM=0x10000

if _use_test_vector:
	test_weight_buffer=[
	0x3cf881,0x723756,0x2ac65b,0x0,0x0,0x0,0x0,0x0,
	0x232e40,0x6b38de,0xc581b7,0x0,0x0,0x0,0x0,0x0,
	0x39f2ce,0xe68107,0xd8153f,0x0,0x0,0x0,0x0,0x0,
	0x207f75,0x13743b,0xc9085b,0x0,0x0,0x0,0x0,0x0,
	0x23394b,0x104a19,0xee9981,0x0,0x0,0x0,0x0,0x0,
	0x6c0e81,0x3e2984,0x3b3a9d,0x0,0x0,0x0,0x0,0x0,
	0x70673c,0x3cdcb4,0xb5ad81,0x0,0x0,0x0,0x0,0x0,
	0x752adf,0x7f01bf,0xf89f7d,0x0,0x0,0x0,0x0,0x0,
	0x7040e5,0x4ab4b8,0x8d81f8,0x0,0x0,0x0,0x0,0x0,
	0x455238,0xe81d3e,0xa8818e,0x0,0x0,0x0,0x0,0x0,
	0x606af2,0x7fdf19,0x4b53c6,0x0,0x0,0x0,0x0,0x0,
	0x5a0a73,0x727fe4,0x7b780c,0x0,0x0,0x0,0x0,0x0]
	test_input_fifo_buffer= [
	0xd58250, 0xea27fe, 0x1807f0, 0x31d582, 0x61ea27,
	0x781807,0xe931d5,0xd461ea,0x2c7818,0x2be931,0x3dd461,
	0xda2c78,0xab2be9,0xde3dd4,0xd2da2c,0x2dab2b,0x7fde3d,0xbdd2da,0x3b2dab,0xb37fde,
	0x90bdd2,0xc53b2d,0xd6b37f,0xf190bd,0x8c53b,0xf0d6b3,0x90f190,
	0x908c5,0xa7f0d6,0xaa90f1,0x200908,0xa8a7f0,0x39aa90,0x4f2009,0x89a8a7,0x4d39aa,
	0xec4f20,0xc089a8,0x874d39, 0x35ec4f, 0x8ac089, 0x4c874d, 0xbc35ec,0x5a8ac0,
	0xc84c87,0x88bc35,0xb15a8a,0x96c84c,0x2688bc,0xb5b15a,0xdd96c8,0xad2688,0x8b5b1,
	0xc3dd96,0x45ad26,0x3908b5,0x93c3dd,0x6645ad,0xa13908,0xd093c3,0xf56645,
	0xc9a139,0xa6d093,0xfaf566,0xcec9a1,0x18a6d0,0x4faf5,0x98cec9,0xe018a6,0xa804fa,
	0x6d98ce,0xc4e018,0xb8a804,0x176d98,0x35c4e0,0xea27fe,0x1807f0,0x254ae8,0x61ea27,0x781807,0x15254a,0xd461ea,0x2c7818,0xcf1525,0x3dd461,
	0xda2c78,0xc1cf15,0xde3dd4,0xd2da2c,0x80c1cf,0x7fde3d,0xbdd2da,0x2d80c1,0xb37fde,
	0x90bdd2,0xb72d80,0xd6b37f,0xf190bd,0x10b72d,0xf0d6b3,0x90f190,0xa910b7,0xa7f0d6,0xaa90f1,0x4fa910,0xa8a7f0,0x39aa90,0x384fa9,
	0x89a8a7,0x4d39aa,0xe7384f,0xc089a8,0x874d39,0xf3e738,0x8ac089,0x4c874d,0xc7f3e7,0x5a8ac0,0xc84c87,0xa7c7f3,
	0xb15a8a,0x96c84c,0xfa7c7,0xb5b15a,0xdd96c8,0x210fa7,0x8b5b1,0xc3dd96,0xd210f,
	0x3908b5,0x93c3dd,0x710d21,0xa13908,0xd093c3,0xab710d,0xc9a139,0xa6d093,0x51ab71,0xcec9a1,
	0x18a6d0,0x3651ab,0x98cec9,0xe018a6,0x6a3651,0x6d98ce,0xc4e018,0x2f6a36,0x176d98,0x35c4e0,0xc02f6a,
	0x1807f0,0x254ae8,0x8e9f86,0x781807,0x15254a,0x6f8e9f,0x2c7818,0xcf1525,
	0xc36f8e,0xda2c78,0xc1cf15,0x75c36f,0xd2da2c,0x80c1cf,0x2975c3,0xbdd2da,0x2d80c1,
	0x792975,0x90bdd2,0xb72d80,0x367929,0xf190bd,0x10b72d,0xa33679,0x90f190,0xa910b7,0x5ca336,0xaa90f1,
	0x4fa910,0xa85ca3,0x39aa90,0x384fa9,0xd7a85c,0x4d39aa,0xe7384f,0xf3d7a8,0x874d39,
	0xf3e738,0x50f3d7,0x4c874d,0xc7f3e7,0xdb50f3,0xc84c87,0xa7c7f3,0x52db50,0x96c84c,0xfa7c7,0xed52db,
	0xdd96c8,0x210fa7,0x22ed52,0xc3dd96,0xd210f,0xd122ed,0x93c3dd,0x710d21,0x14d122,0xd093c3,0xab710d,
	0xe814d1,0xa6d093,0x51ab71,0xe7e814,0x18a6d0,0x3651ab,0x4ee7e8,0xe018a6,0x6a3651,0x9a4ee7,0xc4e018,
	0x2f6a36,0x709a4e,0x35c4e0,0xc02f6a,0x9709a,0x254ae8,0x8e9f86, 0xfb20b6,0x15254a,0x6f8e9f,0x4afb20,
	0xcf1525,0xc36f8e,0xdf4afb,0xc1cf15,0x75c36f,0x32df4a,0x80c1cf,0x2975c3,0x6132df,0x2d80c1,0x792975,
	0x506132,0xb72d80,0x367929,0x305061,0x10b72d,0xa33679,0xc53050,0xa910b7,0x5ca336,0x1bc530,0x4fa910,
	0xa85ca3,0x5f1bc5,0x384fa9,0xd7a85c,0x405f1b,0xe7384f,0xf3d7a8,0x89405f,0xf3e738,0x50f3d7,0xe08940,
	0xc7f3e7,0xdb50f3,0x1be089,0xa7c7f3,0x52db50,0xcd1be0,0xfa7c7,0xed52db,0xa8cd1b,0x210fa7,0x22ed52,
	0x81a8cd,0xd210f,0xd122ed,0xf681a8,0x710d21,0x14d122,0x9af681,0xab710d,0xe814d1,0xb9af6,0x51ab71,0xe7e814,
	0x5b0b9a,0x3651ab,0x4ee7e8,0xde5b0b,0x6a3651,0x9a4ee7,0xde5b,0x2f6a36,0x709a4e,0xcb00de,0xc02f6a,0x9709a,
	0xb0cb00,0x8e9f86,0xfb20b6,0x17b707,0x6f8e9f,0x4afb20,0x8e17b7,0xc36f8e,0xdf4afb,0x1e8e17,0x75c36f,0x32df4a,
	0xe31e8e,0x2975c3,0x6132df,0xc8e31e,0x792975,0x506132,0xa0c8e3,0x367929,0x305061,0xaca0c8,0xa33679,0xc53050,
	0xfeaca0,0x5ca336,0x1bc530,0xedfeac,0xa85ca3,0x5f1bc5,0x2fedfe,0xd7a85c,0x405f1b,0xc22fed,0xf3d7a8,0x89405f,
	0xd7c22f,0x50f3d7,0xe08940,0x6cd7c2,0xdb50f3,0x1be089,0xd26cd7,0x52db50,0xcd1be0,0xf0d26c,0xed52db,0xa8cd1b,
	0xe1f0d2,0x22ed52,0x81a8cd,0xace1f0,0xd122ed,0xf681a8,0x5bace1,0x14d122,0x9af681,0x205bac,0xe814d1,0xb9af6,
	0x6e205b,0xe7e814,0x5b0b9a,0x2f6e20,0x4ee7e8,0xde5b0b,0x672f6e,0x9a4ee7,0xde5b,0xfe672f,0x709a4e,0xcb00de,
	0x57fe67,0x9709a,0xb0cb00,0x7957fe,0xfb20b6,0x17b707,0xda34c8,0x4afb20,0x8e17b7,0x8eda34,0xdf4afb,0x1e8e17,
	0xb88eda,0x32df4a,0xe31e8e,0xb4b88e,0x6132df,0xc8e31e,0x39b4b8,0x506132,0xa0c8e3,0x3339b4,0x305061,0xaca0c8,
	0x533339,0xc53050,0xfeaca0,0x555333,0x1bc530,0xedfeac,0x905553,0x5f1bc5,0x2fedfe,0x8c9055,0x405f1b,0xc22fed,
	0x3b8c90,0x89405f,0xd7c22f,0xf63b8c,0xe08940,0x6cd7c2,0x38f63b,0x1be089,0xd26cd7,0xcf38f6,0xcd1be0,0xf0d26c,
	0xc3cf38,0xa8cd1b,0xe1f0d2,0x34c3cf,0x81a8cd,0xace1f0,0x4c34c3,0xf681a8,0x5bace1,0x2f4c34,0x9af681,0x205bac,
	0x302f4c,0xb9af6,0x6e205b,0xa9302f,0x5b0b9a,0x2f6e20,0xe4a930,0xde5b0b,0x672f6e,0xc8e4a9,0xde5b,0xfe672f,0xddc8e4,
	0xcb00de,0x57fe67,0x53ddc8,0xb0cb00,0x7957fe,0x9853dd,0x17b707,0xda34c8,0x41c759,0x8e17b7,0x8eda34,0xd41c7,0x1e8e17,
	0xb88eda,0xa90d41,0xe31e8e,0xb4b88e,0x38a90d,0xc8e31e,0x39b4b8,0xc238a9,0xa0c8e3,0x3339b4,0xc4c238,0xaca0c8,0x533339,
	0x62c4c2,0xfeaca0,0x555333,0x6f62c4,0xedfeac,0x905553,0x7a6f62,0x2fedfe,0x8c9055,0x757a6f,0xc22fed,0x3b8c90,0xeb757a,
	0xd7c22f,0xf63b8c,0x51eb75,0x6cd7c2,0x38f63b,0x151eb,0xd26cd7,0xcf38f6,0x770151,0xf0d26c,0xc3cf38,0x567701,0xe1f0d2,
	0x34c3cf,0x4a5677,0xace1f0,0x4c34c3,0xf64a56,0x5bace1,0x2f4c34,0xf9f64a,0x205bac,0x302f4c,0xf8f9f6,0x6e205b,0xa9302f,
	0x30f8f9,0x2f6e20,0xe4a930,0x2430f8,0x672f6e,0xc8e4a9,0xe92430,0xfe672f,0xddc8e4,0x8ae924,0x57fe67,0x53ddc8,0xd98ae9,
	0x7957fe,0x9853dd,0x45d98a,0xda34c8,0x41c759,0x70215f,0x8eda34,0xd41c7,0x8d7021,0xb88eda,0xa90d41,0x728d70,0xb4b88e,
	0x38a90d,0xf5728d,0x39b4b8,0xc238a9,0xd1f572,0x3339b4,0xc4c238,0xbad1f5,0x533339,0x62c4c2,0xc6bad1,0x555333,0x6f62c4,
	0x67c6ba,0x905553,0x7a6f62,0xde67c6,0x8c9055,0x757a6f,0x39de67,0x3b8c90,0xeb757a,0x9739de,0xf63b8c,0x51eb75,0x259739,
	0x38f63b,0x151eb,0xf92597,0xcf38f6,0x770151,0xcaf925,0xc3cf38,0x567701,0xa3caf9,0x34c3cf,0x4a5677,0xd9a3ca,0x4c34c3,
	0xf64a56,0xcad9a3,0x2f4c34,0xf9f64a,0x51cad9,0x302f4c,0xf8f9f6,0xdb51ca,0xa9302f,0x30f8f9,0x72db51,0xe4a930,0x2430f8,
	0x4e72db,0xc8e4a9,0xe92430,0xaf4e72,0xddc8e4,0x8ae924,0x17af4e,0x53ddc8,0xd98ae9,0x9317af,0x9853dd,0x45d98a,0xa69317,
	0x41c759,0x70215f,0xc76e69,0xd41c7,0x8d7021,0x5fc76e,0xa90d41,0x728d70,0xd95fc7,0x38a90d,0xf5728d,0x7cd95f,0xc238a9,
	0xd1f572,0xfb7cd9,0xc4c238,0xbad1f5,0x47fb7c,0x62c4c2,0xc6bad1,0x2a47fb,0x6f62c4,0x67c6ba,0x362a47,0x7a6f62,0xde67c6,
	0xf5362a,0x757a6f,0x39de67,0x1f536,0xeb757a,0x9739de,0xb101f5,0x51eb75,0x259739,0x97b101,0x151eb,0xf92597,0xe997b1,
	0x770151,0xcaf925,0xb8e997,0x567701,0xa3caf9,0x1cb8e9,0x4a5677,0xd9a3ca,0x71cb8,0xf64a56,0xcad9a3,0x83071c,0xf9f64a,
	0x51cad9,0xc98307,0xf8f9f6,0xdb51ca,0x30c983,0x30f8f9,0x72db51,0x1030c9,0x2430f8,0x4e72db,0x281030,0xe92430,0xaf4e72,
	0xf12810,0x8ae924,0x17af4e,0x22f128,0xd98ae9,0x9317af,0xf622f1,0x45d98a,0xa69317,0x90f622,0x70215f,0xc76e69,0x8a2834,
	0x8d7021,0x5fc76e,0x4d8a28,0x728d70,0xd95fc7,0xa4d8a,0xf5728d,0x7cd95f,0xb10a4d,0xd1f572,0xfb7cd9,0x4b10a,0xbad1f5,
	0x47fb7c,0x1a04b1,0xc6bad1,0x2a47fb,0x181a04,0x67c6ba,0x362a47,0xa4181a,0xde67c6,0xf5362a,0xeea418,0x39de67,0x1f536,
	0xe8eea4,0x9739de,0xb101f5,0x42e8ee,0x259739,0x97b101,0xfb42e8,0xf92597,0xe997b1,0x18fb42,0xcaf925,0xb8e997,0xf518fb,
	0xa3caf9,0x1cb8e9,0x97f518,0xd9a3ca,0x71cb8,0xf197f5,0xcad9a3,0x83071c,0x46f197,0x51cad9,0xc98307,0xa246f1,0xdb51ca,
	0x30c983,0xdfa246,0x72db51,0x1030c9,0xa6dfa2,0x4e72db,0x281030,0x1fa6df,0xaf4e72,0xf12810,0xf51fa6,0x17af4e,0x22f128,
	0x20f51f,0x9317af,0xf622f1,0x5720f5,0xa69317,0x90f622,0x355720,0xc76e69,0x8a2834,0x1ec838,0x5fc76e,0x4d8a28,0x191ec8,
	0xd95fc7,0xa4d8a,0x2d191e,0x7cd95f,0xb10a4d,0xbc2d19,0xfb7cd9,0x4b10a,0x5fbc2d,0x47fb7c,0x1a04b1,0x75fbc,0x2a47fb,
	0x181a04,0x3e075f,0x362a47,0xa4181a,0xdd3e07,0xf5362a,0xeea418,0xbbdd3e,0x1f536,0xe8eea4,0xf1bbdd,0xb101f5,0x42e8ee,
	0xbdf1bb,0x97b101,0xfb42e8,0xd9bdf1,0xe997b1,0x18fb42,0x48d9bd,0xb8e997,0xf518fb,0xf048d9,0x1cb8e9,0x97f518,0x5f048,
	0x71cb8,0xf197f5,0xab05f0,0x83071c,0x46f197,0x88ab05,0xc98307,0xa246f1,0x6988ab,0x30c983,0xdfa246,0x86988,0x1030c9,
	0xa6dfa2,0xc00869,0x281030,0x1fa6df,0xf1c008,0xf12810,0xf51fa6,0xfaf1c0,0x22f128,0x20f51f,0x30faf1,0xf622f1,0x5720f5,
	0xf030fa,0x90f622,0x355720,0x3ef030,0x8a2834,0x1ec838,0x448eb0,0x4d8a28,0x191ec8,0xa7448e,0xa4d8a,0x2d191e,0xc2a744,
	0xb10a4d,0xbc2d19,0x1ec2a7,0x4b10a,0x5fbc2d,0xa61ec2,0x1a04b1,0x75fbc,0x9aa61e,0x181a04,0x3e075f,0x769aa6,0xa4181a,
	0xdd3e07,0xb3769a,0xeea418,0xbbdd3e,0x68b376,0xe8eea4,0xf1bbdd,0xe168b3,0x42e8ee,0xbdf1bb,0x2e168,0xfb42e8,0xd9bdf1,
	0x7302e1,0x18fb42,0x48d9bd,0xa37302,0xf518fb,0xf048d9,0xc0a373,0x97f518,0x5f048,0xeec0a3,0xf197f5,0xab05f0,0x97eec0,
	0x46f197,0x88ab05,0x7b97ee,0xa246f1,0x6988ab,0xa57b97,0xdfa246,0x86988,0x89a57b,0xa6dfa2,0xc00869,0x8b89a5,0x1fa6df,
	0xf1c008,0xfd8b89,0xf51fa6,0xfaf1c0,0x47fd8b,0x20f51f,0x30faf1,0xd947fd,0x5720f5,0xf030fa,0xded947,0x355720,0x3ef030,
	0xf5ded9,0x1ec838,0x448eb0,0x7e3c69,0x191ec8,0xa7448e,0x4f7e3c,0x2d191e,0xc2a744,0xef4f7e,0xbc2d19,0x1ec2a7,0x67ef4f,
	0x5fbc2d,0xa61ec2,0x5a67ef,0x75fbc,0x9aa61e,0xcc5a67,0x3e075f,0x769aa6,0xbecc5a,0xdd3e07,0xb3769a,0x2bbecc,0xbbdd3e,
	0x68b376,0xc22bbe,0xf1bbdd,0xe168b3,0x45c22b,0xbdf1bb,0x2e168,0x1445c2,0xd9bdf1,0x7302e1,0x8a1445,0x48d9bd,0xa37302,
	0x5e8a14,0xf048d9,0xc0a373,0x15e8a,0x5f048,0xeec0a3,0x8015e,0xab05f0,0x97eec0,0x300801,0x88ab05,0x7b97ee,0xce3008,
	0x6988ab,0xa57b97,0x2fce30,0x86988,0x89a57b,0xe32fce,0xc00869,0x8b89a5,0x7be32f,0xf1c008,0xfd8b89,0x627be3,0xfaf1c0,
	0x47fd8b,0xa627b,0x30faf1,0xd947fd,0x260a62,0xf030fa,0xded947,0xde260a,0x3ef030,0xf5ded9,0x96de26,0x448eb0,0x7e3c69,
	0x9f1a7c,0xa7448e,0x4f7e3c,0xdf9f1a,0xc2a744,0xef4f7e,0xb3df9f,0x1ec2a7,0x67ef4f,0x64b3df,
	0xa61ec2,0x5a67ef,0xba64b3,0x9aa61e,0xcc5a67,0xf4ba64,0x769aa6,0xbecc5a,0x51f4ba,0xb3769a,0x2bbecc,0x4951f4,0x68b376,
	0xc22bbe,0xcd4951,0xe168b3,0x45c22b,0x52cd49,
	0x2e168,0x1445c2,0x7e52cd,0x7302e1,0x8a1445,0xbd7e52,0xa37302,0x5e8a14,0xc4bd7e,0xc0a373,0x15e8a,
	0x16c4bd,0xeec0a3,0x8015e,0xbb16c4,0x97eec0,0x300801,0x1fbb16,0x7b97ee,0xce3008,0x2b1fbb,0xa57b97,
	0x2fce30,0xe82b1f,0x89a57b,0xe32fce,0xee82b,0x8b89a5,0x7be32f,0x5a0ee8,0xfd8b89,0x627be3,0xa75a0e,
	0x47fd8b,0xa627b,0x70a75a,0xd947fd,0x260a62,0xf370a7,0xded947,0xde260a,0xfef370,0xf5ded9,0x96de26,
	0x93fef3,0x7e3c69,0x9f1a7c,0x639644,0x4f7e3c,0xdf9f1a,0xcd6396,0xef4f7e,0xb3df9f,0x39cd63,0x67ef4f,
	0x64b3df,0xba39cd,0x5a67ef,0xba64b3,0xa6ba39,0xcc5a67,0xf4ba64,0x3a6ba,0xbecc5a,0x51f4ba,0x9a03a6,
	0x2bbecc,0x4951f4,0x229a03,0xc22bbe,0xcd4951,0x79229a,0x45c22b,0x52cd49,0x507922,0x1445c2,0x7e52cd,
	0x9f5079,0x8a1445,0xbd7e52,0x7e9f50,0x5e8a14,0xc4bd7e,0x417e9f,0x15e8a,0x16c4bd,0xbf417e,0x8015e,
	0xbb16c4,0x43bf41,0x300801,0x1fbb16,0x3c43bf,0xce3008,0x2b1fbb,0x833c43,0x2fce30,0xe82b1f,0x71833c,
	0xe32fce,0xee82b,0x47183,0x7be32f,0x5a0ee8,0xbe0471,0x627be3,0xa75a0e,0x54be04,0xa627b,0x70a75a,0xaf54be,
	0x260a62,0xf370a7,0xc7af54,0xde260a,0xfef370,0xd7c7af,0x96de26,0x93fef3,0xbfd7c7,0x9f1a7c,0x639644,0x91770,
	0xdf9f1a,0xcd6396,0xd30917,0xb3df9f,0x39cd63,0x6fd309,0x64b3df,0xba39cd,0xc56fd3,0xba64b3,0xa6ba39,0xf0c56f,
	0xf4ba64,0x3a6ba,0x6cf0c5,0x51f4ba,0x9a03a6,0xbd6cf0,0x4951f4,0x229a03,0x32bd6c,0xcd4951,0x79229a,0xf032bd,
	0x52cd49,0x507922,0xd6f032,0x7e52cd,0x9f5079,0x72d6f0,0xbd7e52,0x7e9f50,0x1672d6,0xc4bd7e,0x417e9f,0xc81672,
	0x16c4bd,0xbf417e,0xccc816,0xbb16c4,0x43bf41,0xcccc8,0x1fbb16,0x3c43bf,0xc20ccc,0x2b1fbb,0x833c43,0x39c20c,
	0xe82b1f,0x71833c,0xa639c2,0xee82b,0x47183,0xdba639,0x5a0ee8,0xbe0471,0xfedba6,0xa75a0e,0x54be04,0x71fedb,
	0x70a75a,0xaf54be,0x5d71fe,0xf370a7,0xc7af54,0xfa5d71,0xfef370,0xd7c7af,0x4bfa5d,0x93fef3,0xbfd7c7,0xb54bfa,
	0x639644,0x91770,0x2ac699,0xcd6396,0xd30917,0x2f2ac6,0x39cd63,0x6fd309,0x682f2a,0xba39cd,0xc56fd3,0xaa682f,
	0xa6ba39,0xf0c56f,0xd4aa68,0x3a6ba,0x6cf0c5,0xe3d4aa,0x9a03a6,0xbd6cf0,0x4de3d4,0x229a03,0x32bd6c,0x124de3,
	0x79229a,0xf032bd,0x72124d,0x507922,0xd6f032,0xe77212,0x9f5079,0x72d6f0,0x99e772,0x7e9f50,0x1672d6,0x8a99e7,
	0x417e9f,0xc81672,0x8e8a99,0xbf417e,0xccc816,0x98e8a,0x43bf41,0xcccc8,0x13098e,0x3c43bf,0xc20ccc,0x581309,
	0x833c43,0x39c20c,0xf55813,0x71833c,0xa639c2,0x4df558,0x47183,0xdba639,0x594df5,0xbe0471,0xfedba6,0xb9594d,
	0x54be04,0x71fedb,0x72b959,0xaf54be,0x5d71fe,0x4572b9,0xc7af54,0xfa5d71,0x9a4572,0xd7c7af,0x4bfa5d,0xc39a45,
	0xbfd7c7,0xb54bfa,0x56c39a,0x91770,0x2ac699,0x95bb21,0xd30917,0x2f2ac6,0x6e95bb,0x6fd309,0x682f2a,0xea6e95,
	0xc56fd3,0xaa682f,0x9aea6e,0xf0c56f,0xd4aa68,0xe19aea,0x6cf0c5,0xe3d4aa,0x3be19a,0xbd6cf0,0x4de3d4,0x4a3be1,
	0x32bd6c,0x124de3,0x6b4a3b,0xf032bd,0x72124d,0x276b4a,0xd6f032,0xe77212,0xef276b,0x72d6f0,0x99e772,0x73ef27,
	0x1672d6,0x8a99e7,0xed73ef,0xc81672,0x8e8a99,0xa3ed73,0xccc816,0x98e8a,0xeda3ed,0xcccc8,0x13098e,0x4feda3,
	0xc20ccc,0x581309,0x824fed,0x39c20c,0xf55813,0x6c824f,0xa639c2,0x4df558,0xba6c82,0xdba639,0x594df5,0x91ba6c,
	0xfedba6,0xb9594d,0x3d91ba,0x71fedb,0x72b959,0xd43d91,0x5d71fe,0x4572b9,0xa0d43d,0xfa5d71,0x9a4572,0x95a0d4,
	0x4bfa5d,0xc39a45,0x4f95a0,0xb54bfa,0x56c39a,0x324f95,0x2ac699,0x95bb21,0x21dd6f,0x2f2ac6,0x6e95bb,0xa521dd,
	0x682f2a,0xea6e95,0x20a521,0xaa682f,0x9aea6e,0xad20a5,0xd4aa68,0xe19aea,0x90ad20,0xe3d4aa,0x3be19a,0x8b90ad,
	0x4de3d4,0x4a3be1,0xc98b90,0x124de3,0x6b4a3b,0xa8c98b,0x72124d,0x276b4a,0xf5a8c9,0xe77212,0xef276b,0x6ef5a8,
	0x99e772,0x73ef27,0x566ef5,0x8a99e7,0xed73ef,0xfb566e,0x8e8a99,0xa3ed73,0x5afb56,0x98e8a,0xeda3ed,0x255afb,
	0x13098e,0x4feda3,0xbc255a,0x581309,0x824fed,0xa4bc25,0xf55813,0x6c824f,0xdda4bc,0x4df558,0xba6c82,0xddda4,
	0x594df5,0x91ba6c,0xf30ddd,0xb9594d,0x3d91ba,0xc6f30d,0x72b959,0xd43d91,0xbc6f3,0x4572b9,0xa0d43d,0x270bc6,
	0x9a4572,0x95a0d4,0x74270b,0xc39a45,0x4f95a0,0x8f7427,0x56c39a,0x324f95,0xeb8f74,0x95bb21,0x21dd6f,0x84c78b,
	0x6e95bb,0xa521dd,0x8e84c7,0xea6e95,0x20a521,0x6f8e84,0x9aea6e,0xad20a5,0x8a6f8e,0xe19aea,0x90ad20,0xad8a6f,
	0x3be19a,0x8b90ad,0x59ad8a,0x4a3be1,0xc98b90,0x1859ad,0x6b4a3b,0xa8c98b,0x141859,0x276b4a,0xf5a8c9,0x2c1418,
	0xef276b,0x6ef5a8,0xb72c14,0x73ef27,0x566ef5,0x6db72c,0xed73ef,0xfb566e,0xec6db7,0xa3ed73,0x5afb56,0x25ec6d,
	0xeda3ed,0x255afb,0xf225ec,0x4feda3,0xbc255a,0x6af225,0x824fed,0xa4bc25,0x1b6af2,0x6c824f,0xdda4bc,0xd1b6a,
	0xba6c82,0xddda4,0xe80d1b,0x91ba6c,0xf30ddd,0xfde80d,0x3d91ba,0xc6f30d,0xdcfde8,0xd43d91,0xbc6f3,0xd9dcfd,
	0xa0d43d,0x270bc6,0x54d9dc,0x95a0d4,0x74270b,0x954d9,0x4f95a0,0x8f7427,0x130954,0x324f95,0xeb8f74,0xc81309,
	0x21dd6f,0x84c78b,0x14efa3,0xa521dd,0x8e84c7,0x4b14ef,0x20a521,0x6f8e84,0x2a4b14,0xad20a5,0x8a6f8e,0x3e2a4b,
	0x90ad20,0xad8a6f,0x483e2a,0x8b90ad,0x59ad8a,0x22483e,0xc98b90,0x1859ad,0x672248,0xa8c98b,0x141859,0x726722,
	0xf5a8c9,0x2c1418,0x167267,0x6ef5a8,0xb72c14,0x61672,0x566ef5,0x6db72c,0xc20616,0xfb566e,0xec6db7,0xc1c206,
	0x5afb56,0x25ec6d,0x52c1c2,0x255afb,0xf225ec,0x6a52c1,0xbc255a,0x6af225,0xd6a52,0xa4bc25,0x1b6af2,0xe40d6a,
	0xdda4bc,0xd1b6a,0x4de40d,0xddda4,0xe80d1b,0x334de4,0xf30ddd,0xfde80d,0xa4334d,0xc6f30d,0xdcfde8,0x91a433,
	0xbc6f3,0xd9dcfd,0x9091a4,0x270bc6,0x54d9dc,0xf29091,0x74270b,0x954d9,0x18f290,0x8f7427,0x130954,0xa318f2,
	0xeb8f74,0xc81309,0xfaa318,0x84c78b,0x14efa3,0xb5bebf,0x8e84c7,0x4b14ef,0x25b5be,0x6f8e84,0x2a4b14,0x8625b5,
	0x8a6f8e,0x3e2a4b,0xb48625,0xad8a6f,0x483e2a,0xedb486,0x59ad8a,0x22483e,0x8edb4,0x1859ad,0x672248,0x1208ed,
	0x141859,0x726722,0x421208,0x2c1418,0x167267,0x304212,0xb72c14,0x61672,0x4b3042,0x6db72c,0xc20616,0x254b30,
	0xec6db7,0xc1c206,0xb3254b,0x25ec6d,0x52c1c2,0x41b325,0xf225ec,0x6a52c1,0x4c41b3,0x6af225,0xd6a52,0xb64c41,
	0x1b6af2,0xe40d6a,0x52b64c,0xd1b6a,0x4de40d,0xfd52b6,0xe80d1b,0x334de4,0x4ffd52,0xfde80d,0xa4334d,0x284ffd,
	0xdcfde8,0x91a433,0x83284f,0xd9dcfd,0x9091a4,0x558328,0x54d9dc,0xf29091,0x535583,0x954d9,0x18f290,0xdc5355,
	0x130954,0xa318f2,0xb1dc53,0xc81309,0xfaa318,0xd7b1dc,0x14efa3,0xb5bebf,0x73ffac,0x4b14ef,0x25b5be,0xd773ff,
	0x2a4b14,0x8625b5,0x7ad773,0x3e2a4b,0xb48625,0x2d7ad7,0x483e2a,0xedb486,0x952d7a,0x22483e,0x8edb4,0xbc952d,0x672248,0x1208ed,0x22bc95,0x726722,0x421208,
	0x6122bc,0x167267,0x304212,0x7a6122,0x61672,0x4b3042,0x87a61,0xc20616,0x254b30,0xfe087a,0xc1c206,0xb3254b,
	0xf9fe08,0x52c1c2,0x41b325,0x84f9fe,0x6a52c1,0x4c41b3,0x5f84f9,0xd6a52,0xb64c41,0x2b5f84,0xe40d6a,0x52b64c,
	0xbf2b5f,0x4de40d,0xfd52b6,0x7bbf2b,0x334de4,0x4ffd52,0x917bbf,0xa4334d,0x284ffd,0x5f917b,0x91a433,0x83284f,0x2e5f91,0x9091a4,0x558328,
	0x382e5f,0xf29091,0x535583,0x88382e,0x18f290,0xdc5355,0xad8838,0xa318f2,0xb1dc53,0xb3ad88,0xfaa318,0xd7b1dc,0x8ab3ad,0xb5bebf,0x73ffac,0x768758,0x25b5be,0xd773ff,
	0x407687,0x8625b5,0x7ad773,0xd04076,0xb48625,0x2d7ad7,0xadd040,0xedb486,0x952d7a,0xe0add0,0x8edb4,0xbc952d,0x3ce0ad,0x1208ed,0x22bc95,0xe03ce0,0x421208,0x6122bc,
	0x4be03c,0x304212,0x7a6122,0xcf4be0,0x4b3042,0x87a61,0xc6cf4b,0x254b30,0xfe087a,0xa2c6cf,0xb3254b,0xf9fe08,0xfda2c6,0x41b325,0x84f9fe,0xa5fda2,0x4c41b3,0x5f84f9,
	0x8aa5fd,0xb64c41,0x2b5f84,0xc68aa5,0x52b64c,0xbf2b5f,0xb8c68a,0xfd52b6,0x7bbf2b,0xc1b8c6,0x4ffd52,0x917bbf,0xcbc1b8,0x284ffd,0x5f917b,0x5acbc1,0x83284f,0x2e5f91,
	0x8e5acb,0x558328,0x382e5f,0x868e5a,0x535583,0x88382e,0x44868e,0xdc5355,0xad8838,0x94486,0xb1dc53,0xb3ad88,0x170944,0xd7b1dc,0x8ab3ad,0x761709,0x73ffac,0x768758,
	0xfcd03,0xd773ff,0x407687,0xcb0fcd,0x7ad773,0xd04076,0xb2cb0f,0x2d7ad7,0xadd040,0x4cb2cb,0x952d7a,0xe0add0,0x5b4cb2,0xbc952d,0x3ce0ad,0x2c5b4c,0x22bc95,0xe03ce0,
	0xc22c5b,0x6122bc,0x4be03c,0x5bc22c,0x7a6122,0xcf4be0,0x195bc2,0x87a61,0xc6cf4b,0x17195b,0xfe087a,0xa2c6cf,
	0xf51719,0xf9fe08,0xfda2c6,0xd6f517,0x84f9fe,0xa5fda2,0xe3d6f5,0x5f84f9,0x8aa5fd,0xe1e3d6,0x2b5f84,0xc68aa5,
	0x13e1e3,0xbf2b5f,0xb8c68a,0xb113e1,0x7bbf2b,0xc1b8c6,0x47b113,0x917bbf,0xcbc1b8,0x4447b1,0x5f917b,0x5acbc1,
	0x5c4447,0x2e5f91,0x8e5acb,0x5f5c44,0x382e5f,0x868e5a,0x215f5c,0x88382e,0x44868e,0xe8215f,0xad8838,0x94486,
	0x41e821,0xb3ad88,0x170944,0x4841e8,0x8ab3ad,0x761709,0xfc4841,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0 ]
# load overlay
overlay = Overlay("/home/xilinx/pynqz2.bit") # tcl is also parsed

overlay.download() # Explicitly download bitstream to PL

if overlay.is_loaded():
 # Checks if a bitstream is loaded
 print("overlay is loaded")
else :
	print("overlay is not loaded")
	exit(-1)

#####################################################
##########       CSR DEFINITIONS           ##########
##########          MEMORY MAP             ##########
##########          bitwidth 64            ##########
##########          see csr_definition.vh  ##########
#####################################################
ARITHMETIC_PRECISION=0
FP_MODE=1
BATCH_SIZE=2 # aka active rows
TRANSPARENT_DELAY_REGISTER=3
DEBUG=4
TEST_OPTIONS=5


ACTIVATE_CHAIN=0x1
INT8=0x1
INT16=0X03
INT32=0x07
INT64=0x0F
# precision of fp computation is tuned using the 
# integer precision 
ACTIVE_FP=1<<0
ACTIVE_BFP=0x03
ROUNDING=0x00
NO_FP=0x00
WMEM_STARTING_ADDRESS=0 #32 MSB 
### allocate buffers for input and outpuf fifo in main memory 
## default 32 bit integer
# Allocate buffers for the input and output signals ( contigous memory allocation )
# shape is the size!
# by defauls non cacheable
input_fifo_buffer = allocate(shape=(2048,),dtype='u8')
output_fifo_buffer=allocate(shape=(2048,),dtype='u8')
weight_buffer=allocate(shape=(16384,),dtype='u8')
#weight_buffer=allocate(shape=(4096,),dtype='u8')
csr_buffer=allocate(shape=(64,),dtype='u8')

if _use_test_vector:
	for i in range(len(test_weight_buffer)):
	    weight_buffer[i]=test_weight_buffer[i]
	for i in range(input_fifo_buffer.size):
	    input_fifo_buffer[i]=test_input_fifo_buffer[i]
else:
	# populate weights
	for i in range(weight_buffer.size):
	    #weight_buffer[i]=  ((i%16)<<56)|((i%16)<<48)| ((i%16)<<40)|((i%16)<<32)|((i%16)<<24)| ((i%16)<<16)|((i%16)<<8)| (i%16) 
	    weight_buffer[i]=0xFFFFFFFFFFFFFFFF
	    #weight_buffer[i]=0x1111111111111111
    	#weight_buffer[i]=0
	# populate input fifo
	for i in range(input_fifo_buffer.size):
	    input_fifo_buffer[i]=0xcafecafecafecafe    
	    #input_fifo_buffer[i]=0
	
## populate csr 
#for i in range(csr_buffer.size):
#    csr_buffer[i]=   (NO_FP<<8)|(ACTIVATE_CHAIN<<4)| INT8
    


csr_buffer[ARITHMETIC_PRECISION]=  (WMEM_STARTING_ADDRESS<<32) |(NO_FP<<8)|(ACTIVATE_CHAIN<<4)| INT8

#csr_buffer[FP_MODE]=NO_FP
#csr_buffer[BATCH_SIZE]=8 # equal to number of rows -> max throughput
#csr_buffer[TRANSPARENT_DELAY_REGISTER]=0
#csr_buffer[DEBUG]=0
#csr_buffer[TEST_OPTIONS]=0

#csr_buffer[0]= (NO_FP<<8)  | INT8  
## accelerator 
accelerator=overlay.dtpu.axis_accelerator_ada
# soft reset 
accelerator.write(CTRL,0x0000001)
accelerator.write(CTRL,0x0000000)



###########################################################
###         program accelerator&start computation     #####
###                    matrix 8x8 macs                #####
###  input and outfifo empty and full are active low  #####
###########################################################


### COMMAND OPCODE [19:16]CMD hex

CMD_UPDATE_IN_ARG=0x0
CMD_UPDATE_OUT_ARG=0x1
CMD_EXECUTE_STEP=0x2
CMD_EXECUTE_CONTINUOS=0x4
CMD_STOP_EXECUTE_CONTINOUS=0x5

 #Configure Input Argument Request Enable Register (0x0010) to define input buffer
#selection for ap_start generation. start is generated only if the selected input
#argument buffer has data available. By default, all input argument buffer are considered
#for start generation
# with zero start independently from dava avialability
accelerator.write(IARG_RQT_EN,0x000000007) ## all data avialable csr, weights and data
#Configure Output Argument Request Enable Register (0x0014) to define output buffer
#selection for ap_start generation. start is generated only if the selected output
#argument buffer has space available. By default, all input argument buffer are
#considered for start generation.
#accelerator.write(OARG_RQT_EN,1) # out fifo must be empty 
#accelerator.write(OARG_LENGTH_MODE,0) # hardware mode
accelerator.write(OARG_LENGTH_MODE,0x00000001) # software mode
accelerator.write(OARG0_LENGTH,2048) # size outfifo 
#accelerator.write(CMD,0x00010001 ) NO MULTIBUFFER
# optional configure input scalar request enable  and update them 
accelerator.write(ISCALAR_RQT_EN,0) # NO input SCALAR
accelerator.write(OSCALAR_RQT_EN,0) # no output scalar

#Write TDEST value in Output Argument TDEST Register (0x0240 to 0x025C).
accelerator.write(OARG0_TDEST,0) # only one output 



csr_buffer.flush()
weight_buffer.flush()
input_fifo_buffer.flush()


################################################
###### program the dma for the csr reg #########
################################################

driver_csr=overlay.axi_dma_csr_mem

driver_csr.sendchannel.transfer(csr_buffer)
driver_csr.sendchannel.wait()
#clear run bit



################################################
###### program the dma for the weight ##########
################################################

driver_wm=overlay.axi_dma_weight_mem
driver_wm.sendchannel.transfer(weight_buffer)
driver_wm.sendchannel.wait()





######################################################
###### program the dma for the in/out fifos ##########
######################################################

driver_fifo_in=overlay.axi_dma_infifo

driver_fifo_in.sendchannel.transfer(input_fifo_buffer)



driver_fifo_out=overlay.axi_dma_outfifo
driver_fifo_in.sendchannel.wait()
accelerator.write(OARG0_LENGTH,2048) # size outfifo 


#Write Execute command 0x00020000 in Command Register (0x0028) to start the
#operation.
start_time = time.time()
#accelerator.write(CMD, 0x00010001)


#################################################################
#### this has to be copied into the delegate of tensorflow ######
#################################################################


#accelerator.write(CMD, (0x0000000 |(CMD_EXECUTE_CONTINUOS<<16))) # may be used for offload of processor 
accelerator.write(CMD, (0x0000000 |(CMD_EXECUTE_STEP<<16))) # execute one step 
#while driver_fifo_out.recvchannel.running:
#    pass


accelerator.write(CMD,((CMD_UPDATE_IN_ARG<<16)|(3))) # update inputs to next buffers

accelerator.write(CMD,((CMD_UPDATE_OUT_ARG<<16)|(1))) # not the second time 
driver_fifo_out.recvchannel.transfer(output_fifo_buffer)
driver_fifo_out.recvchannel.wait()
stop_time = time.time()
#After completing the Accelerator operation, done status is updated in the Status
#Register (0x0004). Output scalar data can be read now from OSCALAR_DATA and
#IO_OSCALAR_DATA.
done=0
while True:
 	 #  accelerator.write(CMD,0x0FF10001)#update output
   	# accelerator.write(CMD,0x0FF20001)#update output
    	#time.sleep(3)
    	## check done signal
    done=accelerator.read(STATUS)
    if (done&0x2)== 2:
        print ("accelerator is done")
        break
    elif (done&0x4)== 4:
        print("accelerator is idle")
        break
    elif (done&0x8) == 8:
        print("accelerator is ready")
    else:
        print("accelerator is still working",bin(done))

#Write Update Output command to adapter by writing 0x00000003 to Command Register
#(0x0028). By writing 1 to the argument, mask moves the input buffer pointer to the next

#position in multi-buffer. Writing 0 reuses the same buffer.
#driver_fifo_out.recvchannel.wait_async()
#accelerator.write(CMD,0x00000003)
accelerator.write(STATUS,0x00000003)##clear status



## retrieve the results and print 



flag=True
for i in range(output_fifo_buffer.size-1):
    if(output_fifo_buffer[i]!=output_fifo_buffer[i+1]):
        flag=False
        break

if not(flag):
    print("accelerator did not do all the work")
    print(*output_fifo_buffer[0:10])
else:
    print("accelerator did all the jobs")
    print(*output_fifo_buffer[0:10])

hw_exec_time = stop_time-start_time
print('Hardware DTPU execution time: ',hw_exec_time)


### free buffers

input_fifo_buffer.freebuffer()
output_fifo_buffer.freebuffer()
csr_buffer.freebuffer()
weight_buffer.freebuffer()



############################################################
##################  PYNQ  PACKAGES #########################
############################################################
#         pynq.ps - Facilitates management of the Processing System (PS) and PS/PL interface.
#         pynq.pl - Facilitates management of the Programmable Logic (PL).
#         pynq.overlay - Manages the state, drivers, and and contents of overlays.
#         pynq.bitstream - Instantiates class for PL bitstream (full/partial).
#         pynq.devicetree - Instantiates the device tree segment class.

# Data Movement modules:

#         pynq.mmio - Implements PYNQ Memory Mapped IO (MMIO) API
#         pynq.gpio - Implements PYNQ General-Purpose IO (GPIO) by wrapping the Linux Sysfs API
#         pynq.xlnk - Implements Contiguous Memory Allocation for PYNQ DMA
#         pynq.buffer - Implements a buffer class for DMA engines and accelerators

# Additional modules:
#         pynq. - Implements PYNQ asyncio
#         pynq.pmbus - PYNQ class for reading power measurements from PMBus
#         pynq.uio - Interacts directly with a UIO device
#         pynq.registers - Allows users to access registers easily
#         pynq.utils - Functions for assisting with installation and testing


exit()
