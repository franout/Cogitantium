#!/usr/bin/python3.5


import tensorflow.lite as tflite
import numpy as np
import time
import os
import cffi

#########################################################
###### NOTE: this code has to be executed on the    #####
###### pynq z2 board with tensorflow lite installed #####
##################							#############
##################			!				#############
##################		   ! !				#############
##################		  !   !				#############
##################		 !  !  !			#############
##################		!   !   !			#############
##################	   !    !    !			#############
##################	  !     !     !			#############
##################	 !      !      !		#############
##################	!		!    	!		#############
##################	!!!!!!!!!!!!!!!!!		#############
##################							#############
#########################################################
#########################################################
##### DELEGATE METHOD FOR RUNNING INFERENCE ON DTPU #####
##### A TensorFlow Lite delegate is a way 			#####
##### to delegate part or all of graph execution  	#####
#####  to another executor. 						#####
#########################################################

#### If a delegate was provided for specific operations, 
#### then TensorFlow Lite will split the graph into multiple 
#### subgraphs where each subgraph will be handled by a delegate
#### Each subgraph that is handled by a delegate will be replaced with a node that evaluates the subgraph on its invoked call.
#### Depending on the model, the final graph can end up with one node, 
#### which means that all of the graphs were delegated or multiple nodes 
#### handled the subgraphs. In general, you don't want to have multiple 
#### subgraphs handled by the delegate, since each time you switch from 
#### delegate to the main graph, there is an overhead for passing the 
#### results from the subgraph to the main graph. It's not always safe 
#### to share memory.


# 1)Define a kernel node that is responsible for evaluating the delegate subgraph
# 2)Create an instance of TfLiteDelegate, which is responsible for registering
#	 the kernel node and claiming the nodes that the delegate can execute

# load library , the design is loaded inside the embedded python code of .so 
DTPU_lib=tflite.experimental.load_delegate("./DTPU_delegate.so")
# DTPU_lib._library.functionName()
########################################
##### RUN TENSORFLOW LITE MODELS #######
########################################

model_name="mnist_model_quant_uint8"
tflite_model_file="./"+model_name+".tflite"

# Load TFLite model and allocate tensors.
interpreter = tflite.Interpreter(model_path=tflite_model_file,experimental_delegates=[DTPU_lib])
interpreter_no_delegate=tflite.Interpreter(model_path=tflite_model_file)
interpreter.allocate_tensors()
interpreter_no_delegate.allocate_tensors()

# precision of accelerator 
ACTIVATE_CHAIN=0x1
INT8=0x1
INT16=0X03
INT32=0x07
INT64=0x0F
# precision of fp computation is tuned using the 
# integer precision 
NO_FP=0
ACTIVE_FP=1<<0
ACTIVE_BFP=0x03
WMEM_STARTING_ADDRESS=0 #32 MSB 
ffi=cffi.FFI()
data_type=ffi.cast("int",(WMEM_STARTING_ADDRESS<<32)|(NO_FP<<8)|(ACTIVATE_CHAIN<<4)| INT8)
DTPU_lib._library.SelectDataTypeComputation( int(data_type))

# Get input and output tensors.
input_details = interpreter.get_input_details() #[0]["index"]
output_details = interpreter.get_output_details()# [0]["index"]


# numpy array previosly generated ( shape equal to the one needed by the NN )

input_data_no_delegate=np.array([[[0.51420164, 0.15128784, 0.17629565, 0.7661464 , 0.166474  ,
         0.392435  , 0.25919008, 0.6175588 , 0.52678174, 0.8366174 ,
         0.6899335 , 0.45293185, 0.06688549, 0.49422878, 0.7027322 ,
         0.7076434 , 0.22208309, 0.72726846, 0.26900154, 0.4195583 ,
         0.74807626, 0.112436  , 0.10118953, 0.31121275, 0.12560944,
         0.24246405, 0.66965616, 0.49099243],
        [0.8668721 , 0.842923  , 0.858975  , 0.41360235, 0.95545685,
         0.25527707, 0.8370037 , 0.13113363, 0.13489829, 0.506002  ,
         0.8184419 , 0.7903133 , 0.572327  , 0.514662  , 0.8690486 ,
         0.7065966 , 0.07703831, 0.08709208, 0.8051768 , 0.8601283 ,
         0.0807484 , 0.8357522 , 0.50890094, 0.3087748 , 0.84586203,
         0.7391681 , 0.3314011 , 0.3881683 ],
        [0.09497915, 0.42281878, 0.7340592 , 0.44785187, 0.321726  ,
         0.9789002 , 0.8935541 , 0.5246511 , 0.43945217, 0.86601007,
         0.25391677, 0.9165926 , 0.44126087, 0.7201635 , 0.7848359 ,
         0.858227  , 0.6267356 , 0.12970296, 0.95484954, 0.03360643,
         0.5369231 , 0.5995011 , 0.9577487 , 0.00290565, 0.7192218 ,
         0.13686945, 0.998419  , 0.8231075 ],
        [0.57468116, 0.08141646, 0.86345464, 0.88875234, 0.998998  ,
         0.54500216, 0.22508709, 0.7974533 , 0.09760468, 0.50064003,
         0.66205084, 0.32687798, 0.62585044, 0.34879264, 0.10210036,
         0.72379607, 0.44509637, 0.7461312 , 0.85647386, 0.26693642,
         0.17757367, 0.32668456, 0.95285773, 0.96628785, 0.01085196,
         0.32501101, 0.92879844, 0.944981  ],
        [0.7398565 , 0.85423815, 0.83439374, 0.48087165, 0.9416544 ,
         0.18510532, 0.557544  , 0.44794488, 0.5403683 , 0.7721674 ,
         0.73451704, 0.59916323, 0.6054937 , 0.788943  , 0.51831245,
         0.6514431 , 0.8644989 , 0.49984476, 0.705243  , 0.03794812,
         0.83006227, 0.01922522, 0.8046797 , 0.22359203, 0.1003556 ,
         0.14037615, 0.9739061 , 0.9066789 ],
        [0.05858452, 0.7256498 , 0.03830656, 0.87290126, 0.61170846,
         0.66574764, 0.46962562, 0.15489584, 0.00938548, 0.3511031 ,
         0.8987731 , 0.9426516 , 0.418781  , 0.58052075, 0.948516  ,
         0.43155435, 0.65581566, 0.80493605, 0.43761694, 0.16891025,
         0.4148356 , 0.9521378 , 0.6809082 , 0.35646105, 0.1527864 ,
         0.6946779 , 0.78803855, 0.13726391],
        [0.18770516, 0.19262834, 0.71685153, 0.28615186, 0.97756445,
         0.82730985, 0.8176446 , 0.6932557 , 0.39102226, 0.34053588,
         0.18203475, 0.12041157, 0.77852786, 0.97530675, 0.4191146 ,
         0.49091995, 0.21876124, 0.382467  , 0.4850738 , 0.66571325,
         0.5111087 , 0.30062044, 0.37475446, 0.2907627 , 0.30584827,
         0.39089134, 0.22766893, 0.37396184],
        [0.1441444 , 0.24808055, 0.2070309 , 0.70117635, 0.5756532 ,
         0.47331354, 0.9351047 , 0.8481492 , 0.9677848 , 0.59995246,
         0.6914186 , 0.20560876, 0.95629746, 0.25947654, 0.22804523,
         0.657836  , 0.3805841 , 0.82919997, 0.36402252, 0.7071016 ,
         0.16722341, 0.71163183, 0.24016635, 0.46795908, 0.4116419 ,
         0.06588785, 0.36537784, 0.17854287],
        [0.9587061 , 0.94159067, 0.8348744 , 0.6479812 , 0.15413979,
         0.5563976 , 0.9075375 , 0.8931227 , 0.42744553, 0.37930045,
         0.09829376, 0.19088578, 0.9758354 , 0.7598326 , 0.6517897 ,
         0.86237186, 0.34861544, 0.9547368 , 0.68896866, 0.46528387,
         0.44455454, 0.3119958 , 0.8041325 , 0.44822547, 0.8203014 ,
         0.8266142 , 0.6977604 , 0.15540037],
        [0.00514685, 0.462501  , 0.5131417 , 0.45950964, 0.6824272 ,
         0.22878459, 0.28554982, 0.48485258, 0.8132759 , 0.8206875 ,
         0.10863352, 0.7969258 , 0.7725805 , 0.9350861 , 0.18529196,
         0.8552438 , 0.7331584 , 0.10143797, 0.32999787, 0.82439876,
         0.9842573 , 0.9904636 , 0.23204368, 0.91688013, 0.633889  ,
         0.72980845, 0.60476035, 0.2544995 ],
        [0.72784775, 0.6652931 , 0.28714892, 0.74520594, 0.39384636,
         0.78313607, 0.68066293, 0.31531233, 0.19903278, 0.80802727,
         0.84171057, 0.01873632, 0.30040142, 0.00706789, 0.4366754 ,
         0.5552244 , 0.71640193, 0.7542425 , 0.38963515, 0.09586773,
         0.9313759 , 0.03450674, 0.09884754, 0.01149999, 0.7467921 ,
         0.26984447, 0.13153638, 0.567847  ],
        [0.12261518, 0.98234546, 0.56417495, 0.35292146, 0.66466254,
         0.8922811 , 0.20245472, 0.86552525, 0.710341  , 0.8290723 ,
         0.01420148, 0.2293772 , 0.97048086, 0.8561866 , 0.3611418 ,
         0.637209  , 0.5339981 , 0.99036056, 0.18855967, 0.5736097 ,
         0.12253905, 0.3208064 , 0.33107844, 0.07908588, 0.8859353 ,
         0.27492318, 0.7954118 , 0.9065705 ],
        [0.21823215, 0.722584  , 0.24298996, 0.7667418 , 0.2504256 ,
         0.6166894 , 0.78483903, 0.8554883 , 0.06397051, 0.965165  ,
         0.8866342 , 0.781577  , 0.3324664 , 0.34172145, 0.72954214,
         0.9589506 , 0.13523206, 0.6249586 , 0.8389516 , 0.1839711 ,
         0.34239513, 0.36255676, 0.27697328, 0.91778487, 0.40966895,
         0.6223925 , 0.36111006, 0.52610475],
        [0.25355452, 0.19853225, 0.6777116 , 0.6976949 , 0.29919016,
         0.2850838 , 0.6079993 , 0.4495934 , 0.32323852, 0.12352306,
         0.26005974, 0.288729  , 0.45609027, 0.49648723, 0.366064  ,
         0.6961649 , 0.3679356 , 0.79627824, 0.96938753, 0.00729349,
         0.6762439 , 0.9613859 , 0.3723565 , 0.06126584, 0.59232146,
         0.21482001, 0.3372361 , 0.85720366],
        [0.38368586, 0.89568317, 0.6297441 , 0.44968852, 0.38741   ,
         0.89170766, 0.40645716, 0.9358525 , 0.22007868, 0.4216817 ,
         0.39246905, 0.64318323, 0.7286904 , 0.4153679 , 0.43296537,
         0.46213904, 0.46177796, 0.55995196, 0.22493547, 0.8803214 ,
         0.15284549, 0.30278447, 0.42076293, 0.45226127, 0.12122126,
         0.32084286, 0.04982026, 0.48690578],
        [0.4111823 , 0.47638133, 0.1781023 , 0.8470901 , 0.2404212 ,
         0.9926056 , 0.4927762 , 0.10284535, 0.9742693 , 0.9769139 ,
         0.13502003, 0.8526876 , 0.73514205, 0.11745711, 0.28374106,
         0.57461727, 0.27827087, 0.13234214, 0.5031166 , 0.7265524 ,
         0.5793005 , 0.06515098, 0.05908971, 0.53764576, 0.01273825,
         0.5401023 , 0.38478738, 0.9272436 ],
        [0.7874108 , 0.42392993, 0.18115215, 0.24901724, 0.5713755 ,
         0.8571578 , 0.259502  , 0.71749914, 0.0115557 , 0.96132994,
         0.6071283 , 0.3279636 , 0.22051272, 0.23243627, 0.12129585,
         0.8520774 , 0.6153754 , 0.25837472, 0.11669708, 0.6214836 ,
         0.5321076 , 0.02095016, 0.28933948, 0.7363289 , 0.68871963,
         0.7125377 , 0.5177892 , 0.2797579 ],
        [0.38437188, 0.8122128 , 0.24562249, 0.6420394 , 0.43416697,
         0.03039038, 0.12889037, 0.4701091 , 0.8605183 , 0.62053716,
         0.2860228 , 0.28275672, 0.44470173, 0.10409989, 0.9724282 ,
         0.62967587, 0.255581  , 0.7854885 , 0.3960672 , 0.03646506,
         0.8297968 , 0.9652908 , 0.5067876 , 0.8629079 , 0.7014754 ,
         0.01528655, 0.70364016, 0.54053533],
        [0.86704403, 0.6702834 , 0.15669751, 0.670167  , 0.875669  ,
         0.2768447 , 0.24768624, 0.8552668 , 0.83616644, 0.682925  ,
         0.2756004 , 0.08775862, 0.14215215, 0.42278704, 0.48574448,
         0.98612064, 0.8280388 , 0.7566689 , 0.4011571 , 0.30309066,
         0.52969307, 0.6115761 , 0.16034985, 0.8272983 , 0.97032195,
         0.13911197, 0.29135436, 0.5059792 ],
        [0.6456502 , 0.01659554, 0.7209769 , 0.9737274 , 0.7876333 ,
         0.57321954, 0.13339098, 0.7331011 , 0.7826512 , 0.38188317,
         0.19953036, 0.70378304, 0.9813928 , 0.5814783 , 0.04407421,
         0.19069041, 0.15533042, 0.698528  , 0.1719331 , 0.5207665 ,
         0.66772604, 0.3476268 , 0.85244817, 0.5136009 , 0.6839776 ,
         0.40868476, 0.65575594, 0.00593246],
        [0.15052749, 0.9778091 , 0.33835888, 0.05414525, 0.17428865,
         0.88122255, 0.47443402, 0.04722691, 0.56916445, 0.7350723 ,
         0.28159794, 0.9039535 , 0.5097378 , 0.60400426, 0.3364713 ,
         0.781647  , 0.5786707 , 0.7882519 , 0.9660341 , 0.6158515 ,
         0.7063129 , 0.29114112, 0.45250818, 0.6790338 , 0.42216453,
         0.14296426, 0.21116146, 0.3045831 ],
        [0.16530971, 0.8837823 , 0.3343257 , 0.16626966, 0.40580624,
         0.4733613 , 0.5983317 , 0.32564616, 0.09709883, 0.5208776 ,
         0.693551  , 0.7839527 , 0.43638772, 0.64917576, 0.8569924 ,
         0.59680194, 0.16719152, 0.7238616 , 0.25293112, 0.14635287,
         0.98530006, 0.6111307 , 0.9894671 , 0.61361164, 0.44071066,
         0.14327972, 0.9421942 , 0.9209785 ],
        [0.18676198, 0.7175135 , 0.0568665 , 0.48863098, 0.25584063,
         0.02213586, 0.9150326 , 0.15864883, 0.73396   , 0.9019397 ,
         0.58306986, 0.9102782 , 0.83236074, 0.9603003 , 0.5661076 ,
         0.45591772, 0.27350113, 0.8595033 , 0.6611367 , 0.06125449,
         0.27133587, 0.09492587, 0.51628023, 0.68369687, 0.8424714 ,
         0.38087565, 0.424476  , 0.14262371],
        [0.37341937, 0.68824035, 0.01071425, 0.5234902 , 0.44033283,
         0.8338447 , 0.7040645 , 0.7532776 , 0.8242728 , 0.97319126,
         0.8197447 , 0.32834923, 0.11664358, 0.15976842, 0.48236045,
         0.50224674, 0.7336964 , 0.8478232 , 0.13717665, 0.24925737,
         0.3839266 , 0.29715875, 0.32460508, 0.48365182, 0.97019136,
         0.6788046 , 0.32207292, 0.8498657 ],
        [0.6705147 , 0.40947577, 0.53042835, 0.21061306, 0.226394  ,
         0.12086618, 0.05078776, 0.42431235, 0.11855603, 0.14060493,
         0.1153983 , 0.9521345 , 0.42911592, 0.43947285, 0.14153004,
         0.03004775, 0.47915652, 0.19719352, 0.34230715, 0.68898207,
         0.51461136, 0.23218928, 0.34889683, 0.6828541 , 0.13682146,
         0.8919297 , 0.5377098 , 0.8538095 ],
        [0.47787642, 0.03114596, 0.24042004, 0.84157467, 0.6318565 ,
         0.74944943, 0.8230922 , 0.01789924, 0.1959195 , 0.30339396,
         0.24756289, 0.72304857, 0.21847111, 0.47319165, 0.72129786,
         0.92006993, 0.9336739 , 0.02182696, 0.28868252, 0.97627825,
         0.02848363, 0.5496146 , 0.5342039 , 0.2791803 , 0.76958925,
         0.5490553 , 0.37316996, 0.8675571 ],
        [0.29140687, 0.7748925 , 0.95805734, 0.9343846 , 0.27052197,
         0.9501131 , 0.07009821, 0.94420755, 0.20292303, 0.252764  ,
         0.08879004, 0.3663506 , 0.69717765, 0.41794124, 0.49780512,
         0.7032908 , 0.3509172 , 0.16127019, 0.21604817, 0.15014745,
         0.13707712, 0.00611086, 0.8279933 , 0.20697002, 0.05275975,
         0.17073101, 0.08518282, 0.4971932 ],
        [0.475135  , 0.5303395 , 0.19220318, 0.27464688, 0.9954381 ,
         0.44856477, 0.2598321 , 0.737435  , 0.09337122, 0.95068496,
         0.66616917, 0.82975733, 0.7020529 , 0.7062433 , 0.86731565,
         0.51817864, 0.06108873, 0.23034452, 0.32775712, 0.19368193,
         0.5676405 , 0.4445022 , 0.7313535 , 0.8603879 , 0.95138806,
         0.20400669, 0.9581361 , 0.76159316]]], dtype=np.float32)

# same input for both computation 
input_data=input_data_no_delegate


input_details_no_delegate = interpreter_no_delegate.get_input_details() #[0]["index"]
output_details_no_delegate = interpreter_no_delegate.get_output_details()# [0]["index"]


# Test model on random input data.
#input_shape = input_details[0]['shape']
#input_data = np.array(np.random.random_sample(input_shape), dtype=np.float32)
interpreter.set_tensor(input_details[0]['index'], input_data)


#input_shape_no_delegate = input_details_no_delegate[0]['shape']
#input_data_no_delegate = np.array(np.random.random_sample(input_shape_no_delegate), dtype=np.float32)#
#input_data_no_delegate = np.array(np.random.random_integers(0,255,input_shape_no_delegate), dtype=np.int8)#
interpreter_no_delegate.set_tensor(input_details_no_delegate[0]['index'], input_data_no_delegate)


#start a thread which sample temperature and voltages from xadc

start_time=time.time()
interpreter.invoke()
end_time=time.time()

start_time_no_delegate=time.time()
interpreter_no_delegate.invoke()
end_time_no_delegate=time.time()

# The function `get_tensor()` returns a copy of the tensor data.
# Use `tensor()` in order to get a pointer to the tensor.
print("output data  with delegate")
output_data = interpreter.get_tensor(output_details[0]['index'])
print(output_data)
print("output data without the delegate")
output_data_no_delegate = interpreter_no_delegate.get_tensor(output_details_no_delegate[0]['index'])
print(output_data_no_delegate)


print("Execution time on cpu: ", end_time_no_delegate- start_time_no_delegate)
print("Execution time on cpu and accelerator: ", end_time- start_time)

exit();

test_image = np.expand_dims(test_images[0], axis=0).astype(np.float32)

input_index = interpreter.get_input_details()[0]["index"]
output_index = interpreter.get_output_details()[0]["index"]

interpreter.set_tensor(input_index, test_image)
interpreter.invoke()
predictions = interpreter.get_tensor(output_index)
